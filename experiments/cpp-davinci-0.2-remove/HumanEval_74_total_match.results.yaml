language: cpp
name: HumanEval_74_total_match
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmppoge4loe: /tmp/tmppoge4loe.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (auto s : lst1) {\n\t\t\
    total1 += s.size();\n\t}\n\tfor (auto s : lst2) {\n\t\ttotal2 += s.size();\n\t\
    }\n\tif (total1 < total2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmplqxuly88: /tmp/tmplqxuly88.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpoq1s9dka: /tmp/tmpoq1s9dka.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp14hyyur6: /tmp/tmp14hyyur6.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (total2 < total1) {\n\t\treturn lst2;\n\t}\n\telse {\n\
    \t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (std::string s : lst1)\
    \ {\n\t\ttotal1 += s.size();\n\t}\n\tfor (std::string s : lst2) {\n\t\ttotal2\
    \ += s.size();\n\t}\n\tif (total1 < total2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1r2p2_yg: /tmp/tmp1r2p2_yg.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (auto i : lst1) {\n\
    \        total1 += i.size();\n    }\n    for (auto i : lst2) {\n        total2\
    \ += i.size();\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n\
    \    return lst2;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpa41u0wct: /tmp/tmpa41u0wct.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else if (sum2 < sum1) {\n        return lst2;\n\
    \    }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n  int lst1_total = 0;\n  int lst2_total = 0;\n  for (int i = 0; i <\
    \ lst1.size(); i++) {\n    lst1_total += lst1[i].size();\n  }\n  for (int i =\
    \ 0; i < lst2.size(); i++) {\n    lst2_total += lst2[i].size();\n  }\n  if (lst1_total\
    \ < lst2_total) {\n    return lst1;\n  }\n  else {\n    return lst2;\n  }\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpqfxub5_w: /tmp/tmpqfxub5_w.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (auto i : lst1)\
    \ {\n\t\tlst1_total += i.size();\n\t}\n\tfor (auto i : lst2) {\n\t\tlst2_total\
    \ += i.size();\n\t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\
    \telse if (lst1_total > lst2_total) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn\
    \ lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\t// Write your code here\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0;\
    \ i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i\
    \ < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\t\
    return lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpd9pibdwx: /tmp/tmpd9pibdwx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (auto x : lst1) {\n\
    \        total1 += x.size();\n    }\n    for (auto x : lst2) {\n        total2\
    \ += x.size();\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n\
    \    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmplehpltno: /tmp/tmplehpltno.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (auto i :\
    \ lst1) {\n        lst1_total += i.size();\n    }\n    for (auto i : lst2) {\n\
    \        lst2_total += i.size();\n    }\n    if (lst1_total == lst2_total) {\n\
    \        return lst1;\n    }\n    if (lst1_total < lst2_total) {\n        return\
    \ lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpoq1s9dka: /tmp/tmpoq1s9dka.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp14hyyur6: /tmp/tmp14hyyur6.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (auto i : lst1) {\n\t\t\
    total1 += i.size();\n\t}\n\tfor (auto i : lst2) {\n\t\ttotal2 += i.size();\n\t\
    }\n\tif (total1 < total2) {\n\t\treturn lst1;\n\t}\n\telse if (total2 < total1)\
    \ {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (std::string s : lst1)\
    \ {\n\t\ttotal1 += s.size();\n\t}\n\tfor (std::string s : lst2) {\n\t\ttotal2\
    \ += s.size();\n\t}\n\tif (total1 < total2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1r2p2_yg: /tmp/tmp1r2p2_yg.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp14hyyur6: /tmp/tmp14hyyur6.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\treturn lst2;\n}\nint main() {\n  \
    \  auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp0eobowm4: /tmp/tmp0eobowm4.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp14hyyur6: /tmp/tmp14hyyur6.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpws85x6tm: /tmp/tmpws85x6tm.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total_chars1 = 0;\n\tint total_chars2 = 0;\n\tfor (int i = 0;\
    \ i < lst1.size(); i++) {\n\t\ttotal_chars1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\ttotal_chars2 += lst2[i].size();\n\t}\n\t\
    if (total_chars1 < total_chars2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpun75emp6: /tmp/tmpun75emp6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (auto x : lst1) {\n\t\tsum1\
    \ += x.size();\n\t}\n\tfor (auto x : lst2) {\n\t\tsum2 += x.size();\n\t}\n\tif\
    \ (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp2rrfbim3: /tmp/tmp2rrfbim3.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp4jilnz_u: /tmp/tmp4jilnz_u.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (int i =\
    \ 0; i < lst1.size(); i++) {\n        lst1_total += lst1[i].size();\n    }\n \
    \   for (int i = 0; i < lst2.size(); i++) {\n        lst2_total += lst2[i].size();\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else\
    \ {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpey6q0mdx: /tmp/tmpey6q0mdx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmppoge4loe: /tmp/tmppoge4loe.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_size = 0;\n\tint lst2_size = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tlst1_size += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tlst2_size += lst2[i].size();\n\t}\n\tif (lst1_size < lst2_size)\
    \ {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpxrx_rgxu: /tmp/tmpxrx_rgxu.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6ho549x9: /tmp/tmp6ho549x9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp65ju32w9: /tmp/tmp65ju32w9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (auto i : lst1)\
    \ {\n\t\tlst1_total += i.size();\n\t}\n\tfor (auto i : lst2) {\n\t\tlst2_total\
    \ += i.size();\n\t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\
    \telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp9jmv5plt: /tmp/tmp9jmv5plt.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp89tjr521: /tmp/tmp89tjr521.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse if (sum2 < sum1) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\
    \t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if (sum1 < sum2) {\n   \
    \     return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpm3r619cz: /tmp/tmpm3r619cz.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnzivz4m2: /tmp/tmpnzivz4m2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprkacl_ys: /tmp/tmprkacl_ys.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660128615
