language: cpp
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    long min_idx\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_idx = i;\n\
    \        }\n    }\n    if (min_idx == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_idx);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  // your code here\n  std::vector<long>\
    \ result;\n  if(arr.size() == 0)\n    return result;\n  long min = INT_MAX;\n\
    \  long index = -1;\n  for(int i = 0; i < arr.size(); i++)\n  {\n    if(arr[i]\
    \ % 2 == 0 && arr[i] < min)\n    {\n      min = arr[i];\n      index = i;\n  \
    \  }\n  }\n  if(index == -1)\n    return result;\n  result.push_back(min);\n \
    \ result.push_back(index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ if (arr.size() == 0) return res;\n  long min = INT_MAX;\n  long index = -1;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] <\
    \ min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if (index == -1)\
    \ return res;\n  res.push_back(min);\n  res.push_back(index);\n  return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) return result;\n  long min_even = INT_MAX;\n  long min_even_index\
    \ = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 &&\
    \ arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index = i;\n\
    \    }\n  }\n  if (min_even_index == -1) return result;\n  result.push_back(min_even);\n\
    \  result.push_back(min_even_index);\n  return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min_even = INT_MAX;\n    long\
    \ min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n\
    \            min_even_index = i;\n        }\n    }\n    if (min_even == INT_MAX)\
    \ return res;\n    res.push_back(min_even);\n    res.push_back(min_even_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = arr[0];\n  long\
    \ min_index = 0;\n  bool found = false;\n  for (long i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] % 2 == 0) {\n      if (!found) {\n        min = arr[i];\n\
    \        min_index = i;\n        found = true;\n      } else {\n        if (arr[i]\
    \ < min) {\n          min = arr[i];\n          min_index = i;\n        }\n   \
    \   }\n    }\n  }\n  if (found) {\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ if (arr.size() == 0) return res;\n  long min = INT_MAX;\n  long min_index =\
    \ -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  if (min_index\
    \ == -1) return res;\n  res.push_back(min);\n  res.push_back(min_index);\n  return\
    \ res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ if (arr.size() == 0) {\n    return res;\n  }\n  long min = INT_MAX;\n  long\
    \ min_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n\
    \  }\n  if (min_index == -1) {\n    return res;\n  }\n  res.push_back(min);\n\
    \  res.push_back(min_index);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n       \
    \     min_index = i;\n        }\n    }\n    if (min == INT_MAX) {\n        return\
    \ res;\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    long min = INT_MAX;\n    long index = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index != -1) {\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long minIndex = -1;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n       \
    \     minIndex = i;\n        }\n    }\n    if (minIndex == -1) {\n        return\
    \ result;\n    }\n    result.push_back(min);\n    result.push_back(minIndex);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min_even = INT_MAX;\n    long\
    \ min_even_idx = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n\
    \            min_even_idx = i;\n        }\n    }\n    if (min_even == INT_MAX)\
    \ return res;\n    res.push_back(min_even);\n    res.push_back(min_even_idx);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    long min_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long smallest_even\
    \ = INT_MAX;\n    long smallest_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n         \
    \   smallest_even = arr[i];\n            smallest_even_index = i;\n        }\n\
    \    }\n    if (smallest_even_index != -1) {\n        result.push_back(smallest_even);\n\
    \        result.push_back(smallest_even_index);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    // your code here\n    std::vector<long>\
    \ res;\n    if(arr.size() == 0)\n        return res;\n    long min = INT_MAX;\n\
    \    long index = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if(min != INT_MAX){\n        res.push_back(min);\n    \
    \    res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n       \
    \     min_index = i;\n        }\n    }\n    if (min_index == -1) {\n        return\
    \ result;\n    }\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  if (arr.size() == 0) return\
    \ {};\n  long min_even = INT_MAX;\n  long min_even_index = INT_MAX;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even)\
    \ {\n      min_even = arr[i];\n      min_even_index = i;\n    }\n  }\n  if (min_even\
    \ == INT_MAX) return {};\n  return {min_even, min_even_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min_even = INT_MAX;\n    long\
    \ min_even_idx = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n\
    \            min_even_idx = i;\n        }\n    }\n    if (min_even == INT_MAX)\
    \ return res;\n    res.push_back(min_even);\n    res.push_back(min_even_idx);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n \
    \           min_index = i;\n        }\n    }\n    if (min == INT_MAX) {\n    \
    \    return result;\n    }\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n        \
    \    min_index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpywy5v706: /tmp/tmpywy5v706.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    // your code here\n    std::vector<long>\
    \ result;\n    if(arr.size()==0)\n    {\n        return result;\n    }\n    long\
    \ min_even=INT_MAX;\n    long min_index=INT_MAX;\n    for(int i=0;i<arr.size();i++)\n\
    \    {\n        if(arr[i]%2==0 && arr[i]<min_even)\n        {\n            min_even=arr[i];\n\
    \            min_index=i;\n        }\n    }\n    if(min_even==INT_MAX)\n    {\n\
    \        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) return result;\n  long min = INT_MAX;\n  long index =\
    \ -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if (index ==\
    \ -1) return result;\n  result.push_back(min);\n  result.push_back(index);\n \
    \ return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    long min_idx\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_idx = i;\n\
    \        }\n    }\n    if (min_idx == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_idx);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    int min_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  long min_even = INT_MAX;\n  int min_even_index = -1;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even\
    \ = arr[i];\n      min_even_index = i;\n    }\n  }\n  if (min_even_index == -1)\
    \ {\n    return result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    long min_index\
    \ = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min == INT_MAX) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) return result;\n    long min = INT_MAX;\n    long index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n  \
    \      }\n    }\n    if (index == -1) return result;\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n  \
    \          min_index = i;\n        }\n    }\n    if (min == INT_MAX) {\n     \
    \   return res;\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) return result;\n  long min_even = INT_MAX;\n  long min_even_index\
    \ = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index =\
    \ i;\n    }\n  }\n  if (min_even == INT_MAX) return result;\n  result.push_back(min_even);\n\
    \  result.push_back(min_even_index);\n  return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long smallestEven\
    \ = INT_MAX;\n    long smallestEvenIndex = INT_MAX;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n\
    \            smallestEven = arr[i];\n            smallestEvenIndex = i;\n    \
    \    }\n    }\n    if (smallestEven == INT_MAX) {\n        return result;\n  \
    \  }\n    result.push_back(smallestEven);\n    result.push_back(smallestEvenIndex);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n\
    \                min_even = arr[i];\n                min_even_index = i;\n   \
    \         }\n        }\n    }\n    if (min_even == INT_MAX) {\n        return\
    \ result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ index = i;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    int index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == INT_MAX) {\n        return result;\n  \
    \  }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  // your code here\n  std::vector<long>\
    \ result;\n  if(arr.size() == 0)\n    return result;\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for(int i = 0; i < arr.size(); i++)\n  {\n   \
    \ if(arr[i] % 2 == 0 && arr[i] < min_even)\n    {\n      min_even = arr[i];\n\
    \      min_index = i;\n    }\n  }\n  if(min_even == INT_MAX)\n    return result;\n\
    \  result.push_back(min_even);\n  result.push_back(min_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n   \
    \ }\n  }\n  if (min == INT_MAX) {\n    return result;\n  }\n  result.push_back(min);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ if (arr.size() == 0) {\n    return res;\n  }\n  long min = INT_MAX;\n  long\
    \ min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n   \
    \ }\n  }\n  if (min == INT_MAX) {\n    return res;\n  }\n  res.push_back(min);\n\
    \  res.push_back(min_index);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if\
    \ (index == -1) {\n    return result;\n  }\n  result.push_back(min);\n  result.push_back(index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    int min_index = -1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_index ==\
    \ -1) {\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    int idx =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            idx = i;\n      \
    \  }\n    }\n    if (idx == -1) return res;\n    res.push_back(min);\n    res.push_back(idx);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = arr[0];\n  long\
    \ minIndex = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2\
    \ == 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n \
    \ }\n  if (min % 2 == 0) {\n    result.push_back(min);\n    result.push_back(minIndex);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprdw1kwkd: /tmp/tmprdw1kwkd.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = LONG_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> ans;\n \
    \ if (arr.size() == 0) {\n    return ans;\n  }\n  long min_even = INT_MAX;\n \
    \ long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   if (arr[i] % 2 == 0) {\n      if (arr[i] < min_even) {\n        min_even =\
    \ arr[i];\n        min_even_index = i;\n      }\n    }\n  }\n  if (min_even !=\
    \ INT_MAX) {\n    ans.push_back(min_even);\n    ans.push_back(min_even_index);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = -1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_index ==\
    \ -1) {\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n        \
    \    min_index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpywy5v706: /tmp/tmpywy5v706.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    int min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min =\
    \ arr[i];\n                min_index = i;\n            }\n        }\n    }\n \
    \   if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptn2nd29a: /tmp/tmptn2nd29a.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = arr[0];\n    long min_idx\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_idx = i;\n\
    \        }\n    }\n    if (min % 2 == 0) {\n        res.push_back(min);\n    \
    \    res.push_back(min_idx);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyxjp4lfz: /tmp/tmpyxjp4lfz.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == INT_MAX) {\n        return result;\n  \
    \  }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    // your code here\n    std::vector<long>\
    \ res;\n    if(arr.size() == 0)\n        return res;\n    long min = INT_MAX;\n\
    \    long min_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if(min_index == -1)\n        return res;\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ minIndex = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n\
    \  }\n  if (min == INT_MAX) {\n    return result;\n  }\n  result.push_back(min);\n\
    \  result.push_back(minIndex);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    int index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1) {\n        return res;\n    }\n \
    \   res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if\
    \ (index == -1) {\n    return result;\n  }\n  result.push_back(min);\n  result.push_back(index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = LONG_MAX;\n\
    \  long min_even_index = LONG_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0) {\n      if (arr[i] < min_even) {\n        min_even\
    \ = arr[i];\n        min_even_index = i;\n      }\n    }\n  }\n  if (min_even\
    \ == LONG_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long minEven =\
    \ INT_MAX;\n    long minEvenIndex = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if (minEven\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(minEven);\n\
    \    result.push_back(minEvenIndex);\n    return result;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n\tstd::vector<long> result;\n\
    \tif (arr.size() == 0) {\n\t\treturn result;\n\t}\n\tlong min_even = INT_MAX;\n\
    \tlong min_index = INT_MAX;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n\t\t\tmin_even = arr[i];\n\t\t\tmin_index\
    \ = i;\n\t\t}\n\t}\n\tif (min_even == INT_MAX) {\n\t\treturn result;\n\t}\n\t\
    result.push_back(min_even);\n\tresult.push_back(min_index);\n\treturn result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    long min_index\
    \ = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min == INT_MAX) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long smallest_even_value\
    \ = INT_MAX;\n  long smallest_even_index = INT_MAX;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0 && arr[i] < smallest_even_value) {\n      smallest_even_value\
    \ = arr[i];\n      smallest_even_index = i;\n    }\n  }\n  if (smallest_even_value\
    \ == INT_MAX) {\n    return result;\n  }\n  result.push_back(smallest_even_value);\n\
    \  result.push_back(smallest_even_index);\n  return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long minIndex = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n   \
    \         minIndex = i;\n        }\n    }\n    if (min == INT_MAX) {\n       \
    \ return result;\n    }\n    result.push_back(min);\n    result.push_back(minIndex);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = -1;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (min_even == -1) {\n     \
    \           min_even = arr[i];\n                min_even_index = i;\n        \
    \    } else if (arr[i] < min_even) {\n                min_even = arr[i];\n   \
    \             min_even_index = i;\n            }\n        }\n    }\n    if (min_even\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  int min_even_value = INT_MAX;\n  int min_even_index = INT_MAX;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even_value)\
    \ {\n      min_even_value = arr[i];\n      min_even_index = i;\n    }\n  }\n \
    \ if (min_even_value != INT_MAX) {\n    result.push_back(min_even_value);\n  \
    \  result.push_back(min_even_index);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n  \
    \          min_index = i;\n        }\n    }\n    if (min == INT_MAX) {\n     \
    \   return res;\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ min_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n   \
    \ }\n  }\n  if (min == INT_MAX) {\n    return result;\n  }\n  result.push_back(min);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long min_index = 0;\n    bool found = false;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (!found) {\n        \
    \        min = arr[i];\n                min_index = i;\n                found\
    \ = true;\n            } else {\n                if (arr[i] < min) {\n       \
    \             min = arr[i];\n                    min_index = i;\n            \
    \    }\n            }\n        }\n    }\n    if (found) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long smallest_even_value\
    \ = INT_MAX;\n  long smallest_even_index = INT_MAX;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0 && arr[i] < smallest_even_value) {\n      smallest_even_value\
    \ = arr[i];\n      smallest_even_index = i;\n    }\n  }\n  if (smallest_even_value\
    \ == INT_MAX) {\n    return result;\n  }\n  result.push_back(smallest_even_value);\n\
    \  result.push_back(smallest_even_index);\n  return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    long min = INT_MAX;\n  \
    \  long index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1) {\n        return {};\n    }\n  \
    \  return {min, index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ index = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if\
    \ (min == INT_MAX) {\n    return result;\n  }\n  result.push_back(min);\n  result.push_back(index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ long min = INT_MAX;\n  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n  \
    \    min_index = i;\n    }\n  }\n  if (min == INT_MAX) {\n    return res;\n  }\n\
    \  res.push_back(min);\n  res.push_back(min_index);\n  return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long minEven = INT_MAX;\n\
    \    long minEvenIndex = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n            minEven = arr[i];\n\
    \            minEvenIndex = i;\n        }\n    }\n    if (minEven == INT_MAX)\
    \ {\n        return res;\n    }\n    res.push_back(minEven);\n    res.push_back(minEvenIndex);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n   \
    \ }\n  }\n  if (min == INT_MAX) {\n    return result;\n  }\n  result.push_back(min);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    long min = INT_MAX;\n    int min_index = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if (min_index == -1) {\n  \
    \      return res;\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  long min_even = INT_MAX;\n  long min_index = INT_MAX;\n  for (int i = 0; i\
    \ < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n    \
    \  min_even = arr[i];\n      min_index = i;\n    }\n  }\n  if (min_even != INT_MAX)\
    \ {\n    result.push_back(min_even);\n    result.push_back(min_index);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long min_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min\
    \ = arr[i];\n                min_index = i;\n            }\n        }\n    }\n\
    \    if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfzz_n_er: /tmp/tmpfzz_n_er.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n\
    \                min_even = arr[i];\n                min_even_index = i;\n   \
    \         }\n        }\n    }\n    if (min_even == INT_MAX) {\n        return\
    \ result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    int min_idx\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_idx = i;\n\
    \        }\n    }\n    if (min_idx == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_idx);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    long min = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n   \
    \         min = arr[i];\n            min_index = i;\n        }\n    }\n    if\
    \ (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min_even = INT_MAX;\n\
    \    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if (min_even == INT_MAX) {\n\
    \        return res;\n    }\n    res.push_back(min_even);\n    res.push_back(min_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) return result;\n  long min = arr[0];\n  long index = 0;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] <\
    \ min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if (min % 2 ==\
    \ 0) {\n    result.push_back(min);\n    result.push_back(index);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx8dbnpc9: /tmp/tmpx8dbnpc9.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    int index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n  \
    \      }\n    }\n    if (index == -1) return res;\n    res.push_back(min);\n \
    \   res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    // your code here\n    std::vector<long>\
    \ result;\n    if(arr.size() == 0)\n        return result;\n    long min_even\
    \ = INT_MAX;\n    int min_index = -1;\n    for(int i = 0; i < arr.size(); i++)\n\
    \    {\n        if(arr[i] % 2 == 0 && arr[i] < min_even)\n        {\n        \
    \    min_even = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index\
    \ == -1)\n        return result;\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n   \
    \ }\n  }\n  if (min == INT_MAX) {\n    return result;\n  }\n  result.push_back(min);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even !=\
    \ INT_MAX) {\n        result.push_back(min_even);\n        result.push_back(min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long smallest_even = INT_MAX;\n\
    \  long index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0 && arr[i] < smallest_even) {\n      smallest_even = arr[i];\n     \
    \ index = i;\n    }\n  }\n  if (index == -1) {\n    return result;\n  }\n  result.push_back(smallest_even);\n\
    \  result.push_back(index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  long min_even = INT_MAX;\n  long min_even_index = INT_MAX;\n  for (long i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n\
    \      min_even = arr[i];\n      min_even_index = i;\n    }\n  }\n  if (min_even\
    \ == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n      \
    \      min_index = i;\n        }\n    }\n    if (min_index == -1) {\n        return\
    \ result;\n    }\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = arr[0];\n  long\
    \ index = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        index = i;\n\
    \      }\n    }\n  }\n  if (min % 2 == 0) {\n    result.push_back(min);\n    result.push_back(index);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqk81h8r: /tmp/tmprqk81h8r.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min =\
    \ arr[i];\n                index = i;\n            }\n        }\n    }\n    if\
    \ (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp23yzqa_p: /tmp/tmp23yzqa_p.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) return result;\n    long min = INT_MAX;\n    long index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n  \
    \      }\n    }\n    if (index == -1) return result;\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    long min = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n   \
    \         min = arr[i];\n            min_index = i;\n        }\n    }\n    if\
    \ (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n      \
    \      min_index = i;\n        }\n    }\n    if (min_index == -1) {\n        return\
    \ res;\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long min_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min\
    \ = arr[i];\n                min_index = i;\n            }\n        }\n    }\n\
    \    if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfzz_n_er: /tmp/tmpfzz_n_er.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long min_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n        \
    \    min_index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpywy5v706: /tmp/tmpywy5v706.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  // your code here\n  std::vector<long>\
    \ result;\n  if(arr.size() == 0)\n    return result;\n  long min = INT_MAX;\n\
    \  long index = -1;\n  for(int i = 0; i < arr.size(); i++)\n  {\n    if(arr[i]\
    \ % 2 == 0 && arr[i] < min)\n    {\n      min = arr[i];\n      index = i;\n  \
    \  }\n  }\n  if(index == -1)\n    return result;\n  result.push_back(min);\n \
    \ result.push_back(index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    // your code here\n    std::vector<long>\
    \ result;\n    if(arr.size()==0)\n        return result;\n    long min=INT_MAX;\n\
    \    long index=INT_MAX;\n    for(long i=0;i<arr.size();i++)\n    {\n        if(arr[i]%2==0)\n\
    \        {\n            if(arr[i]<min)\n            {\n                min=arr[i];\n\
    \                index=i;\n            }\n        }\n    }\n    if(min==INT_MAX)\n\
    \        return result;\n    result.push_back(min);\n    result.push_back(index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index != -1) {\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ if (arr.size() == 0) {\n    return res;\n  }\n  long min = INT_MAX;\n  long\
    \ index = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if\
    \ (min == INT_MAX) {\n    return res;\n  }\n  res.push_back(min);\n  res.push_back(index);\n\
    \  return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ index = i;\n        }\n    }\n    if (min == INT_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = INT_MAX;\n  long\
    \ index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  if\
    \ (index == -1) {\n    return result;\n  }\n  result.push_back(min);\n  result.push_back(index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    int minIndex = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp00gb359k: /tmp/tmp00gb359k.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085593
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min = INT_MAX;\n    long min_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ index = i;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_even ==\
    \ INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> ret;\n\
    \    if (arr.size() == 0) {\n        return ret;\n    }\n    long min = arr[0];\n\
    \    long min_idx = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min =\
    \ arr[i];\n                min_idx = i;\n            }\n        }\n    }\n   \
    \ if (min % 2 == 0) {\n        ret.push_back(min);\n        ret.push_back(min_idx);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphj9xlbb4: /tmp/tmphj9xlbb4.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085593
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long smallest_even_value\
    \ = LONG_MAX;\n    long smallest_even_index = LONG_MAX;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smallest_even_value) {\n                smallest_even_value = arr[i];\n  \
    \              smallest_even_index = i;\n            }\n        }\n    }\n   \
    \ if (smallest_even_value == LONG_MAX) {\n        return result;\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_even_index);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n\tstd::vector<long> result;\n\
    \tif (arr.size() == 0) {\n\t\treturn result;\n\t}\n\tlong min_even = INT_MAX;\n\
    \tlong min_even_index = INT_MAX;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\
    \tif (arr[i] % 2 == 0 && arr[i] < min_even) {\n\t\t\tmin_even = arr[i];\n\t\t\t\
    min_even_index = i;\n\t\t}\n\t}\n\tif (min_even == INT_MAX) {\n\t\treturn result;\n\
    \t}\n\tresult.push_back(min_even);\n\tresult.push_back(min_even_index);\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n\
    \                min_even = arr[i];\n                min_even_index = i;\n   \
    \         }\n        }\n    }\n    if (min_even == INT_MAX) {\n        return\
    \ result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) return result;\n  long min = INT_MAX;\n  int min_index\
    \ = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  if\
    \ (min_index == -1) return result;\n  result.push_back(min);\n  result.push_back(min_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n                min =\
    \ arr[i];\n                index = i;\n            }\n        }\n    }\n    if\
    \ (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp23yzqa_p: /tmp/tmp23yzqa_p.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = std::numeric_limits<long>::max();\n\
    \    long index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ index = i;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    long min_even = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even)\
    \ {\n            min_even = arr[i];\n            min_even_index = i;\n       \
    \ }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n    }\n  \
    \  result.push_back(min_even);\n    result.push_back(min_even_index);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) return res;\n    long min_even = INT_MAX;\n    long\
    \ min_even_idx = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n         \
    \   min_even_idx = i;\n        }\n    }\n    if (min_even_idx == -1) return res;\n\
    \    res.push_back(min_even);\n    res.push_back(min_even_idx);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_index = -1;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_index ==\
    \ -1) {\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ index = i;\n        }\n    }\n    if (index == -1) {\n        return res;\n\
    \    }\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  // your code here\n  std::vector<long>\
    \ result;\n  if(arr.size() == 0)\n    return result;\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for(int i = 0; i < arr.size(); i++)\n  {\n   \
    \ if(arr[i] % 2 == 0 && arr[i] < min_even)\n    {\n      min_even = arr[i];\n\
    \      min_index = i;\n    }\n  }\n  if(min_even == INT_MAX)\n    return result;\n\
    \  result.push_back(min_even);\n  result.push_back(min_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n\
    \                min_even = arr[i];\n                min_even_index = i;\n   \
    \         }\n        }\n    }\n    if (min_even == INT_MAX) {\n        return\
    \ result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_index\
    \ = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_index);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even_index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = arr[0];\n  long\
    \ min_index = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n\
    \  }\n  if (min % 2 == 0) {\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd5u0o9s5: /tmp/tmpd5u0o9s5.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min = arr[0];\n  long\
    \ min_index = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2\
    \ == 0 && arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n\
    \  }\n  if (min % 2 == 0) {\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpl5klci76: /tmp/tmpl5klci76.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) return result;\n    long min_even = INT_MAX;\n    long\
    \ min_index = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n \
    \           min_index = i;\n        }\n    }\n    if (min_even == INT_MAX) return\
    \ result;\n    result.push_back(min_even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_index = INT_MAX;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if (min_even\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min_even\
    \ = INT_MAX;\n    long min_even_idx = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_idx = i;\n        }\n    }\n    if (min_even_idx\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n \
    \   result.push_back(min_even_idx);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n \
    \     min_even_index = i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return\
    \ result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n \
    \           min_index = i;\n        }\n    }\n    if (min == INT_MAX) {\n    \
    \    return result;\n    }\n    result.push_back(min);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  long min_even = INT_MAX;\n\
    \  long min_even_index = -1;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index\
    \ = i;\n    }\n  }\n  if (min_even_index == -1) {\n    return result;\n  }\n \
    \ result.push_back(min_even);\n  result.push_back(min_even_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  // your code here\n  std::vector<long>\
    \ result;\n  if(arr.size()==0)\n    return result;\n  long min = arr[0];\n  long\
    \ index = 0;\n  for(int i=0;i<arr.size();i++)\n  {\n    if(arr[i]%2==0)\n    {\n\
    \      if(arr[i]<min)\n      {\n        min = arr[i];\n        index = i;\n  \
    \    }\n    }\n  }\n  if(min%2==0)\n  {\n    result.push_back(min);\n    result.push_back(index);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa622q467: /tmp/tmpa622q467.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long min_index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n       \
    \     min_index = i;\n        }\n    }\n    if (min_index == -1) {\n        return\
    \ res;\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n  std::vector<long> res;\n \
    \ if (arr.size() == 0) {\n    return res;\n  }\n  long min = INT_MAX;\n  long\
    \ idx = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n      min = arr[i];\n      idx = i;\n    }\n  }\n  if (min\
    \ == INT_MAX) {\n    return res;\n  }\n  res.push_back(min);\n  res.push_back(idx);\n\
    \  return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min_even = INT_MAX;\n\
    \    long min_even_idx = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n\
    \            min_even_idx = i;\n        }\n    }\n    if (min_even == INT_MAX)\
    \ {\n        return res;\n    }\n    res.push_back(min_even);\n    res.push_back(min_even_idx);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    // Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n// so we will choose the first zero, which has the smallest\
    \ index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
    std::vector<long> pluck(std::vector<long> arr) {\n    std::vector<long> res;\n\
    \    if (arr.size() == 0) {\n        return res;\n    }\n    long min = INT_MAX;\n\
    \    long index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == INT_MAX) {\n        return res;\n    }\n\
    \    res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660085594
