name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\nstd::string\
  \ solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    int flag = 0;\n    for(int i = 0; i < s.length(); i++) {\n    \
    \    if(isalpha(s[i])) {\n            flag = 1;\n            break;\n        }\n\
    \    }\n    if(flag == 0) {\n        reverse(s.begin(), s.end());\n        return\
    \ s;\n    }\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            }\n            else {\n                s[i] = tolower(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    std::string result;\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n       \
    \     if (islower(s[i])) {\n                result += toupper(s[i]);\n       \
    \     } else {\n                result += tolower(s[i]);\n            }\n    \
    \    } else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    std::string res\
    \ = \"\";\n    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n \
    \       if(s[i] >= 'a' && s[i] <= 'z') {\n            flag = true;\n         \
    \   res += s[i] - 32;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            flag = true;\n            res += s[i] + 32;\n        }\n    \
    \    else {\n            res += s[i];\n        }\n    }\n    if(flag) {\n    \
    \    return res;\n    }\n    else {\n        std::reverse(res.begin(), res.end());\n\
    \        return res;\n    }", "    std::string res = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            flag = true;\n            res += toupper(s[i]);\n        }\n\
    \        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n   \
    \         res += tolower(s[i]);\n        }\n        else {\n            res +=\
    \ s[i];\n        }\n    }\n    if(flag) {\n        return res;\n    }\n    else\
    \ {\n        std::reverse(res.begin(), res.end());\n        return res;\n    }",
  "    bool has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            has_letter = true;\n            break;\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            if (islower(s[i])) {\n                s[i] =\
    \ toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    int n = s.size();\n   \
    \ if(n == 0) return \"\";\n    bool flag = false;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(isalpha(s[i])) {\n            flag = true;\n            break;\n\
    \        }\n    }\n    if(!flag) {\n        reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "    if(s.empty()) return s;\n    std::string\
    \ res;\n    bool is_letter = false;\n    for(auto c : s) {\n        if(isalpha(c))\
    \ {\n            is_letter = true;\n            if(isupper(c)) res += tolower(c);\n\
    \            else res += toupper(c);\n        } else {\n            res += c;\n\
    \        }\n    }\n    if(!is_letter) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "    int n = s.size();\n    if(n == 0) return \"\";\n\
    \    int i = 0;\n    while(i < n && !isalpha(s[i])) i++;\n    if(i == n) return\
    \ s;\n    for(int j = i; j < n; j++) {\n        if(isalpha(s[j])) {\n        \
    \    if(islower(s[j])) s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n\
    \        }\n    }\n    return s;", "    std::string res = \"\";\n    bool flag\
    \ = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(isupper(s[i])) {\n             \
    \   res += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(flag) {\n        return res;\n    } else {\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }", "    std::string result = \"\";\n\
    \    bool is_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            is_letter = true;\n            if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            } else {\n        \
    \        result += toupper(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res = \"\";\n \
    \   int count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            count++;\n            if(islower(s[i])) {\n                res\
    \ += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(count == 0) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;", "    std::string result;\n    bool isLetter = false;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ isLetter = true;\n            if (islower(s[i])) {\n                result +=\
    \ toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result;\n    bool is_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        is_letter = true;\n            if (isupper(s[i])) {\n               \
    \ result += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!is_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result = \"\";\n    if (s.size()\
    \ == 0) {\n        return result;\n    }\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i])) i++;\n\
    \    if(i == s.size()) return s;\n    for(int j = 0; j < s.size(); j++) {\n  \
    \      if(isalpha(s[j])) {\n            if(islower(s[j])) s[j] = toupper(s[j]);\n\
    \            else s[j] = tolower(s[j]);\n        }\n    }\n    return s;", " \
    \   std::string res;\n    bool is_letter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            is_letter = true;\n      \
    \      if (islower(s[i])) {\n                res += toupper(s[i]);\n         \
    \   } else {\n                res += tolower(s[i]);\n            }\n        }\
    \ else {\n            res += s[i];\n        }\n    }\n    if (!is_letter) {\n\
    \        std::reverse(res.begin(), res.end());\n    }\n    return res;", "   \
    \ int n = s.size();\n    bool flag = false;\n    for(int i = 0; i < n; i++) {\n\
    \        if(isalpha(s[i])) {\n            flag = true;\n            break;\n \
    \       }\n    }\n    if(!flag) {\n        reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            }\n            else {\n                s[i] = tolower(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    if(s.size() ==\
    \ 0) return s;\n    bool isLetter = false;\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            isLetter = true;\n            break;\n\
    \        }\n    }\n    if(!isLetter) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string result;\n    bool isLetter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            isLetter = true;\n            if (islower(s[i])) {\n        \
    \        result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int len = s.length();\n   \
    \ if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 32;\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n\
    \    return s;", "    int i = 0;\n    int j = s.size() - 1;\n    while (i < j)\
    \ {\n        if (isalpha(s[i]) && isalpha(s[j])) {\n            std::swap(s[i],\
    \ s[j]);\n            i++;\n            j--;\n        } else if (isalpha(s[i]))\
    \ {\n            j--;\n        } else if (isalpha(s[j])) {\n            i++;\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else\
    \ {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n\
    \    return s;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\n\
    \        i++;\n    if(i == s.size())\n        reverse(s.begin(), s.end());\n \
    \   else\n        for(; i < s.size(); i++)\n            if(isalpha(s[i]))\n  \
    \              s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n    return\
    \ s;", "    int n = s.size();\n    int i = 0;\n    while(i < n && !isalpha(s[i]))\
    \ i++;\n    if(i == n) return std::string(s.rbegin(), s.rend());\n    for(int\
    \ j = i; j < n; j++) {\n        if(isalpha(s[j])) {\n            if(isupper(s[j]))\
    \ s[j] = tolower(s[j]);\n            else s[j] = toupper(s[j]);\n        }\n \
    \   }\n    return s;", "    std::string res;\n    bool flag = false;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n    \
    \        flag = true;\n            res += s[i] - 32;\n        }\n        else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n            res\
    \ += s[i] + 32;\n        }\n        else {\n            res += s[i];\n       \
    \ }\n    }\n    if(flag) {\n        return res;\n    }\n    else {\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }", "    std::string res = \"\";\n   \
    \ bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(isupper(s[i])) {\n             \
    \   res += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    std::string result = \"\";\n    bool isLetter = false;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n         \
    \   isLetter = true;\n            if (isupper(s[i])) {\n                result\
    \ += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    if(s.length() == 0) return s;\n    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            flag = true;\n    \
    \        ans += toupper(s[i]);\n        } else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            flag = true;\n            ans += tolower(s[i]);\n        } else\
    \ {\n            ans += s[i];\n        }\n    }\n    if(flag) return ans;\n  \
    \  else return std::string(ans.rbegin(), ans.rend());", "    std::string result;\n\
    \    bool has_letter = false;\n    for (auto c : s) {\n        if (std::isalpha(c))\
    \ {\n            has_letter = true;\n            if (std::islower(c)) {\n    \
    \            result += std::toupper(c);\n            } else {\n              \
    \  result += std::tolower(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int n = s.size();\n    int\
    \ i = 0;\n    while(i < n && !isalpha(s[i])) i++;\n    if(i == n) return s;\n\
    \    for(int j = i; j < n; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\
    \ i++;\n    if(i == s.size()) return std::string(s.rbegin(), s.rend());\n    for(int\
    \ j = 0; j < s.size(); j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\
    \ i++;\n    if(i == s.size()) return s;\n    for(int j = 0; j < s.size(); j++)\
    \ {\n        if(isalpha(s[j])) {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n\
    \            else s[j] = toupper(s[j]);\n        }\n    }\n    return s;", " \
    \   std::string result = \"\";\n    bool hasLetter = false;\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            hasLetter\
    \ = true;\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!hasLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int i = 0;\n    while(s[i] != '\\0') {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 32;\n        }\n        else if(s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n        i++;\n   \
    \ }\n    return s;", "    int n = s.size();\n    if(n == 0) return \"\";\n   \
    \ std::string ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(isalpha(s[i])) {\n            flag = true;\n            if(isupper(s[i]))\
    \ {\n                ans += tolower(s[i]);\n            } else {\n           \
    \     ans += toupper(s[i]);\n            }\n        } else {\n            ans\
    \ += s[i];\n        }\n    }\n    if(flag) return ans;\n    else {\n        std::reverse(ans.begin(),\
    \ ans.end());\n        return ans;\n    }", "    std::string result = \"\";\n\
    \    bool has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n    \
    \    if (isalpha(s[i])) {\n            has_letter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "\tstd::string result;\n\tbool has_letter\
    \ = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\
    \t\t\thas_letter = true;\n\t\t\tif (islower(s[i])) {\n\t\t\t\tresult += toupper(s[i]);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tresult += tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tif (!has_letter) {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t}\n\treturn result;", "    int flag = 0;\n    for(int i =\
    \ 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            flag = 1;\n\
    \            break;\n        }\n    }\n    if(flag == 0) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n          \
    \      s[i] = toupper(s[i]);\n            }\n            else {\n            \
    \    s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;", " \
    \   std::string result;\n    bool is_letter = false;\n    for (auto c : s) {\n\
    \        if (isalpha(c)) {\n            is_letter = true;\n            result\
    \ += islower(c) ? toupper(c) : tolower(c);\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool is_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (s[i] >= 'a' && s[i] <= 'z') {\n            is_letter = true;\n       \
    \     result += s[i] - 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            is_letter = true;\n            result += s[i] + 32;\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (!is_letter) {\n  \
    \      std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int n = s.size();\n    if(n == 0) return \"\";\n    int i = 0;\n    while(i\
    \ < n && !isalpha(s[i])) i++;\n    if(i == n) return s;\n    for(int j = i; j\
    \ < n; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j])) s[j]\
    \ = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n    }\n\
    \    return s;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i])) i++;\n\
    \    if(i == s.size()) return s;\n    for(int j = 0; j < s.size(); j++) {\n  \
    \      if(isalpha(s[j])) {\n            if(islower(s[j])) s[j] = toupper(s[j]);\n\
    \            else s[j] = tolower(s[j]);\n        }\n    }\n    return s;", " \
    \   int n = s.size();\n    bool flag = false;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(isalpha(s[i])) {\n            flag = true;\n            break;\n\
    \        }\n    }\n    if(!flag) {\n        reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n\
    \            }\n            else {\n                s[i] = toupper(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    std::string result = \"\"\
    ;\n    bool has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            has_letter = true;\n            if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            } else {\n        \
    \        result += toupper(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int n = s.size();\n    int\
    \ i = 0;\n    while(i < n && !isalpha(s[i])) i++;\n    if(i == n) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int j = i; j < n; j++) {\n    \
    \    if(isalpha(s[j])) {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n\
    \            else s[j] = toupper(s[j]);\n        }\n    }\n    return s;", " \
    \   bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i = 0; i < s.size(); i++) {\n            if(isalpha(s[i]))\
    \ {\n                if(islower(s[i])) {\n                    s[i] = toupper(s[i]);\n\
    \                } else {\n                    s[i] = tolower(s[i]);\n       \
    \         }\n            }\n        }\n    } else {\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    std::string result = \"\";\n    bool\
    \ is_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res;\n    for (auto\
    \ c : s) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n       \
    \         res += tolower(c);\n            } else {\n                res += toupper(c);\n\
    \            }\n        } else {\n            res += c;\n        }\n    }\n  \
    \  if (res.size() == 0) {\n        return s;\n    }\n    return res;", "    int\
    \ n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n\
    \    return s;", "    std::string result = \"\";\n    bool is_letter = false;\n\
    \    for (char c : s) {\n        if (isalpha(c)) {\n            is_letter = true;\n\
    \            if (isupper(c)) {\n                result += tolower(c);\n      \
    \      } else {\n                result += toupper(c);\n            }\n      \
    \  } else {\n            result += c;\n        }\n    }\n    if (!is_letter) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string res = \"\";\n    bool flag = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n            if(isupper(s[i]))\
    \ {\n                res += tolower(s[i]);\n            } else {\n           \
    \     res += toupper(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if(flag) {\n        return res;\n    } else\
    \ {\n        std::reverse(res.begin(), res.end());\n        return res;\n    }",
  "    std::string res;\n    bool flag = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            flag = true;\n\
    \            res += s[i] - 32;\n        }\n        else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            flag = true;\n            res += s[i] + 32;\n       \
    \ }\n        else {\n            res += s[i];\n        }\n    }\n    if(flag)\
    \ {\n        return res;\n    }\n    else {\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }", "    bool is_letter = false;\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n       \
    \     is_letter = true;\n            break;\n        }\n    }\n    if (!is_letter)\
    \ {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;",
  "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\n        i++;\n    if(i\
    \ == s.size())\n        reverse(s.begin(), s.end());\n    else{\n        for(int\
    \ j = 0; j < s.size(); j++){\n            if(isalpha(s[j])){\n               \
    \ if(islower(s[j]))\n                    s[j] = toupper(s[j]);\n             \
    \   else\n                    s[j] = tolower(s[j]);\n            }\n        }\n\
    \    }\n    return s;", "    int len = s.length();\n    if(len == 0) return s;\n\
    \    for(int i = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \            s[i] -= 32;\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n  \
    \          s[i] += 32;\n        }\n    }\n    return s;", "    std::string result;\n\
    \    bool is_letter = false;\n    for (auto c : s) {\n        if (std::isalpha(c))\
    \ {\n            is_letter = true;\n            if (std::islower(c)) {\n     \
    \           result += std::toupper(c);\n            } else {\n               \
    \ result += std::tolower(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res = \"\";\n \
    \   bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(islower(s[i])) {\n             \
    \   res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    std::string result = \"\";\n    bool is_letter = false;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ is_letter = true;\n            if (islower(s[i])) {\n                result\
    \ += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!is_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            } else {\n        \
    \        result += toupper(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (result.size() == 0) {\n       \
    \ return s;\n    }\n    return result;", "    std::string res;\n    bool flag\
    \ = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            flag = true;\n            res += toupper(s[i]);\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag =\
    \ true;\n            res += tolower(s[i]);\n        }\n        else {\n      \
    \      res += s[i];\n        }\n    }\n    if(flag) {\n        return res;\n \
    \   }\n    else {\n        std::reverse(res.begin(), res.end());\n        return\
    \ res;\n    }", "    int n = s.size();\n    int i = 0;\n    while(i < n && !isalpha(s[i]))\
    \ i++;\n    if(i == n) return s;\n    for(int j = i; j < n; j++) {\n        if(isalpha(s[j]))\
    \ {\n            if(islower(s[j])) s[j] = toupper(s[j]);\n            else s[j]\
    \ = tolower(s[j]);\n        }\n    }\n    return s;", "    std::string res = \"\
    \";\n    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                res += toupper(s[i]);\n            } else {\n           \
    \     res += tolower(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    if (s.empty()) return s;\n    std::string\
    \ result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            result\
    \ += isupper(c) ? tolower(c) : toupper(c);\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;", "    std::string res = \"\";\n\
    \    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(islower(s[i])) {\n             \
    \   res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    int len = s.length();\n    if(len == 0) return s;\n    for(int i\
    \ = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n           \
    \ s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;", "   \
    \ bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i = 0; i < s.size(); i++) {\n            if(isalpha(s[i]))\
    \ {\n                if(islower(s[i])) {\n                    s[i] = toupper(s[i]);\n\
    \                } else {\n                    s[i] = tolower(s[i]);\n       \
    \         }\n            }\n        }\n    } else {\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    std::string result;\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            if (islower(s[i])) {\n      \
    \          result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int n = s.size();\n    int\
    \ i = 0;\n    while(i < n && !isalpha(s[i])) i++;\n    if(i == n) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int j = i; j < n; j++) {\n    \
    \    if(isalpha(s[j])) {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n\
    \            else s[j] = toupper(s[j]);\n        }\n    }\n    return s;", " \
    \   int i = 0;\n    while(i < s.size() && !isalpha(s[i])) i++;\n    if(i == s.size())\
    \ return std::string(s.rbegin(), s.rend());\n    for(int j = 0; j < s.size();\
    \ j++) {\n        if(isalpha(s[j])) {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n\
    \            else s[j] = toupper(s[j]);\n        }\n    }\n    return s;", " \
    \   if(s.length() == 0) return s;\n    std::string result = \"\";\n    bool flag\
    \ = false;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(islower(s[i])) {\n             \
    \   result += toupper(s[i]);\n            } else {\n                result +=\
    \ tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if(!flag) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result = \"\";\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            if (islower(s[i])) {\n      \
    \          result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    bool is_letter = false;\n \
    \   for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n     \
    \       is_letter = true;\n            break;\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n       \
    \     if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n          \
    \  } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    return s;", "    bool flag = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n            break;\n\
    \        }\n    }\n    if(flag) {\n        for(int i = 0; i < s.size(); i++) {\n\
    \            if(isalpha(s[i])) {\n                if(islower(s[i])) {\n      \
    \              s[i] = toupper(s[i]);\n                } else {\n             \
    \       s[i] = tolower(s[i]);\n                }\n            }\n        }\n \
    \   } else {\n        reverse(s.begin(), s.end());\n    }\n    return s;", " \
    \   bool is_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            is_letter = true;\n            break;\n \
    \       }\n    }\n    if (!is_letter) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            if (islower(s[i])) {\n                s[i] =\
    \ toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    int count = 0;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            count++;\n\
    \            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n    \
    \        } else {\n                s[i] = tolower(s[i]);\n            }\n    \
    \    }\n    }\n    if(count == 0) {\n        reverse(s.begin(), s.end());\n  \
    \  }\n    return s;", "    int len = s.length();\n    int i = 0;\n    for(i =\
    \ 0; i < len; i++) {\n        if(isalpha(s[i])) {\n            break;\n      \
    \  }\n    }\n    if(i == len) {\n        reverse(s.begin(), s.end());\n      \
    \  return s;\n    }\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string result = \"\";\n    bool hasLetter\
    \ = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            hasLetter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "\tint n = s.size();\n\tif(n ==\
    \ 0) return \"\";\n\tstd::string ans = \"\";\n\tfor(int i = 0; i < n; i++) {\n\
    \t\tif(s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tans += (char)(s[i] - 'a' + 'A');\n\
    \t\t} else if(s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tans += (char)(s[i] - 'A' +\
    \ 'a');\n\t\t} else {\n\t\t\tans += s[i];\n\t\t}\n\t}\n\tif(ans == s) {\n\t\t\
    std::reverse(ans.begin(), ans.end());\n\t}\n\treturn ans;", "\tstd::string result\
    \ = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n\t\t\tresult += s[i] - 32;\n\t\t} else if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n\t\t\tresult += s[i] + 32;\n\t\t} else {\n\t\t\tresult += s[i];\n\t\t\
    }\n\t}\n\tif (result.length() == s.length()) {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t}\n\treturn result;", "    std::string res;\n    bool flag\
    \ = true;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = false;\n            if(islower(s[i])) {\n            \
    \    res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    int n = s.size();\n    bool flag = false;\n    for(int i = 0; i\
    \ < n; i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n       \
    \     break;\n        }\n    }\n    if(!flag) {\n        reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            }\n            else {\n                s[i] = tolower(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result.length() ==\
    \ s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;", "    int len = s.length();\n    if(len == 0) return s;\n\
    \    int i = 0;\n    while(i < len && !isalpha(s[i])) i++;\n    if(i == len) return\
    \ s;\n    for(int j = 0; j < len; j++) {\n        if(isalpha(s[j])) {\n      \
    \      if(islower(s[j])) s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n\
    \        }\n    }\n    return s;", "    std::string result;\n    bool is_letter\
    \ = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            is_letter\
    \ = true;\n            if (isupper(c)) {\n                result += tolower(c);\n\
    \            } else {\n                result += toupper(c);\n            }\n\
    \        } else {\n            result += c;\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            is_letter =\
    \ true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    bool is_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            is_letter = true;\n            break;\n  \
    \      }\n    }\n    if (!is_letter) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            if (islower(s[i])) {\n                s[i] =\
    \ toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    std::string result;\n \
    \   for (auto c : s) {\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                result += toupper(c);\n            } else {\n           \
    \     result += tolower(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (result.empty()) {\n        return s;\n    }\n\
    \    return result;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\
    \ i++;\n    if(i == s.size()) return std::string(s.rbegin(), s.rend());\n    for(int\
    \ j = 0; j < s.size(); j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    int n = s.size();\n    int i = 0;\n    while(i < n\
    \ && !isalpha(s[i])) i++;\n    if(i == n) return s;\n    for(int j = i; j < n;\
    \ j++) {\n        if(isalpha(s[j])) {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n\
    \            else s[j] = toupper(s[j]);\n        }\n    }\n    return s;", " \
    \   if(s.size() == 0) return s;\n    for(int i = 0; i < s.size(); i++) {\n   \
    \     if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                s[i]\
    \ = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    std::string result;\n \
    \   bool has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            has_letter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    bool flag = false;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            flag =\
    \ true;\n            break;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < s.size(); i++) {\n            if(isalpha(s[i])) {\n             \
    \   if(isupper(s[i])) {\n                    s[i] = tolower(s[i]);\n         \
    \       } else {\n                    s[i] = toupper(s[i]);\n                }\n\
    \            }\n        }\n    } else {\n        reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    std::string res = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      flag = true;\n            if(isupper(s[i])) {\n                res += tolower(s[i]);\n\
    \            } else {\n                res += toupper(s[i]);\n            }\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if(flag) {\n\
    \        return res;\n    } else {\n        std::reverse(res.begin(), res.end());\n\
    \        return res;\n    }", "    if(s.size() == 0) return s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;",
  "    std::string result = \"\";\n    bool has_letter = false;\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            has_letter\
    \ = true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!has_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string res = \"\";\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            if (isupper(s[i])) {\n                res\
    \ += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (res.size() == 0) {\n        return s;\n    }\n    return res;", "   \
    \ int len = s.length();\n    bool flag = false;\n    for(int i = 0; i < len; i++)\
    \ {\n        if(isalpha(s[i])) {\n            flag = true;\n            break;\n\
    \        }\n    }\n    if(flag) {\n        for(int i = 0; i < len; i++) {\n  \
    \          if(isalpha(s[i])) {\n                if(islower(s[i])) {\n        \
    \            s[i] = toupper(s[i]);\n                }\n                else {\n\
    \                    s[i] = tolower(s[i]);\n                }\n            }\n\
    \        }\n    }\n    else {\n        reverse(s.begin(), s.end());\n    }\n \
    \   return s;", "    std::string result = \"\";\n    bool has_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        has_letter = true;\n            if (isupper(s[i])) {\n              \
    \  result += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!has_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string res = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      flag = true;\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n\
    \            } else {\n                res += tolower(s[i]);\n            }\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if(!flag) {\n\
    \        std::reverse(res.begin(), res.end());\n    }\n    return res;", "   \
    \ int n = s.size();\n    bool flag = false;\n    for(int i = 0; i < n; i++) {\n\
    \        if(isalpha(s[i])) {\n            flag = true;\n            break;\n \
    \       }\n    }\n    if(!flag) {\n        reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            }\n            else {\n                s[i] = tolower(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    bool flag = false;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            flag =\
    \ true;\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    if(!flag) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if\
    \ (isupper(s[i])) {\n                result += tolower(s[i]);\n            } else\
    \ {\n                result += toupper(s[i]);\n            }\n        } else {\n\
    \            result += s[i];\n        }\n    }\n    if (result.length() == 0)\
    \ {\n        return s;\n    }\n    return result;", "    std::string result =\
    \ \"\";\n    bool isLetter = false;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            isLetter = true;\n            if\
    \ (islower(s[i])) {\n                result += toupper(s[i]);\n            } else\
    \ {\n                result += tolower(s[i]);\n            }\n        } else {\n\
    \            result += s[i];\n        }\n    }\n    if (!isLetter) {\n       \
    \ std::reverse(result.begin(), result.end());\n    }\n    return result;", " \
    \   int i = 0;\n    while(i < s.size() && !isalpha(s[i])) i++;\n    if(i == s.size())\
    \ return s;\n    for(int j = 0; j < s.size(); j++) {\n        if(isalpha(s[j]))\
    \ {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n            else s[j]\
    \ = toupper(s[j]);\n        }\n    }\n    return s;", "    std::string res;\n\
    \    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(islower(s[i])) {\n             \
    \   res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    int len = s.length();\n    if(len == 0) return s;\n    for(int i\
    \ = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n           \
    \ s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;", "   \
    \ std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n\
    \            } else {\n                res += tolower(s[i]);\n            }\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res.size()\
    \ == 0) {\n        return s;\n    }\n    return res;", "    std::string result\
    \ = \"\";\n    bool is_letter = false;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            is_letter = true;\n           \
    \ if (isupper(s[i])) {\n                result += tolower(s[i]);\n           \
    \ } else {\n                result += toupper(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (!is_letter) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "\tint i = 0;\n\twhile (i < s.size() && !isalpha(s[i])) {\n\t\ti++;\n\t}\n\tif (i\
    \ == s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\t\
    for (int j = 0; j < s.size(); j++) {\n\t\tif (isalpha(s[j])) {\n\t\t\tif (islower(s[j]))\
    \ {\n\t\t\t\ts[j] = toupper(s[j]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[j] = tolower(s[j]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn s;", "    int l = s.length();\n    if(l == 0) return\
    \ s;\n    for(int i = 0; i < l; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return\
    \ s;", "    std::string result;\n    bool has_letter = false;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            has_letter\
    \ = true;\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!has_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string res = \"\";\n    bool flag = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n            if(isupper(s[i]))\
    \ {\n                res += tolower(s[i]);\n            } else {\n           \
    \     res += toupper(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if(flag) {\n        return res;\n    } else\
    \ {\n        std::reverse(res.begin(), res.end());\n        return res;\n    }",
  "    std::string result = \"\";\n    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            is_letter =\
    \ true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string res = \"\";\n    int flag = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            flag = 1;\n  \
    \          res += toupper(s[i]);\n        }\n        else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            flag = 1;\n            res += tolower(s[i]);\n      \
    \  }\n        else {\n            res += s[i];\n        }\n    }\n    if(flag\
    \ == 0) {\n        reverse(res.begin(), res.end());\n    }\n    return res;",
  "    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i = 0; i < s.size(); i++) {\n            if(isalpha(s[i]))\
    \ {\n                if(islower(s[i])) {\n                    s[i] = toupper(s[i]);\n\
    \                } else {\n                    s[i] = tolower(s[i]);\n       \
    \         }\n            }\n        }\n    } else {\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    std::string res;\n    for (auto c : s)\
    \ {\n        if (isalpha(c)) {\n            res += isupper(c) ? tolower(c) : toupper(c);\n\
    \        } else {\n            res += c;\n        }\n    }\n    return res;",
  "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            if (islower(s[i])) {\n              \
    \  result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (result.length() == 0) {\n        return s;\n    }\n    return result;",
  "    int i;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]>='a' && s[i]<='z')\n\
    \        {\n            s[i]=s[i]-32;\n        }\n        else if(s[i]>='A' &&\
    \ s[i]<='Z')\n        {\n            s[i]=s[i]+32;\n        }\n    }\n    return\
    \ s;", "    bool has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            has_letter = true;\n            if\
    \ (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else\
    \ {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n\
    \    if (!has_letter) {\n        std::reverse(s.begin(), s.end());\n    }\n  \
    \  return s;", "    std::string result;\n    bool has_letter = false;\n    for\
    \ (auto c : s) {\n        if (isalpha(c)) {\n            has_letter = true;\n\
    \            if (isupper(c)) {\n                result += tolower(c);\n      \
    \      } else {\n                result += toupper(c);\n            }\n      \
    \  } else {\n            result += c;\n        }\n    }\n    if (!has_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;", "    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            flag = true;\n            break;\n \
    \       }\n    }\n    if(flag) {\n        for(int i = 0; i < s.size(); i++) {\n\
    \            if(isalpha(s[i])) {\n                if(isupper(s[i])) {\n      \
    \              s[i] = tolower(s[i]);\n                } else {\n             \
    \       s[i] = toupper(s[i]);\n                }\n            }\n        }\n \
    \   } else {\n        reverse(s.begin(), s.end());\n    }\n    return s;", " \
    \   std::string res;\n    bool has_letter = false;\n    for (auto c : s) {\n \
    \       if (isalpha(c)) {\n            has_letter = true;\n            res +=\
    \ islower(c) ? toupper(c) : tolower(c);\n        } else {\n            res +=\
    \ c;\n        }\n    }\n    if (!has_letter) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    int n = s.size();\n    bool flag\
    \ = false;\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n  \
    \          flag = true;\n            break;\n        }\n    }\n    if(!flag) {\n\
    \        reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int i\
    \ = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            }\n            else {\n\
    \                s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return\
    \ s;", "    std::string res = \"\";\n    bool flag = false;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n           \
    \ flag = true;\n            res += s[i] - 32;\n        }\n        else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            flag = true;\n            res += s[i]\
    \ + 32;\n        }\n        else {\n            res += s[i];\n        }\n    }\n\
    \    if(flag) {\n        return res;\n    }\n    else {\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }", "    int n = s.size();\n    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < n; i++) {\n    \
    \    if(isalpha(s[i])) {\n            flag = true;\n            if(islower(s[i]))\
    \ {\n                ans += toupper(s[i]);\n            } else {\n           \
    \     ans += tolower(s[i]);\n            }\n        } else {\n            ans\
    \ += s[i];\n        }\n    }\n    if(!flag) {\n        reverse(ans.begin(), ans.end());\n\
    \    }\n    return ans;", "    bool is_letter = false;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            is_letter = true;\n\
    \            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n   \
    \         } else {\n                s[i] = tolower(s[i]);\n            }\n   \
    \     }\n    }\n    if (!is_letter) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    if(s.size() == 0)\n        return s;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n    \
    \        s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;", " \
    \   int i = 0;\n    for (i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            break;\n        }\n    }\n    if (i == s.size()) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n            \
    \    s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    bool flag = false;\n  \
    \  for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n        \
    \    flag = true;\n            break;\n        }\n    }\n    if(flag) {\n    \
    \    for(int i = 0; i < s.size(); i++) {\n            if(isalpha(s[i])) {\n  \
    \              if(islower(s[i])) {\n                    s[i] = toupper(s[i]);\n\
    \                } else {\n                    s[i] = tolower(s[i]);\n       \
    \         }\n            }\n        }\n    } else {\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    bool flag = false;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n\
    \            break;\n        }\n    }\n    if(flag) {\n        for(int i = 0;\
    \ i < s.size(); i++) {\n            if(isalpha(s[i])) {\n                if(isupper(s[i]))\
    \ {\n                    s[i] = tolower(s[i]);\n                } else {\n   \
    \                 s[i] = toupper(s[i]);\n                }\n            }\n  \
    \      }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n    return\
    \ s;", "    std::string result = \"\";\n    bool isLetter = false;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            isLetter\
    \ = true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int n = s.size();\n    if(n == 0) return \"\";\n    bool is_letter = false;\n\
    \    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            is_letter\
    \ = true;\n            break;\n        }\n    }\n    if(!is_letter) {\n      \
    \  reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int i = 0;\
    \ i < n; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n\
    \                s[i] = toupper(s[i]);\n            } else {\n               \
    \ s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;", "  \
    \  std::string res = \"\";\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n     \
    \   } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res ==\
    \ s) {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;",
  "    std::string res = \"\";\n    int n = s.size();\n    for(int i = 0; i < n; i++)\
    \ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if(res.size()\
    \ == 0) {\n        return s;\n    }\n    return res;", "    std::string result;\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int i = 0;\n    while(i < s.size()\
    \ && !isalpha(s[i])) i++;\n    if(i == s.size()) return s;\n    for(int j = 0;\
    \ j < s.size(); j++) {\n        if(isalpha(s[j])) {\n            if(isupper(s[j]))\
    \ s[j] = tolower(s[j]);\n            else s[j] = toupper(s[j]);\n        }\n \
    \   }\n    return s;", "    std::string result;\n    bool isLetter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        isLetter = true;\n            if (islower(s[i])) {\n                result\
    \ += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string res = \"\";\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            is_letter = true;\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            is_letter = true;\n\
    \            res += tolower(s[i]);\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "    std::string result = \"\";\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (isupper(s[i])) {\n       \
    \         result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result;\n    bool\
    \ has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            if (isupper(s[i])) {\n      \
    \          result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n\
    \            result += s[i];\n        }\n    }\n    if (result.length() == s.length())\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int len = s.length();\n    bool flag = false;\n    for(int i = 0; i < len;\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(!flag) {\n\
    \        std::reverse(s.begin(), s.end());\n    }\n    return s;", "    std::string\
    \ result = \"\";\n    bool isLetter = false;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            isLetter = true;\n       \
    \     if (isupper(s[i])) {\n                result += tolower(s[i]);\n       \
    \     } else {\n                result += toupper(s[i]);\n            }\n    \
    \    } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    bool flag = false;\n    for(int i = 0; i <\
    \ s.length(); i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n\
    \            if(isupper(s[i])) {\n                result += tolower(s[i]);\n \
    \           } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if(!flag)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    std::string res;\n\
    \    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(isupper(s[i])) {\n             \
    \   res += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(flag) {\n        return res;\n    } else {\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }", "    std::string result;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    int n = s.size();\n\
    \    int i = 0;\n    while(i < n && !isalpha(s[i])) i++;\n    if(i == n) {\n \
    \       reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int j\
    \ = i; j < n; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    int n = s.size();\n    if(n == 0) return \"\";\n \
    \   bool flag = false;\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(!flag)\
    \ {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;",
  "    std::string res;\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n\
    \        if(s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if(res == s)\
    \ {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;", " \
    \   std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result\
    \ += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (result.size() == 0) {\n        return s;\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result\
    \ == s) {\n        std::reverse(result.begin(), result.end());\n    }\n    return\
    \ result;", "    int n = s.size();\n    for(int i = 0; i < n; i++) {\n       \
    \ if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = 'A' + (s[i] - 'a');\n \
    \       } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = 'a' + (s[i]\
    \ - 'A');\n        }\n    }\n    return s;", "    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    std::string ans = \"\";\n    bool flag = false;\n  \
    \  for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n  \
    \          flag = true;\n            ans += s[i] - 'a' + 'A';\n        }\n   \
    \     else if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n      \
    \      ans += s[i] - 'A' + 'a';\n        }\n        else {\n            ans +=\
    \ s[i];\n        }\n    }\n    if(!flag) {\n        std::reverse(ans.begin(),\
    \ ans.end());\n    }\n    return ans;", "    int n = s.size();\n    int i = 0;\n\
    \    while(i < n && !isalpha(s[i])) i++;\n    if(i == n) return s;\n    for(int\
    \ j = i; j < n; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    std::string result = \"\";\n    bool is_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        is_letter = true;\n            if (islower(s[i])) {\n               \
    \ result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!is_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result;\n    bool is_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        is_letter = true;\n            if (islower(s[i])) {\n               \
    \ result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!is_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result = \"\";\n    int count =\
    \ 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            count++;\n            if(isupper(s[i])) {\n                result\
    \ += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if(count == 0) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string res = \"\";\n    bool is_letter\
    \ = false;\n    for (auto c : s) {\n        if (isalpha(c)) {\n            is_letter\
    \ = true;\n            if (islower(c)) {\n                res += toupper(c);\n\
    \            } else {\n                res += tolower(c);\n            }\n   \
    \     } else {\n            res += c;\n        }\n    }\n    if (!is_letter) {\n\
    \        std::reverse(res.begin(), res.end());\n    }\n    return res;", "   \
    \ std::string result = \"\";\n    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            is_letter =\
    \ true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int n = s.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n \
    \       if(isalpha(s[i])) {\n            count++;\n        }\n    }\n    if(count\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            }\n            else {\n\
    \                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return\
    \ s;", "    std::string result = \"\";\n    bool isLetter = false;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            isLetter\
    \ = true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == s.length()) {\n        std::reverse(result.begin(), result.end());\n    }\n\
    \    return result;", "    int i = 0;\n    for (; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            break;\n        }\n    }\n    if (i == s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n       \
    \     if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n          \
    \  } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    return s;", "    std::string res;\n    for (auto c : s) {\n      \
    \  if (isalpha(c)) {\n            res += isupper(c) ? tolower(c) : toupper(c);\n\
    \        } else {\n            res += c;\n        }\n    }\n    return res;",
  "    int n = s.size();\n    int i = 0;\n    while(i < n && !isalpha(s[i])) i++;\n\
    \    if(i == n) return s;\n    for(int j = i; j < n; j++) {\n        if(isalpha(s[j]))\
    \ {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n            else s[j]\
    \ = toupper(s[j]);\n        }\n    }\n    return s;", "    // Write your code\
    \ here\n    int n = s.length();\n    int flag = 0;\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            flag = 1;\n \
    \           if(islower(s[i]))\n            {\n                s[i] = toupper(s[i]);\n\
    \            }\n            else\n            {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    if(flag == 0)\n    {\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    std::string res = \"\";\n    bool flag\
    \ = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            flag = true;\n            res += s[i] - 32;\n  \
    \      }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n\
    \            res += s[i] + 32;\n        }\n        else {\n            res +=\
    \ s[i];\n        }\n    }\n    if(flag) {\n        return res;\n    }\n    else\
    \ {\n        std::reverse(res.begin(), res.end());\n        return res;\n    }",
  "    std::string res;\n    bool flag = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n            if(islower(s[i]))\
    \ {\n                res += toupper(s[i]);\n            } else {\n           \
    \     res += tolower(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if(!flag) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    std::string res;\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (islower(s[i])) {\n       \
    \         res += toupper(s[i]);\n            } else {\n                res +=\
    \ tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "    std::string result;\n    bool is_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        is_letter = true;\n            if (isupper(s[i])) {\n               \
    \ result += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!is_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    bool flag = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n            break;\n\
    \        }\n    }\n    if(flag) {\n        for(int i = 0; i < s.size(); i++) {\n\
    \            if(isalpha(s[i])) {\n                if(islower(s[i])) {\n      \
    \              s[i] = toupper(s[i]);\n                } else {\n             \
    \       s[i] = tolower(s[i]);\n                }\n            }\n        }\n \
    \   } else {\n        reverse(s.begin(), s.end());\n    }\n    return s;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n \
    \       if (isalpha(s[i])) {\n            if (islower(s[i])) {\n             \
    \   result += toupper(s[i]);\n            } else {\n                result +=\
    \ tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (result.length() == 0) {\n        return s;\n    }\n\
    \    return result;", "    std::string result = \"\";\n    bool isLetter = false;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          isLetter = true;\n            if (isupper(s[i])) {\n              \
    \  result += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    int flag = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            flag = 1;\n            if(isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    if(flag == 0)\
    \ {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    bool is_letter = false;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            is_letter = true;\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (!is_letter) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    bool isLetter = false;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            isLetter =\
    \ true;\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int len = s.length();\n    if(len == 0) return s;\n    int i = 0;\n    while(i\
    \ < len && !isalpha(s[i])) i++;\n    if(i == len) return s;\n    for(int j = 0;\
    \ j < len; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    std::string result = \"\";\n    bool isLetter = false;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          isLetter = true;\n            if (islower(s[i])) {\n              \
    \  result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\
    \ i++;\n    if(i == s.size()) return s;\n    for(int j = 0; j < s.size(); j++)\
    \ {\n        if(isalpha(s[j])) {\n            if(islower(s[j])) s[j] = toupper(s[j]);\n\
    \            else s[j] = tolower(s[j]);\n        }\n    }\n    return s;", " \
    \   std::string result;\n    bool hasLetter = false;\n    for (char c : s) {\n\
    \        if (isalpha(c)) {\n            hasLetter = true;\n            if (isupper(c))\
    \ {\n                result += tolower(c);\n            } else {\n           \
    \     result += toupper(c);\n            }\n        } else {\n            result\
    \ += c;\n        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool flag = false;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(isupper(s[i])) {\n             \
    \   result += tolower(s[i]);\n            } else {\n                result +=\
    \ toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if(!flag) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    int len = s.length();\n    if(len == 0) return\
    \ s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n          \
    \  } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    return s;", "    std::string result = \"\";\n    bool is_letter =\
    \ false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (isupper(s[i])) {\n       \
    \         result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res = \"\";\n \
    \   bool is_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            is_letter = true;\n            if (isupper(s[i]))\
    \ {\n                res += tolower(s[i]);\n            } else {\n           \
    \     res += toupper(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (!is_letter) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    std::string res;\n    int n = s.size();\n\
    \    if(n == 0) return res;\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n\
    \            } else {\n                res += tolower(s[i]);\n            }\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if(res.size()\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return res;", "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\
    \ i++;\n    if(i == s.size()) return std::string(s.rbegin(), s.rend());\n    for(int\
    \ j = 0; j < s.size(); j++) {\n        if(isalpha(s[j])) {\n            if(isupper(s[j]))\
    \ s[j] = tolower(s[j]);\n            else s[j] = toupper(s[j]);\n        }\n \
    \   }\n    return s;", "    int i = 0;\n    bool is_letter = false;\n    while(i\
    \ < s.size()){\n        if(isalpha(s[i])){\n            is_letter = true;\n  \
    \          break;\n        }\n        i++;\n    }\n    if(!is_letter){\n     \
    \   reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int i = 0;\
    \ i < s.size(); i++){\n        if(isalpha(s[i])){\n            if(isupper(s[i])){\n\
    \                s[i] = tolower(s[i]);\n            }else{\n                s[i]\
    \ = toupper(s[i]);\n            }\n        }\n    }\n    return s;", "    std::string\
    \ res;\n    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n    \
    \    if(isalpha(s[i])) {\n            flag = true;\n            if(islower(s[i]))\
    \ {\n                res += toupper(s[i]);\n            } else {\n           \
    \     res += tolower(s[i]);\n            }\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if(!flag) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "\tstd::string result = \"\";\n\tbool\
    \ is_letter = false;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (isalpha(s[i]))\
    \ {\n\t\t\tis_letter = true;\n\t\t\tif (islower(s[i])) {\n\t\t\t\tresult += toupper(s[i]);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tresult += tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tif (!is_letter) {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t}\n\treturn result;", "    std::string res;\n    bool flag\
    \ = true;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = false;\n            if(islower(s[i])) {\n            \
    \    res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    int n = s.size();\n    bool is_letter = false;\n    for(int i =\
    \ 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            is_letter = true;\n\
    \            break;\n        }\n    }\n    if(!is_letter) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < n; i++) {\n    \
    \    if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                s[i]\
    \ = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;", "    std::string res = \"\"\
    ;\n    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            if(isupper(s[i])) {\n             \
    \   res += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if(flag) {\n        return res;\n    } else {\n        std::reverse(res.begin(),\
    \ res.end());\n        return res;\n    }", "    int flag = 0;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            flag =\
    \ 1;\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    if(flag == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    std::string res;\n    for (auto c : s) {\n      \
    \  if (isalpha(c)) {\n            if (islower(c)) {\n                res += toupper(c);\n\
    \            } else {\n                res += tolower(c);\n            }\n   \
    \     } else {\n            res += c;\n        }\n    }\n    if (res.size() ==\
    \ 0) {\n        return s;\n    }\n    return res;", "    std::string result =\
    \ \"\";\n    bool hasLetter = false;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            hasLetter = true;\n           \
    \ if (islower(s[i])) {\n                result += toupper(s[i]);\n           \
    \ } else {\n                result += tolower(s[i]);\n            }\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    if (!hasLetter) {\n\
    \        std::reverse(result.begin(), result.end());\n    }\n    return result;"]
stop_tokens:
- "\n}"
