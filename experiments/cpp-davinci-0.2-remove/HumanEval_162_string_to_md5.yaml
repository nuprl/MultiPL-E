name: HumanEval_162_string_to_md5
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return\
  \ its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\
  std::string string_to_md5(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
  Hello world\")) == (\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(candidate((\"\
  \")) == std::nullopt);\n    assert(candidate((\"A B C\")) == (\"0ef78513b0cb8cef12743f5aeb35f888\"\
  ));\n    assert(candidate((\"password\")) == (\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  ));\n}\n"
completions: ["    // Your code here\n    if(text.length()==0)\n        return \"\
    None\";\n    else\n    {\n        std::string s=\"\";\n        int i,j;\n    \
    \    unsigned char digest[16];\n        char mdString[33];\n        MD5_CTX ctx;\n\
    \        MD5_Init(&ctx);\n        MD5_Update(&ctx, text.c_str(), text.length());\n\
    \        MD5_Final(digest, &ctx);\n        for(i = 0; i < 16; i++)\n         \
    \   sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        for(i=0;i<32;i++)\n\
    \            s+=mdString[i];\n        return s;\n    }", "    if(text.empty())\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "\t// Your code here\n\tif (text.empty())\
    \ {\n\t\treturn \"None\";\n\t}\n\telse {\n\t\tstd::string result = \"\";\n\t\t\
    std::string temp = \"\";\n\t\tint i = 0;\n\t\twhile (i < text.length()) {\n\t\t\
    \ttemp = text.substr(i, 2);\n\t\t\tint x = std::stoi(temp, nullptr, 16);\n\t\t\
    \tchar c = x;\n\t\t\tresult += c;\n\t\t\ti += 2;\n\t\t}\n\t\treturn result;\n\t\
    }", "    // Your code here\n    if(text.length()==0)\n        return \"None\"\
    ;\n    else\n    {\n        std::stringstream ss;\n        ss<<std::hex<<std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }\n    ", "  // Your code here\n  if(text.length()==0)\n\
    \    return \"None\";\n  else\n  {\n    std::string s;\n    std::stringstream\
    \ out;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    for(int i=0; i <MD5_DIGEST_LENGTH; i++)\n    {\n\
    \      out << std::hex << (int)result[i];\n    }\n    s=out.str();\n    return\
    \ s;\n  }", "    // Your code here\n    std::stringstream ss;\n    ss << std::hex\
    \ << std::hash<std::string>{}(text);\n    return ss.str();", "    // Your code\
    \ here\n    if(text.length()==0)\n        return \"None\";\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    // Your code here\n    if(text.length()==0)\n        return \"None\";\n   \
    \ else{\n        unsigned char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned\
    \ char*)&text, strlen(text.c_str()), (unsigned char*)&digest);\n        char mdString[33];\n\
    \        for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n        return mdString;\n    }", "    // Your code\
    \ here\n    if(text.length()==0)\n        return \"None\";\n    else\n    {\n\
    \        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&text[0],\
    \ text.size(), result);\n        std::ostringstream sout;\n        sout<<std::hex<<std::setfill('0');\n\
    \        for(long long c:result)\n        {\n            sout<<std::setw(2)<<(long\
    \ long)c;\n        }\n        return sout.str();\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n    {\n        return \"None\";\n    }\n    else\n\
    \    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        std::stringstream ss;\n  \
    \      ss<<std::hex<<std::hash<std::string>{}(text);\n        return ss.str();\n\
    \    }", "    // Your code here\n    if(text.length()==0)\n    {\n        return\
    \ \"None\";\n    }\n    else\n    {\n        std::string s = \"\";\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::uppercase << std::setfill('0');\n      \
    \  for (int i = 0; i < text.length(); i++) {\n            ss << std::setw(2) <<\
    \ (int)text[i];\n        }\n        s = ss.str();\n        return s;\n    }",
  "    // Your code here\n    if(text.length()==0)\n    {\n        return \"None\"\
    ;\n    }\n    else\n    {\n        std::string result;\n        unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n        char mdString[33];\n        MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n        for(int i =\
    \ 0; i < 16; i++)\n        {\n            sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n        }\n        result=mdString;\n        return result;\n\
    \    }", "    // Your code here\n    if(text.length()==0)\n        return \"None\"\
    ;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n    std::stringstream ss;\n    for(int i=0; i<MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << (int)result[i];\n    return ss.str();", "  \
    \  // Your code here\n    if(text.length()==0)\n        return \"None\";\n   \
    \ unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i=0; i<MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << (int)result[i];\n    return ss.str();", "  \
    \  // Your code here\n    if(text.length()==0)\n    {\n        return \"None\"\
    ;\n    }\n    else\n    {\n        std::string hash = md5(text);\n        return\
    \ hash;\n    }", "  if(text.empty()) {\n    return \"None\";\n  }\n  std::string\
    \ result;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n  char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \  for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n      sprintf(&buf[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n  result = buf;\n  return result;", "    // Your\
    \ code here\n    if(text.length()==0)\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::string s=md5(text);\n\
    \        return s;\n    }", "    if(text.empty())\n        return \"None\";\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    else\n    {\n        std::stringstream ss;\n     \
    \   ss<<std::hex<<std::hash<std::string>{}(text);\n        return ss.str();\n\
    \    }", "    // Write your code here\n    if(text.length()==0)\n        return\
    \ \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.length() == 0) {\n        return \"\";\n\
    \    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.empty())\n       \
    \ return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    else\n    {\n        std::string s=\"\";\n       \
    \ unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n        for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n      \
    \  {\n            s+=result[i];\n        }\n        return s;\n    }", "    if(text.empty())\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    if(text.empty())\n        return\
    \ \"None\";\n    std::string hash_string;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n   \
    \ else\n    {\n        std::string s = \"\";\n        std::stringstream ss;\n\
    \        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n        for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n\
    \        {\n            ss << std::hex << (int)result[i];\n        }\n       \
    \ s = ss.str();\n        return s;\n    }", "    std::string hash_string;\n  \
    \  unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), hash);\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    \
    \    hash_string += std::to_string(hash[i]);\n    }\n    return hash_string;",
  "    // Your code here\n    if(text.length()==0)\n    {\n        return \"None\"\
    ;\n    }\n    else\n    {\n        std::string s;\n        std::stringstream out;\n\
    \        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n        for(int i=0; i <MD5_DIGEST_LENGTH; i++)\n   \
    \     {\n            out << std::hex << (int)result[i];\n        }\n        s=out.str();\n\
    \        return s;\n    }", "    // Your code here\n    if(text.empty())\n   \
    \     return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::string\
    \ s;\n        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned\
    \ char*)text.c_str(), text.size(), result);\n        for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n\
    \        {\n            char buf[3];\n            sprintf(buf,\"%02x\",result[i]);\n\
    \            s.append(buf);\n        }\n        return s;\n    }", "    if(text.empty())\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()\
    \ == 0)\n        return \"None\";\n    else{\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.length(), result);\n        std::stringstream\
    \ ss;\n        for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n            ss << std::hex\
    \ << (int)result[i];\n        return ss.str();\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n        return \"None\";\n    else\n    {\n       \
    \ std::string s = \"\";\n        std::stringstream ss;\n        unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n           \
    \ ss << std::hex << (int)digest[i];\n        s = ss.str();\n        return s;\n\
    \    }", "    // Your code here\n    if(text.empty())\n        return \"None\"\
    ;\n    else\n    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    std::string result;\n\
    \    if(text.length()==0)\n    {\n        return \"None\";\n    }\n    else\n\
    \    {\n        unsigned char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n        char mdString[33];\n\
    \        for(int i = 0; i < 16; i++)\n        {\n            sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n        }\n        result=mdString;\n \
    \       return result;\n    }", "    // Your code here\n    if(text.empty())\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    if(text.empty())\n        return\
    \ \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length() == 0)\n \
    \       return \"None\";\n    else\n    {\n        std::stringstream ss;\n   \
    \     ss << std::hex << std::hash<std::string>{}(text);\n        return ss.str();\n\
    \    }", "    // Your code here\n    if(text.length()==0)\n        return \"None\"\
    ;\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return \"None\";\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "  // Your code here\n  if(text.length()==0)\n    return\
    \ \"None\";\n  unsigned char result[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n  std::stringstream ss;\n  for(int i=0; i<MD5_DIGEST_LENGTH;\
    \ i++)\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \  return ss.str();", "    // Your code here\n    if(text.length()==0)\n     \
    \   return \"None\";\n    else\n    {\n        std::string result;\n        unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n        char mdString[33];\n        MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n        for(int i =\
    \ 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \        result=mdString;\n        return result;\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n    {\n        return \"None\";\n    }\n    else\n\
    \    {\n        std::string str;\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.size(), result);\n        for(int\
    \ i=0;i<MD5_DIGEST_LENGTH;i++)\n        {\n            str += std::to_string(result[i]);\n\
    \        }\n        return str;\n    }", "    if(text.empty())\n        return\
    \ \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.empty())\n       \
    \ return \"None\";\n    else\n    {\n        std::string s;\n        std::stringstream\
    \ ss;\n        ss<<std::hex<<std::md5(text);\n        ss>>s;\n        return s;\n\
    \    }", "    // Your code here\n    if(text.empty())\n        return \"None\"\
    ;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n        return\
    \ ss.str();\n    }", "    // Your code here\n    if(text.empty())\n        return\
    \ \"None\";\n    else\n    {\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.size(), result);\n        std::stringstream\
    \ ss;\n        for(int i=0; i<MD5_DIGEST_LENGTH; i++)\n            ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n        return ss.str();\n\
    \    }", "    // Your code here\n    if(text.empty())\n        return \"None\"\
    ;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n   \
    \ char mdString[33];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    // Your code here\n    if(text.length()==0)\n        return \"None\";\n   \
    \ std::string s=\"\";\n    std::stringstream ss;\n    ss<<std::hex<<std::uppercase<<std::setfill('0');\n\
    \    for(int i=0;i<text.length();i++)\n    {\n        ss<<std::setw(2)<<(int)text[i];\n\
    \    }\n    ss>>s;\n    return s;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        std::string s;\n        unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n        for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n        {\n        \
    \    char buf[3];\n            sprintf(buf,\"%02x\",result[i]);\n            s.append(buf);\n\
    \        }\n        return s;\n    }", "    if(text.empty())\n        return \"\
    \";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&result);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n\
    \    return std::string(mdString);", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&result);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n\
    \    return std::string(mdString);", "    if(text.empty()) return \"None\";\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    if(text.empty())\n        return\
    \ \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    std::string str;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char mdString[33];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    str=mdString;\n    return str;", " \
    \   // Your code here\n    if(text.length()==0)\n        return \"None\";\n  \
    \  unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    if(text.empty())\n        return\
    \ \"None\";\n    return \"\";", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::string\
    \ s;\n        std::stringstream out;\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.size(), result);\n        for(int\
    \ i=0; i <MD5_DIGEST_LENGTH; i++)\n        {\n            out << std::hex << (int)result[i];\n\
    \        }\n        s=out.str();\n        return s;\n    }", "    if(text.empty())\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)&text, text.size(), (unsigned char*)&digest);   \
    \ \n        char mdString[33];\n        for(int i = 0; i < 16; i++)\n        \
    \     sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        return\
    \ mdString;\n    }", "    // Your code here\n    if(text.length() == 0)\n    \
    \    return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n        return\
    \ ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n      \
    \  return \"None\";\n    else\n    {\n        std::string result;\n        unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n        char *cstr = new char[text.length()\
    \ + 1];\n        strcpy(cstr, text.c_str());\n        MD5((unsigned char*)cstr,\
    \ strlen(cstr), (unsigned char*)&digest);\n        char mdString[33];\n      \
    \  for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\",\
    \ (unsigned int)digest[i]);\n        result=mdString;\n        return result;\n\
    \    }", "    if(text.empty())\n        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.length()==0)\n        return \"None\";\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty())\n        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    std::string result;\n    std::stringstream ss;\n    unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    for(int i = 0; i < 16; i++)\n  \
    \       sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = mdString;\n    return result;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::uppercase\
    \ << std::setfill('0');\n    std::string res;\n    int i;\n    unsigned char digest[16];\n\
    \    const char* cstr = text.c_str();\n    MD5((unsigned char*)cstr, strlen(cstr),\
    \ (unsigned char*)&digest);\n    for(i = 0; i < 16; i++)\n        ss << std::setw(2)\
    \ << (unsigned int)digest[i];\n    res = ss.str();\n    return res;", "    //\
    \ Your code here\n    if(text.empty())\n        return \"None\";\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty())\n        return \"None\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    return ss.str();",
  "    if(text.empty())\n        return \"None\";\n    std::string md5_hash = \"\"\
    ;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    md5_hash = mdString;\n    return md5_hash;", "    if(text.empty())\n    \
    \    return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char\
    \ mdString[33];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    if(text.empty())\n        return\
    \ \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::uppercase <<\
    \ std::setfill('0');\n    std::string hash = \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (unsigned int)digest[i];\n\
    \    hash = ss.str();\n    return hash;", "    if(text.empty())\n        return\
    \ \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::uppercase <<\
    \ std::setfill('0');\n    std::string hash = \"\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), result);\n    for(int i\
    \ = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::setw(2) << (int)result[i];\n\
    \    }\n    hash = ss.str();\n    return hash;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)&text[0], text.size(), result);\n        std::ostringstream\
    \ sout;\n        sout<<std::hex<<std::setfill('0');\n        for(long long c:result)\n\
    \        {\n            sout<<std::setw(2)<<(long long)c;\n        }\n       \
    \ return sout.str();\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else{\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.size(), result);\n        std::stringstream\
    \ ss;\n        for(int i=0; i<MD5_DIGEST_LENGTH; i++)\n            ss << std::hex\
    \ << (int)result[i];\n        return ss.str();\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n        return \"None\";\n    std::stringstream ss;\n\
    \    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    // Your code here\n    if(text.length()==0)\n        return \"None\";\n   \
    \ else{\n        std::string s = \"\";\n        int i;\n        unsigned char\
    \ digest[16];\n        char md5string[33];\n        MD5_CTX ctx;\n        MD5_Init(&ctx);\n\
    \        MD5_Update(&ctx, text.c_str(), text.length());\n        MD5_Final(digest,\
    \ &ctx);\n        for(i = 0; i < 16; i++)\n            sprintf(&md5string[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n        s = md5string;\n        return\
    \ s;\n    }", "    if(text.length() == 0) {\n        return \"\";\n    }\n   \
    \ unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return \"\
    None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return \"None\";\n    std::string\
    \ md5_hash;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    md5_hash = mdString;\n    return md5_hash;", "    // Your code here\n   \
    \ if(text.length()==0)\n    {\n        return \"None\";\n    }\n    else\n   \
    \ {\n        std::string result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        char mdString[33];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n           \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        result\
    \ = mdString;\n        return result;\n    }", "    if(text.empty())\n       \
    \ return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // your code goes here\n    if(text.length()==0)\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        unsigned char\
    \ result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ result);\n        std::ostringstream sout;\n        sout<<std::hex<<std::setfill('0');\n\
    \        for(long long c:result)\n        {\n            sout<<std::setw(2)<<(long\
    \ long)c;\n        }\n        return sout.str();\n    }", "    if(text.empty())\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::uppercase\
    \ << std::setfill('0');\n    std::string md5_hash;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (unsigned int)digest[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return \"None\";\n    std::string\
    \ hash_string;\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), hash);\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        hash_string += std::to_string(hash[i]);\n    }\n    return hash_string;",
  "    // Your code here\n    if(text.empty())\n        return \"None\";\n    std::string\
    \ s;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n        s+=result[i];\n\
    \    return s;", "    // Your code here\n    if(text.length()==0)\n    {\n   \
    \     return \"None\";\n    }\n    else\n    {\n        std::string result;\n\
    \        unsigned char digest[MD5_DIGEST_LENGTH];\n        char mdString[33];\n\
    \        MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n\
    \        for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n        result=mdString;\n        return result;\n\
    \    }", "    // Your code here\n    if(text.length()==0)\n        return \"None\"\
    ;\n    else\n    {\n        std::string s=\"\";\n        std::stringstream ss;\n\
    \        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n        for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n    \
    \    {\n            ss<<std::hex<<(int)result[i];\n            s+=ss.str();\n\
    \            ss.str(\"\");\n        }\n        return s;\n    }", "    // Your\
    \ code here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n\
    \    else\n    {\n        std::string result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        char mdString[33];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n           \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        result=mdString;\n\
    \        return result;\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        std::stringstream ss;\n  \
    \      ss<<std::hex<<std::hash<std::string>{}(text);\n        return ss.str();\n\
    \    }", "    if(text.empty())\n        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n   \
    \ else\n    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    if(text.empty())\n        return \"None\"\
    ;\n    std::string md5_hash;\n    MD5 md5 = MD5(text);\n    md5_hash = md5.hexdigest();\n\
    \    return md5_hash;", "    if(text.empty()) return \"None\";\n    unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n\
    \         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return\
    \ mdString;", "    // Your code here\n    if(text.length()==0)\n    {\n      \
    \  return \"None\";\n    }\n    else\n    {\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&result);\n\
    \        char mdString[33];\n        for(int i = 0; i < 16; i++)\n           \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n        return\
    \ mdString;\n    }", "    // Your code here\n    if(text.length()==0)\n    {\n\
    \        return \"None\";\n    }\n    else\n    {\n        std::string s;\n  \
    \      char *cstr = new char[text.length() + 1];\n        strcpy(cstr, text.c_str());\n\
    \        unsigned char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)cstr,\
    \ strlen(cstr), (unsigned char*)&digest);\n        char mdString[33];\n      \
    \  for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\",\
    \ (unsigned int)digest[i]);\n        s=mdString;\n        return s;\n    }", " \
    \   // Your code here\n    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Implement your solution here.\n    // Return the\
    \ string equivalent of the md5 hash of 'text'.\n    // If 'text' is an empty string,\
    \ return None.\n    // You are not allowed to use any external libraries.\n  \
    \  // You are not allowed to use the 'md5' library.\n    // You are not allowed\
    \ to use the 'hashlib' library.\n    // You are not allowed to use the 'crypto'\
    \ library.\n    // You are not allowed to use the 'pycrypto' library.\n    //\
    \ You are not allowed to use the 'pysha3' library.\n    // You are not allowed\
    \ to use the 'pysha2' library.\n    // You are not allowed to use the 'sha3' library.\n\
    \    // You are not allowed to use the 'sha2' library.\n    // You are not allowed\
    \ to use the 'cryptography' library.\n    // You are not allowed to use the 'hash'\
    \ library.\n    // You are not allowed to use the 'hash_hmac' library.\n    //\
    \ You are not allowed to use the 'hmac' library.\n    // You are not allowed to\
    \ use the 'hash_hmac_algos' library.\n    // You are not allowed to use the 'hash_algos'\
    \ library.\n    // You are not allowed to use the 'hash_algos_available' library.\n\
    \    // You are not allowed to use the 'hash_algos_registered' library.\n    //\
    \ You are not allowed to use the 'hash_algos_names' library.\n    // You are not\
    \ allowed to use the 'hash_algos_modes' library.\n    // You are not allowed to\
    \ use the 'hash_algos_hashes' library.\n    // You are not allowed to use the\
    \ 'hash_algos_digests' library.\n    // You are not allowed to use the 'hash_algos_digest_size'\
    \ library.\n    // You are not allowed to use the 'hash_algos_block_size' library.\n\
    \    // You are not allowed to use the 'hash_algos_key_length' library.\n    //\
    \ You are not allowed to use the 'hash_algos_key_sizes' library.\n    // You are\
    \ not allowed to use the", "    if(text.empty())\n        return \"None\";\n \
    \   unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length() == 0)\n \
    \       return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n        return\
    \ ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n      \
    \  return \"None\";\n    else\n    {\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)&text, text.size(), (unsigned char*)&digest);   \
    \ \n        char mdString[33];\n        for(int i = 0; i < 16; i++)\n        \
    \    sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        return\
    \ mdString;\n    }", "    if(text.empty())\n        return \"None\";\n    std::string\
    \ hash_string;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    // Your code here\n    if(text.empty())\n       \
    \ return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::string ans;\n\
    \        int n=text.length();\n        int a[n];\n        for(int i=0;i<n;i++)\n\
    \        {\n            a[i]=text[i];\n        }\n        int b[n];\n        for(int\
    \ i=0;i<n;i++)\n        {\n            b[i]=a[i]%16;\n            a[i]=a[i]/16;\n\
    \        }\n        for(int i=0;i<n;i++)\n        {\n            if(a[i]<10)\n\
    \            {\n                ans.push_back(a[i]+'0');\n            }\n    \
    \        else\n            {\n                ans.push_back(a[i]+'a'-10);\n  \
    \          }\n            if(b[i]<10)\n            {\n                ans.push_back(b[i]+'0');\n\
    \            }\n            else\n            {\n                ans.push_back(b[i]+'a'-10);\n\
    \            }\n        }\n        return ans;\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.length()==0)\n        return \"None\";\n    std::string str;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    str=mdString;\n    return str;", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty()) return \"None\";\n    std::string\
    \ result = \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    // your code\
    \ goes here\n    if(text.length()==0)\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.empty())\n       \
    \ return \"None\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), result);\n    std::stringstream ss;\n    for(int\
    \ i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex << (int)result[i];\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty()) return \"None\";\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = 0;\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(buf+i*2, \"%02x\", digest[i]);\n    result = std::string(buf);\n\
    \    return result;", "    if(text.empty()) return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   // Your code here\n    if(text.empty())\n        return \"None\";\n    else\n\
    \    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::string\
    \ result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n        char *cstr\
    \ = new char[text.length() + 1];\n        strcpy(cstr, text.c_str());\n      \
    \  MD5((unsigned char*)cstr, strlen(cstr), (unsigned char*)&digest);\n       \
    \ char mdString[33];\n        for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n        result = mdString;\n        return\
    \ result;\n    }", "    // Your code here\n    if(text.empty())\n        return\
    \ \"None\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.empty())\n\
    \        return \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::string hash;\n    std::string hex;\n    std::string result;\n    unsigned\
    \ int i;\n    unsigned char c;\n    unsigned char *digest;\n    md5_state_t state;\n\
    \    md5_byte_t *message;\n    message = (md5_byte_t*)malloc(text.length()+1);\n\
    \    for(i=0;i<text.length();i++)\n        message[i] = text[i];\n    md5_init(&state);\n\
    \    md5_append(&state, message, text.length());\n    digest = (unsigned char*)malloc(16);\n\
    \    md5_finish(&state, digest);\n    for(i=0;i<16;i++)\n    {\n        ss <<\
    \ std::setw(2) << (int)digest[i];\n        hex = ss.str();\n    }\n    for(i=0;i<hex.length();i++)\n\
    \    {\n        c = hex[i];\n        if(c>='a' && c<='z')\n            c = c -\
    \ 32;\n        result.push_back(c);\n    }\n    return result;", "    // Your\
    \ code here\n    if(text.length() == 0)\n        return \"None\";\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.empty())\n    {\n\
    \        return \"None\";\n    }\n    else\n    {\n        std::string result;\n\
    \        unsigned char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n        char mdString[33];\n   \
    \     for(int i = 0; i < 16; i++)\n             sprintf(&mdString[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n        result=mdString;\n        return result;\n\
    \    }", "    // Your code here\n    if(text.length() == 0)\n        return \"\
    None\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n        return\
    \ ss.str();\n    }", "    if(text.empty())\n        return \"None\";\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length() == 0)\n \
    \       return \"None\";\n    std::string s = \"\";\n    std::stringstream ss;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n  \
    \      ss << std::hex << (int)result[i];\n    s = ss.str();\n    return s;", " \
    \   // Your code here\n    if(text.length() == 0)\n        return \"None\";\n\
    \    int i;\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n   \
    \ else\n    {\n        std::string s = \"\";\n        std::stringstream ss;\n\
    \        ss << std::hex << std::hash<std::string>{}(text);\n        ss >> s;\n\
    \        return s;\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::stringstream\
    \ ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n        return\
    \ ss.str();\n    }", "  // Your code here\n  return \"\";", "    // Your code\
    \ here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n   \
    \ else\n    {\n        std::string s;\n        std::stringstream out;\n      \
    \  unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n        for(int i=0; i <MD5_DIGEST_LENGTH; i++)\n   \
    \     {\n            out << std::hex << (int)result[i];\n        }\n        s=out.str();\n\
    \        return s;\n    }", "    // Your code here\n    // return \"\";\n    if(text.length()==0)\n\
    \        return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"\";\n    }\n    else\n    {\n        std::string s=\"\
    \";\n        std::string s1=\"\";\n        std::string s2=\"\";\n        std::string\
    \ s3=\"\";\n        std::string s4=\"\";\n        std::string s5=\"\";\n     \
    \   std::string s6=\"\";\n        std::string s7=\"\";\n        std::string s8=\"\
    \";\n        std::string s9=\"\";\n        std::string s10=\"\";\n        std::string\
    \ s11=\"\";\n        std::string s12=\"\";\n        std::string s13=\"\";\n  \
    \      std::string s14=\"\";\n        std::string s15=\"\";\n        std::string\
    \ s16=\"\";\n        std::string s17=\"\";\n        std::string s18=\"\";\n  \
    \      std::string s19=\"\";\n        std::string s20=\"\";\n        std::string\
    \ s21=\"\";\n        std::string s22=\"\";\n        std::string s23=\"\";\n  \
    \      std::string s24=\"\";\n        std::string s25=\"\";\n        std::string\
    \ s26=\"\";\n        std::string s27=\"\";\n        std::string s28=\"\";\n  \
    \      std::string s29=\"\";\n        std::string s30=\"\";\n        std::string\
    \ s31=\"\";\n        std::string s32=\"\";\n        std::string s33=\"\";\n  \
    \      std::string s34=\"\";\n        std::string s35=\"\";\n        std::string\
    \ s36=\"\";\n        std::string s37=\"\";\n        std::string s38=\"\";\n  \
    \      std::string s39=\"\";\n        std::string s40=\"\";\n        std::string\
    \ s41=\"\";\n        std::string s42=\"\";\n        std::string s43=\"\";\n  \
    \      std::string s44=\"\";\n        std::string s45=\"\";\n        std::string\
    \ s46=\"\";\n        std::string s47=\"\";\n        std::string s48=\"\";\n  \
    \      std::string s49=\"\";\n        std::string s50=\"\";\n        std::string\
    \ s51=\"\";\n        std::string s52=\"\";\n       ", "    if(text.empty())\n\
    \        return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    // Your code here\n\
    \    if(text.length()==0)\n    {\n        return \"None\";\n    }\n    else\n\
    \    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "\t// Your code goes here\n\tif (text.length()\
    \ == 0)\n\t\treturn \"None\";\n\telse\n\t{\n\t\tstd::string result = \"\";\n\t\
    \tstd::string temp = \"\";\n\t\tint i = 0;\n\t\twhile (i < text.length())\n\t\t\
    {\n\t\t\ttemp = \"\";\n\t\t\ttemp += text[i];\n\t\t\ttemp += text[i + 1];\n\t\t\
    \ttemp += text[i + 2];\n\t\t\ttemp += text[i + 3];\n\t\t\ttemp += text[i + 4];\n\
    \t\t\ttemp += text[i + 5];\n\t\t\ttemp += text[i + 6];\n\t\t\ttemp += text[i +\
    \ 7];\n\t\t\ttemp += text[i + 8];\n\t\t\ttemp += text[i + 9];\n\t\t\ttemp += text[i\
    \ + 10];\n\t\t\ttemp += text[i + 11];\n\t\t\ttemp += text[i + 12];\n\t\t\ttemp\
    \ += text[i + 13];\n\t\t\ttemp += text[i + 14];\n\t\t\ttemp += text[i + 15];\n\
    \t\t\ttemp += text[i + 16];\n\t\t\ttemp += text[i + 17];\n\t\t\ttemp += text[i\
    \ + 18];\n\t\t\ttemp += text[i + 19];\n\t\t\ttemp += text[i + 20];\n\t\t\ttemp\
    \ += text[i + 21];\n\t\t\ttemp += text[i + 22];\n\t\t\ttemp += text[i + 23];\n\
    \t\t\ttemp += text[i + 24];\n\t\t\ttemp += text[i + 25];\n\t\t\ttemp += text[i\
    \ + 26];\n\t\t\ttemp += text[i + 27];\n\t\t\ttemp += text[i + 28];\n\t\t\ttemp\
    \ += text[i + 29];\n\t\t\ttemp += text[i + 30];\n\t\t\ttemp += text[i + 31];\n\
    \t\t\ttemp += text[i + 32];\n\t\t\ttemp += text[i + 33];\n\t\t\ttemp += text[i\
    \ + 34];\n\t\t\ttemp += text[i + 35];", "    // Your code here\n    std::string\
    \ result;\n    if(text.length()==0)\n        return \"None\";\n    else\n    {\n\
    \        std::stringstream ss;\n        ss<<std::hex<<std::hash<std::string>{}(text);\n\
    \        result=ss.str();\n        return result;\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.empty())\n        return \"None\";\n    else\n    {\n    \
    \    std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    if(text.empty())\n\
    \        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::string\
    \ s=text;\n        std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&s[0],\
    \ s.size(), (unsigned char*)&result);\n        char mdString[33];\n        for(int\
    \ i=0;i<16;i++)\n        {\n            sprintf(&mdString[i*2],\"%02x\",(unsigned\
    \ int)result[i]);\n        }\n        std::string s1(mdString);\n        return\
    \ s1;\n    }", "    if(text.empty())\n        return \"None\";\n    unsigned char\
    \ result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::string s;\n\
    \        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n        for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n      \
    \  {\n            s+=result[i];\n        }\n        return s;\n    }", "    //\
    \ Your code here\n    if(text.length()==0)\n    {\n        return \"None\";\n\
    \    }\n    else\n    {\n        std::string result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        char mdString[33];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n           \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        result=mdString;\n\
    \        return result;\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::string\
    \ s = \"\";\n        std::stringstream ss;\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.length(), result);\n        for(int\
    \ i = 0; i < MD5_DIGEST_LENGTH; i++)\n        {\n            ss << std::hex <<\
    \ (int)result[i];\n        }\n        s = ss.str();\n        return s;\n    }",
  "    if(text.empty())\n        return \"None\";\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n    buf[2*MD5_DIGEST_LENGTH]\
    \ = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(buf+i*2,\
    \ \"%02x\", digest[i]);\n    result = std::string(buf);\n    return result;",
  "  // Your code here\n  if(text.length()==0)\n  {\n    return \"None\";\n  }\n \
    \ else\n  {\n    std::string s=text;\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::tolower);\n    std::string md5 = md5(s);\n    return md5;\n  }", "    // Your\
    \ code here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n\
    \    else\n    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    std::string result;\n    if(text.empty())\n\
    \        return \"None\";\n    else{\n        result = md5(text);\n        return\
    \ result;\n    }", "    // Your code here\n    if(text.length()==0)\n        return\
    \ \"None\";\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty()) return \"None\";\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n    std::string\
    \ hash;\n    std::stringstream hash_stream;\n    std::array<unsigned char, 16>\
    \ hash_array;\n    MD5((const unsigned char*)text.c_str(), text.length(), hash_array.data());\n\
    \    for(auto i : hash_array) {\n        hash_stream << std::setw(2) << (int)i;\n\
    \    }\n    hash = hash_stream.str();\n    return hash;", "    // Your code here\n\
    \    std::string result;\n    if(text.length()==0)\n    {\n        return \"None\"\
    ;\n    }\n    else\n    {\n        std::stringstream ss;\n        ss<<std::hex<<std::hash<std::string>{}(text);\n\
    \        result=ss.str();\n        return result;\n    }", "    // Your code here\n\
    \    if(text.length()==0)\n    {\n        return \"None\";\n    }\n    else\n\
    \    {\n        int i;\n        unsigned char digest[16];\n        MD5_CTX ctx;\n\
    \        MD5_Init(&ctx);\n        MD5_Update(&ctx, text.c_str(), text.length());\n\
    \        MD5_Final(digest, &ctx);\n        char mdString[33];\n        for(i =\
    \ 0; i < 16; i++)\n        {\n            sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n        }\n        return mdString;\n    }", "    // Your code\
    \ here\n    if(text.empty())\n        return \"None\";\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    // Your code here\n    if(text.length()==0)\n    {\n        return \"None\"\
    ;\n    }\n    else\n    {\n        std::stringstream ss;\n        ss << std::hex\
    \ << std::hash<std::string>{}(text);\n        return ss.str();\n    }", "    if(text.empty())\
    \ return \"None\";\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return \"None\";\n    std::string\
    \ md5_hash;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    md5_hash = mdString;\n    return md5_hash;", "    // Your code here\n   \
    \ if(text.length()==0)\n        return \"None\";\n    else\n    {\n        std::string\
    \ s = \"\";\n        std::stringstream ss;\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5((unsigned char*)text.c_str(), text.length(), result);\n        for(int\
    \ i=0; i<MD5_DIGEST_LENGTH; i++)\n        {\n            ss << std::hex << (int)result[i];\n\
    \        }\n        s = ss.str();\n        return s;\n    }", "    if(text.empty())\n\
    \        return \"None\";\n    int i;\n    unsigned char digest[16];\n    MD5_CTX\
    \ ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for (i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    std::string hash;\n    if(text.empty())\n       \
    \ return \"None\";\n    else{\n        std::hash<std::string> hash_fn;\n     \
    \   size_t hash_value = hash_fn(text);\n        hash = std::to_string(hash_value);\n\
    \        return hash;\n    }", "    if(text.empty())\n        return \"None\"\
    ;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \ {\n        return \"None\";\n    }\n    else\n    {\n        std::string result;\n\
    \        unsigned char digest[MD5_DIGEST_LENGTH];\n        char mdString[33];\n\
    \        MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n\
    \        for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n        result=mdString;\n        return result;\n\
    \    }", "    // Your code here\n    if(text.length()==0)\n    {\n        return\
    \ \"None\";\n    }\n    else\n    {\n        std::string str;\n        unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n        char buf[33];\n        for (int i = 0; i < 16; i++)\n    \
    \        sprintf(buf + i * 2, \"%02x\", result[i]);\n        buf[32] = 0;\n  \
    \      str=buf;\n        return str;\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \    {\n        return \"None\";\n    }\n    else\n    {\n        std::string\
    \ result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n        char mdString[33];\n\
    \        MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n\
    \        for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n        result=mdString;\n        return result;\n\
    \    }", "    if(text.empty())\n        return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    // Your code\
    \ here\n    if(text.length()==0)\n        return \"None\";\n    else\n    {\n\
    \        std::string s;\n        std::stringstream out;\n        unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)text.c_str(), text.length(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n        {\n\
    \            out << std::hex << (int)digest[i];\n        }\n        s=out.str();\n\
    \        return s;\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        std::string s=\"\";\n    \
    \    int i;\n        unsigned char result[MD5_DIGEST_LENGTH];\n        MD5((unsigned\
    \ char*)text.c_str(), text.size(), result);\n        for(i=0;i<MD5_DIGEST_LENGTH;i++)\n\
    \        {\n            char buf[3];\n            sprintf(buf,\"%02x\",result[i]);\n\
    \            s+=buf;\n        }\n        return s;\n    }", "    // Your code\
    \ here\n    if(text.length()==0)\n    {\n        return \"None\";\n    }\n   \
    \ else\n    {\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    else\n    {\n        std::string ans=\"\";\n  \
    \      std::stringstream ss;\n        ss<<std::hex<<std::hash<std::string>{}(text);\n\
    \        ss>>ans;\n        return ans;\n    }", "    // Your code here\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.length()\
    \ == 0) {\n        return \"None\";\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++) {\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    }\n    return std::string(mdString);",
  "    // Your code here\n    if(text.length()==0)\n        return \"None\";\n   \
    \ else\n    {\n        std::stringstream ss;\n        ss<<std::hex<<std::hash<std::string>{}(text);\n\
    \        return ss.str();\n    }", "    // Your code here\n    if(text.length()==0)\n\
    \        return \"None\";\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char *cstr = new char[text.length() + 1];\n    strcpy(cstr, text.c_str());\n\
    \    MD5((unsigned char*)cstr, strlen(cstr), (unsigned char*)&digest);\n    char\
    \ mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result=mdString;\n    return result;",
  "    if(text.empty())\n        return \"None\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&result);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)result[i]);\n    return std::string(mdString);", " \
    \   // Your code here\n    if(text.length()==0)\n        return \"None\";\n  \
    \  unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n    std::stringstream ss;\n    for(int i=0; i<MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << (int)result[i];\n    return ss.str();", "  \
    \  // Your code here\n    if(text.empty())\n        return \"None\";\n    unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << (int)result[i];\n    return ss.str();", "  \
    \  // Your code here\n    if(text.length()==0)\n        return \"None\";\n   \
    \ unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    if(text.length()==0)\n   \
    \     return \"None\";\n    int i;\n    unsigned char digest[16];\n    MD5_CTX\
    \ ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(i = 0; i < 16;\
    \ i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // Your code here\n    // return \"\";\n    if(text.empty())\n\
    \        return \"None\";\n    int len = text.length();\n    int i;\n    unsigned\
    \ char digest[16];\n    char md5string[33];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), len);\n    MD5_Final(digest, &ctx);\n    for(i\
    \ = 0; i < 16; i++)\n        sprintf(&md5string[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return md5string;", "    // Your code here\n    if(text.length()==0)\n  \
    \  {\n        return \"None\";\n    }\n    else\n    {\n        std::string s\
    \ = \"\";\n        int i;\n        unsigned char digest[16];\n        char md5string[33];\n\
    \        MD5_CTX ctx;\n        MD5_Init(&ctx);\n        MD5_Update(&ctx, text.c_str(),\
    \ text.length());\n        MD5_Final(digest, &ctx);\n        for(i = 0; i < 16;\
    \ i++)\n        {\n            sprintf(&md5string[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \        }\n        s = md5string;\n        return s;\n    }"]
stop_tokens:
- "\n}"
