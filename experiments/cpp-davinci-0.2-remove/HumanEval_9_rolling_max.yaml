name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
  \ generate a list of rolling maximum element found until given moment\n// in the\
  \ sequence.\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
  \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
  \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
  \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
completions: ["    std::vector<long> result;\n    std::deque<long> max_elements;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_elements.empty()\
    \ && numbers[i] >= numbers[max_elements.back()]) {\n            max_elements.pop_back();\n\
    \        }\n        max_elements.push_back(i);\n        if (i - max_elements.front()\
    \ >= 3) {\n            max_elements.pop_front();\n        }\n        result.push_back(numbers[max_elements.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!deque.empty()\
    \ && numbers[i] >= numbers[deque.back()]) {\n            deque.pop_back();\n \
    \       }\n        deque.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \        }\n        if (deque.front() == i - 2) {\n            deque.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (auto number : numbers) {\n        while (!stack.empty() &&\
    \ stack.top() < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while\
    \ (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()]) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        long current_number\
    \ = numbers[i];\n        while (!max_queue.empty() && max_queue.back() < current_number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(current_number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i - max_queue.front() >= 3)\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::deque<long>\
    \ max_queue;\n  for (auto number : numbers) {\n    while (!max_queue.empty() &&\
    \ max_queue.back() < number) {\n      max_queue.pop_back();\n    }\n    max_queue.push_back(number);\n\
    \    result.push_back(max_queue.front());\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (int i = 0; i < numbers.size(); i++) {\n        while\
    \ (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()]) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i - max_elements.front() >= 3) {\n            max_elements.pop_front();\n\
    \        }\n        result.push_back(numbers[max_elements.front()]);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> max_elements;\n\
    \    for (auto number : numbers) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < number) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "  std::vector<long> result;\n\
    \  std::deque<long> max_queue;\n  for (int i = 0; i < numbers.size(); i++) {\n\
    \    while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()]) {\n\
    \      max_queue.pop_back();\n    }\n    max_queue.push_back(i);\n    if (i -\
    \ max_queue.front() >= 3) {\n      max_queue.pop_front();\n    }\n    result.push_back(numbers[max_queue.front()]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::deque<int> max_indexes;\n\
    \    for (int i = 0; i < numbers.size(); ++i) {\n        while (!max_indexes.empty()\
    \ && numbers[max_indexes.back()] < numbers[i]) {\n            max_indexes.pop_back();\n\
    \        }\n        max_indexes.push_back(i);\n        if (i - max_indexes.front()\
    \ >= 3) {\n            max_indexes.pop_front();\n        }\n        result.push_back(numbers[max_indexes.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 3) {\n            result.push_back(numbers[dq.front()]);\n\
    \            if (dq.front() == i - 3) {\n                dq.pop_front();\n   \
    \         }\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::deque<long> max_queue;\n    for (auto number : numbers) {\n        while\
    \ (!max_queue.empty() && max_queue.back() < number) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (long number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!window.empty()\
    \ && window.back() < numbers[i]) {\n            window.pop_back();\n        }\n\
    \        window.push_back(numbers[i]);\n        if (i >= 2) {\n            result.push_back(window.front());\n\
    \            if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        if (max_queue.empty())\
    \ {\n            max_queue.push_back(number);\n        } else {\n            while\
    \ (!max_queue.empty() && max_queue.back() < number) {\n                max_queue.pop_back();\n\
    \            }\n            max_queue.push_back(number);\n        }\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::deque<long>\
    \ max_deque;\n  for (int i = 0; i < numbers.size(); i++) {\n    while (!max_deque.empty()\
    \ && numbers[i] >= numbers[max_deque.back()]) {\n      max_deque.pop_back();\n\
    \    }\n    max_deque.push_back(i);\n    if (i - max_deque.front() >= 3) {\n \
    \     max_deque.pop_front();\n    }\n    result.push_back(numbers[max_deque.front()]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (auto number : numbers) {\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        result.push_back(window.front());\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!window.empty()\
    \ && numbers[i] >= numbers[window.back()]) {\n            window.pop_back();\n\
    \        }\n        window.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[window.front()]);\n\
    \        }\n        if (window.front() == i - 2) {\n            window.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        long current_number\
    \ = numbers[i];\n        while (!max_queue.empty() && max_queue.back() < current_number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(current_number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> queue;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!queue.empty()\
    \ && numbers[i] >= numbers[queue.back()]) {\n            queue.pop_back();\n \
    \       }\n        queue.push_back(i);\n        if (i >= 3) {\n            result.push_back(numbers[queue.front()]);\n\
    \            if (queue.front() == i - 3) {\n                queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        if (i >= 2) {\n           \
    \ result.push_back(max_queue.front());\n            if (max_queue.front() == numbers[i\
    \ - 2]) {\n                max_queue.pop_front();\n            }\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        while\
    \ (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()]) {\n        \
    \    max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n     \
    \   if (i >= numbers.size() - 1) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \        }\n        if (max_queue.front() == i - numbers.size() + 1) {\n     \
    \       max_queue.pop_front();\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto i = 0; i < numbers.size();\
    \ ++i) {\n        while (!window.empty() && numbers[i] >= numbers[window.back()])\
    \ {\n            window.pop_back();\n        }\n        window.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[window.front()]);\n\
    \            if (window.front() == i - 2) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < *it) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(*it);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (long i\
    \ = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i - max_queue.front() >= 3)\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (auto number : numbers) {\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        result.push_back(window.front());\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < *it) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(*it);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i - max_queue.front() >= 3)\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (auto number : numbers) {\n        while (!stack.empty() &&\
    \ stack.top() < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ ++i) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::stack<long> stack;\n\
    \    for (auto number : numbers) {\n        while (!stack.empty() && stack.top()\
    \ < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::deque<long> window;\n    for (long i =\
    \ 0; i < numbers.size(); i++) {\n        while (!window.empty() && window.back()\
    \ < numbers[i]) {\n            window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::vector<long>::iterator it = numbers.begin();\n    long max\
    \ = *it;\n    result.push_back(max);\n    for (it = numbers.begin() + 1; it !=\
    \ numbers.end(); it++) {\n        if (*it > max) {\n            max = *it;\n \
    \       }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ ++i) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (auto i = 0; i < numbers.size(); ++i) {\n        while (!window.empty()\
    \ && numbers[i] >= numbers[window.back()]) {\n            window.pop_back();\n\
    \        }\n        window.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[window.front()]);\n\
    \            if (window.front() == i - 2) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i - max_queue.front() >= 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i - dq.front() >= 3) {\n            dq.pop_front();\n\
    \        }\n        result.push_back(numbers[dq.front()]);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::vector<long>::iterator it\
    \ = numbers.begin();\n    long max = *it;\n    result.push_back(max);\n    it++;\n\
    \    for (; it != numbers.end(); it++) {\n        if (*it > max) {\n         \
    \   max = *it;\n        }\n        result.push_back(max);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto number\
    \ : numbers) {\n        while (!max_queue.empty() && max_queue.back() < number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (long\
    \ i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        long current_number = numbers[i];\n\
    \        while (!max_queue.empty() && max_queue.back() < current_number) {\n \
    \           max_queue.pop_back();\n        }\n        max_queue.push_back(current_number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < *it) {\n            max_queue.pop_back();\n        }\n\
    \        max_queue.push_back(*it);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> max_numbers;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        max_numbers.push_back(max_queue.front());\n\
    \    }\n    return max_numbers;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!window.empty()\
    \ && window.back() < numbers[i]) {\n            window.pop_back();\n        }\n\
    \        window.push_back(numbers[i]);\n        if (i >= 3) {\n            result.push_back(window.front());\n\
    \            if (window.front() == numbers[i - 3]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 3) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (max_queue.empty()) {\n            max_queue.push_back(i);\n\
    \        } else {\n            while (!max_queue.empty() && numbers[max_queue.back()]\
    \ < numbers[i]) {\n                max_queue.pop_back();\n            }\n    \
    \        max_queue.push_back(i);\n        }\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!deque.empty()\
    \ && numbers[i] >= numbers[deque.back()]) {\n            deque.pop_back();\n \
    \       }\n        deque.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \        }\n        if (deque.front() == i - 2) {\n            deque.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_queue.empty())\
    \ {\n            max_queue.push_back(i);\n        } else {\n            while\
    \ (!max_queue.empty() && numbers[max_queue.back()] < numbers[i]) {\n         \
    \       max_queue.pop_back();\n            }\n            max_queue.push_back(i);\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n\
    \        while (!max_queue.empty() && max_queue.back() < *it) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(*it);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n \
    \       while (!stack.empty() && stack.top() < *it) {\n            stack.pop();\n\
    \        }\n        stack.push(*it);\n        result.push_back(stack.top());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto i = 0; i < numbers.size(); ++i) {\n        while\
    \ (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()]) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 2) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (i - max_queue.front() >= 3)\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (auto number : numbers) {\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        result.push_back(window.front());\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!stack.empty()\
    \ && numbers[i] > stack.top()) {\n            stack.pop();\n        }\n      \
    \  if (stack.empty()) {\n            result.push_back(-1);\n        } else {\n\
    \            result.push_back(stack.top());\n        }\n        stack.push(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::deque<long>\
    \ max_elements;\n  for (long number : numbers) {\n    while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n      max_elements.pop_back();\n    }\n\
    \    max_elements.push_back(number);\n    result.push_back(max_elements.front());\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ q;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!q.empty()\
    \ && numbers[i] >= numbers[q.back()]) {\n            q.pop_back();\n        }\n\
    \        q.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[q.front()]);\n\
    \        }\n        if (q.front() == i - 2) {\n            q.pop_front();\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (int i = 0; i < numbers.size(); i++) {\n        while\
    \ (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()]) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i - max_elements.front() >= 3) {\n            max_elements.pop_front();\n\
    \        }\n        result.push_back(numbers[max_elements.front()]);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ q;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!q.empty()\
    \ && numbers[i] >= numbers[q.back()]) {\n            q.pop_back();\n        }\n\
    \        q.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[q.front()]);\n\
    \        }\n        if (q.front() == i - 2) {\n            q.pop_front();\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n\
    \        if (window.empty()) {\n            window.push_back(*it);\n        }\
    \ else {\n            while (!window.empty() && window.back() < *it) {\n     \
    \           window.pop_back();\n            }\n            window.push_back(*it);\n\
    \        }\n        result.push_back(window.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto it\
    \ = numbers.begin(); it != numbers.end(); ++it) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < *it) {\n            max_queue.pop_back();\n        }\n\
    \        max_queue.push_back(*it);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "  std::vector<long> result;\n\
    \  std::deque<long> max_queue;\n  for (int i = 0; i < numbers.size(); i++) {\n\
    \    while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()]) {\n\
    \      max_queue.pop_back();\n    }\n    max_queue.push_back(i);\n    if (i -\
    \ max_queue.front() >= 3) {\n      max_queue.pop_front();\n    }\n    result.push_back(numbers[max_queue.front()]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_candidates;\n    for (auto number : numbers) {\n        while (!max_candidates.empty()\
    \ && max_candidates.back() < number) {\n            max_candidates.pop_back();\n\
    \        }\n        max_candidates.push_back(number);\n        result.push_back(max_candidates.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (int i = 0; i < numbers.size(); i++) {\n        while\
    \ (!max_elements.empty() && max_elements.back() < numbers[i]) {\n            max_elements.pop_back();\n\
    \        }\n        max_elements.push_back(numbers[i]);\n        result.push_back(max_elements.front());\n\
    \        if (max_elements.front() == numbers[i - 4]) {\n            max_elements.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_queue.empty())\
    \ {\n            max_queue.push_back(i);\n        } else {\n            while\
    \ (!max_queue.empty() && numbers[max_queue.back()] < numbers[i]) {\n         \
    \       max_queue.pop_back();\n            }\n            max_queue.push_back(i);\n\
    \        }\n        if (i >= 2) {\n            result.push_back(numbers[max_queue.front()]);\n\
    \            if (max_queue.front() == i - 2) {\n                max_queue.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (int i = 0; i < numbers.size(); i++) {\n        while\
    \ (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()]) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (i >= 3) {\n            result.push_back(numbers[max_elements.front()]);\n\
    \            if (max_elements.front() == i - 3) {\n                max_elements.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (auto number : numbers) {\n  \
    \      while (!deque.empty() && deque.back() < number) {\n            deque.pop_back();\n\
    \        }\n        deque.push_back(number);\n        result.push_back(deque.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (auto number : numbers) {\n        while (!deque.empty() &&\
    \ deque.back() < number) {\n            deque.pop_back();\n        }\n       \
    \ deque.push_back(number);\n        result.push_back(deque.front());\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 3) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 3) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i >= 2) {\n         \
    \   result.push_back(numbers[max_queue.front()]);\n            if (max_queue.front()\
    \ == i - 2) {\n                max_queue.pop_front();\n            }\n       \
    \ }\n    }\n    return result;", "  std::vector<long> result;\n  std::deque<long>\
    \ max_queue;\n  for (long i = 0; i < numbers.size(); ++i) {\n    while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n      max_queue.pop_back();\n\
    \    }\n    max_queue.push_back(i);\n    if (i >= 2) {\n      result.push_back(numbers[max_queue.front()]);\n\
    \      if (max_queue.front() == i - 2) {\n        max_queue.pop_front();\n   \
    \   }\n    }\n  }\n  return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); ++i) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!deque.empty()\
    \ && numbers[i] >= numbers[deque.back()]) {\n            deque.pop_back();\n \
    \       }\n        deque.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \        }\n        if (deque.front() == i - 2) {\n            deque.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_queue.empty())\
    \ {\n            max_queue.push_back(i);\n        } else {\n            while\
    \ (!max_queue.empty() && numbers[max_queue.back()] < numbers[i]) {\n         \
    \       max_queue.pop_back();\n            }\n            max_queue.push_back(i);\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> max_elements;\n\
    \    for (auto number : numbers) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < number) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto number\
    \ : numbers) {\n        while (!max_queue.empty() && max_queue.back() < number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \ std::vector<long> result;\n  std::deque<long> max_queue;\n  for (long i = 0;\
    \ i < numbers.size(); ++i) {\n    while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n      max_queue.pop_back();\n    }\n    max_queue.push_back(i);\n    if (i\
    \ >= 3) {\n      result.push_back(numbers[max_queue.front()]);\n      if (max_queue.front()\
    \ == i - 3) {\n        max_queue.pop_front();\n      }\n    }\n  }\n  return result;",
  "  std::vector<long> result;\n  std::deque<long> max_queue;\n  for (int i = 0; i\
    \ < numbers.size(); i++) {\n    while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n      max_queue.pop_back();\n    }\n    max_queue.push_back(i);\n    if (i\
    \ - max_queue.front() >= 3) {\n      max_queue.pop_front();\n    }\n    result.push_back(numbers[max_queue.front()]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::deque<long> max_queue;\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    while (!max_queue.empty() &&\
    \ numbers[i] >= numbers[max_queue.back()]) {\n      max_queue.pop_back();\n  \
    \  }\n    max_queue.push_back(i);\n    if (i >= 2) {\n      result.push_back(numbers[max_queue.front()]);\n\
    \      if (max_queue.front() == i - 2) {\n        max_queue.pop_front();\n   \
    \   }\n    }\n  }\n  return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (i - max_queue.front()\
    \ >= 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::deque<long>\
    \ max_queue;\n  for (int i = 0; i < numbers.size(); i++) {\n    while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n      max_queue.pop_back();\n\
    \    }\n    max_queue.push_back(i);\n    if (i - max_queue.front() >= 3) {\n \
    \     max_queue.pop_front();\n    }\n    result.push_back(numbers[max_queue.front()]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (auto number : numbers) {\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        result.push_back(window.front());\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!deque.empty()\
    \ && numbers[i] >= numbers[deque.back()]) {\n            deque.pop_back();\n \
    \       }\n        deque.push_back(i);\n        if (i - deque.front() >= 3) {\n\
    \            deque.pop_front();\n        }\n        result.push_back(numbers[deque.front()]);\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
