name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort an array of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
  \ sort_array(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["  std::vector<long> sorted;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal\
    \ = arr[i];\n    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n      \
    \  ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    sorted.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  // your code here\n  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones\
    \ = 0;\n    int decimal = arr[i];\n    while (arr[i] > 0) {\n      if (arr[i]\
    \ % 2 == 1) {\n        ones++;\n      }\n      arr[i] /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ decimal));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_and_decimal;\n  for (auto i : arr) {\n    int ones = 0;\n    while\
    \ (i) {\n      ones += i & 1;\n      i >>= 1;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (auto i : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n \
    \ return result;", "    std::vector<long> sorted_arr;\n    std::map<int, std::vector<long>>\
    \ map;\n    for (auto i : arr) {\n        int count = 0;\n        while (i) {\n\
    \            count += i & 1;\n            i >>= 1;\n        }\n        map[count].push_back(i);\n\
    \    }\n    for (auto i : map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        sorted_arr.insert(sorted_arr.end(), i.second.begin(), i.second.end());\n\
    \    }\n    return sorted_arr;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> ones_and_decimal;\n  for (auto i : arr) {\n    long ones = 0;\n    long\
    \ decimal = i;\n    while (decimal > 0) {\n      ones += decimal % 2;\n      decimal\
    \ /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n\
    \  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto i\
    \ : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n \
    \   while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ map;\n    for (auto i : arr) {\n        int count = 0;\n        while (i > 0)\
    \ {\n            if (i % 2 == 1) {\n                count++;\n            }\n\
    \            i /= 2;\n        }\n        map[count].push_back(i);\n    }\n   \
    \ for (auto i : map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        for (auto j : i.second) {\n            result.push_back(j);\n       \
    \ }\n    }\n    return result;", "    std::vector<long> sorted;\n    std::vector<long>\
    \ ones;\n    std::vector<long> zeros;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == 0) {\n            zeros.push_back(arr[i]);\n      \
    \  } else {\n            ones.push_back(arr[i]);\n        }\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    std::sort(zeros.begin(), zeros.end());\n    sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n    sorted.insert(sorted.end(), ones.begin(),\
    \ ones.end());\n    return sorted;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (auto i : arr) {\n        int count = 0;\n\
    \        while (i) {\n            count += i & 1;\n            i >>= 1;\n    \
    \    }\n        map[count].push_back(i);\n    }\n    for (auto i : map) {\n  \
    \      std::sort(i.second.begin(), i.second.end());\n        result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> ones_map;\n    for (auto i : arr)\
    \ {\n        int ones = 0;\n        for (int j = 0; j < 32; j++) {\n         \
    \   if (i & (1 << j)) {\n                ones++;\n            }\n        }\n \
    \       ones_map[ones].push_back(i);\n    }\n    for (auto i : ones_map) {\n \
    \       std::sort(i.second.begin(), i.second.end());\n        result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n    }\n    return result;", "  std::vector<long>\
    \ sorted;\n  for (long i = 0; i < arr.size(); i++) {\n    long ones = 0;\n   \
    \ long num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n     \
    \   ones++;\n      }\n      num /= 2;\n    }\n    sorted.push_back(ones);\n  }\n\
    \  std::sort(sorted.begin(), sorted.end());\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;",
  "  std::vector<std::pair<int, long>> v;\n  for (auto i : arr) {\n    int count =\
    \ 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n      }\n\
    \      i /= 2;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> result;\n  for (auto i : v) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    int\
    \ count = 0;\n    long num = arr[i];\n    while (num > 0) {\n      if (num % 2\
    \ == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    if (count ==\
    \ 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n \
    \ sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;", " \
    \ // your code here\n  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    int\
    \ count = 0;\n    long temp = arr[i];\n    while (temp > 0) {\n      if (temp\
    \ % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    if (count\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n \
    \ sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;", " \
    \ std::vector<std::pair<int, long>> v;\n  for (auto i : arr) {\n    int count\
    \ = 0;\n    long temp = i;\n    while (temp) {\n      count += temp & 1;\n   \
    \   temp >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> result;\n  for (auto i : v) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    long num = arr[i];\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    sorted.push_back(count);\n  }\n  std::sort(sorted.begin(), sorted.end());\n\
    \  return sorted;", "    std::vector<long> res;\n    std::vector<std::pair<int,\
    \ long>> ones_dec;\n    for (long i : arr) {\n        int ones = 0;\n        while\
    \ (i > 0) {\n            ones += i % 2;\n            i /= 2;\n        }\n    \
    \    ones_dec.push_back(std::make_pair(ones, i));\n    }\n    std::sort(ones_dec.begin(),\
    \ ones_dec.end());\n    for (auto i : ones_dec) {\n        res.push_back(i.second);\n\
    \    }\n    return res;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto i : arr) {\n    int ones = std::bitset<32>(i).count();\n\
    \    ones_map[ones].push_back(i);\n  }\n  for (auto i : ones_map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::map<int, std::vector<long>>\
    \ ones;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n   \
    \   if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    ones[count].push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ sorted;", "  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n   \
    \   count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n\
    \  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n  }\n\
    \  return res;", "  std::vector<long> sorted;\n  std::vector<std::pair<int, long>>\
    \ ones;\n  for (auto i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32;\
    \ j++) {\n      if (i & (1 << j)) {\n        count++;\n      }\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    sorted.push_back(i.second);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n\
    \    int onesA = std::bitset<32>(a).count();\n    int onesB = std::bitset<32>(b).count();\n\
    \    return onesA == onesB ? a < b : onesA < onesB;\n  });\n  return arr;", " \
    \   std::vector<long> res;\n    std::map<int, std::vector<long>> m;\n    for (auto\
    \ i : arr) {\n        int count = 0;\n        while (i) {\n            count +=\
    \ i & 1;\n            i >>= 1;\n        }\n        m[count].push_back(i);\n  \
    \  }\n    for (auto i : m) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        res.insert(res.end(), i.second.begin(), i.second.end());\n    }\n   \
    \ return res;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto i : arr) {\n    int ones = 0;\n    while (i > 0) {\n\
    \      ones += i & 1;\n      i >>= 1;\n    }\n    ones_map[ones].push_back(i);\n\
    \  }\n  for (auto it = ones_map.begin(); it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    result.insert(result.end(), it->second.begin(), it->second.end());\n\
    \  }\n  return result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n      if\
    \ (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    m[count].push_back(i);\n\
    \  }\n  for (auto it = m.begin(); it != m.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (auto i : it->second) {\n      res.push_back(i);\n\
    \    }\n  }\n  return res;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n   \
    \     count++;\n      }\n      num /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i].second);\n  }\n  return\
    \ sorted;", "    std::vector<long> sorted;\n    std::map<int, std::vector<long>>\
    \ map;\n    for (auto i : arr) {\n        int count = 0;\n        while (i > 0)\
    \ {\n            count += i & 1;\n            i >>= 1;\n        }\n        map[count].push_back(i);\n\
    \    }\n    for (auto i : map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n    }\n\
    \    return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> ones_and_decimal;\n  for (auto i : arr) {\n    long ones = 0;\n    long\
    \ decimal = i;\n    while (decimal > 0) {\n      ones += decimal % 2;\n      decimal\
    \ /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n\
    \  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto i\
    \ : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  // your code here\n  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto i : arr) {\n    int ones = std::bitset<64>(i).count();\n\
    \    ones_map[ones].push_back(i);\n  }\n  for (auto i : ones_map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n  for (long i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_arr_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  std::sort(sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(), sorted_arr_ones.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \  return sorted_arr;", "  std::vector<std::pair<int, long>> v;\n  for (auto i\
    \ : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n     \
    \ i >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> ans;\n  for (auto i : v) {\n    ans.push_back(i.second);\n\
    \  }\n  return ans;", "  std::vector<long> sorted;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto i : arr) {\n    int ones = std::bitset<32>(i).count();\n\
    \    ones_map[ones].push_back(i);\n  }\n  for (auto i : ones_map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n      temp\
    \ >>= 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  // your code here\n  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std", " \
    \ std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n\
    \    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n\
    \      temp /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::map<int, std::vector<long>> m;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    long num = arr[i];\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    m[count].push_back(arr[i]);\n  }\n  for (auto it = m.begin(); it != m.end();\
    \ it++) {\n    std::sort(it->second.begin(), it->second.end());\n    for (int\
    \ i = 0; i < it->second.size(); i++) {\n      res.push_back(it->second[i]);\n\
    \    }\n  }\n  return res;", "  std::vector<std::pair<int, int>> ones;\n  for\
    \ (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n\
    \      i >>= 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n \
    \ std::sort(ones.begin(), ones.end());\n  std::vector<long> result;\n  for (auto\
    \ i : ones) {\n    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::map<int, std::vector<long>> ones_map;\n  for (auto num : arr)\
    \ {\n    int ones = 0;\n    while (num) {\n      ones += num & 1;\n      num >>=\
    \ 1;\n    }\n    ones_map[ones].push_back(num);\n  }\n  for (auto it = ones_map.begin();\
    \ it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    sorted.insert(sorted.end(), it->second.begin(), it->second.end());\n  }\n\
    \  return sorted;", "  std::vector<std::pair<int, long>> v;\n  for (auto i : arr)\
    \ {\n    int count = 0;\n    for (int j = 0; j < 32; j++) {\n      if (i & (1\
    \ << j)) {\n        count++;\n      }\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for\
    \ (auto i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "    std::vector<long>\
    \ sorted_arr;\n    std::vector<std::pair<int, long>> ones_count_arr;\n    for\
    \ (auto i : arr) {\n        int ones_count = 0;\n        while (i) {\n       \
    \     ones_count += i & 1;\n            i >>= 1;\n        }\n        ones_count_arr.push_back(std::make_pair(ones_count,\
    \ i));\n    }\n    std::sort(ones_count_arr.begin(), ones_count_arr.end());\n\
    \    for (auto i : ones_count_arr) {\n        sorted_arr.push_back(i.second);\n\
    \    }\n    return sorted_arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> v;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n\
    \      temp /= 2;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (auto i : v) {\n    result.push_back(i.second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n\
    \  std::vector<long> zeros_arr;\n  for (long i = 0; i < arr.size(); i++) {\n \
    \   if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else {\n   \
    \   ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(), ones_arr.end());\n\
    \  for (long i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (long i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;",
  "  std::vector<std::pair<int, long>> ones_and_values;\n  for (auto i : arr) {\n\
    \    int ones = 0;\n    while (i) {\n      ones += i % 2;\n      i /= 2;\n   \
    \ }\n    ones_and_values.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_and_values.begin(),\
    \ ones_and_values.end());\n  std::vector<long> result;\n  for (auto i : ones_and_values)\
    \ {\n    result.push_back(i.second);\n  }\n  return result;", "    std::vector<long>\
    \ sorted;\n    std::vector<std::pair<long, long>> ones;\n    for (auto i : arr)\
    \ {\n        long count = 0;\n        long num = i;\n        while (num) {\n \
    \           count += num & 1;\n            num >>= 1;\n        }\n        ones.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (auto i : ones)\
    \ {\n        sorted.push_back(i.second);\n    }\n    return sorted;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    res.push_back(ones[i].second);\n\
    \  }\n  return res;", "    std::sort(arr.begin(), arr.end(), [](long a, long b)\
    \ {\n        int count_a = std::bitset<32>(a).count();\n        int count_b =\
    \ std::bitset<32>(b).count();\n        return count_a == count_b ? a < b : count_a\
    \ < count_b;\n    });\n    return arr;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long>::iterator it;\n  for (it = arr.begin(); it\
    \ != arr.end(); it++) {\n    long num = *it;\n    long count = 0;\n    while (num\
    \ > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n\
    \    }\n    ones_count.push_back(count);\n  }\n  std::vector<long>::iterator it1;\n\
    \  std::vector<long>::iterator it2;\n  for (it1 = ones_count.begin(); it1 != ones_count.end();\
    \ it1++) {\n    long min = *it1;\n    long index = 0;\n    for (it2 = it1; it2\
    \ != ones_count.end(); it2++) {\n      if (*it2 < min) {\n        min = *it2;\n\
    \        index = it2 - ones_count.begin();\n      }\n    }\n    long temp = *it1;\n\
    \    *it1 = min;\n    ones_count[index] = temp;\n    temp = arr[it1 - ones_count.begin()];\n\
    \    arr[it1 - ones_count.begin()] = arr[index];\n    arr[index] = temp;\n  }\n\
    \  return arr;", "  std::vector<long> sorted;\n  std::vector<std::pair<int, long>>\
    \ ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while (num\
    \ > 0) {\n      ones += num % 2;\n      num /= 2;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    sorted.push_back(pair.second);\n  }\n  return\
    \ sorted;", "    std::vector<long> sorted;\n    std::vector<std::pair<int, long>>\
    \ ones_and_values;\n    for (auto value : arr) {\n        int ones = 0;\n    \
    \    while (value > 0) {\n            ones += value % 2;\n            value /=\
    \ 2;\n        }\n        ones_and_values.push_back(std::make_pair(ones, value));\n\
    \    }\n    std::sort(ones_and_values.begin(), ones_and_values.end());\n    for\
    \ (auto pair : ones_and_values) {\n        sorted.push_back(pair.second);\n  \
    \  }\n    return sorted;", "    std::vector<std::pair<int, int>> v;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        int ones = 0;\n        int n = arr[i];\n\
    \        while (n) {\n            ones += n & 1;\n            n >>= 1;\n     \
    \   }\n        v.push_back(std::make_pair(ones, arr[i]));\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::vector<long> res;\n    for (int i = 0; i < v.size(); i++)\
    \ {\n        res.push_back(v[i].second);\n    }\n    return res;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;",
  "  std::vector<long> result;\n  std::vector<std::pair<long, int>> ones;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i > 0) {\n      count += i % 2;\n\
    \      i /= 2;\n    }\n    ones.push_back(std::make_pair(i, count));\n  }\n  std::sort(ones.begin(),\
    \ ones.end(), [](std::pair<long, int> a, std::pair<long, int> b) {\n    if (a.second\
    \ == b.second) {\n      return a.first < b.first;\n    }\n    return a.second\
    \ < b.second;\n  });\n  for (auto i : ones) {\n    result.push_back(i.first);\n\
    \  }\n  return result;", "  std::vector<std::pair<int, long>> ones_and_nums;\n\
    \  for (auto num : arr) {\n    int ones = 0;\n    while (num) {\n      ones +=\
    \ num & 1;\n      num >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  std::vector<long>\
    \ ans;\n  for (auto p : ones_and_nums) {\n    ans.push_back(p.second);\n  }\n\
    \  return ans;", "  std::vector<std::pair<int, long>> v;\n  for (auto i : arr)\
    \ {\n    int count = 0;\n    long temp = i;\n    while (temp > 0) {\n      if\
    \ (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n \
    \ for (auto i : v) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> ones_map;\n  for\
    \ (long i : arr) {\n    int ones = 0;\n    while (i > 0) {\n      ones += i %\
    \ 2;\n      i /= 2;\n    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto\
    \ it = ones_map.begin(); it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    result.insert(result.end(), it->second.begin(), it->second.end());\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_arr;\n  std::vector<long> zeros_arr;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else\
    \ {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  for (int i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (int i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int onesA = std::bitset<32>(a).count();\n    int onesB = std::bitset<32>(b).count();\n\
    \    return onesA == onesB ? a < b : onesA < onesB;\n  });\n  return arr;", " \
    \ // your code here\n  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n    \
    \  if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_ones;\n\
    \  std::vector<long> sorted_arr_zeros;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    int count = 0;\n    long num = arr[i];\n    while (num > 0) {\n     \
    \ if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n   \
    \ if (count == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n    } else {\n\
    \      sorted_arr_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  std::sort(sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(), sorted_arr_ones.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \  return sorted_arr;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int ones = std::bitset<32>(i).count();\n    map[ones].push_back(i);\n  }\n\
    \  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n  \
    \  sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ sorted;", "  std::vector<long> res;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count += i\
    \ & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> ones_map;\n  for (long i : arr)\
    \ {\n    int ones = 0;\n    while (i > 0) {\n      ones += i % 2;\n      i /=\
    \ 2;\n    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto it = ones_map.begin();\
    \ it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    result.insert(result.end(), it->second.begin(), it->second.end());\n  }\n\
    \  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n\
    \    int ones_a = std::bitset<32>(a).count();\n    int ones_b = std::bitset<32>(b).count();\n\
    \    return ones_a < ones_b || (ones_a == ones_b && a < b);\n  });\n  return arr;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> m;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto i : m) {\n \
    \   std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n \
    \   }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int countA = std::bitset<32>(a).count();\n    int countB = std::bitset<32>(b).count();\n\
    \    return countA == countB ? a < b : countA < countB;\n  });\n  return arr;",
  "  std::vector<long> result;\n  std::vector<std::pair<long, long>> temp;\n  for\
    \ (long i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    temp.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(temp.begin(), temp.end());\n  for (long i = 0; i < temp.size();\
    \ i++) {\n    result.push_back(temp[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;",
  "    std::vector<long> result;\n    std::vector<std::pair<int, int>> ones_and_decimal;\n\
    \    for (auto i : arr) {\n        int ones = 0;\n        while (i) {\n      \
    \      ones += i % 2;\n            i /= 2;\n        }\n        ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n    }\n    std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \    for (auto i : ones_and_decimal) {\n        result.push_back(i.second);\n\
    \    }\n    return result;", "    std::vector<long> sorted;\n    std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  int ones = 0;\n        int decimal = arr[i];\n        while (decimal > 0) {\n\
    \            if (decimal % 2 == 1) {\n                ones++;\n            }\n\
    \            decimal /= 2;\n        }\n        ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n    }\n    std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \    for (int i = 0; i < ones_and_decimal.size(); i++) {\n        sorted.push_back(ones_and_decimal[i].second);\n\
    \    }\n    return sorted;", "  std::vector<std::pair<int, long>> v;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i > 0) {\n      count += i % 2;\n\
    \      i /= 2;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> res;\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_and_values;\n  for (auto value : arr) {\n    int ones = 0;\n   \
    \ while (value > 0) {\n      ones += value % 2;\n      value /= 2;\n    }\n  \
    \  ones_and_values.push_back(std::make_pair(ones, value));\n  }\n  std::sort(ones_and_values.begin(),\
    \ ones_and_values.end());\n  for (auto pair : ones_and_values) {\n    result.push_back(pair.second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (auto i : arr) {\n    int count = 0;\n    long\
    \ temp = i;\n    while (temp > 0) {\n      count += temp % 2;\n      temp /= 2;\n\
    \    }\n    if (count == 0)\n      zeros.push_back(i);\n    else\n      ones.push_back(i);\n\
    \  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(), ones.end());\n\
    \  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(),\
    \ ones.begin(), ones.end());\n  return sorted;", "  std::vector<long> sorted;\n\
    \  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    int count = 0;\n    long num = arr[i];\n    while (num\
    \ > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n\
    \    }\n    if (count == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n\
    \  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(), zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return\
    \ sorted;", "    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ ones_map;\n    for (auto i : arr) {\n        int ones = 0;\n        long temp\
    \ = i;\n        while (temp > 0) {\n            if (temp % 2 == 1) {\n       \
    \         ones++;\n            }\n            temp /= 2;\n        }\n        ones_map[ones].push_back(i);\n\
    \    }\n    for (auto i : ones_map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        for (auto j : i.second) {\n            result.push_back(j);\n       \
    \ }\n    }\n    return result;", "  std::vector<long> result;\n  std::map<int,\
    \ std::vector<long>> ones_map;\n  for (auto i : arr) {\n    int ones = 0;\n  \
    \  while (i > 0) {\n      ones += i & 1;\n      i >>= 1;\n    }\n    ones_map[ones].push_back(i);\n\
    \  }\n  for (auto i : ones_map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  // your\
    \ code here\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n      if (i\
    \ % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "    std::vector<long> res;\n    std::map<int, std::vector<long>>\
    \ m;\n    for (auto i : arr) {\n        int count = 0;\n        while (i) {\n\
    \            count += i & 1;\n            i >>= 1;\n        }\n        m[count].push_back(i);\n\
    \    }\n    for (auto i : m) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        res.insert(res.end(), i.second.begin(), i.second.end());\n    }\n   \
    \ return res;", "    std::vector<std::pair<long, long>> v;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        long count = 0;\n        long num = arr[i];\n\
    \        while (num) {\n            count += num & 1;\n            num >>= 1;\n\
    \        }\n        v.push_back(std::make_pair(count, arr[i]));\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::vector<long> res;\n    for (long i = 0; i < v.size(); i++)\
    \ {\n        res.push_back(v[i].second);\n    }\n    return res;", "  std::vector<long>\
    \ sorted;\n  std::map<int, std::vector<long>> ones_map;\n  for (auto i : arr)\
    \ {\n    int ones = std::bitset<32>(i).count();\n    ones_map[ones].push_back(i);\n\
    \  }\n  for (auto i : ones_map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ sorted;", "  std::vector<long> sorted_arr;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto num : arr) {\n    int ones = 0;\n    while (num > 0)\
    \ {\n      ones += num % 2;\n      num /= 2;\n    }\n    ones_map[ones].push_back(num);\n\
    \  }\n  for (auto it = ones_map.begin(); it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    sorted_arr.insert(sorted_arr.end(), it->second.begin(),\
    \ it->second.end());\n  }\n  return sorted_arr;", "  std::vector<long> sorted_arr;\n\
    \  std::map<int, std::vector<long>> ones_map;\n  for (auto i : arr) {\n    int\
    \ ones = 0;\n    long num = i;\n    while (num) {\n      ones += num & 1;\n  \
    \    num >>= 1;\n    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto i :\
    \ ones_map) {\n    std::sort(i.second.begin(), i.second.end());\n    sorted_arr.insert(sorted_arr.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return sorted_arr;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n\
    \      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::map<int, std::vector<long>> ones_map;\n  for (long i : arr)\
    \ {\n    int ones = count_ones(i);\n    ones_map[ones].push_back(i);\n  }\n  for\
    \ (auto it = ones_map.begin(); it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (long i : it->second) {\n      sorted.push_back(i);\n\
    \    }\n  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ long>> ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while\
    \ (num > 0) {\n      ones += num % 2;\n      num /= 2;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    sorted.push_back(pair.second);\n  }\n  return\
    \ sorted;", "    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ ones_map;\n    for (auto i : arr) {\n        int ones = 0;\n        while (i)\
    \ {\n            ones += i & 1;\n            i >>= 1;\n        }\n        ones_map[ones].push_back(i);\n\
    \    }\n    for (auto i : ones_map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        result.insert(result.end(), i.second.begin(), i.second.end());\n    }\n\
    \    return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> twos;\n  std::vector<long> threes;\n\
    \  std::vector<long> fours;\n  std::vector<long> fives;\n  std::vector<long> sixes;\n\
    \  std::vector<long> sevens;\n  std::vector<long> eights;\n  std::vector<long>\
    \ nines;\n  std::vector<long> tens;\n  std::vector<long> elevens;\n  std::vector<long>\
    \ twelves;\n  std::vector<long> thirteens;\n  std::vector<long> fourteens;\n \
    \ std::vector<long> fifteens;\n  std::vector<long> sixteens;\n  std::vector<long>\
    \ seventeens;\n  std::vector<long> eigteens;\n  std::vector<long> ninteens;\n\
    \  std::vector<long> twenty;\n  std::vector<long> twentyone;\n  std::vector<long>\
    \ twentytwo;\n  std::vector<long> twentythree;\n  std::vector<long> twentyfour;\n\
    \  std::vector<long> twentyfive;\n  std::vector<long> twentysix;\n  std::vector<long>\
    \ twentyseven;\n  std::vector<long> twentyeight;\n  std::vector<long> twentynine;\n\
    \  std::vector<long> thirty;\n  std::vector<long> thirtyone;\n  std::vector<long>\
    \ thirtytwo;\n  std::vector<long> thirtythree;\n  std::vector<long> thirtyfour;\n\
    \  std::vector<long> thirtyfive;\n  std::vector<long> thirtysix;\n  std::vector<long>\
    \ thirtyseven;\n  std::vector<long> thirtyeight;\n  std::vector<long> thirtynine;\n\
    \  std::vector<long> forty;\n  std::vector<long> fortyone;\n  std::vector<long>\
    \ fortytwo;\n  std::vector<long> fortythree;\n  std::vector<long> fortyfour",
  "    std::vector<long> res;\n    std::vector<std::pair<int, long>> ones;\n    for\
    \ (auto i : arr) {\n        int count = 0;\n        long tmp = i;\n        while\
    \ (tmp) {\n            count += tmp & 1;\n            tmp >>= 1;\n        }\n\
    \        ones.push_back(std::make_pair(count, i));\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    for (auto i : ones) {\n        res.push_back(i.second);\n\
    \    }\n    return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<std::pair<int, long>> ones_and_nums;\n  for (auto num\
    \ : arr) {\n    int ones = 0;\n    while (num) {\n      ones += num & 1;\n   \
    \   num >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones, num));\n\
    \  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for (auto pair\
    \ : ones_and_nums) {\n    sorted.push_back(pair.second);\n  }\n  return sorted;",
  "  std::vector<long> sorted;\n  std::vector<std::pair<int, long>> ones;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    long num = i;\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    sorted.push_back(i.second);\n  }\n\
    \  return sorted;", "    std::vector<long> sorted;\n    std::vector<long> ones;\n\
    \    std::vector<long> zeros;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] == 0) {\n            zeros.push_back(arr[i]);\n        } else\
    \ {\n            ones.push_back(arr[i]);\n        }\n    }\n    std::sort(zeros.begin(),\
    \ zeros.end());\n    std::sort(ones.begin(), ones.end());\n    sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n    sorted.insert(sorted.end(), ones.begin(),\
    \ ones.end());\n    return sorted;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> m;\n    for (auto i : arr) {\n        int count = 0;\n  \
    \      while (i > 0) {\n            if (i % 2 == 1) {\n                count++;\n\
    \            }\n            i /= 2;\n        }\n        m[count].push_back(i);\n\
    \    }\n    for (auto i : m) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        for (auto j : i.second) {\n            result.push_back(j);\n       \
    \ }\n    }\n    return result;", "  std::vector<std::pair<int, int>> v;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n\
    \    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n      temp\
    \ = temp >> 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n\
    \  std::sort(v.begin(), v.end());\n  std::vector<long> ans;\n  for (int i = 0;\
    \ i < v.size(); i++) {\n    ans.push_back(v[i].second);\n  }\n  return ans;",
  "  std::vector<long> sorted_arr;\n  std::vector<std::pair<int, long>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    int ones = 0;\n    long decimal = i;\n    while (decimal\
    \ > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n      }\n      decimal\
    \ /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n\
    \  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto i\
    \ : ones_and_decimal) {\n    sorted_arr.push_back(i.second);\n  }\n  return sorted_arr;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> ones_map;\n  for\
    \ (auto i : arr) {\n    int ones = 0;\n    while (i) {\n      ones += i & 1;\n\
    \      i >>= 1;\n    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto i :\
    \ ones_map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "    std::vector<std::pair<int,\
    \ long>> v;\n    for (auto i : arr) {\n        int count = 0;\n        while (i\
    \ > 0) {\n            if (i % 2 == 1) {\n                count++;\n          \
    \  }\n            i /= 2;\n        }\n        v.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<long> result;\n\
    \    for (auto i : v) {\n        result.push_back(i.second);\n    }\n    return\
    \ result;", "    std::vector<long> sorted_arr;\n    std::vector<std::pair<int,\
    \ long>> ones_and_decimal;\n    for (auto i : arr) {\n        int ones = 0;\n\
    \        while (i > 0) {\n            ones += i % 2;\n            i /= 2;\n  \
    \      }\n        ones_and_decimal.push_back(std::make_pair(ones, i));\n    }\n\
    \    std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n    for (auto\
    \ i : ones_and_decimal) {\n        sorted_arr.push_back(i.second);\n    }\n  \
    \  return sorted_arr;", "    std::vector<long> sorted;\n    std::vector<long>\
    \ ones;\n    std::vector<long> zeros;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        long count = 0;\n        long num = arr[i];\n        while (num >\
    \ 0) {\n            if (num % 2 == 1) {\n                count++;\n          \
    \  }\n            num /= 2;\n        }\n        if (count == 0) {\n          \
    \  zeros.push_back(arr[i]);\n        } else {\n            ones.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(zeros.begin(), zeros.end());\n    std::sort(ones.begin(),\
    \ ones.end());\n    for (long i = 0; i < zeros.size(); i++) {\n        sorted.push_back(zeros[i]);\n\
    \    }\n    for (long i = 0; i < ones.size(); i++) {\n        sorted.push_back(ones[i]);\n\
    \    }\n    return sorted;", "  std::vector<std::pair<int, int>> vec;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp) {\n    \
    \  count += temp & 1;\n      temp >>= 1;\n    }\n    vec.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(vec.begin(), vec.end());\n  std::vector<long> res;\n\
    \  for (auto i : vec) {\n    res.push_back(i.second);\n  }\n  return res;", " \
    \ std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long>\
    \ sorted_arr_zeros;\n  std::vector<long> sorted_arr_zeros_ones;\n  std::vector<long>\
    \ sorted_arr_ones_zeros;\n  std::vector<long> sorted_arr_zeros_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_ones;\n  std::vector<long> sorted_arr_zeros_ones_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_zeros_ones;\n  std::vector<long> sorted_arr_zeros_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones;\n  std::vector<long> sorted_arr_zeros_ones_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_ones;\n  std::vector<long> sorted_arr_zeros_zeros_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones;\n  std::vector<long> sorted_arr_zeros_ones_zeros_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_ones_ones;\n  std::vector<long>\
    \ sorted_arr_zeros_zeros_zeros_zeros_zeros;\n  std::vector<long> sorted_arr_ones_ones_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_zeros_zeros_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_zeros_ones_ones_ones_ones;\n  std::vector<long> sorted_arr_zeros_zeros_zeros_zeros_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones;\n  std::vector<long>\
    \ sorted_arr_zeros_ones_zeros_zeros_zeros_zeros_zeros", "  std::vector<std::pair<int,\
    \ long>> v;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n \
    \ for (auto i : v) {\n    result.push_back(i.second);\n  }\n  return result;",
  "    std::vector<long> sorted_arr;\n    std::vector<long> ones_count;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        int count = 0;\n        long num = arr[i];\n\
    \        while (num) {\n            count += num & 1;\n            num >>= 1;\n\
    \        }\n        ones_count.push_back(count);\n    }\n    std::vector<long>\
    \ sorted_ones_count = ones_count;\n    std::sort(sorted_ones_count.begin(), sorted_ones_count.end());\n\
    \    for (long i = 0; i < sorted_ones_count.size(); i++) {\n        for (long\
    \ j = 0; j < ones_count.size(); j++) {\n            if (sorted_ones_count[i] ==\
    \ ones_count[j]) {\n                sorted_arr.push_back(arr[j]);\n          \
    \      ones_count[j] = -1;\n                break;\n            }\n        }\n\
    \    }\n    return sorted_arr;", "  // your code here\n  std::vector<long> result;\n\
    \  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    int count = 0;\n    long temp = arr[i];\n    while (temp\
    \ > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /=\
    \ 2;\n    }\n    if (count == 0) {\n      zeros.push_back(arr[i]);\n    } else\
    \ {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n\
    \  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < zeros.size(); i++)\
    \ {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal = arr[i];\n\
    \    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n \
    \     }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    sorted.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal = arr[i];\n\
    \    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n \
    \     }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  result.insert(result.end(), zeros.begin(), zeros.end());\n\
    \  result.insert(result.end(), ones.begin(), ones.end());\n  return result;",
  "  std::vector<long> sorted;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n\
    \        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      sorted.push_back(j);\n    }\n  }\n  return\
    \ sorted;", "    std::vector<long> sorted;\n    std::vector<long> one_count;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        int\
    \ num = arr[i];\n        while (num > 0) {\n            if (num % 2 == 1) {\n\
    \                count++;\n            }\n            num /= 2;\n        }\n \
    \       one_count.push_back(count);\n    }\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        int min = INT_MAX;\n        int min_index = 0;\n        for\
    \ (int j = 0; j < arr.size(); j++) {\n            if (one_count[j] < min) {\n\
    \                min = one_count[j];\n                min_index = j;\n       \
    \     }\n        }\n        sorted.push_back(arr[min_index]);\n        one_count[min_index]\
    \ = INT_MAX;\n    }\n    return sorted;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> result;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num = arr[i];\n  \
    \  while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n \
    \     num /= 2;\n    }\n    if (count == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  return result;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto &i : arr) {\n    int count = 0;\n    long num = i;\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto &i : ones) {\n\
    \    sorted.push_back(i.second);\n  }\n  return sorted;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n \
    \   }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<std::pair<int, long>> v;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> res;\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "    std::vector<long> sorted_arr;\n    std::vector<std::pair<int,\
    \ int>> ones_decimal_pairs;\n    for (auto num : arr) {\n        int ones = 0;\n\
    \        int decimal = num;\n        while (num > 0) {\n            ones += num\
    \ % 2;\n            num /= 2;\n        }\n        ones_decimal_pairs.push_back(std::make_pair(ones,\
    \ decimal));\n    }\n    std::sort(ones_decimal_pairs.begin(), ones_decimal_pairs.end());\n\
    \    for (auto pair : ones_decimal_pairs) {\n        sorted_arr.push_back(pair.second);\n\
    \    }\n    return sorted_arr;", "  std::vector<std::pair<long, long>> v;\n  for\
    \ (auto i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32; j++) {\n \
    \     if (i & (1 << j)) {\n        count++;\n      }\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n \
    \ for (auto i : v) {\n    result.push_back(i.second);\n  }\n  return result;",
  "    std::vector<long> sorted;\n    std::vector<std::pair<int, long>> ones;\n  \
    \  for (auto i : arr) {\n        int count = 0;\n        long temp = i;\n    \
    \    while (temp > 0) {\n            count += temp % 2;\n            temp /= 2;\n\
    \        }\n        ones.push_back(std::make_pair(count, i));\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    for (auto i : ones) {\n        sorted.push_back(i.second);\n\
    \    }\n    return sorted;", "    std::vector<long> sorted;\n    std::vector<std::pair<int,\
    \ long>> ones;\n    for (auto i : arr) {\n        int count = 0;\n        while\
    \ (i > 0) {\n            count += i & 1;\n            i >>= 1;\n        }\n  \
    \      ones.push_back(std::make_pair(count, i));\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    for (auto i : ones) {\n        sorted.push_back(i.second);\n\
    \    }\n    return sorted;", "  // your code here\n  std::vector<long> result;\n\
    \  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n    int count\
    \ = 0;\n    while (i > 0) {\n      count += i & 1;\n      i >>= 1;\n    }\n  \
    \  map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<std::pair<long, long>> v;\n  for (auto\
    \ i : arr) {\n    long count = 0;\n    while (i) {\n      count += i & 1;\n  \
    \    i >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> result;\n  for (auto i : v) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "    std::vector<long> res;\n    std::map<int, std::vector<long>>\
    \ m;\n    for (auto i : arr) {\n        int count = 0;\n        while (i) {\n\
    \            count += i & 1;\n            i >>= 1;\n        }\n        m[count].push_back(i);\n\
    \    }\n    for (auto i : m) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        res.insert(res.end(), i.second.begin(), i.second.end());\n    }\n   \
    \ return res;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while\
    \ (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_arr;\n  std::vector<long> zeros_arr;\n  std::vector<long>::iterator it;\n\
    \  for (it = arr.begin(); it != arr.end(); it++) {\n    if (std::bitset<32>(*it).count()\
    \ == 0) {\n      zeros_arr.push_back(*it);\n    } else {\n      ones_arr.push_back(*it);\n\
    \    }\n  }\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  sorted_arr.insert(sorted_arr.end(), zeros_arr.begin(), zeros_arr.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), ones_arr.begin(), ones_arr.end());\n  return\
    \ sorted_arr;", "    std::vector<std::pair<int, long>> pairs;\n    for (auto i\
    \ : arr) {\n        int ones = 0;\n        long n = i;\n        while (n > 0)\
    \ {\n            ones += n % 2;\n            n /= 2;\n        }\n        pairs.push_back(std::make_pair(ones,\
    \ i));\n    }\n    std::sort(pairs.begin(), pairs.end());\n    std::vector<long>\
    \ result;\n    for (auto i : pairs) {\n        result.push_back(i.second);\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::map<long,\
    \ std::vector<long>> map;\n    for (auto i : arr) {\n        map[__builtin_popcount(i)].push_back(i);\n\
    \    }\n    for (auto i : map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        result.insert(result.end(), i.second.begin(), i.second.end());\n    }\n\
    \    return result;", "  std::vector<long> sorted_arr;\n  std::vector<std::pair<int,\
    \ long>> ones_and_decimal;\n  for (auto i : arr) {\n    int ones = 0;\n    while\
    \ (i > 0) {\n      ones += i % 2;\n      i /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (auto i : ones_and_decimal) {\n    sorted_arr.push_back(i.second);\n  }\n\
    \  return sorted_arr;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long>\
    \ sorted_zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    long num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n  \
    \      count++;\n      }\n      num /= 2;\n    }\n    if (count == 0) {\n    \
    \  sorted_zeros.push_back(arr[i]);\n    } else {\n      sorted_ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted_ones.begin(), sorted_ones.end());\n  std::sort(sorted_zeros.begin(),\
    \ sorted_zeros.end());\n  sorted.insert(sorted.end(), sorted_ones.begin(), sorted_ones.end());\n\
    \  sorted.insert(sorted.end(), sorted_zeros.begin(), sorted_zeros.end());\n  return\
    \ sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count += i\
    \ & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> ones_map;\n  for (auto num : arr)\
    \ {\n    int ones = 0;\n    while (num > 0) {\n      if (num % 2 == 1) {\n   \
    \     ones++;\n      }\n      num /= 2;\n    }\n    ones_map[ones].push_back(num);\n\
    \  }\n  for (auto it = ones_map.begin(); it != ones_map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    result.insert(result.end(), it->second.begin(), it->second.end());\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0)\
    \ {\n      if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  std::vector<long> sorted;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto& i : arr) {\n    int ones = 0;\n    long n = i;\n   \
    \ while (n > 0) {\n      if (n % 2 == 1) {\n        ones++;\n      }\n      n\
    \ /= 2;\n    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto& i : ones_map)\
    \ {\n    std::sort(i.second.begin(), i.second.end());\n    sorted.insert(sorted.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return sorted;", "  // your code\
    \ here\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      zeros.push_back(i);\n    } else {\n   \
    \   ones.push_back(i);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n \
    \ for (auto i : ones) {\n    result.push_back(i);\n  }\n  for (auto i : zeros)\
    \ {\n    result.push_back(i);\n  }\n  return result;", "  std::vector<long> result;\n\
    \  std::vector<std::pair<int, int>> ones_and_decimal;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int ones = 0;\n    int decimal = arr[i];\n    while (decimal > 0)\
    \ {\n      if (decimal % 2 == 1) {\n        ones++;\n      }\n      decimal /=\
    \ 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones, arr[i]));\n \
    \ }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (int\
    \ i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "    std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n        int countA = std::bitset<64>(a).count();\n        int countB =\
    \ std::bitset<64>(b).count();\n        if (countA == countB) {\n            return\
    \ a < b;\n        }\n        return countA < countB;\n    });\n    return arr;",
  "  std::vector<std::pair<int, long>> v;\n  for (auto i : arr) {\n    int ones =\
    \ std::bitset<32>(i).count();\n    v.push_back(std::make_pair(ones, i));\n  }\n\
    \  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n  for (auto i\
    \ : v) {\n    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (long i : arr) {\n    if (i == 0) {\n      zeros.push_back(i);\n    } else\
    \ {\n      ones.push_back(i);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(),\
    \ ones.begin(), ones.end());\n  return sorted;", "  std::vector<long> sorted;\n\
    \  std::map<int, std::vector<long>> ones;\n  for (auto i : arr) {\n    int count\
    \ = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n     \
    \ }\n      i /= 2;\n    }\n    ones[count].push_back(i);\n  }\n  for (auto i :\
    \ ones) {\n    std::sort(i.second.begin(), i.second.end());\n    sorted.insert(sorted.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return sorted;", "  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) {\n    int count_a = std::bitset<64>(a).count();\n\
    \    int count_b = std::bitset<64>(b).count();\n    return count_a == count_b\
    \ ? a < b : count_a < count_b;\n  });\n  return arr;", "    std::vector<long>\
    \ res;\n    std::vector<std::pair<int, int>> ones;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        int count = 0;\n        int num = arr[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 1) {\n                count++;\n        \
    \    }\n            num /= 2;\n        }\n        ones.push_back(std::make_pair(count,\
    \ arr[i]));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (int i =\
    \ 0; i < ones.size(); i++) {\n        res.push_back(ones[i].second);\n    }\n\
    \    return res;", "  std::vector<long> sorted;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp\
    \ /= 2;\n    }\n    m[count].push_back(i);\n  }\n  for (auto i : m) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    for (auto j : i.second) {\n      sorted.push_back(j);\n\
    \    }\n  }\n  return sorted;", "    std::vector<std::pair<int, long>> v;\n  \
    \  for (auto i : arr) {\n        int count = 0;\n        long temp = i;\n    \
    \    while (temp) {\n            count += temp & 1;\n            temp >>= 1;\n\
    \        }\n        v.push_back(std::make_pair(count, i));\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::vector<long> result;\n    for (auto i : v) {\n        result.push_back(i.second);\n\
    \    }\n    return result;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ long>> ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while\
    \ (num) {\n      ones += num & 1;\n      num >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    sorted.push_back(pair.second);\n  }\n  return\
    \ sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    int ones = 0;\n    int decimal = i;\n    while (i\
    \ > 0) {\n      if (i % 2 == 1) {\n        ones++;\n      }\n      i /= 2;\n \
    \   }\n    ones_and_decimal.push_back(std::make_pair(ones, decimal));\n  }\n \
    \ std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto i\
    \ : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int ones = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n\
    \        ones++;\n      }\n      i /= 2;\n    }\n    map[ones].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ sorted;", "  std::vector<long> sorted;\n  std::vector<std::pair<int, long>>\
    \ ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while (num\
    \ > 0) {\n      if (num % 2 == 1) {\n        ones++;\n      }\n      num /= 2;\n\
    \    }\n    ones_and_nums.push_back(std::make_pair(ones, num));\n  }\n  std::sort(ones_and_nums.begin(),\
    \ ones_and_nums.end());\n  for (auto pair : ones_and_nums) {\n    sorted.push_back(pair.second);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32;\
    \ j++) {\n      if (i & (1 << j)) {\n        count++;\n      }\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    sorted.insert(sorted.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ sorted;", "    std::vector<long> sorted;\n    std::vector<long> ones;\n    std::vector<long>\
    \ zeros;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0)\
    \ {\n            zeros.push_back(arr[i]);\n        } else {\n            ones.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(ones.begin(), ones.end());\n    for (int i =\
    \ 0; i < ones.size(); i++) {\n        sorted.push_back(ones[i]);\n    }\n    for\
    \ (int i = 0; i < zeros.size(); i++) {\n        sorted.push_back(zeros[i]);\n\
    \    }\n    return sorted;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> temp;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int count = 0;\n    long num = arr[i];\n    while\
    \ (num > 0) {\n      count += num & 1;\n      num >>= 1;\n    }\n    if (count\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n \
    \ sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;", " \
    \ std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n  std::vector<long>\
    \ zeros_count;\n  std::vector<long> binary_arr;\n  std::vector<long> decimal_arr;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long binary\
    \ = arr[i];\n    while (binary > 0) {\n      if (binary % 2 == 1) {\n        count++;\n\
    \      }\n      binary /= 2;\n    }\n    ones_count.push_back(count);\n    zeros_count.push_back(arr[i]\
    \ - count);\n    binary_arr.push_back(arr[i]);\n    decimal_arr.push_back(arr[i]);\n\
    \  }\n  std::sort(ones_count.begin(), ones_count.end());\n  std::sort(decimal_arr.begin(),\
    \ decimal_arr.end());\n  for (int i = 0; i < ones_count.size(); i++) {\n    for\
    \ (int j = 0; j < binary_arr.size(); j++) {\n      if (ones_count[i] == zeros_count[j])\
    \ {\n        sorted_arr.push_back(binary_arr[j]);\n        binary_arr[j] = -1;\n\
    \        break;\n      }\n    }\n  }\n  for (int i = 0; i < decimal_arr.size();\
    \ i++) {\n    for (int j = 0; j < binary_arr.size(); j++) {\n      if (decimal_arr[i]\
    \ == binary_arr[j]) {\n        sorted_arr.push_back(binary_arr[j]);\n        binary_arr[j]\
    \ = -1;\n        break;\n      }\n    }\n  }\n  return sorted_arr;", "    std::vector<long>\
    \ result;\n    std::vector<std::pair<long, long>> ones;\n    for (auto i : arr)\
    \ {\n        long count = 0;\n        long temp = i;\n        while (temp) {\n\
    \            count += temp & 1;\n            temp >>= 1;\n        }\n        ones.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (auto i : ones)\
    \ {\n        result.push_back(i.second);\n    }\n    return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<std::pair<int, long>> ones;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    for (int j = 0; j < 32; j++) {\n      if (i & (1 << j))\
    \ {\n        count++;\n      }\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    sorted.push_back(i.second);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int count_a = 0, count_b = 0;\n    while (a > 0) {\n      if (a %\
    \ 2 == 1) count_a++;\n      a /= 2;\n    }\n    while (b > 0) {\n      if (b %\
    \ 2 == 1) count_b++;\n      b /= 2;\n    }\n    if (count_a == count_b) return\
    \ a < b;\n    return count_a < count_b;\n  });\n  return arr;", "  std::vector<std::pair<int,\
    \ long>> v;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      temp &= (temp - 1);\n      count++;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n \
    \ for (auto i : v) {\n    result.push_back(i.second);\n  }\n  return result;",
  "    std::vector<std::pair<int, int>> ones;\n    for (auto i : arr) {\n        int\
    \ count = 0;\n        while (i) {\n            count += i & 1;\n            i\
    \ >>= 1;\n        }\n        ones.push_back(std::make_pair(count, i));\n    }\n\
    \    std::sort(ones.begin(), ones.end());\n    std::vector<long> result;\n   \
    \ for (auto i : ones) {\n        result.push_back(i.second);\n    }\n    return\
    \ result;", "  std::vector<std::pair<long, long>> v;\n  for (auto i : arr) {\n\
    \    long count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n\
    \    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> res;\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ sorted_arr;\n  std::map<long, std::vector<long>> map;\n  for (long i = 0; i\
    \ < arr.size(); i++) {\n    long count = 0;\n    long num = arr[i];\n    while\
    \ (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    map[count].push_back(arr[i]);\n\
    \  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (long i = 0; i < it->second.size(); i++) {\n   \
    \   sorted_arr.push_back(it->second[i]);\n    }\n  }\n  return sorted_arr;", " \
    \   std::vector<std::pair<int, long>> v;\n    for (auto i : arr) {\n        int\
    \ count = 0;\n        long temp = i;\n        while (temp) {\n            count\
    \ += temp & 1;\n            temp >>= 1;\n        }\n        v.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<long> result;\n\
    \    for (auto i : v) {\n        result.push_back(i.second);\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      if (i & 1)\n        count++;\n    \
    \  i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    sorted.insert(sorted.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return sorted;", "    std::vector<long>\
    \ sorted;\n    std::vector<long> ones;\n    std::vector<long> zeros;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) {\n           \
    \ zeros.push_back(arr[i]);\n        } else {\n            ones.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(ones.begin(), ones.end());\n    sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n    sorted.insert(sorted.end(), ones.begin(),\
    \ ones.end());\n    return sorted;", "    std::vector<long> sorted;\n    std::vector<long>\
    \ ones;\n    std::vector<long> zeros;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        int count = 0;\n        long num = arr[i];\n        while (num) {\n\
    \            num = num & (num - 1);\n            count++;\n        }\n       \
    \ if (count == 0) {\n            zeros.push_back(arr[i]);\n        } else {\n\
    \            ones.push_back(arr[i]);\n        }\n    }\n    std::sort(zeros.begin(),\
    \ zeros.end());\n    std::sort(ones.begin(), ones.end());\n    for (int i = 0;\
    \ i < zeros.size(); i++) {\n        sorted.push_back(zeros[i]);\n    }\n    for\
    \ (int i = 0; i < ones.size(); i++) {\n        sorted.push_back(ones[i]);\n  \
    \  }\n    return sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto i : arr) {\n    int ones = 0;\n    long num = i;\n  \
    \  while (num > 0) {\n      ones += num & 1;\n      num >>= 1;\n    }\n    ones_map[ones].push_back(i);\n\
    \  }\n  for (auto it = ones_map.begin(); it != ones_map.end(); ++it) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    result.insert(result.end(), it->second.begin(), it->second.end());\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    long\
    \ num = arr[i];\n    long count = 0;\n    while (num > 0) {\n      if (num % 2\
    \ == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    if (count ==\
    \ 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n \
    \ sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;", " \
    \ std::vector<long> result;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    long ones = 0;\n    while (i > 0) {\n      ones +=\
    \ i % 2;\n      i /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (auto i : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n \
    \ return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n \
    \ std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ ones_map;\n    for (auto i : arr) {\n        int ones = std::bitset<32>(i).count();\n\
    \        ones_map[ones].push_back(i);\n    }\n    for (auto &i : ones_map) {\n\
    \        std::sort(i.second.begin(), i.second.end());\n        result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    long ones = 0;\n    long decimal = arr[i];\n\
    \    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n \
    \     }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (long i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> sorted;\n  std::vector<std::pair<int, long>> ones_and_values;\n\
    \  for (auto i : arr) {\n    int ones = 0;\n    long value = i;\n    while (value\
    \ > 0) {\n      ones += value % 2;\n      value /= 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n  for\
    \ (auto i : ones_and_values) {\n    sorted.push_back(i.second);\n  }\n  return\
    \ sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n\
    \  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n\
    \  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n\
    \  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> ones_map;\n    for (auto i : arr)\
    \ {\n        int ones = 0;\n        while (i > 0) {\n            ones += i % 2;\n\
    \            i /= 2;\n        }\n        ones_map[ones].push_back(i);\n    }\n\
    \    for (auto i : ones_map) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        result.insert(result.end(), i.second.begin(), i.second.end());\n    }\n\
    \    return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ long>> ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while\
    \ (num > 0) {\n      ones += num % 2;\n      num /= 2;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    sorted.push_back(pair.second);\n  }\n  return\
    \ sorted;", "  std::vector<std::pair<int, long>> v;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    long num = i;\n    while (num) {\n      count += num\
    \ & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for (auto\
    \ i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long> zeros_arr;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n\
    \    } else {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  for (int i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (int i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "    std::vector<long> sorted;\n    std::vector<long>\
    \ zeros;\n    std::vector<long> ones;\n    std::vector<long> twos;\n    std::vector<long>\
    \ threes;\n    std::vector<long> fours;\n    std::vector<long> fives;\n    std::vector<long>\
    \ sixes;\n    std::vector<long> sevens;\n    std::vector<long> eights;\n    std::vector<long>\
    \ nines;\n    std::vector<long> tens;\n    std::vector<long> elevens;\n    std::vector<long>\
    \ twelves;\n    std::vector<long> thirteens;\n    std::vector<long> fourteens;\n\
    \    std::vector<long> fifteens;\n    std::vector<long> sixteens;\n    std::vector<long>\
    \ seventeens;\n    std::vector<long> eightteens;\n    std::vector<long> nineteens;\n\
    \    std::vector<long> twenteens;\n    std::vector<long> twentyones;\n    std::vector<long>\
    \ twentytwos;\n    std::vector<long> twentythrees;\n    std::vector<long> twentyfours;\n\
    \    std::vector<long> twentyfives;\n    std::vector<long> twentysixes;\n    std::vector<long>\
    \ twentysevens;\n    std::vector<long> twentyeights;\n    std::vector<long> twentynines;\n\
    \    std::vector<long> thirtys;\n    std::vector<long> thirtyones;\n    std::vector<long>\
    \ thirtytwos;\n    std::vector<long> thirtythrees;\n    std::vector<long> thirtyfours;\n\
    \    std::vector<long> thirtyfives;\n    std::vector<long> thirtysixes;\n    std::vector<long>\
    \ thirtysevens;\n    std::vector<long> thirtyeights;\n    std::vector<long> thirtynines;\n\
    \    std::vector<long> fortys;\n    std::vector<long> fortyones;\n    std::vector<long>\
    \ fortytwos;\n    std"]
stop_tokens:
- "\n}"
