language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    if(date.length()==0)\n    return false;\n    int i=0;\n    while(date[i]!='-')\n\
    \    i++;\n    std::string month=date.substr(0,i);\n    int m=stoi(month);\n \
    \   if(m<1||m>12)\n    return false;\n    int j=i+1;\n    while(date[j]!='-')\n\
    \    j++;\n    std::string day=date.substr(i+1,j-i-1);\n    int d=stoi(day);\n\
    \    if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)\n    {\n        if(d<1||d>31)\n\
    \        return false;\n    }\n    else if(m==4||m==6||m==9||m==11)\n    {\n \
    \       if(d<1||d>30)\n        return false;\n    }\n    else if(m==2)\n    {\n\
    \        if(d<1||d>29)\n        return false;\n    }\n    std::string year=date.substr(j+1,date.length()-j-1);\n\
    \    int y=stoi(year);\n    if(y<1900||y>2100)\n    return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if(month == 2) {\n     \
    \   if(day > 29) {\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    if(date.length() != 10) return false;\n    if(date[2]\
    \ != '-' || date[5] != '-') return false;\n    std::string month = date.substr(0,2);\n\
    \    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n\
    \    int m = std::stoi(month);\n    int d = std::stoi(day);\n    int y = std::stoi(year);\n\
    \    if(m < 1 || m > 12) return false;\n    if(m == 2) {\n        if(d < 1 ||\
    \ d > 29) return false;\n    }\n    else if(m == 1 || m == 3 || m == 5 || m ==\
    \ 7 || m == 8 || m == 10 || m == 12) {\n        if(d < 1 || d > 31) return false;\n\
    \    }\n    else {\n        if(d < 1 || d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ tokens;\n    while (std::getline(ss, item, '-')) {\n        tokens.push_back(item);\n\
    \    }\n    if(tokens.size()!=3)\n        return false;\n    int month=std::stoi(tokens[0]);\n\
    \    int day=std::stoi(tokens[1]);\n    int year=std::stoi(tokens[2]);\n    if(month<1\
    \ || month>12)\n        return false;\n    if(day<1 || day>31)\n        return\
    \ false;\n    if(month==2 && day>29)\n        return false;\n    if((month==4\
    \ || month==6 || month==9 || month==11) && day>30)\n        return false;\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while (std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if (tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n          \
    \  return false;\n        }\n    } else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if\
    \ (day < 1 || day > 31) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 30) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ date_vec;\n    while(std::getline(ss, token, '-')) {\n        date_vec.push_back(token);\n\
    \    }\n    if(date_vec.size() != 3) {\n        return false;\n    }\n    int\
    \ month = std::stoi(date_vec[0]);\n    int day = std::stoi(date_vec[1]);\n   \
    \ int year = std::stoi(date_vec[2]);\n    if(month < 1 || month > 12) {\n    \
    \    return false;\n    }\n    if(month == 2) {\n        if(day < 1 || day > 29)\
    \ {\n            return false;\n        }\n    }\n    else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if(day < 1 || day > 31) {\n            return false;\n        }\n\
    \    }\n    else {\n        if(day < 1 || day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    int d,m,y;\n    std::stringstream ss(date);\n\
    \    char c;\n    ss >> m >> c >> d >> c >> y;\n    if(m < 1 || m > 12)\n    \
    \    return false;\n    if(m == 2)\n    {\n        if(d < 1 || d > 29)\n     \
    \       return false;\n    }\n    else if(m == 1 || m == 3 || m == 5 || m == 7\
    \ || m == 8 || m == 10 || m == 12)\n    {\n        if(d < 1 || d > 31)\n     \
    \       return false;\n    }\n    else\n    {\n        if(d < 1 || d > 30)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n    return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv4lddauj: /tmp/tmpv4lddauj.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) return false;\n\
    \  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n\
    \  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return\
    \ false;\n  if(month == 2) {\n    if(day > 29) return false;\n  }\n  if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n    if(day > 30) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0)\n        return false;\n    int month = std::stoi(date.substr(0,2));\n\
    \    int day = std::stoi(date.substr(3,2));\n    int year = std::stoi(date.substr(6,4));\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    \
    \    if(day > 30)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq5bvgwhn: /tmp/tmpq5bvgwhn.cpp:40: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    while(std::getline(ss, token,\
    \ '-'))\n        tokens.push_back(token);\n    if(tokens.size() != 3)\n      \
    \  return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12)\n     \
    \   return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month\
    \ == 2) {\n        if(day > 29)\n            return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // Your code here\n\
    \  int day, month, year;\n  char c;\n  std::stringstream ss(date);\n  ss >> month\
    \ >> c >> day >> c >> year;\n  if(ss.fail())\n    return false;\n  if(month <\
    \ 1 || month > 12)\n    return false;\n  if(month == 2)\n  {\n    if(year % 4\
    \ == 0)\n    {\n      if(day < 1 || day > 29)\n        return false;\n    }\n\
    \    else\n    {\n      if(day < 1 || day > 28)\n        return false;\n    }\n\
    \  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12)\n  {\n    if(day < 1 || day > 31)\n    \
    \  return false;\n  }\n  else\n  {\n    if(day < 1 || day > 30)\n      return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    //your code here\n\
    \    if(date.length()==0)\n        return false;\n    std::stringstream ss(date);\n\
    \    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,token,'-'))\n\
    \        v.push_back(token);\n    if(v.size()!=3)\n        return false;\n   \
    \ int m=std::stoi(v[0]);\n    int d=std::stoi(v[1]);\n    int y=std::stoi(v[2]);\n\
    \    if(m<1 || m>12)\n        return false;\n    if(m==2){\n        if(d<1 ||\
    \ d>29)\n            return false;\n    }\n    else if(m==1 || m==3 || m==5 ||\
    \ m==7 || m==8 || m==10 || m==12){\n        if(d<1 || d>31)\n            return\
    \ false;\n    }\n    else{\n        if(d<1 || d>30)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if(day < 1 || day >\
    \ days[month - 1]) {\n        return false;\n    }\n    if(year < 1) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    (0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp1z2wzan: /tmp/tmpp1z2wzan.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()==0)\n\
    \    return false;\n  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-'))\n    v.push_back(token);\n  if(v.size()!=3)\n\
    \    return false;\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month<1 || month>12)\n    return false;\n\
    \  if(day<1 || day>31)\n    return false;\n  if(month==2)\n  {\n    if(day>29)\n\
    \      return false;\n  }\n  else if(month==4 || month==6 || month==9 || month==11)\n\
    \  {\n    if(day>30)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    int day, month, year;\n    std::stringstream ss(date);\n\
    \    char ch;\n    ss >> month >> ch >> day >> ch >> year;\n    if(month < 1 ||\
    \ month > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(month\
    \ == 2) {\n        if(day > 29) return false;\n    }\n    else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::vector<std::string> v;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    while(std::getline(ss, temp, '-')) {\n        v.push_back(temp);\n\
    \    }\n    if(v.size() != 3) return false;\n    if(v[0].size() != 2 || v[1].size()\
    \ != 2 || v[2].size() != 4) return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(month == 2) {\n        if(day < 1 ||\
    \ day > 29) return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    }\n    else {\n        if(day < 1 || day\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int i=0;\n    int month=0;\n    int day=0;\n    int\
    \ year=0;\n    while(date[i]!='-')\n    {\n        month=month*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(date[i]!='-')\n    {\n        day=day*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(i<date.length())\n    {\n        year=year*10+(date[i]-'0');\n\
    \        i++;\n    }\n    if(month>12 || month<1)\n        return false;\n   \
    \ if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12)\n    {\n        if(day>31 || day<1)\n            return false;\n\
    \    }\n    else if(month==4 || month==6 || month==9 || month==11)\n    {\n  \
    \      if(day>30 || day<1)\n            return false;\n    }\n    else if(month==2)\n\
    \    {\n        if(day>29 || day<1)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    if(date.length()==0)\n    return false;\n    int i=0;\n    int month=0;\n\
    \    int day=0;\n    int year=0;\n    int count=0;\n    while(date[i]!='-')\n\
    \    {\n        month=month*10+(date[i]-'0');\n        i++;\n    }\n    i++;\n\
    \    while(date[i]!='-')\n    {\n        day=day*10+(date[i]-'0');\n        i++;\n\
    \    }\n    i++;\n    while(i<date.length())\n    {\n        year=year*10+(date[i]-'0');\n\
    \        i++;\n    }\n    if(month<1 || month>12)\n    return false;\n    if(month==1\
    \ || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)\n\
    \    {\n        if(day<1 || day>31)\n        return false;\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n\
    \        return false;\n    }\n    else if(month==2)\n    {\n        if(day<1\
    \ || day>29)\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::stringstream ss(date);\n    std::string temp;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, temp, '-')) {\n        tokens.push_back(temp);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    int day, month, year;\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(getline(ss,\
    \ temp, '-')) {\n        v.push_back(temp);\n    }\n    if(v.size() != 3)\n  \
    \      return false;\n    day = std::stoi(v[1]);\n    month = std::stoi(v[0]);\n\
    \    year = std::stoi(v[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(month == 2) {\n        if(day < 1 || day > 29)\n            return\
    \ false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31)\n            return false;\n    }\n    else {\n        if(day < 1 || day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  int len = date.length();\n  if(len == 0)\n    return false;\n  int i = 0;\n\
    \  int month = 0;\n  int day = 0;\n  int year = 0;\n  while(date[i] != '-')\n\
    \  {\n    month = month*10 + (date[i] - '0');\n    i++;\n  }\n  i++;\n  while(date[i]\
    \ != '-')\n  {\n    day = day*10 + (date[i] - '0');\n    i++;\n  }\n  i++;\n \
    \ while(i < len)\n  {\n    year = year*10 + (date[i] - '0');\n    i++;\n  }\n\
    \  if(month < 1 || month > 12)\n    return false;\n  if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n\
    \  {\n    if(day < 1 || day > 31)\n      return false;\n  }\n  else if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n  {\n    if(day < 1 || day >\
    \ 30)\n      return false;\n  }\n  else\n  {\n    if(day < 1 || day > 29)\n  \
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    std::stringstream ss(date);\n    int month, day, year;\n\
    \    char ch;\n    ss >> month >> ch >> day >> ch >> year;\n    if(ch != '-' ||\
    \ ss.fail()) return false;\n    if(month < 1 || month > 12) return false;\n  \
    \  if(month == 2) {\n        if(day < 1 || day > 29) return false;\n    } else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ < 1 || day > 30) return false;\n    } else {\n        if(day < 1 || day > 31)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n\
    \  }\n  if(tokens.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n \
    \ else {\n    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::stringstream ss(date);\n    std::string temp;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, temp, '-'))\n        tokens.push_back(temp);\n\
    \    if(tokens.size() != 3)\n        return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12)\n        return false;\n    if(month == 2)\n \
    \   {\n        if(day < 1 || day > 29)\n            return false;\n    }\n   \
    \ else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n      \
    \      return false;\n    }\n    else\n    {\n        if(day < 1 || day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  if(date.length()==0)\n  return false;\n  int i=0;\n  while(date[i]!='-')\n\
    \  i++;\n  int month=0;\n  for(int j=0;j<i;j++)\n  {\n    month=month*10+(date[j]-'0');\n\
    \  }\n  if(month<1 || month>12)\n  return false;\n  int k=i+1;\n  while(date[k]!='-')\n\
    \  k++;\n  int day=0;\n  for(int j=i+1;j<k;j++)\n  {\n    day=day*10+(date[j]-'0');\n\
    \  }\n  if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10\
    \ || month==12)\n  {\n    if(day<1 || day>31)\n    return false;\n  }\n  else\
    \ if(month==4 || month==6 || month==9 || month==11)\n  {\n    if(day<1 || day>30)\n\
    \    return false;\n  }\n  else\n  {\n    if(day<1 || day>29)\n    return false;\n\
    \  }\n  int year=0;\n  for(int j=k+1;j<date.length();j++)\n  {\n    year=year*10+(date[j]-'0');\n\
    \  }\n  if(year<0)\n  return false;\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int day, month, year;\n    std::stringstream ss(date);\n    char ch;\n  \
    \  ss >> month >> ch >> day >> ch >> year;\n    if(ss.fail()) return false;\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    // std::cout<<date<<std::endl;\n    if(date.length()==0)\n        return\
    \ false;\n    std::stringstream ss(date);\n    std::string temp;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss,temp,'-'))\n        tokens.push_back(temp);\n\
    \    if(tokens.size()!=3)\n        return false;\n    int month=std::stoi(tokens[0]);\n\
    \    int day=std::stoi(tokens[1]);\n    int year=std::stoi(tokens[2]);\n    if(month<1\
    \ || month>12)\n        return false;\n    if(month==2){\n        if(day<1 ||\
    \ day>29)\n            return false;\n    }\n    else if(month==1 || month==3\
    \ || month==5 || month==7 || month==8 || month==10 || month==12){\n        if(day<1\
    \ || day>31)\n            return false;\n    }\n    else{\n        if(day<1 ||\
    \ day>30)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    // std::cout<<date<<std::endl;\n    if(date.length()==0)\n    {\n       \
    \ return false;\n    }\n    std::stringstream ss(date);\n    std::string temp;\n\
    \    std::vector<std::string> date_vec;\n    while(std::getline(ss,temp,'-'))\n\
    \    {\n        date_vec.push_back(temp);\n    }\n    if(date_vec.size()!=3)\n\
    \    {\n        return false;\n    }\n    int month=std::stoi(date_vec[0]);\n\
    \    int day=std::stoi(date_vec[1]);\n    int year=std::stoi(date_vec[2]);\n \
    \   if(month<1||month>12)\n    {\n        return false;\n    }\n    if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)\n\
    \    {\n        if(day<1||day>31)\n        {\n            return false;\n    \
    \    }\n    }\n    else if(month==4||month==6||month==9||month==11)\n    {\n \
    \       if(day<1||day>30)\n        {\n            return false;\n        }\n \
    \   }\n    else\n    {\n        if(day<1||day>29)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ s;\n    std::vector<std::string> v;\n    while(getline(ss, s, '-'))\n      \
    \  v.push_back(s);\n    if(v.size() != 3)\n        return false;\n    int month\
    \ = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(month == 2) {\n\
    \        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31)\n            return false;\n\
    \    }\n    else {\n        if(day < 1 || day > 30)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0) return false;\n    std::vector<std::string> v;\n    std::stringstream\
    \ ss(date);\n    std::string temp;\n    while(std::getline(ss, temp, '-')) {\n\
    \        v.push_back(temp);\n    }\n    if(v.size() != 3) return false;\n    int\
    \ month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(month == 2) {\n       \
    \ if(day < 1 || day > 29) return false;\n    }\n    else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if(day < 1 || day > 31) return false;\n    }\n    else {\n      \
    \  if(day < 1 || day > 30) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    int day, month,\
    \ year;\n    if(date.size() == 0)\n        return false;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss >> month >> ch >> day >> ch >> year;\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29)\n            return false;\n    }\n    else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if(day < 1 || day > 30)\n\
    \            return false;\n    }\n    else {\n        if(day < 1 || day > 31)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> tokens;\n    while(std::getline(ss, token, '-'))\
    \ {\n        tokens.push_back(token);\n    }\n    if(tokens.size() != 3) return\
    \ false;\n    int month = stoi(tokens[0]);\n    int day = stoi(tokens[1]);\n \
    \   int year = stoi(tokens[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(month == 2) {\n        if(day < 1 || day > 29) return false;\n    } else\
    \ if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        if(day < 1 || day > 31) return false;\n   \
    \ } else {\n        if(day < 1 || day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >>\
    \ c >> d >> c >> y;\n    if (m < 1 || m > 12) return false;\n    if (d < 1 ||\
    \ d > 31) return false;\n    if (m == 2 && d > 29) return false;\n    if (m ==\
    \ 4 || m == 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  if(date.size() == 0)\n    return false;\n  std::stringstream ss(date);\n  std::string\
    \ temp;\n  std::vector<std::string> v;\n  while(std::getline(ss, temp, '-'))\n\
    \    v.push_back(temp);\n  if(v.size() != 3)\n    return false;\n  int month =\
    \ stoi(v[0]);\n  int day = stoi(v[1]);\n  int year = stoi(v[2]);\n  if(month <\
    \ 1 || month > 12)\n    return false;\n  if(month == 2)\n  {\n    if(day < 1 ||\
    \ day > 29)\n      return false;\n  }\n  else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n  {\n    if(day\
    \ < 1 || day > 31)\n      return false;\n  }\n  else\n  {\n    if(day < 1 || day\
    \ > 30)\n      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  int len = date.length();\n  if(len == 0)\n    return false;\n  int i = 0;\n\
    \  int month = 0;\n  int day = 0;\n  int year = 0;\n  while(date[i] != '-')\n\
    \  {\n    month = month*10 + (date[i] - '0');\n    i++;\n  }\n  i++;\n  while(date[i]\
    \ != '-')\n  {\n    day = day*10 + (date[i] - '0');\n    i++;\n  }\n  i++;\n \
    \ while(i < len)\n  {\n    year = year*10 + (date[i] - '0');\n    i++;\n  }\n\
    \  if(month < 1 || month > 12)\n    return false;\n  if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n\
    \  {\n    if(day < 1 || day > 31)\n      return false;\n  }\n  else if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n  {\n    if(day < 1 || day >\
    \ 30)\n      return false;\n  }\n  else\n  {\n    if(day < 1 || day > 29)\n  \
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  if(date.size()==0)\n    return false;\n  std::stringstream ss(date);\n  std::string\
    \ temp;\n  std::vector<std::string> v;\n  while(std::getline(ss,temp,'-'))\n \
    \   v.push_back(temp);\n  if(v.size()!=3)\n    return false;\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month<1 ||\
    \ month>12)\n    return false;\n  if(month==2)\n  {\n    if(day<1 || day>29)\n\
    \      return false;\n  }\n  else if(month==1 || month==3 || month==5 || month==7\
    \ || month==8 || month==10 || month==12)\n  {\n    if(day<1 || day>31)\n     \
    \ return false;\n  }\n  else\n  {\n    if(day<1 || day>30)\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int d,m,y;\n    char ch;\n    std::stringstream ss(date);\n\
    \    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12)\n        return false;\n    if(m==1\
    \ || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n    {\n        if(d<1 ||\
    \ d>31)\n            return false;\n    }\n    else if(m==4 || m==6 || m==9 ||\
    \ m==11)\n    {\n        if(d<1 || d>30)\n            return false;\n    }\n \
    \   else if(m==2)\n    {\n        if(d<1 || d>29)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while (std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if (tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n          \
    \  return false;\n        }\n    } else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if\
    \ (day < 1 || day > 31) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 30) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    int month,\
    \ day, year;\n    char c;\n    ss >> month >> c >> day >> c >> year;\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29)\n            return false;\n    }\n    else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if(day < 1 || day > 30)\n\
    \            return false;\n    }\n    else {\n        if(day < 1 || day > 31)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpki2yorhp: /tmp/tmpki2yorhp.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  int len = date.length();\n  if(len == 0) return false;\n  int i = 0;\n  while(date[i]\
    \ != '-'){\n    if(!isdigit(date[i])) return false;\n    i++;\n  }\n  int month\
    \ = stoi(date.substr(0,i));\n  if(month < 1 || month > 12) return false;\n  int\
    \ j = i+1;\n  while(date[j] != '-'){\n    if(!isdigit(date[j])) return false;\n\
    \    j++;\n  }\n  int day = stoi(date.substr(i+1,j-i-1));\n  if(day < 1 || day\
    \ > 31) return false;\n  if(month == 2){\n    if(day > 29) return false;\n  }\n\
    \  else if(month == 4 || month == 6 || month == 9 || month == 11){\n    if(day\
    \ > 30) return false;\n  }\n  int k = j+1;\n  while(k < len){\n    if(!isdigit(date[k]))\
    \ return false;\n    k++;\n  }\n  int year = stoi(date.substr(j+1,k-j-1));\n \
    \ if(year < 0) return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    if (!(ss >> m >> c >> d >> c >>\
    \ y)) return false;\n    if (c != '-') return false;\n    if (m < 1 || m > 12)\
    \ return false;\n    if (d < 1 || d > 31) return false;\n    if (m == 2) {\n \
    \       if (d > 29) return false;\n        if (d == 29) {\n            if (y %\
    \ 4 != 0) return false;\n            if (y % 100 == 0 && y % 400 != 0) return\
    \ false;\n        }\n    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \        if (d > 30) return false;\n    }\n    return ss.eof();\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()==0)\n\
    \    return false;\n  std::stringstream ss(date);\n  std::string temp;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss,temp,'-'))\n    tokens.push_back(temp);\n \
    \ if(tokens.size()!=3)\n    return false;\n  int month=std::stoi(tokens[0]);\n\
    \  int day=std::stoi(tokens[1]);\n  int year=std::stoi(tokens[2]);\n  if(month<1\
    \ || month>12)\n    return false;\n  if(month==2)\n  {\n    if(day<1 || day>29)\n\
    \      return false;\n  }\n  else if(month==1 || month==3 || month==5 || month==7\
    \ || month==8 || month==10 || month==12)\n  {\n    if(day<1 || day>31)\n     \
    \ return false;\n  }\n  else\n  {\n    if(day<1 || day>30)\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    int i = 0;\n    int month = 0;\n    int day\
    \ = 0;\n    int year = 0;\n    while(date[i] != '-') {\n        month = month\
    \ * 10 + (date[i] - '0');\n        i++;\n    }\n    i++;\n    while(date[i] !=\
    \ '-') {\n        day = day * 10 + (date[i] - '0');\n        i++;\n    }\n   \
    \ i++;\n    while(i < date.length()) {\n        year = year * 10 + (date[i] -\
    \ '0');\n        i++;\n    }\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(month == 2) {\n        if(day < 1 || day > 29)\n            return\
    \ false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31)\n            return false;\n    }\n    else {\n        if(day < 1 || day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()==0)\n\
    \        return false;\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> tokens;\n    while(std::getline(ss, token, '-'))\n\
    \        tokens.push_back(token);\n    if(tokens.size()!=3)\n        return false;\n\
    \    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month<1 || month>12)\n        return\
    \ false;\n    if(month==2)\n    {\n        if(day<1 || day>29)\n            return\
    \ false;\n    }\n    else if(month==1 || month==3 || month==5 || month==7 || month==8\
    \ || month==10 || month==12)\n    {\n        if(day<1 || day>31)\n           \
    \ return false;\n    }\n    else\n    {\n        if(day<1 || day>30)\n       \
    \     return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmxrowqz8: /tmp/tmpmxrowqz8.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    while(std::getline(ss, token,\
    \ '-'))\n        tokens.push_back(token);\n    if(tokens.size() != 3)\n      \
    \  return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12)\n     \
    \   return false;\n    if(month == 2) {\n        if(day < 1 || day > 29)\n   \
    \         return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else {\n        if(day\
    \ < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = stoi(tokens[0]);\n    int day = stoi(tokens[1]);\n    int year = stoi(tokens[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if(day < 1 || day > 30) {\n            return false;\n      \
    \  }\n    }\n    else {\n        if(day < 1 || day > 31) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.size()==0)\n\
    \    return false;\n  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-'))\n    v.push_back(token);\n  if(v.size()!=3)\n\
    \    return false;\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month<1 || month>12)\n    return false;\n\
    \  if(month==2)\n  {\n    if(day<1 || day>29)\n      return false;\n  }\n  else\
    \ if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12)\n  {\n    if(day<1 || day>31)\n      return false;\n  }\n  else\n\
    \  {\n    if(day<1 || day>30)\n      return false;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::stringstream ss(date);\n    int d, m, y;\n    char dash1, dash2;\n \
    \   ss >> m >> dash1 >> d >> dash2 >> y;\n    if(ss.fail() || !ss.eof()) return\
    \ false;\n    if(dash1 != '-' || dash2 != '-') return false;\n    if(m < 1 ||\
    \ m > 12) return false;\n    if(d < 1 || d > 31) return false;\n    if(m == 2)\
    \ {\n        if(d > 29) return false;\n    }\n    else if(m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n        if(d > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  }\n  else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n    if(day < 1 || day > 30) {\n      return\
    \ false;\n    }\n  }\n  else {\n    if(day < 1 || day > 31) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  }\n  else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n    if(day < 1 || day > 30) {\n      return\
    \ false;\n    }\n  }\n  else {\n    if(day < 1 || day > 31) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    //your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-'))\n    {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size()!=3)\n    {\n        return false;\n    }\n    int\
    \ month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int\
    \ year = std::stoi(tokens[2]);\n    if(month<1 || month>12)\n    {\n        return\
    \ false;\n    }\n    if(month==2)\n    {\n        if(day<1 || day>29)\n      \
    \  {\n            return false;\n        }\n    }\n    else if(month==1 || month==3\
    \ || month==5 || month==7 || month==8 || month==10 || month==12)\n    {\n    \
    \    if(day<1 || day>31)\n        {\n            return false;\n        }\n  \
    \  }\n    else\n    {\n        if(day<1 || day>30)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int day,month,year;\n    int len = date.length();\n    if(len==0)\n     \
    \   return false;\n    std::stringstream ss(date);\n    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month<1 || month>12)\n        return false;\n    if(month==2)\n    {\n\
    \        if(day<1 || day>29)\n            return false;\n    }\n    else if(month==1\
    \ || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)\n\
    \    {\n        if(day<1 || day>31)\n            return false;\n    }\n    else\n\
    \    {\n        if(day<1 || day>30)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::stringstream\
    \ ss(date);\n  int month, day, year;\n  char c;\n  ss >> month >> c >> day >>\
    \ c >> year;\n  if(ss.fail()) return false;\n  if(month < 1 || month > 12) return\
    \ false;\n  if(month == 2) {\n    if(day < 1 || day > 29) return false;\n  } else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11) {\n    if(day < 1\
    \ || day > 30) return false;\n  } else {\n    if(day < 1 || day > 31) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    while(std::getline(ss, token,\
    \ '-'))\n        tokens.push_back(token);\n    if(tokens.size() != 3)\n      \
    \  return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12)\n     \
    \   return false;\n    if(month == 2) {\n        if(day < 1 || day > 29)\n   \
    \         return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else {\n        if(day\
    \ < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int day,month,year;\n    if(date.length()==0)\n        return false;\n  \
    \  if(date[2]!='-' || date[5]!='-')\n        return false;\n    day=stoi(date.substr(0,2));\n\
    \    month=stoi(date.substr(3,2));\n    year=stoi(date.substr(6,4));\n    if(day<1\
    \ || day>31 || month<1 || month>12 || year<1)\n        return false;\n    if(month==2)\n\
    \    {\n        if(day>29)\n            return false;\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day>30)\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv3qntyey: /tmp/tmpv3qntyey.cpp:37: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n  std::smatch matches;\n  if(!std::regex_match(date,\
    \ matches, pattern))\n    return false;\n  int month = std::stoi(matches[1]);\n\
    \  int day = std::stoi(matches[2]);\n  int year = std::stoi(matches[3]);\n  if(month\
    \ < 1 || month > 12)\n    return false;\n  if(day < 1 || day > 31)\n    return\
    \ false;\n  if(month == 2) {\n    if(day > 29)\n      return false;\n    if(day\
    \ == 29) {\n      if(year % 4 != 0)\n        return false;\n      if(year % 100\
    \ == 0 && year % 400 != 0)\n        return false;\n    }\n  }\n  if(month == 4\
    \ || month == 6 || month == 9 || month == 11) {\n    if(day > 30)\n      return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\
    \ return false;\n    int i=0;\n    while(date[i]!='-') i++;\n    int month=std::stoi(date.substr(0,i));\n\
    \    if(month<1 || month>12) return false;\n    int j=i+1;\n    while(date[j]!='-')\
    \ j++;\n    int day=std::stoi(date.substr(i+1,j-i-1));\n    if(month==2){\n  \
    \      if(day<1 || day>29) return false;\n    }\n    else if(month==1 || month==3\
    \ || month==5 || month==7 || month==8 || month==10 || month==12){\n        if(day<1\
    \ || day>31) return false;\n    }\n    else{\n        if(day<1 || day>30) return\
    \ false;\n    }\n    int year=std::stoi(date.substr(j+1,date.length()-j-1));\n\
    \    if(year<0) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::vector<std::string> v;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    while(std::getline(ss, temp, '-'))\n    {\n        v.push_back(temp);\n\
    \    }\n    if(v.size()!=3)\n        return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month<1\
    \ || month>12)\n        return false;\n    if(month==2)\n    {\n        if(day<1\
    \ || day>29)\n            return false;\n    }\n    else if(month==1 || month==3\
    \ || month==5 || month==7 || month==8 || month==10 || month==12)\n    {\n    \
    \    if(day<1 || day>31)\n            return false;\n    }\n    else\n    {\n\
    \        if(day<1 || day>30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(month == 2) {\n        if(day < 1 ||\
    \ day > 29) return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    }\n    else {\n        if(day < 1 || day\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m >> ch >> d >> ch >> y;\n\
    \    if (ss.fail() || ss.peek() != EOF) return false;\n    if (m < 1 || m > 12)\
    \ return false;\n    if (d < 1 || d > 31) return false;\n    if (m == 2) {\n \
    \       if (d > 29) return false;\n        if (d == 29) {\n            if (y %\
    \ 4 != 0) return false;\n            if (y % 100 == 0 && y % 400 != 0) return\
    \ false;\n        }\n    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \        if (d > 30) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n\
    \  }\n  if(tokens.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n \
    \ else {\n    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  int month, day, year;\n  char dash1, dash2;\n\
    \  ss >> month >> dash1 >> day >> dash2 >> year;\n  if (ss.fail() || dash1 !=\
    \ '-' || dash2 != '-' || month < 1 || month > 12 || day < 1 || day > 31 || year\
    \ < 1) {\n    return false;\n  }\n  if (month == 2) {\n    if (day > 29) {\n \
    \     return false;\n    }\n    if (day == 29) {\n      if (year % 4 != 0) {\n\
    \        return false;\n      }\n      if (year % 100 == 0 && year % 400 != 0)\
    \ {\n        return false;\n      }\n    }\n  }\n  if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string item;\n    int count = 0;\n\
    \    int day, month, year;\n    while (std::getline(ss, item, '-')) {\n      \
    \  if (count == 0) {\n            month = std::stoi(item);\n        } else if\
    \ (count == 1) {\n            day = std::stoi(item);\n        } else {\n     \
    \       year = std::stoi(item);\n        }\n        count++;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\
    \    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n   \
    \     if (day < 1 || day > 30) {\n            return false;\n        }\n    }\
    \ else {\n        if (day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) return false;\n    int m = std::stoi(v[0]);\n  \
    \  int d = std::stoi(v[1]);\n    int y = std::stoi(v[2]);\n    if(m < 1 || m >\
    \ 12) return false;\n    if(m == 2) {\n        if(d < 1 || d > 29) return false;\n\
    \    }\n    else if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10\
    \ || m == 12) {\n        if(d < 1 || d > 31) return false;\n    }\n    else {\n\
    \        if(d < 1 || d > 30) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078578
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    if(date.length()==0)\n        return false;\n    int day,month,year;\n  \
    \  std::stringstream ss(date);\n    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month<1 || month>12)\n        return false;\n    if(month==1 || month==3\
    \ || month==5 || month==7 || month==8 || month==10 || month==12)\n    {\n    \
    \    if(day<1 || day>31)\n            return false;\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n\
    \            return false;\n    }\n    else if(month==2)\n    {\n        if(day<1\
    \ || day>29)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078579
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m\
    \ >> ch >> d >> ch >> y;\n    if(m < 1 || m > 12)\n        return false;\n   \
    \ if(d < 1 || d > 31)\n        return false;\n    if(m == 2 && d > 29)\n     \
    \   return false;\n    if(m == 4 || m == 6 || m == 9 || m == 11)\n        if(d\
    \ > 30)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078579
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex reg(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ reg);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkgnhqf4r: /tmp/tmpkgnhqf4r.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078583
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()==0)\n\
    \        return false;\n    std::stringstream ss(date);\n    int month,day,year;\n\
    \    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n    if(month<1 || month>12)\n\
    \        return false;\n    if(day<1 || day>31)\n        return false;\n    if(month==2\
    \ && day>29)\n        return false;\n    if(month==4 || month==6 || month==9 ||\
    \ month==11)\n        if(day>30)\n            return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day\
    \ > 29) return false;\n    }\n    else if(month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    // split the string on '-'\n    std::vector<std::string> v;\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    while(std::getline(ss, token, '-')) {\n\
    \        v.push_back(token);\n    }\n    // check if the size of vector is 3\n\
    \    if(v.size() != 3) {\n        return false;\n    }\n    // check if the month\
    \ is between 1 and 12\n    if(std::stoi(v[0]) < 1 || std::stoi(v[0]) > 12) {\n\
    \        return false;\n    }\n    // check if the days are between 1 and 31\n\
    \    if(std::stoi(v[1]) < 1 || std::stoi(v[1]) > 31) {\n        return false;\n\
    \    }\n    // check if the days are between 1 and 30\n    if(std::stoi(v[0])\
    \ == 4 || std::stoi(v[0]) == 6 || std::stoi(v[0]) == 9 || std::stoi(v[0]) == 11)\
    \ {\n        if(std::stoi(v[1]) < 1 || std::stoi(v[1]) > 30) {\n            return\
    \ false;\n        }\n    }\n    // check if the days are between 1 and 29\n  \
    \  if(std::stoi(v[0]) == 2) {\n        if(std::stoi(v[1]) < 1 || std::stoi(v[1])\
    \ > 29) {\n            return false;\n        }\n    }\n    // check if the year\
    \ is between 1000 and 9999\n    if(std::stoi(v[2]) < 1000 || std::stoi(v[2]) >\
    \ 9999) {\n        return false;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int day,month,year;\n    std::stringstream ss(date);\n    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month<1 || month>12 || day<1 || day>31 || year<0)\n        return false;\n\
    \    if(month==2)\n    {\n        if(year%4==0)\n        {\n            if(day>29)\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if(day>28)\n                return false;\n        }\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day>30)\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmxrowqz8: /tmp/tmpmxrowqz8.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0) return false;\n    std::stringstream ss(date);\n    int month, day, year;\n\
    \    char c;\n    ss >> month >> c >> day >> c >> year;\n    if(month < 1 || month\
    \ > 12) return false;\n    if(month == 2) {\n        if(day < 1 || day > 29) return\
    \ false;\n    } else if(month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if(day < 1 || day > 30) return false;\n    } else {\n        if(day\
    \ < 1 || day > 31) return false;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> tokens;\n    while(std::getline(ss, token, '-'))\
    \ {\n        tokens.push_back(token);\n    }\n    if(tokens.size() != 3) return\
    \ false;\n    int month = stoi(tokens[0]);\n    int day = stoi(tokens[1]);\n \
    \   int year = stoi(tokens[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(month == 2) {\n        if(day < 1 || day > 29) return false;\n    } else\
    \ if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        if(day < 1 || day > 31) return false;\n   \
    \ } else {\n        if(day < 1 || day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string temp;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, temp, '-'))\n    {\n        v.push_back(temp);\n\
    \    }\n    if(v.size() != 3)\n    {\n        return false;\n    }\n    int month\
    \ = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12)\n    {\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31)\n    {\n        return false;\n    }\n    if(month == 2)\n\
    \    {\n        if(day > 29)\n        {\n            return false;\n        }\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n\
    \        if(day > 30)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m\
    \ >> ch >> d >> ch >> y;\n    if(ss.fail()) return false;\n    if(m < 1 || m >\
    \ 12) return false;\n    if(m == 2 && d > 29) return false;\n    if(m == 2 &&\
    \ d == 29 && y % 4 != 0) return false;\n    if(m == 2 && d == 29 && y % 100 ==\
    \ 0 && y % 400 != 0) return false;\n    if(m == 2 && d > 28) return false;\n \
    \   if(m == 4 || m == 6 || m == 9 || m == 11) {\n        if(d < 1 || d > 30) return\
    \ false;\n    }\n    if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m ==\
    \ 10 || m == 12) {\n        if(d < 1 || d > 31) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n\
    \  }\n  if(tokens.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n \
    \ else {\n    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ splittedStrings;\n    while (std::getline(ss, item, '-'))\n    {\n        splittedStrings.push_back(item);\n\
    \    }\n    int month = std::stoi(splittedStrings[0]);\n    int day = std::stoi(splittedStrings[1]);\n\
    \    int year = std::stoi(splittedStrings[2]);\n    if(month < 1 || month > 12)\n\
    \        return false;\n    if(day < 1 || day > 31)\n        return false;\n \
    \   if(month == 2 && day > 29)\n        return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n        if(day > 30)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // Your code here\n\
    \  if(date.length()==0)\n  return false;\n  int i=0;\n  int m=0,d=0,y=0;\n  while(date[i]!='-')\n\
    \  {\n    m=m*10+(date[i]-'0');\n    i++;\n  }\n  i++;\n  while(date[i]!='-')\n\
    \  {\n    d=d*10+(date[i]-'0');\n    i++;\n  }\n  i++;\n  while(i<date.length())\n\
    \  {\n    y=y*10+(date[i]-'0');\n    i++;\n  }\n  if(m>12 || m<1)\n  return false;\n\
    \  if(m==1 || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n  {\n    if(d>31\
    \ || d<1)\n    return false;\n  }\n  else if(m==4 || m==6 || m==9 || m==11)\n\
    \  {\n    if(d>30 || d<1)\n    return false;\n  }\n  else if(m==2)\n  {\n    if(d>29\
    \ || d<1)\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ splittedStrings;\n    while (std::getline(ss, item, '-'))\n    {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size()!=3)\n        return false;\n    int month\
    \ = std::stoi(splittedStrings[0]);\n    int day = std::stoi(splittedStrings[1]);\n\
    \    int year = std::stoi(splittedStrings[2]);\n    if(month<1 || month>12)\n\
    \        return false;\n    if(month==2)\n    {\n        if(day<1 || day>29)\n\
    \            return false;\n    }\n    else if(month==1 || month==3 || month==5\
    \ || month==7 || month==8 || month==10 || month==12)\n    {\n        if(day<1\
    \ || day>31)\n            return false;\n    }\n    else\n    {\n        if(day<1\
    \ || day>30)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if(month == 2) {\n     \
    \   if(day > 29) {\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int d,m,y;\n    std::stringstream ss(date);\n    ss>>m>>d>>y;\n\
    \    if(m<1 || m>12)\n        return false;\n    if(m==1 || m==3 || m==5 || m==7\
    \ || m==8 || m==10 || m==12)\n    {\n        if(d<1 || d>31)\n            return\
    \ false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d<1\
    \ || d>30)\n            return false;\n    }\n    else if(m==2)\n    {\n     \
    \   if(d<1 || d>29)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1s3an60e: /tmp/tmp1s3an60e.cpp:37: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int day,month,year;\n    char ch;\n    std::stringstream ss(date);\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month>=1 && month<=12 && day>=1 && day<=31 && year>=1 && year<=9999)\n\
    \    {\n        if(month==2)\n        {\n            if(day>=1 && day<=29)\n \
    \           {\n                return true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10\
    \ || month==12)\n        {\n            if(day>=1 && day<=31)\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n        else\n     \
    \   {\n            if(day>=1 && day<=30)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    if(date.length()==0)\n    return false;\n    std::stringstream ss(date);\n\
    \    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,token,'-'))\n\
    \    {\n        v.push_back(token);\n    }\n    if(v.size()!=3)\n    return false;\n\
    \    int month=std::stoi(v[0]);\n    int day=std::stoi(v[1]);\n    int year=std::stoi(v[2]);\n\
    \    if(month<1 || month>12)\n    return false;\n    if(month==1 || month==3 ||\
    \ month==5 || month==7 || month==8 || month==10 || month==12)\n    {\n       \
    \ if(day<1 || day>31)\n        return false;\n    }\n    else if(month==4 || month==6\
    \ || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n        return\
    \ false;\n    }\n    else if(month==2)\n    {\n        if(day<1 || day>29)\n \
    \       return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  int len = date.length();\n  if(len == 0)\n    return false;\n  int i = 0;\n\
    \  int month = 0;\n  int day = 0;\n  int year = 0;\n  while(date[i] != '-')\n\
    \  {\n    month = month*10 + (date[i] - '0');\n    i++;\n  }\n  i++;\n  while(date[i]\
    \ != '-')\n  {\n    day = day*10 + (date[i] - '0');\n    i++;\n  }\n  i++;\n \
    \ while(i < len)\n  {\n    year = year*10 + (date[i] - '0');\n    i++;\n  }\n\
    \  if(month < 1 || month > 12)\n    return false;\n  if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n\
    \  {\n    if(day < 1 || day > 31)\n      return false;\n  }\n  else if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11)\n  {\n    if(day < 1 || day >\
    \ 30)\n      return false;\n  }\n  else\n  {\n    if(day < 1 || day > 29)\n  \
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()\
    \ == 0) return false;\n  std::stringstream ss(date);\n  std::string item;\n  std::vector<std::string>\
    \ tokens;\n  while (std::getline(ss, item, '-')) {\n    tokens.push_back(item);\n\
    \  }\n  if(tokens.size() != 3) return false;\n  int month = stoi(tokens[0]);\n\
    \  int day = stoi(tokens[1]);\n  int year = stoi(tokens[2]);\n  if(month < 1 ||\
    \ month > 12) return false;\n  if(day < 1 || day > 31) return false;\n  if(month\
    \ == 2) {\n    if(day > 29) return false;\n  }\n  if(month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n    if(day > 30) return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> tokens;\n  while\
    \ (std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n  }\n  if (tokens.size()\
    \ != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n  int\
    \ day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (month == 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  } else {\n\
    \    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n\
    \  }\n  if(tokens.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n \
    \ else {\n    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n  std::smatch match;\n  if(std::regex_match(date,\
    \ match, pattern)) {\n    int month = std::stoi(match[1]);\n    int day = std::stoi(match[2]);\n\
    \    if(month < 1 || month > 12) {\n      return false;\n    }\n    if(month ==\
    \ 2) {\n      if(day < 1 || day > 29) {\n        return false;\n      }\n    }\
    \ else if(month == 4 || month == 6 || month == 9 || month == 11) {\n      if(day\
    \ < 1 || day > 30) {\n        return false;\n      }\n    } else {\n      if(day\
    \ < 1 || day > 31) {\n        return false;\n      }\n    }\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078583
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n  else {\n\
    \    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078581
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) return false;\n    if(v[0].length() != 2 || v[1].length()\
    \ != 2 || v[2].length() != 4) return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2) {\n        if(day > 29) return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n  else {\n\
    \    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078581
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int len = date.length();\n    if(len == 0)\n        return false;\n    int\
    \ i = 0;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    while(date[i]\
    \ != '-')\n    {\n        month = month*10 + (date[i] - '0');\n        i++;\n\
    \    }\n    i++;\n    while(date[i] != '-')\n    {\n        day = day*10 + (date[i]\
    \ - '0');\n        i++;\n    }\n    i++;\n    while(i < len)\n    {\n        year\
    \ = year*10 + (date[i] - '0');\n        i++;\n    }\n    if(month < 1 || month\
    \ > 12)\n        return false;\n    if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day >\
    \ 30)\n            return false;\n    }\n    else\n    {\n        if(day < 1 ||\
    \ day > 29)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int d,m,y;\n    std::stringstream ss;\n    ss<<date;\n\
    \    ss>>m>>d>>y;\n    if(m<1 || m>12)\n        return false;\n    if(m==1 ||\
    \ m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n    {\n        if(d<1 || d>31)\n\
    \            return false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n\
    \    {\n        if(d<1 || d>30)\n            return false;\n    }\n    else if(m==2)\n\
    \    {\n        if(d<1 || d>29)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7lyw8sfp: /tmp/tmp7lyw8sfp.cpp:38: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2 && day > 29) return false;\n    if(month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if(day > 30) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(day < 1 || day > 31) {\n     \
    \   return false;\n    }\n    if(month == 2) {\n        if(day > 29) {\n     \
    \       return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if(day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    int month, day, year;\n    std::stringstream ss(date);\n    char ch;\n  \
    \  ss >> month >> ch >> day >> ch >> year;\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n        if(day > 30) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::vector<std::string> v;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    while(std::getline(ss, temp, '-'))\n    {\n        v.push_back(temp);\n\
    \    }\n    if(v.size() != 3)\n    {\n        return false;\n    }\n    int month\
    \ = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12)\n    {\n        return false;\n    }\n    if(month\
    \ == 2)\n    {\n        if(day < 1 || day > 29)\n        {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day\
    \ < 1 || day > 31)\n        {\n            return false;\n        }\n    }\n \
    \   else\n    {\n        if(day < 1 || day > 30)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()\
    \ == 0)\n    return false;\n  std::stringstream ss(date);\n  std::string token;\n\
    \  std::vector<std::string> tokens;\n  while(std::getline(ss, token, '-'))\n \
    \   tokens.push_back(token);\n  if(tokens.size() != 3)\n    return false;\n  int\
    \ month = std::stoi(tokens[0]);\n  int day = std::stoi(tokens[1]);\n  int year\
    \ = std::stoi(tokens[2]);\n  if(month < 1 || month > 12)\n    return false;\n\
    \  if(month == 2) {\n    if(day < 1 || day > 29)\n      return false;\n  }\n \
    \ else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12) {\n    if(day < 1 || day > 31)\n      return false;\n\
    \  }\n  else {\n    if(day < 1 || day > 30)\n      return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmxrowqz8: /tmp/tmpmxrowqz8.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex date_regex(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ date_regex);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmyiac6h6: /tmp/tmpmyiac6h6.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> tokens;\n  while\
    \ (std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n  }\n  if (tokens.size()\
    \ != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n  int\
    \ day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (month == 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  } else {\n\
    \    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.size()==0)\n\
    \    return false;\n  std::stringstream ss(date);\n  std::string temp;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss,temp,'-'))\n    v.push_back(temp);\n  if(v.size()!=3)\n\
    \    return false;\n  int month=std::stoi(v[0]);\n  int day=std::stoi(v[1]);\n\
    \  int year=std::stoi(v[2]);\n  if(month<1 || month>12)\n    return false;\n \
    \ if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12)\n  {\n    if(day<1 || day>31)\n      return false;\n  }\n  else if(month==4\
    \ || month==6 || month==9 || month==11)\n  {\n    if(day<1 || day>30)\n      return\
    \ false;\n  }\n  else if(month==2)\n  {\n    if(day<1 || day>29)\n      return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    if(date.length()==0)\n    return false;\n    int i=0;\n    int month=0;\n\
    \    int day=0;\n    int year=0;\n    while(date[i]!='-')\n    {\n        month=month*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(date[i]!='-')\n    {\n        day=day*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(i<date.length())\n    {\n        year=year*10+(date[i]-'0');\n\
    \        i++;\n    }\n    if(month<1 || month>12)\n    return false;\n    if(month==1\
    \ || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)\n\
    \    {\n        if(day<1 || day>31)\n        return false;\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n\
    \        return false;\n    }\n    else if(month==2)\n    {\n        if(day<1\
    \ || day>29)\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) return false;\n  int month = std::stoi(v[0]);\n  int day\
    \ = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 || month >\
    \ 12) return false;\n  if(day < 1 || day > 31) return false;\n  if(month == 2)\
    \ {\n    if(day > 29) return false;\n  }\n  if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n    if(day > 30) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n  else {\n\
    \    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078581
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m\
    \ >> ch >> d >> ch >> y;\n    if(m < 1 || m > 12 || d < 1 || d > 31 || y < 1)\
    \ return false;\n    if(m == 2 && d > 29) return false;\n    if(m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n        if(d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()==0)\n\
    \        return false;\n    std::vector<std::string> v;\n    std::stringstream\
    \ ss(date);\n    std::string temp;\n    while(std::getline(ss,temp,'-'))\n   \
    \     v.push_back(temp);\n    if(v.size()!=3)\n        return false;\n    int\
    \ m=std::stoi(v[0]);\n    int d=std::stoi(v[1]);\n    int y=std::stoi(v[2]);\n\
    \    if(m<1 || m>12)\n        return false;\n    if(m==1 || m==3 || m==5 || m==7\
    \ || m==8 || m==10 || m==12)\n    {\n        if(d<1 || d>31)\n            return\
    \ false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d<1\
    \ || d>30)\n            return false;\n    }\n    else if(m==2)\n    {\n     \
    \   if(d<1 || d>29)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int i,j,k;\n    std::string s1,s2,s3;\n    for(i=0;i<date.length();i++)\n\
    \    {\n        if(date[i]=='-')\n            break;\n        s1+=date[i];\n \
    \   }\n    for(j=i+1;j<date.length();j++)\n    {\n        if(date[j]=='-')\n \
    \           break;\n        s2+=date[j];\n    }\n    for(k=j+1;k<date.length();k++)\n\
    \    {\n        s3+=date[k];\n    }\n    if(s1.length()==0||s2.length()==0||s3.length()==0)\n\
    \        return false;\n    int m=std::stoi(s1);\n    int d=std::stoi(s2);\n \
    \   int y=std::stoi(s3);\n    if(m<1||m>12)\n        return false;\n    if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)\n\
    \    {\n        if(d<1||d>31)\n            return false;\n    }\n    else if(m==4||m==6||m==9||m==11)\n\
    \    {\n        if(d<1||d>30)\n            return false;\n    }\n    else if(m==2)\n\
    \    {\n        if(d<1||d>29)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.size() <\
    \ 10) return false;\n  int month = stoi(date.substr(0,2));\n  int day = stoi(date.substr(3,2));\n\
    \  int year = stoi(date.substr(6,4));\n  if(month < 1 || month > 12) return false;\n\
    \  if(day < 1 || day > 31) return false;\n  if(month == 2 && day > 29) return\
    \ false;\n  if(month == 4 || month == 6 || month == 9 || month == 11) {\n    if(day\
    \ > 30) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()==0)\n\
    \        return false;\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> v;\n    while(std::getline(ss, token, '-'))\n  \
    \      v.push_back(token);\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month<1 || month>12)\n        return\
    \ false;\n    if(day<1 || day>31)\n        return false;\n    if(month==2 && day>29)\n\
    \        return false;\n    if((month==4 || month==6 || month==9 || month==11)\
    \ && day>30)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660078583
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  int day, month, year;\n\
    \  std::stringstream ss(date);\n  char discard;\n  ss >> month >> discard >> day\
    \ >> discard >> year;\n  if (month < 1 || month > 12) return false;\n  if (day\
    \ < 1 || day > 31) return false;\n  if (month == 2) {\n    if (day > 29) return\
    \ false;\n    if (day == 29) {\n      if (year % 4 != 0) return false;\n     \
    \ if (year % 100 == 0 && year % 400 != 0) return false;\n    }\n  }\n  if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078583
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ month, day, year;\n    std::getline(ss, month, '-');\n    std::getline(ss, day,\
    \ '-');\n    std::getline(ss, year, '-');\n    if(month.size() != 2 || day.size()\
    \ != 2 || year.size() != 4)\n        return false;\n    int m = std::stoi(month);\n\
    \    int d = std::stoi(day);\n    int y = std::stoi(year);\n    if(m < 1 || m\
    \ > 12)\n        return false;\n    if(m == 2) {\n        if(d < 1 || d > 29)\n\
    \            return false;\n    }\n    else if(m == 1 || m == 3 || m == 5 || m\
    \ == 7 || m == 8 || m == 10 || m == 12) {\n        if(d < 1 || d > 31)\n     \
    \       return false;\n    }\n    else {\n        if(d < 1 || d > 30)\n      \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078583
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    int m,d,y;\n  \
    \  sscanf(date.c_str(),\"%d-%d-%d\",&m,&d,&y);\n    if(m<1 || m>12) return false;\n\
    \    if(d<1 || d>31) return false;\n    if(m==2 && d>29) return false;\n    if(m==4\
    \ || m==6 || m==9 || m==11) {\n        if(d>30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m\
    \ >> ch >> d >> ch >> y;\n    if(ss.fail()) return false;\n    if(m < 1 || m >\
    \ 12) return false;\n    if(d < 1 || d > 31) return false;\n    if(m == 2) {\n\
    \        if(d > 29) return false;\n        if(d == 29) {\n            if(y % 4\
    \ != 0) return false;\n            if(y % 100 == 0 && y % 400 != 0) return false;\n\
    \        }\n    }\n    if(m == 4 || m == 6 || m == 9 || m == 11) {\n        if(d\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  int days[] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  int month, day, year;\n  if\
    \ (date.length() != 10) return false;\n  if (date[2] != '-' || date[5] != '-')\
    \ return false;\n  if (date[0] == '0') return false;\n  if (date[3] == '0') return\
    \ false;\n  if (date[6] == '0') return false;\n  if (date[7] == '0') return false;\n\
    \  if (date[8] == '0') return false;\n  if (date[9] == '0') return false;\n  month\
    \ = (date[0] - '0') * 10 + (date[1] - '0');\n  day = (date[3] - '0') * 10 + (date[4]\
    \ - '0');\n  year = (date[6] - '0') * 1000 + (date[7] - '0') * 100 + (date[8]\
    \ - '0') * 10 + (date[9] - '0');\n  if (month < 1 || month > 12) return false;\n\
    \  if (day < 1 || day > days[month - 1]) return false;\n  if (month == 2 && day\
    \ == 29) {\n    if (year % 4 != 0) return false;\n    if (year % 100 == 0 && year\
    \ % 400 != 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplhipzs0w: /tmp/tmplhipzs0w.cpp:34: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660078584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()==0)\n\
    \    return false;\n  int d=0,m=0,y=0;\n  int i=0;\n  while(date[i]!='-')\n  {\n\
    \    d=d*10+(date[i]-'0');\n    i++;\n  }\n  i++;\n  while(date[i]!='-')\n  {\n\
    \    m=m*10+(date[i]-'0');\n    i++;\n  }\n  i++;\n  while(i<date.length())\n\
    \  {\n    y=y*10+(date[i]-'0');\n    i++;\n  }\n  if(m==1 || m==3 || m==5 || m==7\
    \ || m==8 || m==10 || m==12)\n  {\n    if(d>=1 && d<=31)\n      return true;\n\
    \    else\n      return false;\n  }\n  else if(m==4 || m==6 || m==9 || m==11)\n\
    \  {\n    if(d>=1 && d<=30)\n      return true;\n    else\n      return false;\n\
    \  }\n  else if(m==2)\n  {\n    if(d>=1 && d<=29)\n      return true;\n    else\n\
    \      return false;\n  }\n  else\n    return false;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprqeozcug: /tmp/tmprqeozcug.cpp:59: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()\
    \ == 0)\n    return false;\n  std::stringstream ss(date);\n  int month, day, year;\n\
    \  char dash1, dash2;\n  ss >> month >> dash1 >> day >> dash2 >> year;\n  if(dash1\
    \ != '-' || dash2 != '-' || ss.fail())\n    return false;\n  if(month < 1 || month\
    \ > 12)\n    return false;\n  if(month == 2 && day > 29)\n    return false;\n\
    \  if(month == 2 && day == 29 && year % 4 != 0)\n    return false;\n  if((month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) && day > 31)\n    return false;\n  if((month == 4 || month ==\
    \ 6 || month == 9 || month == 11) && day > 30)\n    return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbezno929: /tmp/tmpbezno929.cpp:35: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0) return false;\n    int month = stoi(date.substr(0,2));\n    int day =\
    \ stoi(date.substr(3,2));\n    if(month < 1 || month > 12) return false;\n   \
    \ if(month == 2 && day > 29) return false;\n    if(month == 2 && day < 1) return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \      if(day > 30 || day < 1) return false;\n    }\n    if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if(day > 31 || day < 1) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw4o579lu: /tmp/tmpw4o579lu.cpp:38: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> tokens;\n    while(std::getline(ss, token, '-'))\
    \ {\n        tokens.push_back(token);\n    }\n    if(tokens.size() != 3) return\
    \ false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2) {\n        if(day < 1 || day > 29) return false;\n\
    \    } else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if(day < 1 || day > 31) return false;\n\
    \    } else {\n        if(day < 1 || day > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if(month == 2) {\n     \
    \   if(day > 29) {\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    int n = date.size();\n\
    \    if(n == 0) return false;\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> v;\n    while(std::getline(ss, token, '-'))\
    \ {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return false;\n\
    \    int m = std::stoi(v[0]);\n    int d = std::stoi(v[1]);\n    int y = std::stoi(v[2]);\n\
    \    if(m < 1 || m > 12) return false;\n    if(m == 2) {\n        if(d < 1 ||\
    \ d > 29) return false;\n    }\n    else if(m == 1 || m == 3 || m == 5 || m ==\
    \ 7 || m == 8 || m == 10 || m == 12) {\n        if(d < 1 || d > 31) return false;\n\
    \    }\n    else {\n        if(d < 1 || d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  int month, day, year;\n  std::stringstream ss(date);\n  char dash;\n  ss >>\
    \ month >> dash >> day >> dash >> year;\n  if(month < 1 || month > 12) return\
    \ false;\n  if(month == 2 && day > 29) return false;\n  if(month == 2 && day ==\
    \ 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n\
    \  if(month == 4 || month == 6 || month == 9 || month == 11) {\n    if(day < 1\
    \ || day > 30) return false;\n  }\n  else {\n    if(day < 1 || day > 31) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    if(ss >> m >> c >> d >> c >> y)\
    \ {\n        if(c != '-') return false;\n        if(m < 1 || m > 12) return false;\n\
    \        if(m == 2) {\n            if(d < 1 || d > 29) return false;\n       \
    \ } else if(m == 4 || m == 6 || m == 9 || m == 11) {\n            if(d < 1 ||\
    \ d > 30) return false;\n        } else {\n            if(d < 1 || d > 31) return\
    \ false;\n        }\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string item;\n  std::vector<std::string>\
    \ tokens;\n  while (std::getline(ss, item, '-')) {\n    tokens.push_back(item);\n\
    \  }\n  if (tokens.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (month == 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  } else {\n\
    \    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if(month == 2) {\n     \
    \   if(day > 29) {\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  std::smatch matches;\n\
    \  std::regex_search(date, matches, pattern);\n  if (matches.size() == 0) {\n\
    \    return false;\n  }\n  int month = std::stoi(matches[1]);\n  int day = std::stoi(matches[2]);\n\
    \  if (month == 2) {\n    if (day > 29) {\n      return false;\n    }\n  } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day >\
    \ 30) {\n      return false;\n    }\n  } else {\n    if (day > 31) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078588
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) return false;\n    int month = stoi(v[0]);\n   \
    \ int day = stoi(v[1]);\n    int year = stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) return false;\n    if(month == 2) {\n        if(day < 1 || day > 29) return\
    \ false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) return false;\n    }\n    else {\n        if(day < 1 || day > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string item;\n  std::vector<std::string>\
    \ splittedStrings;\n  while (std::getline(ss, item, '-')) {\n    splittedStrings.push_back(item);\n\
    \  }\n  if(splittedStrings.size() != 3)\n    return false;\n  int month = stoi(splittedStrings[0]);\n\
    \  int day = stoi(splittedStrings[1]);\n  int year = stoi(splittedStrings[2]);\n\
    \  if(month < 1 || month > 12)\n    return false;\n  if(day < 1 || day > 31)\n\
    \    return false;\n  if(month == 2 && day > 29)\n    return false;\n  if((month\
    \ == 4 || month == 6 || month == 9 || month == 11) && day > 30)\n    return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmxrowqz8: /tmp/tmpmxrowqz8.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string item;\n  std::vector<std::string>\
    \ splittedStrings;\n  while (std::getline(ss, item, '-')) {\n    splittedStrings.push_back(item);\n\
    \  }\n  if(splittedStrings.size() != 3) return false;\n  int month = stoi(splittedStrings[0]);\n\
    \  int day = stoi(splittedStrings[1]);\n  int year = stoi(splittedStrings[2]);\n\
    \  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return\
    \ false;\n  if(month == 2 && day > 29) return false;\n  if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n    if(day > 30) return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int d,m,y;\n    sscanf(date.c_str(),\"%d-%d-%d\",&m,&d,&y);\n\
    \    if(m<1 || m>12)\n        return false;\n    if(m==1 || m==3 || m==5 || m==7\
    \ || m==8 || m==10 || m==12)\n    {\n        if(d<1 || d>31)\n            return\
    \ false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d<1\
    \ || d>30)\n            return false;\n    }\n    else if(m==2)\n    {\n     \
    \   if(d<1 || d>29)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    //your code here\n\
    \    int n = date.length();\n    if(n == 0)\n        return false;\n    int i\
    \ = 0;\n    while(date[i] != '-')\n        i++;\n    int month = stoi(date.substr(0,\
    \ i));\n    int j = i + 1;\n    while(date[j] != '-')\n        j++;\n    int day\
    \ = stoi(date.substr(i + 1, j - i - 1));\n    int year = stoi(date.substr(j +\
    \ 1, n - j - 1));\n    if(month < 1 || month > 12)\n        return false;\n  \
    \  if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return\
    \ false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 ||\
    \ day > 31)\n            return false;\n    }\n    else\n    {\n        if(day\
    \ < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 130) > this->size() (which is 8)\n"
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ splittedStrings;\n    while (std::getline(ss, item, '-'))\n    {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size()!=3){\n        return false;\n    }\n   \
    \ int month = std::stoi(splittedStrings[0]);\n    int day = std::stoi(splittedStrings[1]);\n\
    \    int year = std::stoi(splittedStrings[2]);\n    if(month<1 || month>12){\n\
    \        return false;\n    }\n    if(month==1 || month==3 || month==5 || month==7\
    \ || month==8 || month==10 || month==12){\n        if(day<1 || day>31){\n    \
    \        return false;\n        }\n    }\n    else if(month==4 || month==6 ||\
    \ month==9 || month==11){\n        if(day<1 || day>30){\n            return false;\n\
    \        }\n    }\n    else if(month==2){\n        if(day<1 || day>29){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    int day = stoi(date.substr(3,2));\n    int\
    \ month = stoi(date.substr(0,2));\n    int year = stoi(date.substr(6,4));\n  \
    \  if(month < 1 || month > 12)\n        return false;\n    if(month == 2)\n  \
    \  {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    else\
    \ if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return\
    \ false;\n    }\n    else\n    {\n        if(day < 1 || day > 30)\n          \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjhq_8ip4: /tmp/tmpjhq_8ip4.cpp:48: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ date_vec;\n    while(std::getline(ss, token, '-')) {\n        date_vec.push_back(token);\n\
    \    }\n    if(date_vec.size() != 3) {\n        return false;\n    }\n    int\
    \ month = std::stoi(date_vec[0]);\n    int day = std::stoi(date_vec[1]);\n   \
    \ int year = std::stoi(date_vec[2]);\n    if(month < 1 || month > 12) {\n    \
    \    return false;\n    }\n    if(month == 2) {\n        if(day < 1 || day > 29)\
    \ {\n            return false;\n        }\n    }\n    else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if(day < 1 || day > 31) {\n            return false;\n        }\n\
    \    }\n    else {\n        if(day < 1 || day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0) return false;\n    int month = stoi(date.substr(0,2));\n    int day =\
    \ stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2 && day > 29) return false;\n    if(month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if(day > 30) return false;\n    }\n\
    \    if(year < 0) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_k1kvl2e: /tmp/tmp_k1kvl2e.cpp:37: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078585
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  std::smatch matches;\n\
    \  if(std::regex_search(date, matches, pattern)) {\n    int month = std::stoi(matches[1]);\n\
    \    int day = std::stoi(matches[2]);\n    if(month == 2) {\n      if(day > 29)\
    \ {\n        return false;\n      }\n    } else if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n      if(day > 30) {\n        return false;\n\
    \      }\n    } else {\n      if(day > 31) {\n        return false;\n      }\n\
    \    }\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078588
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()\
    \ == 0) return false;\n  std::vector<std::string> date_vec;\n  std::stringstream\
    \ ss(date);\n  std::string temp;\n  while(std::getline(ss, temp, '-')) {\n   \
    \ date_vec.push_back(temp);\n  }\n  if(date_vec.size() != 3) return false;\n \
    \ int month = std::stoi(date_vec[0]);\n  int day = std::stoi(date_vec[1]);\n \
    \ int year = std::stoi(date_vec[2]);\n  if(month < 1 || month > 12) return false;\n\
    \  if(month == 2) {\n    if(day < 1 || day > 29) return false;\n  } else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n    if(day < 1 || day > 31) return false;\n  } else {\n \
    \   if(day < 1 || day > 30) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078586
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()\
    \ == 0) return false;\n  std::stringstream ss(date);\n  int month, day, year;\n\
    \  char dash1, dash2;\n  ss >> month >> dash1 >> day >> dash2 >> year;\n  if(dash1\
    \ != '-' || dash2 != '-' || month < 1 || month > 12 || day < 1 || day > 31 ||\
    \ year < 0) return false;\n  if(month == 2 && day > 29) return false;\n  if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n    if(day > 30) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n  return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmxrowqz8: /tmp/tmpmxrowqz8.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    std::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\"\
    );\n    return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmr7oszqd: /tmp/tmpmr7oszqd.cpp:24: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n\t// your code here\n\
    \tstd::stringstream ss(date);\n\tstd::string item;\n\tstd::vector<std::string>\
    \ tokens;\n\twhile (std::getline(ss, item, '-')) {\n\t\ttokens.push_back(item);\n\
    \t}\n\tif (tokens.size() != 3) {\n\t\treturn false;\n\t}\n\tint month = std::stoi(tokens[0]);\n\
    \tint day = std::stoi(tokens[1]);\n\tint year = std::stoi(tokens[2]);\n\tif (month\
    \ < 1 || month > 12) {\n\t\treturn false;\n\t}\n\tif (month == 2) {\n\t\tif (day\
    \ < 1 || day > 29) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n\t\tif (day < 1 || day > 31) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    else {\n\t\tif (day < 1 || day > 30) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    // std::cout<<date<<std::endl;\n    if(date.size()==0)\n        return false;\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size()!=3)\n        return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month<1 || month>12)\n        return false;\n    if(month==2) {\n     \
    \   if(day<1 || day>29)\n            return false;\n    }\n    else if(month==1\
    \ || month==3 || month==5 || month==7 || month==8 || month==10 || month==12) {\n\
    \        if(day<1 || day>31)\n            return false;\n    }\n    else {\n \
    \       if(day<1 || day>30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::regex r(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\");\n  return\
    \ std::regex_match(date, r);\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpq7rwultl: /tmp/tmpq7rwultl.cpp:24: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) return false;\n  int month = stoi(v[0]);\n  int day = stoi(v[1]);\n\
    \  int year = stoi(v[2]);\n  if(month < 1 || month > 12) return false;\n  if(month\
    \ == 2) {\n    if(day < 1 || day > 29) return false;\n  }\n  else if(month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) {\n    if(day < 1 || day > 31) return false;\n  }\n  else {\n \
    \   if(day < 1 || day > 30) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n    return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv4lddauj: /tmp/tmpv4lddauj.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    if(date.length() == 0)\n        return false;\n    int d,m,y;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12)\n   \
    \     return false;\n    if(m==1 || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n\
    \    {\n        if(d<1 || d>31)\n            return false;\n    }\n    else if(m==4\
    \ || m==6 || m==9 || m==11)\n    {\n        if(d<1 || d>30)\n            return\
    \ false;\n    }\n    else if(m==2)\n    {\n        if(d<1 || d>29)\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n\
    \    while (std::getline(ss, item, '-')) {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size()!=3)\n        return false;\n    int day\
    \ = stoi(splittedStrings[1]);\n    int month = stoi(splittedStrings[0]);\n   \
    \ int year = stoi(splittedStrings[2]);\n    if(month<1 || month>12)\n        return\
    \ false;\n    if(month==2){\n        if(day<1 || day>29)\n            return false;\n\
    \    }\n    else if(month==1 || month==3 || month==5 || month==7 || month==8 ||\
    \ month==10 || month==12){\n        if(day<1 || day>31)\n            return false;\n\
    \    }\n    else{\n        if(day<1 || day>30)\n            return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    );\n  return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmphrivmx3n: /tmp/tmphrivmx3n.cpp:24: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  int d, m, y;\n  char c;\n  if (ss >> m >> c\
    \ >> d >> c >> y) {\n    if (c != '-') return false;\n    if (m < 1 || m > 12)\
    \ return false;\n    if (d < 1 || d > 31) return false;\n    if (m == 2) {\n \
    \     if (d > 29) return false;\n    } else if (m == 4 || m == 6 || m == 9 ||\
    \ m == 11) {\n      if (d > 30) return false;\n    }\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int len = date.length();\n    if(len == 0)\n        return false;\n    int\
    \ i = 0;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    while(date[i]\
    \ != '-'){\n        month = month*10 + (date[i] - '0');\n        i++;\n    }\n\
    \    i++;\n    while(date[i] != '-'){\n        day = day*10 + (date[i] - '0');\n\
    \        i++;\n    }\n    i++;\n    while(i < len){\n        year = year*10 +\
    \ (date[i] - '0');\n        i++;\n    }\n    if(month < 1 || month > 12)\n   \
    \     return false;\n    if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day >\
    \ 31)\n            return false;\n    }\n    else if(month == 4 || month == 6\
    \ || month == 9 || month == 11){\n        if(day < 1 || day > 30)\n          \
    \  return false;\n    }\n    else{\n        if(day < 1 || day > 29)\n        \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int day,month,year;\n    std::stringstream ss(date);\n    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month<1 || month>12)\n        return false;\n    if(day<1 || day>31)\n\
    \        return false;\n    if(month==2)\n    {\n        if(day>29)\n        \
    \    return false;\n    }\n    if(month==4 || month==6 || month==9 || month==11)\n\
    \    {\n        if(day>30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n    return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv4lddauj: /tmp/tmpv4lddauj.cpp:23: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) return false;\n  int month = std::stoi(v[0]);\n  int day\
    \ = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 || month >\
    \ 12) return false;\n  if(month == 2) {\n    if(day < 1 || day > 29) return false;\n\
    \  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) return false;\n\
    \  }\n  else {\n    if(day < 1 || day > 30) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()==0)\n\
    \        return false;\n    int d,m,y;\n    std::stringstream ss(date);\n    char\
    \ ch;\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12)\n        return false;\n\
    \    if(m==1 || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n    {\n     \
    \   if(d<1 || d>31)\n            return false;\n    }\n    else if(m==4 || m==6\
    \ || m==9 || m==11)\n    {\n        if(d<1 || d>30)\n            return false;\n\
    \    }\n    else if(m==2)\n    {\n        if(d<1 || d>29)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    if(date.length()==0)\n    return false;\n    int m,d,y;\n    m=d=y=0;\n \
    \   int i=0;\n    while(date[i]!='-')\n    {\n        m=m*10+date[i]-'0';\n  \
    \      i++;\n    }\n    i++;\n    while(date[i]!='-')\n    {\n        d=d*10+date[i]-'0';\n\
    \        i++;\n    }\n    i++;\n    while(i<date.length())\n    {\n        y=y*10+date[i]-'0';\n\
    \        i++;\n    }\n    if(m<1 || m>12)\n    return false;\n    if(m==1 || m==3\
    \ || m==5 || m==7 || m==8 || m==10 || m==12)\n    {\n        if(d<1 || d>31)\n\
    \        return false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n  \
    \  {\n        if(d<1 || d>30)\n        return false;\n    }\n    else if(m==2)\n\
    \    {\n        if(d<1 || d>29)\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int len = date.length();\n    if(len == 0)\n        return false;\n    int\
    \ i = 0;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    while(date[i]\
    \ != '-')\n    {\n        month = month*10 + (date[i] - '0');\n        i++;\n\
    \    }\n    i++;\n    while(date[i] != '-')\n    {\n        day = day*10 + (date[i]\
    \ - '0');\n        i++;\n    }\n    i++;\n    while(i < len)\n    {\n        year\
    \ = year*10 + (date[i] - '0');\n        i++;\n    }\n    if(month < 1 || month\
    \ > 12)\n        return false;\n    if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day >\
    \ 30)\n            return false;\n    }\n    else\n    {\n        if(day < 1 ||\
    \ day > 29)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078582
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // Your code here\n\
    \  std::stringstream ss(date);\n  std::string temp;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, temp, '-')){\n    v.push_back(temp);\n  }\n  if(v.size()\
    \ != 3){\n    return false;\n  }\n  int month = std::stoi(v[0]);\n  int day =\
    \ std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12){\n\
    \    return false;\n  }\n  if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n    if(day < 1 || day >\
    \ 31){\n      return false;\n    }\n  }\n  else if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11){\n    if(day < 1 || day > 30){\n      return false;\n\
    \    }\n  }\n  else if(month == 2){\n    if(day < 1 || day > 29){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ splittedStrings;\n    while (std::getline(ss, item, '-'))\n    {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size()!=3)\n        return false;\n    int month\
    \ = std::stoi(splittedStrings[0]);\n    int day = std::stoi(splittedStrings[1]);\n\
    \    int year = std::stoi(splittedStrings[2]);\n    if(month<1 || month>12)\n\
    \        return false;\n    if(day<1 || day>31)\n        return false;\n    if(month==2\
    \ && day>29)\n        return false;\n    if(month==4 || month==6 || month==9 ||\
    \ month==11)\n    {\n        if(day>30)\n            return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.length()\
    \ == 0)\n        return false;\n    int d,m,y;\n    std::stringstream ss(date);\n\
    \    char ch;\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12)\n        return false;\n\
    \    if(d<1 || d>31)\n        return false;\n    if(m==2)\n    {\n        if(d>29)\n\
    \            return false;\n    }\n    if(m==4 || m==6 || m==9 || m==11)\n   \
    \ {\n        if(d>30)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    int i,j,k;\n  \
    \  std::string month,day,year;\n    month = date.substr(0,2);\n    day = date.substr(3,2);\n\
    \    year = date.substr(6,4);\n    if(month.size()==0 || day.size()==0 || year.size()==0)\n\
    \        return false;\n    for(i=0;i<month.size();i++)\n    {\n        if(month[i]<'0'\
    \ || month[i]>'9')\n            return false;\n    }\n    for(i=0;i<day.size();i++)\n\
    \    {\n        if(day[i]<'0' || day[i]>'9')\n            return false;\n    }\n\
    \    for(i=0;i<year.size();i++)\n    {\n        if(year[i]<'0' || year[i]>'9')\n\
    \            return false;\n    }\n    int m = stoi(month);\n    int d = stoi(day);\n\
    \    int y = stoi(year);\n    if(m<1 || m>12)\n        return false;\n    if(m==1\
    \ || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)\n    {\n        if(d<1 ||\
    \ d>31)\n            return false;\n    }\n    else if(m==4 || m==6 || m==9 ||\
    \ m==11)\n    {\n        if(d<1 || d>30)\n            return false;\n    }\n \
    \   else if(m==2)\n    {\n        if(d<1 || d>29)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 3) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    int day, month, year;\n    char c;\n   \
    \ ss >> month >> c >> day >> c >> year;\n    if (month < 1 || month > 12)\n  \
    \      return false;\n    if (day < 1 || day > 31)\n        return false;\n  \
    \  if (month == 2) {\n        if (day > 29)\n            return false;\n     \
    \   if (day == 29) {\n            if (year % 4 != 0)\n                return false;\n\
    \            if (year % 100 == 0 && year % 400 != 0)\n                return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(v[0]);\n\
    \  int day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(year < 0) {\n\
    \    return false;\n  }\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078588
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    if(date.size()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    std::vector<std::string> tokens;\n    while(std::getline(ss, temp,\
    \ '-')) {\n        tokens.push_back(temp);\n    }\n    if(tokens.size() != 3)\n\
    \        return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12)\n     \
    \   return false;\n    if(month == 2) {\n        if(day < 1 || day > 29)\n   \
    \         return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else {\n        if(day\
    \ < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078588
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  int day,month,year;\n  std::stringstream ss(date);\n  char ch;\n  ss>>month>>ch>>day>>ch>>year;\n\
    \  if(month<1 || month>12)\n    return false;\n  if(day<1 || day>31)\n    return\
    \ false;\n  if(month==2 && day>29)\n    return false;\n  if((month==4 || month==6\
    \ || month==9 || month==11) && day>30)\n    return false;\n  return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.length()\
    \ == 0) return false;\n  std::stringstream ss(date);\n  std::string temp;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss, temp, '-')) {\n    tokens.push_back(temp);\n\
    \  }\n  if(tokens.size() != 3) return false;\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) return false;\n  if(month == 2) {\n    if(day < 1 || day\
    \ > 29) return false;\n  } else if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day >\
    \ 31) return false;\n  } else {\n    if(day < 1 || day > 30) return false;\n \
    \ }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  if(date.size() ==\
    \ 0) return false;\n  int month = stoi(date.substr(0,2));\n  int day = stoi(date.substr(3,2));\n\
    \  int year = stoi(date.substr(6,4));\n  if(month < 1 || month > 12) return false;\n\
    \  if(month == 2 && day > 29) return false;\n  if(month == 2 && day < 1) return\
    \ false;\n  if(month == 2 && day == 29 && year % 4 != 0) return false;\n  if(month\
    \ == 2 && day == 29 && year % 100 == 0 && year % 400 != 0) return false;\n  if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n    if(day < 1 || day > 31) return false;\n  }\n  if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n    if(day < 1 || day >\
    \ 30) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9u0dtpg8: /tmp/tmp9u0dtpg8.cpp:41: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::vector<std::string>\
    \ v;\n  std::stringstream ss(date);\n  std::string temp;\n  while(std::getline(ss,\
    \ temp, '-')) {\n    v.push_back(temp);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    //cout<<date<<endl;\n    if(date.length()==0)\n        return false;\n  \
    \  int i=0;\n    int month=0;\n    int day=0;\n    int year=0;\n    while(date[i]!='-')\n\
    \    {\n        month=month*10+(date[i]-'0');\n        i++;\n    }\n    i++;\n\
    \    while(date[i]!='-')\n    {\n        day=day*10+(date[i]-'0');\n        i++;\n\
    \    }\n    i++;\n    while(i<date.length())\n    {\n        year=year*10+(date[i]-'0');\n\
    \        i++;\n    }\n    //cout<<month<<\" \"<<day<<\" \"<<year<<endl;\n    if(month<1\
    \ || month>12)\n        return false;\n    if(month==1 || month==3 || month==5\
    \ || month==7 || month==8 || month==10 || month==12)\n    {\n        if(day<1\
    \ || day>31)\n            return false;\n    }\n    else if(month==4 || month==6\
    \ || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n            return\
    \ false;\n    }\n    else if(month==2)\n    {\n        if(day<1 || day>29)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // Your code here\n\
    \    int day, month, year;\n    std::stringstream ss(date);\n    char c;\n   \
    \ ss >> month >> c >> day >> c >> year;\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n\
    \        if (day > 29) return false;\n        if (day == 29) {\n            if\
    \ (year % 4 != 0) return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0) return false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    int day, month,\
    \ year;\n    if (date.size() == 0) return false;\n    if (sscanf(date.c_str(),\
    \ \"%d-%d-%d\", &month, &day, &year) != 3) return false;\n    if (month < 1 ||\
    \ month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if\
    \ (month == 2) {\n        if (day > 29) return false;\n        if (day == 29)\
    \ {\n            if (year % 4 != 0) return false;\n            if (year % 100\
    \ == 0 && year % 400 != 0) return false;\n        }\n    } else if (month == 4\
    \ || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  // your code here\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ tokens;\n  while(std::getline(ss, token, '-')) {\n    tokens.push_back(token);\n\
    \  }\n  if(tokens.size() != 3) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n \
    \ else {\n    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  int day, month, year;\n\
    \  if (date.length() == 0)\n    return false;\n  if (date.length() != 10)\n  \
    \  return false;\n  if (date[2] != '-' || date[5] != '-')\n    return false;\n\
    \  if (date[0] == '0')\n    return false;\n  if (date[3] == '0')\n    return false;\n\
    \  if (date[6] == '0')\n    return false;\n  if (date[7] == '0')\n    return false;\n\
    \  if (date[8] == '0')\n    return false;\n  if (date[9] == '0')\n    return false;\n\
    \  if (date[1] < '0' || date[1] > '9')\n    return false;\n  if (date[4] < '0'\
    \ || date[4] > '9')\n    return false;\n  if (date[7] < '0' || date[7] > '9')\n\
    \    return false;\n  if (date[8] < '0' || date[8] > '9')\n    return false;\n\
    \  if (date[9] < '0' || date[9] > '9')\n    return false;\n  if (date[10] < '0'\
    \ || date[10] > '9')\n    return false;\n  day = (date[0] - '0') * 10 + (date[1]\
    \ - '0');\n  month = (date[3] - '0') * 10 + (date[4] - '0');\n  year = (date[6]\
    \ - '0') * 1000 + (date[7] - '0') * 100 + (date[8] - '0') * 10 + (date[9] - '0');\n\
    \  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n    if (day < 1 || day > 31)\n      return false;\n\
    \  }\n  else if (month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \  if (day < 1 || day > 30)\n     \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphy111cdb.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphy111cdb.cpp:52:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   52 | }\n      | ^\n/tmp/tmphy111cdb.cpp:53:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   53 | int main() {\n     \
    \ |            ^\n/tmp/tmphy111cdb.cpp:71:1: error: expected \u2018}\u2019 at\
    \ end of input\n   71 | }\n      | ^\n/tmp/tmphy111cdb.cpp:10:35: note: to match\
    \ this \u2018{\u2019\n   10 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmphy111cdb.cpp:71:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   71 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code goes\
    \ here\n    int day,month,year;\n    std::stringstream ss(date);\n    char ch;\n\
    \    ss>>month>>ch>>day>>ch>>year;\n    if(month<1 || month>12)\n        return\
    \ false;\n    if(day<1 || day>31)\n        return false;\n    if(month==2)\n \
    \   {\n        if(day>29)\n            return false;\n    }\n    if(month==4 ||\
    \ month==6 || month==9 || month==11)\n    {\n        if(day>30)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    // your code here\n\
    \    int i,j,k;\n    int m,d,y;\n    int flag=0;\n    if(date.length()==0)\n \
    \       return false;\n    for(i=0;i<date.length();i++)\n    {\n        if(date[i]=='-')\n\
    \        {\n            flag++;\n        }\n    }\n    if(flag!=2)\n        return\
    \ false;\n    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ result;\n    while(std::getline(ss, token, '-')) {\n        result.push_back(token);\n\
    \    }\n    m=std::stoi(result[0]);\n    d=std::stoi(result[1]);\n    y=std::stoi(result[2]);\n\
    \    if(m<1 || m>12)\n        return false;\n    if(d<1 || d>31)\n        return\
    \ false;\n    if(m==2)\n    {\n        if(d>29)\n            return false;\n \
    \   }\n    if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d>30)\n      \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n  std::stringstream\
    \ ss(date);\n  std::string item;\n  std::vector<std::string> splittedStrings;\n\
    \  while (std::getline(ss, item, '-')) {\n    splittedStrings.push_back(item);\n\
    \  }\n  if (splittedStrings.size() != 3) {\n    return false;\n  }\n  int month\
    \ = std::stoi(splittedStrings[0]);\n  int day = std::stoi(splittedStrings[1]);\n\
    \  int year = std::stoi(splittedStrings[2]);\n  if (month < 1 || month > 12) {\n\
    \    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n\
    \      return false;\n    }\n  } else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day\
    \ < 1 || day > 31) {\n      return false;\n    }\n  } else {\n    if (day < 1\
    \ || day > 30) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\nbool valid_date(std::string date) {\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while (std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if (tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n          \
    \  return false;\n        }\n    } else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if\
    \ (day < 1 || day > 31) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 30) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660078573
