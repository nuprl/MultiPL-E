language: cpp
name: HumanEval_146_specialFilter
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       if (nums[i] > 10) {\n            int first = nums[i] / 10;\n         \
    \   int last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2l3wl87w: /tmp/tmp2l3wl87w.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2jl9plsk: /tmp/tmp2jl9plsk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / 10;\n            if (firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1fpfwn38: /tmp/tmp1fpfwn38.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long num = nums[i];\n            if\
    \ (num % 2 != 0) {\n                while (num > 0) {\n                    if\
    \ (num % 10 % 2 != 0) {\n                        count++;\n                  \
    \      break;\n                    }\n                    num /= 10;\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq76wvmue: /tmp/tmpq76wvmue.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto num : nums) {\n        if (num >\
    \ 10) {\n            long first = num % 10;\n            long last = num / pow(10,\
    \ floor(log10(num)));\n            if (first % 2 != 0 && last % 2 != 0) {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ last = temp % 10;\n            while (temp > 0) {\n                if (temp\
    \ < 10) {\n                    if (temp % 2 != 0 && last % 2 != 0) {\n       \
    \                 count++;\n                    }\n                    break;\n\
    \                }\n                temp = temp / 10;\n            }\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long first = nums[i] % 10;\n      long last = nums[i]\
    \ / 10;\n      if (first % 2 != 0 && last % 2 != 0) {\n        count++;\n    \
    \  }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp596mm11s: /tmp/tmp596mm11s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  // your code here\n  long count = 0;\n  for(int i = 0; i < nums.size();\
    \ i++){\n    if(nums[i] > 10){\n      int first = nums[i] % 10;\n      int last\
    \ = nums[i] / 10;\n      if(first % 2 != 0 && last % 2 != 0){\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp28deqt_o: /tmp/tmp28deqt_o.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong firstDigit = nums[i] % 10;\n\t\t\tlong lastDigit\
    \ = nums[i] / 10;\n\t\t\tif (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n\t\t\
    \t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5_31tq04: /tmp/tmp5_31tq04.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ last = temp % 10;\n            while (temp > 0) {\n                int first\
    \ = temp % 10;\n                temp /= 10;\n            }\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgx0qhkr.cpp: In function \u2018long int specialFilter(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfgx0qhkr.cpp:17:17: error: \u2018first\u2019 was not declared\
    \ in this scope\n   17 |             if (first % 2 != 0 && last % 2 != 0) {\n\
    \      |                 ^~~~~\n"
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto num : nums) {\n        if (num >\
    \ 10) {\n            long first = num % 10;\n            long last = num / pow(10,\
    \ floor(log10(num)));\n            if (first % 2 != 0 && last % 2 != 0) {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  // your code here\n  long count = 0;\n  for(int i = 0; i < nums.size();\
    \ i++){\n    if(nums[i] > 10){\n      long temp = nums[i];\n      long first =\
    \ temp % 10;\n      long last = temp;\n      while(temp > 0){\n        last =\
    \ temp % 10;\n        temp /= 10;\n      }\n      if(first % 2 != 0 && last %\
    \ 2 != 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  // your code here\n  long count = 0;\n  for(int i = 0; i < nums.size();\
    \ i++){\n    if(nums[i] > 10){\n      if(nums[i] % 2 != 0){\n        if(nums[i]\
    \ / 10 % 2 != 0){\n          count++;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfjy64plr: /tmp/tmpfjy64plr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num / pow(10, floor(log10(num)));\n\
    \            if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long lastDigit = nums[i] % 10;\n   \
    \         long firstDigit = nums[i];\n            while (firstDigit >= 10) {\n\
    \                firstDigit = firstDigit / 10;\n            }\n            if\
    \ (lastDigit % 2 != 0 && firstDigit % 2 != 0) {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            while (temp > 0) {\n                int last\
    \ = temp % 10;\n                temp /= 10;\n            }\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8ruu1km.cpp: In function \u2018long int specialFilter(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu8ruu1km.cpp:17:35: error: \u2018last\u2019 was not declared\
    \ in this scope\n   17 |             if (first % 2 != 0 && last % 2 != 0) {\n\
    \      |                                   ^~~~\n"
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    if\
    \ (nums[i] > 10) {\n      long first = nums[i] % 10;\n      long last = nums[i]\
    \ / pow(10, floor(log10(nums[i])));\n      if (first % 2 != 0 && last % 2 != 0)\
    \ {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0;\
    \ i < nums.size(); i++){\n        if(nums[i] > 10){\n            int first = nums[i]\
    \ % 10;\n            int last = nums[i] / pow(10, floor(log10(nums[i])));\n  \
    \          if(first % 2 != 0 && last % 2 != 0){\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            while (temp > 0) {\n                temp /=\
    \ 10;\n            }\n            long last = temp % 10;\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5c_kah49: /tmp/tmp5c_kah49.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)-73, (long)14, (long)-15}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2jl9plsk: /tmp/tmp2jl9plsk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2jl9plsk: /tmp/tmp2jl9plsk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto num : nums) {\n        if (num >\
    \ 10) {\n            long firstDigit = num % 10;\n            long lastDigit =\
    \ num / 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmptak6gcu7: /tmp/tmptak6gcu7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2jl9plsk: /tmp/tmp2jl9plsk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / pow(10, floor(log10(nums[i])));\n      \
    \      if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / 10;\n            if (firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwuv9ywzb: /tmp/tmpwuv9ywzb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    if\
    \ (nums[i] > 10) {\n      long first = nums[i] / 10;\n      long last = nums[i]\
    \ % 10;\n      if (first % 2 != 0 && last % 2 != 0) {\n        count++;\n    \
    \  }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9twsdaaq: /tmp/tmp9twsdaaq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while (last >=\
    \ 10) {\n                last /= 10;\n            }\n            if (first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long firstDigit = nums[i] % 10;\n      long lastDigit\
    \ = nums[i] / 10;\n      if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n  \
    \      count++;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp926w6_40: /tmp/tmp926w6_40.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2jl9plsk: /tmp/tmp2jl9plsk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       if (nums[i] > 10) {\n            int first = nums[i] % 10;\n         \
    \   int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbojjomqk: /tmp/tmpbojjomqk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long count = 0;\n    for(auto i =\
    \ nums.begin(); i != nums.end(); i++) {\n        long num = *i;\n        if(num\
    \ > 10) {\n            long first = num % 10;\n            long last = num;\n\
    \            while(last >= 10) {\n                last /= 10;\n            }\n\
    \            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto num : nums) {\n        if (num >\
    \ 10 && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5oosb4xl: /tmp/tmp5oosb4xl.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long first = nums[i] / 10;\n      long last = nums[i]\
    \ % 10;\n      if (first % 2 != 0 && last % 2 != 0) {\n        count++;\n    \
    \  }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpiksr5auh: /tmp/tmpiksr5auh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto i : nums) {\n        if (i > 10\
    \ && i % 2 != 0 && i / 10 % 2 != 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2c2ue14r: /tmp/tmp2c2ue14r.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, (int)log10(nums[i]));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long first = nums[i] % 10;\n      long last = nums[i]\
    \ / pow(10, floor(log10(nums[i])));\n      if (first % 2 != 0 && last % 2 != 0)\
    \ {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp / pow(10, floor(log10(temp)));\n\
    \            if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long temp = nums[i];\n      long first = temp % 10;\n\
    \      long last = temp;\n      while (temp > 0) {\n        last = temp % 10;\n\
    \        temp /= 10;\n      }\n      if (first % 2 != 0 && last % 2 != 0) {\n\
    \        count++;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n   \
    \ auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int lastDigit = nums[i] % 10;\n    \
    \        int firstDigit = nums[i];\n            while (firstDigit >= 10) {\n \
    \               firstDigit /= 10;\n            }\n            if (lastDigit %\
    \ 2 != 0 && firstDigit % 2 != 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int firstDigit = nums[i] % 10;\n   \
    \         int lastDigit = nums[i] / pow(10, floor(log10(nums[i])));\n        \
    \    if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif\
    \ (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\t\t\tint last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4rtv2ed2: /tmp/tmp4rtv2ed2.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            if (nums[i] % 2 != 0) {\n          \
    \      long temp = nums[i];\n                long first = temp % 10;\n       \
    \         long last = temp;\n                while (temp > 0) {\n            \
    \        last = temp % 10;\n                    temp /= 10;\n                }\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long n = nums[i];\n            long\
    \ first = n % 10;\n            long last = n;\n            while (last >= 10)\
    \ {\n                last /= 10;\n            }\n            if (first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] % 10;\n\t\t\tlong last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9rwtu7lu: /tmp/tmp9rwtu7lu.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count=0;\n    for(auto i:nums){\n        if(i>10){\n     \
    \       int first=i%10;\n            int last=i;\n            while(last>=10){\n\
    \                last=last/10;\n            }\n            if(first%2!=0 && last%2!=0){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long first = nums[i] % 10;\n      long last = nums[i]\
    \ / 10;\n      if (first % 2 != 0 && last % 2 != 0) {\n        count++;\n    \
    \  }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp596mm11s: /tmp/tmp596mm11s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first_digit = nums[i] % 10;\n \
    \           long last_digit = nums[i] / 10;\n            if (first_digit % 2 !=\
    \ 0 && last_digit % 2 != 0) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8jw9ukqw: /tmp/tmp8jw9ukqw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long count = 0;\n    for(long i =\
    \ 0; i < nums.size(); i++){\n        long num = nums[i];\n        if(num > 10){\n\
    \            long first = num;\n            long last = num % 10;\n          \
    \  while(first > 10){\n                first = first / 10;\n            }\n  \
    \          if(first % 2 != 0 && last % 2 != 0){\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_885dfhe: /tmp/tmp_885dfhe.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count=0;\n    for(int i=0;i<nums.size();i++){\n        if(nums[i]>10){\n\
    \            long temp=nums[i];\n            int first=temp%10;\n            int\
    \ last=temp;\n            while(temp>0){\n                last=temp%10;\n    \
    \            temp=temp/10;\n            }\n            if(first%2!=0 && last%2!=0){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 10) {\n                temp /= 10;\n            }\n            if (temp % 2\
    \ != 0 && first % 2 != 0) {\n                count++;\n            }\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmkwg9c8p: /tmp/tmpmkwg9c8p.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  // your code here\n  long count = 0;\n  for(int i = 0; i < nums.size();\
    \ i++){\n    if(nums[i] > 10){\n      if(nums[i] % 2 != 0){\n        if(nums[i]\
    \ / 10 % 2 != 0){\n          if(nums[i] % 10 % 2 != 0){\n            count++;\n\
    \          }\n        }\n      }\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgrl14fok: /tmp/tmpgrl14fok.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2jl9plsk: /tmp/tmp2jl9plsk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / 10;\n            if (firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1fpfwn38: /tmp/tmp1fpfwn38.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (auto num : nums) {\n    if (num > 10) {\n\
    \      std::string str = std::to_string(num);\n      if (str[0] % 2 != 0 && str[str.length()\
    \ - 1] % 2 != 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, (int)log10(nums[i]));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while (last >=\
    \ 10) {\n                last /= 10;\n            }\n            if (first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long n = nums[i];\n            long\
    \ first = n % 10;\n            long last = n;\n            while (last >= 10)\
    \ {\n                last /= 10;\n            }\n            if (first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp / pow(10, floor(log10(temp)));\n\
    \            if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = 0;\n            while (temp > 0)\
    \ {\n                last = temp % 10;\n                temp /= 10;\n        \
    \    }\n            if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / 10;\n            if (firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1fpfwn38: /tmp/tmp1fpfwn38.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / pow(10, floor(log10(nums[i])));\n      \
    \      if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / 10;\n            if (firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwuv9ywzb: /tmp/tmpwuv9ywzb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto i = nums.begin(); i != nums.end();\
    \ i++) {\n        if (*i > 10) {\n            long first = *i;\n            long\
    \ last = *i;\n            while (first > 10) {\n                first /= 10;\n\
    \            }\n            while (last > 10) {\n                last %= 10;\n\
    \            }\n            if (first % 2 != 0 && last % 2 != 0) {\n         \
    \       count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm553bvi4: /tmp/tmpm553bvi4.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / pow(10, floor(log10(nums[i])));\n      \
    \      if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            int first = nums[i] % 10;\n        \
    \    int last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       if (nums[i] > 10) {\n            int first = nums[i] % 10;\n         \
    \   int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbojjomqk: /tmp/tmpbojjomqk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    if\
    \ (nums[i] > 10) {\n      long firstDigit = nums[i] % 10;\n      long lastDigit\
    \ = nums[i] / pow(10, floor(log10(nums[i])));\n      if (firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto num : nums) {\n        if (num >\
    \ 10) {\n            long first = num % 10;\n            long last = num / 10;\n\
    \            while (last >= 10) {\n                last /= 10;\n            }\n\
    \            if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp / pow(10, floor(log10(temp)));\n\
    \            if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  // your code here\n  long count = 0;\n  for(int i = 0; i < nums.size();\
    \ i++){\n    if(nums[i] > 10){\n      long temp = nums[i];\n      long first =\
    \ temp % 10;\n      long last = temp;\n      while(temp > 0){\n        last =\
    \ temp % 10;\n        temp /= 10;\n      }\n      if(first % 2 != 0 && last %\
    \ 2 != 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n  \
    \          long lastDigit = nums[i] / 10;\n            if (firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwuv9ywzb: /tmp/tmpwuv9ywzb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       if (nums[i] > 10) {\n            int first = nums[i] % 10;\n         \
    \   int last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbojjomqk: /tmp/tmpbojjomqk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while (last >=\
    \ 10) {\n                last /= 10;\n            }\n            if (first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            int last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 10) {\n                temp /= 10;\n            }\n            if (first % 2\
    \ != 0 && temp % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9f9t2dg9: /tmp/tmp9f9t2dg9.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num;\n            while (last >=\
    \ 10) {\n                last /= 10;\n            }\n            if (first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tif (nums[i] % 2 != 0) {\n\t\t\t\tlong temp = nums[i];\n\
    \t\t\t\tlong first = temp % 10;\n\t\t\t\twhile (temp > 0) {\n\t\t\t\t\ttemp =\
    \ temp / 10;\n\t\t\t\t}\n\t\t\t\tlong last = temp % 10;\n\t\t\t\tif (first % 2\
    \ != 0 && last % 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_2_ik89v: /tmp/tmp_2_ik89v.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)-73, (long)14, (long)-15}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto i : nums) {\n        if (i > 10)\
    \ {\n            std::string s = std::to_string(i);\n            if (s[0] % 2\
    \ != 0 && s[s.length() - 1] % 2 != 0) {\n                count++;\n          \
    \  }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\t// Write your code here\n\tlong count = 0;\n\tfor (int i = 0; i <\
    \ nums.size(); i++) {\n\t\tif (nums[i] > 10) {\n\t\t\tlong num = nums[i];\n\t\t\
    \tlong first = num % 10;\n\t\t\tlong last = num;\n\t\t\twhile (last >= 10) {\n\
    \t\t\t\tlast = last / 10;\n\t\t\t}\n\t\t\tif (first % 2 != 0 && last % 2 != 0)\
    \ {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zwo4zrz: /tmp/tmp2zwo4zrz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tint first = nums[i] % 10;\n\t\t\tint last = nums[i]\
    \ / pow(10, floor(log10(nums[i])));\n\t\t\tif (first % 2 != 0 && last % 2 != 0)\
    \ {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqwrnfmw7: /tmp/tmpqwrnfmw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] % 10;\n\t\t\tlong last = nums[i]\
    \ / 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpl1a6yf7d: /tmp/tmpl1a6yf7d.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081891
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while (temp >\
    \ 0) {\n                last = temp % 10;\n                temp /= 10;\n     \
    \       }\n            if (first % 2 != 0 && last % 2 != 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] % 10;\n       \
    \     long last = nums[i] / 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6icj642: /tmp/tmph6icj642.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count=0;\n    for(int i=0;i<nums.size();i++){\n        if(nums[i]>10){\n\
    \            long temp=nums[i];\n            long first=temp%10;\n           \
    \ long last=temp;\n            while(temp>0){\n                last=temp%10;\n\
    \                temp=temp/10;\n            }\n            if(first%2!=0 && last%2!=0){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (long i = 0; i < nums.size(); i++) {\n   \
    \ if (nums[i] > 10) {\n      long first = nums[i] % 10;\n      long last = nums[i]\
    \ / 10;\n      if (first % 2 != 0 && last % 2 != 0) {\n        count++;\n    \
    \  }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmp596mm11s: /tmp/tmp596mm11s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long first = nums[i] / 10;\n       \
    \     long last = nums[i] % 10;\n            if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnh28fm37: /tmp/tmpnh28fm37.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)33,
    (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660081886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an array of numbers as input and returns \n// the number of elements in\
    \ the array that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] > 10) {\n            long lastDigit = nums[i] % 10;\n   \
    \         long firstDigit = nums[i];\n            while (firstDigit >= 10) {\n\
    \                firstDigit = firstDigit / 10;\n            }\n            if\
    \ (lastDigit % 2 != 0 && firstDigit % 2 != 0) {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081886
