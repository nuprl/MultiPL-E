language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n      fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkzr6leyk: /tmp/tmpkzr6leyk.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long long int fact = 1;\n  for(int i = 1; i <=\
    \ n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9ihx0it: /tmp/tmpf9ihx0it.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmplu3x969f: /tmp/tmplu3x969f.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpplryh0q_: /tmp/tmpplryh0q_.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i >= 1; i--)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpfhm0zbck: /tmp/tmpfhm0zbck.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    long factorial\
    \ = 1;\n    for (int j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result\
    \ *= factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = 1; i <= n; i++) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9b1xuzat: /tmp/tmp9b1xuzat.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  if(n==0)\n\
    \    return 1;\n  else\n    return n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjygas7dw: /tmp/tmpjygas7dw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = n; i > 0; i--) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsqhteh5p: /tmp/tmpsqhteh5p.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzx1pdchw: /tmp/tmpzx1pdchw.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp97i71c1g: /tmp/tmp97i71c1g.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzjht942b: /tmp/tmpzjht942b.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (int i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxshw1kd3: /tmp/tmpxshw1kd3.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpk5b29afm: /tmp/tmpk5b29afm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (int i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxshw1kd3: /tmp/tmpxshw1kd3.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpk5b29afm: /tmp/tmpk5b29afm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5sugn6yl: /tmp/tmp5sugn6yl.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n  \
    \  long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *= i;\n   \
    \ }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpml7qeg49: /tmp/tmpml7qeg49.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxz6k48am: /tmp/tmpxz6k48am.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    // Write your code here\n    long fact = 1;\n    for(int i = 1; i\
    \ <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpd7a5i3jw: /tmp/tmpd7a5i3jw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzjht942b: /tmp/tmpzjht942b.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  long fact = 1;\n  for(int i = n; i > 0; i--)\n\
    \  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmphpfjogl3: /tmp/tmphpfjogl3.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (long i = 1; i <= n; i++) {\n    fact *= i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3vrgvuy1: /tmp/tmp3vrgvuy1.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact=1;\n  for(int i=1;i<=n;i++)\n  {\n    fact=fact*i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkq8zfrwc: /tmp/tmpkq8zfrwc.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  assert(n > 0);\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpqfqmj9qi: /tmp/tmpqfqmj9qi.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long fact = 1;\n  for(int i = n; i > 0; i--)\n\
    \  {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpg4bp15xj: /tmp/tmpg4bp15xj.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5sugn6yl: /tmp/tmp5sugn6yl.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (long i = 1; i <= n; i++) {\n    fact *= i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3vrgvuy1: /tmp/tmp3vrgvuy1.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // TODO: implement the function\n  long fact = 1;\n  for(int i = 1;\
    \ i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp_amsld59: /tmp/tmp_amsld59.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long factorial = 1;\n  long factorial2 = 1;\n \
    \ for (int i = 1; i <= n; i++) {\n    factorial = factorial * i;\n  }\n  for (int\
    \ i = 1; i <= n - 1; i++) {\n    factorial2 = factorial2 * i;\n  }\n  return factorial\
    \ * factorial2;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpe3a5lj78: /tmp/tmpe3a5lj78.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  assert(n\
    \ > 0);\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpeh9de2ni: /tmp/tmpeh9de2ni.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial\
    \ = 1;\n    for (long j = i; j > 0; j--) {\n      factorial *= j;\n    }\n   \
    \ result *= factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzx1pdchw: /tmp/tmpzx1pdchw.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpb1huhxo2: /tmp/tmpb1huhxo2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n  \
    \  long fact = 1;\n    for(int i = 1; i <= n; i++)\n        fact *= i;\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmptdp2at5b: /tmp/tmptdp2at5b.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpb1huhxo2: /tmp/tmpb1huhxo2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ factorial=1;\n  for(int i=1;i<=n;i++){\n      factorial*=i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz1xhiiv4: /tmp/tmpz1xhiiv4.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_k9_o4up: /tmp/tmp_k9_o4up.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_k9_o4up: /tmp/tmp_k9_o4up.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmplu3x969f: /tmp/tmplu3x969f.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = n; i > 0; i--) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2dnx_4z: /tmp/tmpf2dnx_4z.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (int i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxshw1kd3: /tmp/tmpxshw1kd3.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long factorial = 1;\n    for (long i = n; i > 0; i--) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmckl9_oq: /tmp/tmpmckl9_oq.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  for (int i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf3wlc2wh: /tmp/tmpf3wlc2wh.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = n; i > 0; i--) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2dnx_4z: /tmp/tmpf2dnx_4z.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial\
    \ = 1;\n    for (long j = i; j > 0; j--) {\n      factorial *= j;\n    }\n   \
    \ result *= factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  for (int i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (int i\
    \ = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpme1kzf2v: /tmp/tmpme1kzf2v.cpp:25: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5sugn6yl: /tmp/tmp5sugn6yl.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  for (long i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long\
    \ i = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpq5_16wvr: /tmp/tmpq5_16wvr.cpp:25: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ long int fact=1;\n  for(int i=1;i<=n;i++)\n  {\n      fact=fact*i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpixta0g_8: /tmp/tmpixta0g_8.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long factorial = 1;\n    for (int i = n; i > 0; i--) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmprb2yzbze: /tmp/tmprb2yzbze.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = n; i > 0; i--) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2dnx_4z: /tmp/tmpf2dnx_4z.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpb1huhxo2: /tmp/tmpb1huhxo2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  if(n==0)\n\
    \    return 1;\n  else\n    return n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjygas7dw: /tmp/tmpjygas7dw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n\
    \  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpcdpbw9eo: /tmp/tmpcdpbw9eo.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6inm6c14: /tmp/tmp6inm6c14.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = n; i > 0; i--) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2dnx_4z: /tmp/tmpf2dnx_4z.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = n; i > 0; i--) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpks5ln9au: /tmp/tmpks5ln9au.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp97i71c1g: /tmp/tmp97i71c1g.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6inm6c14: /tmp/tmp6inm6c14.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  if(n==0)\n\
    \    return 1;\n  else\n    return n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjygas7dw: /tmp/tmpjygas7dw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp97i71c1g: /tmp/tmp97i71c1g.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long result = 1;\n  for (int i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp8tonim3h: /tmp/tmp8tonim3h.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxrtsbnb2: /tmp/tmpxrtsbnb2.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n\
    \  }\n  for (int i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpw3rc4j8s: /tmp/tmpw3rc4j8s.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (int i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxshw1kd3: /tmp/tmpxshw1kd3.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = n; i > 0; i--) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsqhteh5p: /tmp/tmpsqhteh5p.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long fact = 1;\n  for(int i = n; i >= 1; i--)\n\
    \  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpht_6dy7a: /tmp/tmpht_6dy7a.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ result = 1;\n  for (long i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8tlzp_p4: /tmp/tmp8tlzp_p4.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzx1pdchw: /tmp/tmpzx1pdchw.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ long int fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpnvd2gh_3: /tmp/tmpnvd2gh_3.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (long i = n; i > 0; i--) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpns8195e_: /tmp/tmpns8195e_.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphwoiq2gr: /tmp/tmphwoiq2gr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp97i71c1g: /tmp/tmp97i71c1g.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ long int fact=1;\n  for(int i=1;i<=n;i++)\n  {\n      fact=fact*i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpixta0g_8: /tmp/tmpixta0g_8.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpdrt6iy8q: /tmp/tmpdrt6iy8q.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5sugn6yl: /tmp/tmp5sugn6yl.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = n; i > 0; i--) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2dnx_4z: /tmp/tmpf2dnx_4z.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1tfpc3wm: /tmp/tmp1tfpc3wm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  for (int i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (int i\
    \ = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpme1kzf2v: /tmp/tmpme1kzf2v.cpp:25: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = n; i > 0; i--) {\n    fact *= i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2dnx_4z: /tmp/tmpf2dnx_4z.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // your code here\n  long fact = 1;\n  for(int i = n; i >= 1; i--)\n\
    \  {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp8xvzhqvl: /tmp/tmp8xvzhqvl.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5nqy56kw: /tmp/tmp5nqy56kw.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1f_wu1ex: /tmp/tmp1f_wu1ex.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n  \
    \  long fact = 1;\n    for(int i = 1; i <= n; i++)\n    {\n        fact *= i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmprlg0bd6v: /tmp/tmprlg0bd6v.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpk5b29afm: /tmp/tmpk5b29afm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  assert(n > 0);\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ype8y78: /tmp/tmp4ype8y78.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpb1huhxo2: /tmp/tmpb1huhxo2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // TODO: Implement this function\n  long fact = 1;\n  for(int i = 1;\
    \ i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp7a7xbxud: /tmp/tmp7a7xbxud.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxz6k48am: /tmp/tmpxz6k48am.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpomhazk1t: /tmp/tmpomhazk1t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    long factorial\
    \ = 1;\n    for (int j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result\
    \ *= factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n\
    \    for (long j = i - 1; j > 0; j--) {\n      result *= j;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long factorial = 1;\n  for (int i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpin_ry66b: /tmp/tmpin_ry66b.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n    long factorial = 1;\n    for (int i = n; i > 0; i--) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmprb2yzbze: /tmp/tmprb2yzbze.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// The function will receive an integer as input\
    \ and should return the special\n// factorial of this integer.\nlong special_factorial(long\
    \ n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_1hsfxwr: /tmp/tmp_1hsfxwr.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660008892
