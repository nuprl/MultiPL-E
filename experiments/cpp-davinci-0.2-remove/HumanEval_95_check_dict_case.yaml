name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
  \ True if all keys are strings in lower \n// case or all keys are strings in upper\
  \ case, else return False.\n// The function should return False is the given dictionary\
  \ is empty.\n// Examples:\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if(dict.size() == 0)\n        return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return (lower || upper);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && isupper(it->first[0]))\n            is_lower = false;\n        if(is_upper\
    \ && islower(it->first[0]))\n            is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size() == 0)\n        return false;\n \
    \   bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool lower\
    \ = false;\n    bool upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            lower = true;\n    \
    \    else if(isupper(it->first[0]))\n            upper = true;\n        else\n\
    \            return false;\n    }\n    return lower ^ upper;", "    // Your code\
    \ here\n    if(dict.size()==0)\n    return false;\n    bool flag=true;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for(it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=65\
    \ && it->first[0]<=90)\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    if(flag==true)\n    return true;\n    else\n    {\n   \
    \     flag=true;\n        for(it=dict.begin();it!=dict.end();it++)\n        {\n\
    \            if(it->first[0]>=97 && it->first[0]<=122)\n            {\n      \
    \          flag=false;\n                break;\n            }\n        }\n   \
    \     if(flag==true)\n        return true;\n        else\n        return false;\n\
    \    }", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) {\n            is_upper = true;\n\
    \        }\n        else {\n            is_lower = true;\n        }\n    }\n \
    \   return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = false;\n    bool upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else\n            upper = true;\n    }\n \
    \   return lower ^ upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_upper = true;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n        } else {\n            is_upper = false;\n       \
    \ }\n    }\n    return is_upper || is_lower;", "    if(dict.size()==0)\n     \
    \   return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n      \
    \      for(int i=0;i<it->first.length();i++)\n            {\n                if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n            for(int\
    \ i=0;i<it->first.length();i++)\n            {\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else\n        {\n            flag=false;\n            break;\n        }\n\
    \    }\n    return flag;", "    if(dict.size() == 0) return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) upper = false;\n        else lower\
    \ = false;\n    }\n    return lower || upper;", "    if(dict.size() == 0)\n  \
    \      return false;\n    bool is_lower = true;\n    bool is_upper = true;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_upper = false;\n        else\n            is_lower = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\n \
    \           is_lower = true;\n        else if(isupper(it->first[0]))\n       \
    \     is_upper = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else if(isupper(it->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return lower || upper;",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for(it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='a'\
    \ && it->first[0]<='z')\n            flag=true;\n        else if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n            flag=false;\n        else\n            return\
    \ false;\n        for(int i=1;i<it->first.length();i++)\n        {\n         \
    \   if(flag)\n            {\n                if(it->first[i]>='a' && it->first[i]<='z')\n\
    \                    continue;\n                else\n                    return\
    \ false;\n            }\n            else\n            {\n                if(it->first[i]>='A'\
    \ && it->first[i]<='Z')\n                    continue;\n                else\n\
    \                    return false;\n            }\n        }\n    }\n    return\
    \ true;", "    if(dict.size() == 0) return false;\n    bool lower = false;\n \
    \   bool upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0])) lower = true;\n        else upper = true;\n\
    \    }\n    return lower ^ upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) {\n           \
    \ upper = false;\n        } else {\n            lower = false;\n        }\n  \
    \  }\n    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower))\n            is_lower = false;\n        if(is_upper\
    \ && !std::all_of(it->first.begin(), it->first.end(), ::isupper))\n          \
    \  is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(!isupper(it->first[0])) return false;\n    }\n    return true;",
  "    if(dict.size() == 0) return false;\n    bool all_upper = true;\n    bool all_lower\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ all_upper = all_upper && (it->first == std::string(it->first.size(), toupper(it->first[0])));\n\
    \        all_lower = all_lower && (it->first == std::string(it->first.size(),\
    \ tolower(it->first[0])));\n    }\n    return all_upper || all_lower;", "    bool\
    \ upper = false;\n    bool lower = false;\n    for (auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n        if (isupper(it->first[0])) {\n            upper\
    \ = true;\n        } else {\n            lower = true;\n        }\n    }\n   \
    \ return upper != lower;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower) {\n            is_lower = is_lower\
    \ && (it->first == tolower(it->first));\n        }\n        if(is_upper) {\n \
    \           is_upper = is_upper && (it->first == toupper(it->first));\n      \
    \  }\n    }\n    return is_lower || is_upper;", "    if(dict.size()==0) return\
    \ false;\n    bool lower=false,upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0])) lower=true;\n        else upper=true;\n   \
    \ }\n    return (lower && !upper) || (!lower && upper);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else\n            lower = false;\n    }\n    return lower\
    \ || upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n        \
    \    is_lower = true;\n        }\n        else if(it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            is_upper = true;\n        }\n        else {\n       \
    \     return false;\n        }\n    }\n    return is_lower ^ is_upper;", "   \
    \ if(dict.size() == 0) return false;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    bool lower = true;\n    bool upper = true;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        std::string key = it->first;\n        for(int\
    \ i = 0; i < key.length(); i++) {\n            if(key[i] >= 'a' && key[i] <= 'z')\
    \ {\n                upper = false;\n            }\n            else if(key[i]\
    \ >= 'A' && key[i] <= 'Z') {\n                lower = false;\n            }\n\
    \            else {\n                return false;\n            }\n        }\n\
    \    }\n    return lower || upper;", "    if(dict.size() == 0) return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::islower)) {\n            lower = false;\n        }\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n            upper = false;\n        }\n    }\n\
    \    return lower || upper;", "    if(dict.size()==0)\n        return false;\n\
    \    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n\
    \        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n            for(int\
    \ i=0;i<it->first.length();i++)\n            {\n                if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n            for(int\
    \ i=0;i<it->first.length();i++)\n            {\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else\n        {\n            flag=false;\n            break;\n        }\n\
    \    }\n    return flag;", "\tif(dict.size() == 0) return false;\n\tbool is_lower\
    \ = false;\n\tbool is_upper = false;\n\tfor(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tif(isupper(it->first[0])) is_upper = true;\n\t\telse is_lower =\
    \ true;\n\t}\n\treturn is_lower ^ is_upper;", "    if(dict.size() == 0)\n    \
    \    return false;\n    std::map<std::string,std::string>::iterator it = dict.begin();\n\
    \    bool is_upper = std::isupper(it->first[0]);\n    for(; it != dict.end();\
    \ it++) {\n        if(is_upper != std::isupper(it->first[0]))\n            return\
    \ false;\n    }\n    return true;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "   \
    \ // Your code here\n    if(dict.size()==0)\n        return false;\n    bool flag\
    \ = true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(islower(it->first[0]))\n\
    \        {\n            for(int i=0;i<it->first.length();i++)\n            {\n\
    \                if(!islower(it->first[i]))\n                {\n             \
    \       flag = false;\n                    break;\n                }\n       \
    \     }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!isupper(it->first[i]))\n                {\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n        }\n        if(!flag)\n            break;\n    }\n\
    \    return flag;", "    if(dict.size()==0) return false;\n    bool lower=false,upper=false;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\
    \ lower=true;\n        else upper=true;\n    }\n    return (lower && !upper) ||\
    \ (!lower && upper);", "    if(dict.size()==0)\n        return false;\n    std::map<std::string,std::string>::iterator\
    \ it=dict.begin();\n    bool is_upper=isupper(it->first[0]);\n    for(;it!=dict.end();it++)\n\
    \    {\n        if(is_upper!=isupper(it->first[0]))\n            return false;\n\
    \    }\n    return true;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else\n            lower = false;\n    }\n    return lower\
    \ || upper;", "    if(dict.size() == 0)\n        return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            upper = false;\n   \
    \     else\n            lower = false;\n    }\n    return lower || upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool lower = false;\n    bool upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) {\n            lower = true;\n        } else {\n\
    \            upper = true;\n        }\n    }\n    return lower ^ upper;", "  \
    \  if(dict.size()==0)\n        return false;\n    bool flag=false;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='a' &&\
    \ it->first[0]<='z')\n        {\n            flag=true;\n            break;\n\
    \        }\n    }\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n\
    \        if(flag)\n        {\n            if(it->first[0]>='A' && it->first[0]<='Z')\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if(it->first[0]>='a' && it->first[0]<='z')\n                return false;\n\
    \        }\n    }\n    return true;", "    // Write your code here\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else if(isupper(it->first[0]))\n      \
    \  {\n            for(int i=0;i<it->first.length();i++)\n            {\n     \
    \           if(!isupper(it->first[i]))\n                {\n                  \
    \  flag=false;\n                    break;\n                }\n            }\n\
    \        }\n        else\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    return flag;", "    if(dict.size() == 0)\n        return\
    \ false;\n    std::map<std::string,std::string>::iterator it = dict.begin();\n\
    \    bool is_upper = false;\n    bool is_lower = false;\n    for(; it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_upper ^ is_lower;",
  "    if(dict.size() == 0) return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0])) all_upper = false;\n        if(!islower(it->first[0]))\
    \ all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!(it->first == to_lower(it->first)))\n            all_lower = false;\n  \
    \      if(!(it->first == to_upper(it->first)))\n            all_upper = false;\n\
    \    }\n    return (all_lower || all_upper);", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(is_lower) {\n        \
    \    is_lower = is_lower && (it->first == to_lower(it->first));\n        }\n \
    \       if(is_upper) {\n            is_upper = is_upper && (it->first == to_upper(it->first));\n\
    \        }\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool flag = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(flag == false) {\n            if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n                flag = true;\n            else\n\
    \                flag = false;\n        }\n        else {\n            if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n                continue;\n            else\n\
    \                return false;\n        }\n    }\n    return true;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(!(it->first[0]>='a' && it->first[0]<='z'))\n            flag=false;\n\
    \    }\n    if(flag)\n        return true;\n    flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(!(it->first[0]>='A' && it->first[0]<='Z'))\n            flag=false;\n\
    \    }\n    if(flag)\n        return true;\n    return false;", "  // your code\
    \ here\n  if(dict.size()==0)\n    return false;\n  bool flag=true;\n  for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n  {\n    if(it->first[0]>='a' && it->first[0]<='z')\n\
    \    {\n      for(int i=0;i<it->first.length();i++)\n      {\n        if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n        {\n          flag=false;\n          break;\n \
    \       }\n      }\n    }\n    else if(it->first[0]>='A' && it->first[0]<='Z')\n\
    \    {\n      for(int i=0;i<it->first.length();i++)\n      {\n        if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n        {\n          flag=false;\n          break;\n \
    \       }\n      }\n    }\n    else\n    {\n      flag=false;\n      break;\n\
    \    }\n  }\n  return flag;", "    if(dict.size() == 0) return false;\n    bool\
    \ upper = false;\n    bool lower = false;\n    for(auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\
    \ upper = true;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') lower\
    \ = true;\n    }\n    return upper != lower;", "    if(dict.size() == 0)\n   \
    \     return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_upper ^ is_lower;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        }\n        else if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    if(is_lower && is_upper) {\n        return false;\n\
    \    }\n    return true;", "    if(dict.size() == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!std::all_of(it->first.begin(), it->first.end(), ::islower))\
    \ {\n            all_lower = false;\n        }\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n            all_upper = false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;", "    if(dict.size()==0) return false;\n    bool lower_case\
    \ = false;\n    bool upper_case = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) lower_case = true;\n\
    \        else upper_case = true;\n    }\n    return (lower_case && !upper_case)\
    \ || (!lower_case && upper_case);", "    // Write your code here\n    if(dict.size()==0)\n\
    \        return false;\n    bool isUpper = false;\n    bool isLower = false;\n\
    \    for(auto itr=dict.begin();itr!=dict.end();itr++)\n    {\n        if(isupper(itr->first[0]))\n\
    \            isUpper = true;\n        else\n            isLower = true;\n    }\n\
    \    if(isUpper && isLower)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "  if(dict.size() == 0)\n    return false;\n  bool is_lower =\
    \ false;\n  bool is_upper = false;\n  for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n    if(islower(it->first[0]))\n      is_lower = true;\n    else if(isupper(it->first[0]))\n\
    \      is_upper = true;\n    else\n      return false;\n  }\n  return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        is_lower = is_lower && (it->first == tolower(it->first));\n\
    \        is_upper = is_upper && (it->first == toupper(it->first));\n    }\n  \
    \  return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n  \
    \  bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) upper = false;\n\
    \        else lower = false;\n    }\n    return lower || upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto i=dict.begin();i!=dict.end();i++)\n\
    \    {\n        if(i->first[0]>='a' && i->first[0]<='z')\n        {\n        \
    \    flag=true;\n            for(int j=0;j<i->first.length();j++)\n          \
    \  {\n                if(i->first[j]<'a' || i->first[j]>'z')\n               \
    \ {\n                    flag=false;\n                    break;\n           \
    \     }\n            }\n        }\n        else if(i->first[0]>='A' && i->first[0]<='Z')\n\
    \        {\n            flag=true;\n            for(int j=0;j<i->first.length();j++)\n\
    \            {\n                if(i->first[j]<'A' || i->first[j]>'Z')\n     \
    \           {\n                    flag=false;\n                    break;\n \
    \               }\n            }\n        }\n        else\n        {\n       \
    \     flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   // Write your code here\n    if(dict.size()==0)\n        return false;\n \
    \   bool flag=true;\n    for(auto i:dict)\n    {\n        if(islower(i.first[0]))\n\
    \        {\n            for(int j=0;j<i.first.size();j++)\n            {\n   \
    \             if(!islower(i.first[j]))\n                {\n                  \
    \  flag=false;\n                    break;\n                }\n            }\n\
    \        }\n        else if(isupper(i.first[0]))\n        {\n            for(int\
    \ j=0;j<i.first.size();j++)\n            {\n                if(!isupper(i.first[j]))\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()==0)\n\
    \        return false;\n    bool lower=true;\n    bool upper=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(islower(it->first[0]))\n\
    \            upper=false;\n        else\n            lower=false;\n    }\n   \
    \ return lower||upper;", "\tif(dict.size() == 0) return false;\n\tbool is_lower\
    \ = false;\n\tbool is_upper = false;\n\tfor(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tif(isupper(it->first[0])) is_upper = true;\n\t\telse is_lower =\
    \ true;\n\t}\n\treturn is_lower ^ is_upper;", "    if(dict.size() == 0)\n    \
    \    return false;\n    bool is_lower = true;\n    bool is_upper = true;\n   \
    \ for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n        if(is_lower\
    \ && !is_upper) {\n            if(!isupper(itr->first[0]))\n                return\
    \ false;\n            else\n                is_upper = true;\n        }\n    \
    \    else if(!is_lower && is_upper) {\n            if(!islower(itr->first[0]))\n\
    \                return false;\n            else\n                is_lower = true;\n\
    \        }\n        else {\n            if(islower(itr->first[0]))\n         \
    \       is_lower = true;\n            else if(isupper(itr->first[0]))\n      \
    \          is_upper = true;\n            else\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool lower=true;\n    bool upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n            upper=false;\n        else\n\
    \            lower=false;\n    }\n    return lower || upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=false;\n    for(auto i:dict){\n        if(i.first[0]>='a'\
    \ && i.first[0]<='z'){\n            flag=true;\n            break;\n        }\n\
    \    }\n    for(auto i:dict){\n        if(flag){\n            if(i.first[0]>='A'\
    \ && i.first[0]<='Z')\n                return false;\n        }\n        else{\n\
    \            if(i.first[0]>='a' && i.first[0]<='z')\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else if(islower(it->first[0]))\n      \
    \      is_lower = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    if(dict.size() == 0)\n    \
    \    return false;\n    bool is_lower = false;\n    bool is_upper = false;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "  if(dict.size() == 0) return false;\n\
    \  bool is_lower = false;\n  bool is_upper = false;\n  for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n    if(isupper(it->first[0])) is_upper = true;\n\
    \    else is_lower = true;\n  }\n  return is_lower ^ is_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool lower=false,upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n            lower=true;\n        else\n\
    \            upper=true;\n    }\n    if(lower&&upper)\n        return false;\n\
    \    return true;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);",
  "    if(dict.size() == 0) return false;\n    bool lower = false;\n    bool upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) lower = true;\n        else upper = true;\n    }\n\
    \    return lower ^ upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto itr = dict.begin();\
    \ itr != dict.end(); itr++) {\n        if(islower(itr->first[0])) {\n        \
    \    is_lower = true;\n        } else if(isupper(itr->first[0])) {\n         \
    \   is_upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!isupper(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return flag;", "    if(dict.size() ==\
    \ 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            is_lower = true;\n        }\n\
    \        else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            is_upper\
    \ = true;\n        }\n        else {\n            return false;\n        }\n \
    \   }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    std::map<std::string,std::string>::iterator\
    \ it=dict.begin();\n    for(;it!=dict.end();it++){\n        if(isupper(it->first[0])){\n\
    \            flag=false;\n            break;\n        }\n    }\n    if(flag){\n\
    \        it=dict.begin();\n        for(;it!=dict.end();it++){\n            if(islower(it->first[0])){\n\
    \                flag=false;\n                break;\n            }\n        }\n\
    \    }\n    return flag;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(it->first == \"\") return false;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    // Write your code here\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for(it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=65\
    \ && it->first[0]<=90)\n            flag=false;\n    }\n    if(flag==false)\n\
    \    {\n        for(it=dict.begin();it!=dict.end();it++)\n        {\n        \
    \    if(it->first[0]>=97 && it->first[0]<=122)\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool flag = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n        \
    \    if(flag)\n                return false;\n            flag = true;\n     \
    \   }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n       \
    \     if(!flag)\n                return false;\n            flag = false;\n  \
    \      }\n        else\n            return false;\n    }\n    return true;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "\tif(dict.size() == 0)\n\t\treturn false;\n\tbool lower = false;\n\
    \tbool upper = false;\n\tfor(auto i : dict) {\n\t\tif(islower(i.first[0]))\n\t\
    \t\tlower = true;\n\t\telse if(isupper(i.first[0]))\n\t\t\tupper = true;\n\t\t\
    else\n\t\t\treturn false;\n\t}\n\treturn lower ^ upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n\
    \        if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        is_lower = is_lower && (it->first == std::string(it->first.size(),\
    \ std::tolower(it->first[0])));\n        is_upper = is_upper && (it->first ==\
    \ std::string(it->first.size(), std::toupper(it->first[0])));\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size()==0)\n        return false;\n   \
    \ bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it!=dict.end(); it++){\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else\n            lower = false;\n    }\n    return lower\
    \ || upper;", "    // Write your code here\n    if(dict.size()==0)\n        return\
    \ false;\n    bool flag = true;\n    for(auto it = dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0])){\n            flag = true;\n            break;\n\
    \        }\n        else{\n            flag = false;\n            break;\n   \
    \     }\n    }\n    for(auto it = dict.begin();it!=dict.end();it++){\n       \
    \ if(flag){\n            if(!islower(it->first[0]))\n                return false;\n\
    \        }\n        else{\n            if(islower(it->first[0]))\n           \
    \     return false;\n        }\n    }\n    return true;", "    // Write your code\
    \ here\n    if(dict.size() == 0)\n        return false;\n    bool flag = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            for(int i = 0; i < it->first.length(); i++) {\n             \
    \   if(!islower(it->first[i])) {\n                    flag = false;\n        \
    \            break;\n                }\n            }\n        }\n        else\
    \ {\n            for(int i = 0; i < it->first.length(); i++) {\n             \
    \   if(!isupper(it->first[i])) {\n                    flag = false;\n        \
    \            break;\n                }\n            }\n        }\n    }\n    return\
    \ flag;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    // Write your code here\n    std::map<std::string,std::string>::iterator\
    \ it;\n    int count_upper = 0;\n    int count_lower = 0;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ count_upper++;\n        } else {\n            count_lower++;\n        }\n  \
    \  }\n    if(count_upper == dict.size() || count_lower == dict.size()) {\n   \
    \     return true;\n    } else {\n        return false;\n    }", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=false;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>=65 && it->first[0]<=90)\n            flag=true;\n\
    \        else\n            flag=false;\n    }\n    return flag;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            upper = false;\n   \
    \     else\n            lower = false;\n    }\n    return lower || upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool lower = false;\n   \
    \ bool upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0])) {\n            lower = true;\n        }\n\
    \        else if(isupper(it->first[0])) {\n            upper = true;\n       \
    \ }\n        else {\n            return false;\n        }\n    }\n    return (lower\
    \ && !upper) || (!lower && upper);", "  if(dict.size() == 0) return false;\n \
    \ bool all_upper = true;\n  bool all_lower = true;\n  for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n    if(!isupper(it->first[0])) all_upper = false;\n\
    \    if(!islower(it->first[0])) all_lower = false;\n  }\n  return all_upper ||\
    \ all_lower;", "    if(dict.size() == 0)\n        return false;\n    bool isLower\
    \ = false;\n    bool isUpper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            isUpper = true;\n  \
    \      else\n            isLower = true;\n    }\n    return isLower ^ isUpper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n  \
    \  bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(is_lower && !is_upper) {\n            if(!(it->first[0] >= 'a'\
    \ && it->first[0] <= 'z'))\n                return false;\n        }\n       \
    \ else if(!is_lower && is_upper) {\n            if(!(it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z'))\n                return false;\n        }\n        else {\n       \
    \     if(it->first[0] >= 'a' && it->first[0] <= 'z')\n                is_upper\
    \ = false;\n            else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n\
    \                is_lower = false;\n            else\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!isupper(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return flag;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n      \
    \      if(flag==false)\n                return false;\n            flag=true;\n\
    \        }\n        else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n\
    \            if(flag==true)\n                return false;\n            flag=false;\n\
    \        }\n        else\n            return false;\n    }\n    return true;",
  "  if(dict.size() == 0)\n    return false;\n  bool is_lower = false;\n  bool is_upper\
    \ = false;\n  for(auto it = dict.begin(); it != dict.end(); it++) {\n    if(isupper(it->first[0]))\n\
    \      is_upper = true;\n    else\n      is_lower = true;\n  }\n  return is_lower\
    \ ^ is_upper;", "    if(dict.size()==0)\n        return false;\n    std::map<std::string,std::string>::iterator\
    \ itr;\n    itr=dict.begin();\n    std::string s=itr->first;\n    int i=0;\n \
    \   while(s[i]!='\\0'){\n        if(islower(s[i])){\n            itr++;\n    \
    \        while(itr!=dict.end()){\n                if(!islower(itr->first[i]))\n\
    \                    return false;\n                itr++;\n            }\n  \
    \          return true;\n        }\n        else if(isupper(s[i])){\n        \
    \    itr++;\n            while(itr!=dict.end()){\n                if(!isupper(itr->first[i]))\n\
    \                    return false;\n                itr++;\n            }\n  \
    \          return true;\n        }\n        else\n            return false;\n\
    \    }\n    return false;", "\tif(dict.size()==0) return false;\n\tbool lower\
    \ = false;\n\tbool upper = false;\n\tfor(auto it = dict.begin(); it!=dict.end();\
    \ it++) {\n\t\tif(islower(it->first[0])) lower = true;\n\t\telse upper = true;\n\
    \t}\n\treturn (lower && !upper) || (!lower && upper);", "    if(dict.size() ==\
    \ 0) return false;\n    std::map<std::string,std::string>::iterator it = dict.begin();\n\
    \    bool lower = false;\n    bool upper = false;\n    for(; it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) lower = true;\n        else upper\
    \ = true;\n    }\n    return (lower && !upper) || (!lower && upper);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_upper = false;\n    bool is_lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_upper ^ is_lower;",
  "  if(dict.size() == 0)\n    return false;\n  bool is_lower = false;\n  bool is_upper\
    \ = false;\n  for(auto it = dict.begin(); it != dict.end(); it++) {\n    if(isupper(it->first[0]))\n\
    \      is_upper = true;\n    else\n      is_lower = true;\n  }\n  return is_lower\
    \ ^ is_upper;", "    if(dict.size()==0)\n        return false;\n    bool flag\
    \ = false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first[0]>=65\
    \ && it->first[0]<=90)\n            flag = true;\n        else if(it->first[0]>=97\
    \ && it->first[0]<=122)\n            flag = false;\n        else\n           \
    \ return false;\n    }\n    return flag;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto i : dict)\
    \ {\n        if(isupper(i.first[0])) is_upper = true;\n        else is_lower =\
    \ true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_upper ^ is_lower;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_upper = false;\n    bool is_lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_upper\
    \ ^ is_lower;", "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        is_lower = is_lower && (it->first == tolower(it->first));\n\
    \        is_upper = is_upper && (it->first == toupper(it->first));\n    }\n  \
    \  return is_lower || is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else\n            lower = false;\n    }\n    return (lower\
    \ || upper);", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0) return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(isupper(it->first[0])) is_lower = false;\n        if(islower(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_upper || is_lower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return !(is_lower\
    \ && is_upper);", "    // Write your code here\n    if(dict.size() == 0)\n   \
    \     return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else if(islower(it->first[0]))\n      \
    \      is_lower = true;\n        else\n            return false;\n    }\n    if(is_upper\
    \ && is_lower)\n        return false;\n    return true;", "    if(dict.size()==0)\
    \ return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ upper = false;\n        else lower = false;\n    }\n    return lower || upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_upper\
    \ = false;\n        else\n            is_lower = false;\n    }\n    return is_lower\
    \ || is_upper;", "    if(dict.size()==0)\n        return false;\n    int upper=0,lower=0;\n\
    \    for(auto i:dict)\n    {\n        if(isupper(i.first[0]))\n            upper++;\n\
    \        else\n            lower++;\n    }\n    if(upper==dict.size() || lower==dict.size())\n\
    \        return true;\n    return false;", "\tif(dict.size() == 0)\n\t\treturn\
    \ false;\n\tbool lower = true;\n\tbool upper = true;\n\tfor(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n\t\tif(islower(it->first[0]))\n\t\t\tupper = false;\n\
    \t\telse\n\t\t\tlower = false;\n\t}\n\treturn lower || upper;", "    // Write\
    \ your code here\n    if(dict.size()==0)\n    return false;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    bool flag=true;\n    for(it=dict.begin();it!=dict.end();it++)\n   \
    \ {\n        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n         \
    \   if(flag==false)\n            return false;\n            flag=true;\n     \
    \   }\n        else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n  \
    \          if(flag==true)\n            return false;\n            flag=false;\n\
    \        }\n        else\n        return false;\n    }\n    return true;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool flag = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    if(flag)\n\
    \        return true;\n    flag = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(!islower(it->first[0])) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    return flag;", "    if(dict.size()\
    \ == 0) return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            upper = false;\n        } else {\n            lower = false;\n\
    \        }\n    }\n    return lower || upper;", "  if(dict.size()==0) return false;\n\
    \  bool lower_case = false;\n  bool upper_case = false;\n  for(auto it=dict.begin();it!=dict.end();it++)\
    \ {\n    if(islower(it->first[0])) lower_case = true;\n    else upper_case = true;\n\
    \  }\n  return lower_case^upper_case;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    std::map<std::string,std::string>::iterator\
    \ it=dict.begin();\n    for(it;it!=dict.end();it++){\n        if(it->first[0]>='a'\
    \ && it->first[0]<='z'){\n            flag=true;\n        }\n        else{\n \
    \           flag=false;\n            break;\n        }\n    }\n    if(flag==true){\n\
    \        return true;\n    }\n    else{\n        flag=true;\n        for(it=dict.begin();it!=dict.end();it++){\n\
    \            if(it->first[0]>='A' && it->first[0]<='Z'){\n                flag=true;\n\
    \            }\n            else{\n                flag=false;\n             \
    \   break;\n            }\n        }\n        if(flag==true){\n            return\
    \ true;\n        }\n        else{\n            return false;\n        }\n    }",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size()==0) return false;\n    bool lower = true;\n    bool upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ upper = false;\n        else lower = false;\n    }\n    return (lower || upper);",
  "    // Write your code here\n    if(dict.size() == 0)\n        return false;\n\
    \    bool flag = false;\n    for(auto itr = dict.begin(); itr != dict.end(); itr++)\
    \ {\n        if(itr->first[0] >= 'a' && itr->first[0] <= 'z') {\n            flag\
    \ = true;\n            break;\n        }\n    }\n    for(auto itr = dict.begin();\
    \ itr != dict.end(); itr++) {\n        if(flag) {\n            if(itr->first[0]\
    \ >= 'A' && itr->first[0] <= 'Z')\n                return false;\n        }\n\
    \        else {\n            if(itr->first[0] >= 'a' && itr->first[0] <= 'z')\n\
    \                return false;\n        }\n    }\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        for(int i\
    \ = 0; i < it->first.length(); i++) {\n            if(islower(it->first[i]))\n\
    \                upper = false;\n            else if(isupper(it->first[i]))\n\
    \                lower = false;\n            else\n                return false;\n\
    \        }\n    }\n    return lower || upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            upper = false;\n   \
    \     else\n            lower = false;\n    }\n    return lower || upper;", " \
    \   // Write your code here\n    if(dict.size()==0)\n        return false;\n \
    \   int i=0;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first[i]>=65\
    \ && it->first[i]<=90)\n            i++;\n        else\n            break;\n \
    \   }\n    if(i==dict.size())\n        return true;\n    i=0;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(it->first[i]>=97 && it->first[i]<=122)\n            i++;\n       \
    \ else\n            break;\n    }\n    if(i==dict.size())\n        return true;\n\
    \    return false;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !islower(it->first[0]))\n\
    \            is_lower = false;\n        if(is_upper && !isupper(it->first[0]))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;", "  \
    \  if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            is_upper = true;\n        } else {\n\
    \            is_lower = true;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    // Write your code here\n    if(dict.size()==0)\n        return false;\n  \
    \  bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n\
    \        if(islower(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!isupper(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return flag;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto i:dict){\n        if(i.first[0]>=65\
    \ && i.first[0]<=90)\n            flag=false;\n        else if(i.first[0]>=97\
    \ && i.first[0]<=122)\n            flag=true;\n        else\n            return\
    \ false;\n    }\n    return flag;", "    if(dict.size()==0)\n        return false;\n\
    \    bool lower=false,upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n            lower=true;\n        else\n\
    \            upper=true;\n    }\n    if(lower && upper)\n        return false;\n\
    \    return true;", "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    std::map<std::string,std::string>::iterator it;\n    for(it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n            flag=true;\n\
    \        else if(it->first[0]>='A' && it->first[0]<='Z')\n            flag=false;\n\
    \        else\n            return false;\n        for(int i=1;i<it->first.length();i++)\n\
    \        {\n            if(flag)\n            {\n                if(it->first[i]>='a'\
    \ && it->first[i]<='z')\n                    continue;\n                else\n\
    \                    return false;\n            }\n            else\n        \
    \    {\n                if(it->first[i]>='A' && it->first[i]<='Z')\n         \
    \           continue;\n                else\n                    return false;\n\
    \            }\n        }\n    }\n    return true;", "    if(dict.size() == 0)\
    \ return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            upper = false;\n        } else {\n            lower = false;\n\
    \        }\n    }\n    return lower || upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            upper = false;\n        } else {\n            lower = false;\n\
    \        }\n    }\n    return lower || upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return false;\n\
    \    bool lower=false,upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n            lower=true;\n        else\
    \ if(isupper(it->first[0]))\n            upper=true;\n        else\n         \
    \   return false;\n    }\n    if(lower && upper)\n        return false;\n    return\
    \ true;", "    // Write your code here\n    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first.size()!=it->second.size())\n        {\n         \
    \   flag=false;\n            break;\n        }\n        for(int i=0;i<it->first.size();i++)\n\
    \        {\n            if(it->first[i]!=it->second[i])\n            {\n     \
    \           flag=false;\n                break;\n            }\n        }\n  \
    \  }\n    return flag;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        }\n        else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return\
    \ false;\n    std::map<std::string,std::string>::iterator it;\n    bool all_lower=true;\n\
    \    bool all_upper=true;\n    for(it=dict.begin();it!=dict.end();it++){\n   \
    \     if(!(it->first==\"\") && !(it->first==\" \")){\n            if(islower(it->first[0]))\n\
    \                all_upper=false;\n            else\n                all_lower=false;\n\
    \        }\n    }\n    if(all_lower || all_upper)\n        return true;\n    else\n\
    \        return false;", "    if(dict.size() == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first != to_lower(it->first)) all_lower = false;\n \
    \       if(it->first != to_upper(it->first)) all_upper = false;\n    }\n    return\
    \ all_lower || all_upper;", "    if(dict.size()==0)\n        return false;\n \
    \   bool flag=true;\n    for(auto i:dict){\n        if(i.first[0]>='a' && i.first[0]<='z'){\n\
    \            for(auto j:i.first){\n                if(j<'a' || j>'z'){\n     \
    \               flag=false;\n                    break;\n                }\n \
    \           }\n        }\n        else if(i.first[0]>='A' && i.first[0]<='Z'){\n\
    \            for(auto j:i.first){\n                if(j<'A' || j>'Z'){\n     \
    \               flag=false;\n                    break;\n                }\n \
    \           }\n        }\n        else{\n            flag=false;\n           \
    \ break;\n        }\n    }\n    return flag;", "\tif(dict.size() == 0)\n\t\treturn\
    \ false;\n\tbool is_lower = false;\n\tbool is_upper = false;\n\tfor(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n\t\tif(isupper(it->first[0]))\n\t\t\
    \tis_upper = true;\n\t\telse\n\t\t\tis_lower = true;\n\t}\n\treturn is_lower ^\
    \ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool lower = true;\n    bool upper\
    \ = true;\n    for(auto i : dict) {\n        if(islower(i.first[0])) upper = false;\n\
    \        else lower = false;\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n\
    \        else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            is_upper\
    \ = true;\n        else\n            return false;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size()==0)\n        return false;\n    bool flag=false;\n\
    \    for(auto i=dict.begin();i!=dict.end();i++)\n    {\n        if(i->first[0]>='a'\
    \ && i->first[0]<='z')\n        {\n            flag=true;\n            break;\n\
    \        }\n    }\n    if(flag)\n    {\n        for(auto i=dict.begin();i!=dict.end();i++)\n\
    \        {\n            if(i->first[0]<'a' || i->first[0]>'z')\n             \
    \   return false;\n        }\n    }\n    else\n    {\n        for(auto i=dict.begin();i!=dict.end();i++)\n\
    \        {\n            if(i->first[0]<'A' || i->first[0]>'Z')\n             \
    \   return false;\n        }\n    }\n    return true;", "    if(dict.size() ==\
    \ 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_upper ^ is_lower;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool lower = false;\n    bool upper = false;\n    for(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ lower ^ upper;", "    // Your code here\n    if(dict.size()==0)\n    return\
    \ false;\n    std::map<std::string,std::string>::iterator itr;\n    for(itr=dict.begin();itr!=dict.end();itr++)\n\
    \    {\n        if(itr->first[0]>=65 && itr->first[0]<=90)\n        {\n      \
    \      for(int i=1;i<itr->first.length();i++)\n            {\n               \
    \ if(itr->first[i]>=97 && itr->first[i]<=122)\n                return false;\n\
    \            }\n        }\n        else if(itr->first[0]>=97 && itr->first[0]<=122)\n\
    \        {\n            for(int i=1;i<itr->first.length();i++)\n            {\n\
    \                if(itr->first[i]>=65 && itr->first[i]<=90)\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = false;\n    bool upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ lower ^ upper;", "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(isupper(it->first[0]))\n\
    \        {\n            for(int i=0;i<it->first.length();i++)\n            {\n\
    \                if(islower(it->first[i]))\n                {\n              \
    \      flag=false;\n                    break;\n                }\n          \
    \  }\n        }\n        else if(islower(it->first[0]))\n        {\n         \
    \   for(int i=0;i<it->first.length();i++)\n            {\n                if(isupper(it->first[i]))\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  std::string key = it->first;\n        if(isupper(key[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "  if(dict.size()\
    \ == 0)\n    return false;\n  bool is_lower = true;\n  for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n    if(isupper(it->first[0])) {\n      is_lower =\
    \ false;\n      break;\n    }\n  }\n  for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n    if(is_lower) {\n      if(isupper(it->first[0]))\n        return\
    \ false;\n    }\n    else {\n      if(islower(it->first[0]))\n        return false;\n\
    \    }\n  }\n  return true;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else\n            lower = false;\n    }\n    return lower\
    \ || upper;", "    if(dict.size()==0)\n        return false;\n    bool flag =\
    \ false;\n    for(auto it = dict.begin(); it!=dict.end(); it++){\n        if(flag==false){\n\
    \            if(islower(it->first[0]))\n                flag = true;\n       \
    \     else\n                flag = false;\n        }\n        else{\n        \
    \    if(islower(it->first[0]))\n                continue;\n            else\n\
    \                return false;\n        }\n    }\n    return true;", "\tif(dict.size()\
    \ == 0) return false;\n\tbool is_lower = true;\n\tfor(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n\t\tif(is_lower) {\n\t\t\tif(!islower(it->first[0]))\
    \ {\n\t\t\t\tis_lower = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif(!isupper(it->first[0]))\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;", "    if(dict.size()\
    \ == 0) return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\
    \ lower = false;\n        if(!isupper(it->first[0])) upper = false;\n    }\n \
    \   return lower || upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) upper = false;\n    \
    \    else lower = false;\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;", "    // Write your code here\n  \
    \  if(dict.size()==0)\n        return false;\n    bool lower=false,upper=false;\n\
    \    for(auto i:dict)\n    {\n        if(islower(i.first[0]))\n            lower=true;\n\
    \        else\n            upper=true;\n    }\n    if(lower&&upper)\n        return\
    \ false;\n    return true;", "\tif(dict.size()==0) return false;\n\tbool flag\
    \ = false;\n\tfor(auto it=dict.begin();it!=dict.end();it++){\n\t\tif(it->first[0]>=65\
    \ && it->first[0]<=90){\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(auto\
    \ it=dict.begin();it!=dict.end();it++){\n\t\tif(flag){\n\t\t\tif(it->first[0]>=97\
    \ && it->first[0]<=122) return false;\n\t\t}\n\t\telse{\n\t\t\tif(it->first[0]>=65\
    \ && it->first[0]<=90) return false;\n\t\t}\n\t}\n\treturn true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ upper = false;\n        else lower = false;\n    }\n    return lower || upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\
    \ return false;\n    bool lower_case = false;\n    bool upper_case = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower_case = true;\n        else upper_case = true;\n    }\n    return lower_case\
    \ ^ upper_case;", "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=65\
    \ && it->first[0]<=90)\n            flag=false;\n    }\n    return flag;", " \
    \   if(dict.size()==0)\n        return false;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(it=dict.begin();it!=dict.end();it++){\n\
    \        if(isupper(it->first[0]))\n            is_upper = true;\n        else\n\
    \            is_lower = true;\n    }\n    if(is_upper && is_lower)\n        return\
    \ false;\n    return true;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size()==0) return false;\n    bool lower = true;\n    bool upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            upper = false;\n        }\n        else {\n            lower\
    \ = false;\n        }\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool flag = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(flag == false) {\n            if(islower(it->first[0]))\n\
    \                flag = true;\n            else\n                flag = false;\n\
    \        }\n        else {\n            if(islower(it->first[0]))\n          \
    \      continue;\n            else\n                return false;\n        }\n\
    \    }\n    return true;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return lower || upper;", "\tif(dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool flag = false;\n\tfor(auto x: dict) {\n\t\t\
    if(!flag) {\n\t\t\tif(islower(x.first[0]))\n\t\t\t\tflag = true;\n\t\t\telse\n\
    \t\t\t\tflag = false;\n\t\t}\n\t\tif(flag) {\n\t\t\tif(islower(x.first[0]))\n\t\
    \t\t\tcontinue;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\t\
    if(isupper(x.first[0]))\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "    if(dict.size()==0)\n        return false;\n\
    \    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n\
    \        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n            for(int\
    \ i=0;i<it->first.length();i++)\n            {\n                if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n            for(int\
    \ i=0;i<it->first.length();i++)\n            {\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else\n        {\n            flag=false;\n            break;\n        }\n\
    \    }\n    return flag;"]
stop_tokens:
- "\n}"
