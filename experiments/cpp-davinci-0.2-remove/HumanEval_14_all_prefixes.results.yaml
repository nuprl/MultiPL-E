language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n\tstd::vector<std::string> prefixes;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tprefixes.push_back(string.substr(0, i+1));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.length();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i + 1));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n\tstd::vector<std::string> prefixes;\n\tfor (int i = 1; i <= string.length();\
    \ i++) {\n\t\tprefixes.push_back(string.substr(0, i));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <=\
    \ string.length(); i++) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <=\
    \ string.length(); i++) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <=\
    \ string.length(); i++) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <=\
    \ string.length(); i++) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <=\
    \ string.length(); i++) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i+1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
