name: HumanEval_128_prod_signs
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array arr\
  \ of integers and you need to return\n// sum of magnitudes of integers multiplied\
  \ by product of all signs\n// of each number in the array, represented by 1, -1\
  \ or 0.\n// Note: return None for empty arr.\n// Example:\nstd::optional<long> prod_signs(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
completions: ["  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n\
    \  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n\
    \      prod *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto& i : arr) {\n    if (i >\
    \ 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum\
    \ += std::abs(i);\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i == 0) {\n      continue;\n    }\n  \
    \  sum += std::abs(i);\n    prod *= (i > 0) ? 1 : -1;\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n     \
    \       prod *= -1;\n        } else {\n            prod *= 0;\n        }\n   \
    \     sum += std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ &x : arr) {\n    if (x > 0) {\n      prod *= 1;\n    } else if (x < 0) {\n \
    \     prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(x);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else\
    \ if (i == 0) {\n      prod = 0;\n      break;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum\
    \ = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum\
    \ += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += i * -1;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long prod = 1;\n  long sum = 0;\n  for (auto& elem : arr) {\n    if (elem >\
    \ 0) {\n      prod *= 1;\n      sum += elem;\n    } else if (elem < 0) {\n   \
    \   prod *= -1;\n      sum += elem * -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i == 0) {\n    \
    \  prod = 0;\n      sum = 0;\n      break;\n    }\n    if (i < 0) prod *= -1;\n\
    \    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (long\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty()) {\n        return\
    \ std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n    for (auto&\
    \ i : arr) {\n        if (i == 0) {\n            continue;\n        }\n      \
    \  prod *= i / std::abs(i);\n        sum += std::abs(i);\n    }\n    return prod\
    \ * sum;", "    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long\
    \ sum = 0;\n    long prod = 1;\n    for (auto num : arr) {\n        sum += std::abs(num);\n\
    \        if (num > 0) {\n            prod *= 1;\n        } else if (num < 0) {\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            sum += -i;\n            prod *= -1;\n        } else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& elem : arr) {\n        sum += std::abs(elem);\n        if (elem\
    \ > 0) {\n            prod *= 1;\n        } else if (elem < 0) {\n           \
    \ prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum\
    \ += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", " \
    \ if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += abs(i);\n      prod *= -1;\n  \
    \  } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    // your\
    \ code here\n    if(arr.size() == 0)\n        return std::nullopt;\n    long prod\
    \ = 1;\n    long sum = 0;\n    for(auto i : arr)\n    {\n        if(i < 0)\n \
    \           prod *= -1;\n        else if(i > 0)\n            prod *= 1;\n    \
    \    else\n            prod *= 0;\n        sum += std::abs(i);\n    }\n    return\
    \ prod * sum;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    }\
    \ else if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n \
    \     prod *= 0;\n    }\n  }\n  return sum * prod;", "  long prod = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n     \
    \ sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n  \
    \  } else {\n      prod *= 0;\n    }\n  }\n  if (arr.size() == 0) {\n    return\
    \ std::nullopt;\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n      sum +=\
    \ i;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n\
    \      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n\
    \      sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum *\
    \ prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n\
    \  long prod = 1;\n  for (auto i : arr) {\n    if (i < 0) {\n      prod *= -1;\n\
    \    } else if (i == 0) {\n      prod = 0;\n      break;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n \
    \ long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n\
    \      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  // your\
    \ code here\n  if(arr.size() == 0) return std::nullopt;\n  long sum = 0;\n  long\
    \ prod = 1;\n  for(auto i : arr){\n    sum += abs(i);\n    if(i > 0) prod *= 1;\n\
    \    else if(i < 0) prod *= -1;\n    else prod *= 0;\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n   \
    \ sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += i * -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n  \
    \    sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return prod * sum;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto x : arr) {\n    if (x > 0) {\n      sum += x;\n      prod\
    \ *= 1;\n    } else if (x < 0) {\n      sum += -x;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ x : arr) {\n    if (x > 0) {\n      sum += x;\n      prod *= 1;\n    } else\
    \ if (x < 0) {\n      sum += -x;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto x : arr) {\n        if (x\
    \ > 0) {\n            prod *= 1;\n            sum += x;\n        } else if (x\
    \ < 0) {\n            prod *= -1;\n            sum += std::abs(x);\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n\
    \    long sum = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n         \
    \   prod *= -1;\n        } else if (i > 0) {\n            prod *= 1;\n       \
    \ } else {\n            prod *= 0;\n        }\n        sum += std::abs(i);\n \
    \   }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i == 0) continue;\n\
    \    prod *= i > 0 ? 1 : -1;\n    sum += std::abs(i);\n  }\n  return prod * sum;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n   \
    \ sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += -i;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return prod * sum;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    sum += std::abs(i);\n\
    \    if (i > 0) prod *= 1;\n    else if (i < 0) prod *= -1;\n    else prod *=\
    \ 0;\n  }\n  return sum * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ < 0) {\n            prod *= -1;\n        } else if (i == 0) {\n            prod\
    \ = 0;\n            sum = 0;\n            break;\n        }\n        sum += std::abs(i);\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto x : arr) {\n    if (x > 0) {\n     \
    \ prod *= 1;\n      sum += x;\n    } else if (x < 0) {\n      prod *= -1;\n  \
    \    sum += -x;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i > 0) prod *= 1;\n    else if (i < 0) prod *= -1;\n\
    \    else prod *= 0;\n    sum += std::abs(i);\n  }\n  return sum * prod;", " \
    \ if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n \
    \ for (auto i : arr) {\n    if (i == 0) {\n      prod = 0;\n      sum = 0;\n \
    \     break;\n    }\n    prod *= (i > 0) ? 1 : -1;\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n     \
    \       prod *= -1;\n        } else {\n            prod *= 0;\n        }\n   \
    \     sum += std::abs(i);\n    }\n    return sum * prod;", "  // your code here\n\
    \  if(arr.size() == 0) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n\
    \  for(auto i : arr){\n    if(i == 0) continue;\n    sum += std::abs(i);\n   \
    \ prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += -i;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i < 0)\
    \ {\n      prod *= -1;\n    } else if (i > 0) {\n      sum += i;\n    }\n  }\n\
    \  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long sign_prod\
    \ = 1;\n  long sum_magnitudes = 0;\n  for (auto const& num : arr) {\n    if (num\
    \ == 0) {\n      sign_prod = 0;\n      sum_magnitudes = 0;\n      break;\n   \
    \ }\n    sign_prod *= num < 0 ? -1 : 1;\n    sum_magnitudes += std::abs(num);\n\
    \  }\n  return sign_prod * sum_magnitudes;", "    if (arr.empty()) {\n       \
    \ return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for\
    \ (auto i : arr) {\n        sum += std::abs(i);\n        prod *= i == 0 ? 1 :\
    \ i / std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto x : arr) {\n \
    \   if (x > 0) {\n      prod *= 1;\n      sum += x;\n    } else if (x < 0) {\n\
    \      prod *= -1;\n      sum += -x;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;", "  long sum = 0;\n  long prod = 1;\n  for (auto i\
    \ : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if\
    \ (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  if (prod == 0) {\n    return std::nullopt;\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ const &i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n   \
    \ } else if (i < 0) {\n      sum += std::abs(i);\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (long\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty()) {\n        return\
    \ std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n\
    \        }\n        sum += std::abs(i);\n    }\n    return sum * prod;", "   \
    \ if (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        sum += std::abs(i);\n \
    \       prod *= i == 0 ? 1 : i > 0 ? 1 : -1;\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            sum += i * -1;\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n \
    \ long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n\
    \      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            sum += i * -1;\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto x : arr) {\n    if (x > 0)\
    \ {\n      prod *= 1;\n    } else if (x < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(x);\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (long i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  // your code here\n  if(arr.size()\
    \ == 0) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for(auto i\
    \ : arr){\n    sum += std::abs(i);\n    prod *= i == 0 ? 1 : i / std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto x : arr) {\n    if (x < 0)\
    \ {\n      prod *= -1;\n    } else if (x > 0) {\n      sum += x;\n    }\n  }\n\
    \  return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    sum += std::abs(i);\n        if (i > 0) {\n            prod *= 1;\n     \
    \   } else if (i < 0) {\n            prod *= -1;\n        } else {\n         \
    \   prod *= 0;\n        }\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (long i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] == 0) {\n            prod = 0;\n            sum = 0;\n            break;\n\
    \        }\n        sum += std::abs(arr[i]);\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n   \
    \ sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) {\n   \
    \ return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto& i\
    \ : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if\
    \ (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n      sum +=\
    \ i;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i < 0) prod\
    \ *= -1;\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ &i : arr) {\n    sum += std::abs(i);\n    if (i != 0) {\n      prod *= i / std::abs(i);\n\
    \    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i == 0) {\n      continue;\n\
    \    }\n    prod *= i > 0 ? 1 : -1;\n    sum += std::abs(i);\n  }\n  return sum\
    \ * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long product = 1;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      product *= 1;\n \
    \   } else if (i < 0) {\n      sum += i * -1;\n      product *= -1;\n    } else\
    \ {\n      product *= 0;\n    }\n  }\n  return sum * product;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto &i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n     \
    \       prod *= -1;\n        } else {\n            prod *= 0;\n        }\n   \
    \     sum += std::abs(i);\n    }\n    return sum * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i == 0) continue;\n        prod *= i > 0 ? 1 : -1;\n \
    \       sum += std::abs(i);\n    }\n    return prod * sum;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i ==\
    \ 0) {\n      continue;\n    }\n    prod *= (i < 0) ? -1 : 1;\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto&\
    \ num : arr) {\n        if (num > 0) {\n            prod *= 1;\n            sum\
    \ += num;\n        } else if (num < 0) {\n            prod *= -1;\n          \
    \  sum += std::abs(num);\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (long i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (long i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += -i;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "    if\
    \ (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n  \
    \  long prod = 1;\n    for (auto& i : arr) {\n        sum += std::abs(i);\n  \
    \      prod *= i == 0 ? 1 : i / std::abs(i);\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    sum += std::abs(i);\n    prod *= i < 0 ? -1\
    \ : i > 0 ? 1 : 0;\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto& i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto& i : arr) {\n   \
    \     sum += std::abs(i);\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    prod *= i < 0 ? -1\
    \ : 1;\n    sum += std::abs(i);\n  }\n  return prod * sum;", "    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto& i : arr) {\n        if (i > 0) {\n            prod *= 1;\n   \
    \     } else if (i < 0) {\n            prod *= -1;\n        } else {\n       \
    \     prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    sum += std::abs(i);\n    if (i != 0) {\n      prod *= i / std::abs(i);\n\
    \    }\n  }\n  return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    sum += std::abs(i);\n        prod *= (i == 0 ? 1 : (i > 0 ? 1 : -1));\n \
    \   }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long product = 1;\n  long sum = 0;\n  for (auto &i : arr) {\n    if (i\
    \ > 0) {\n      product *= 1;\n    } else if (i < 0) {\n      product *= -1;\n\
    \    } else {\n      product *= 0;\n    }\n    sum += abs(i);\n  }\n  return sum\
    \ * product;", "    if (arr.empty()) {\n        return std::nullopt;\n    }\n\
    \    long sum = 0;\n    long prod = 1;\n    for (auto x : arr) {\n        if (x\
    \ < 0) {\n            prod *= -1;\n        } else if (x > 0) {\n            prod\
    \ *= 1;\n        } else {\n            prod *= 0;\n        }\n        sum += std::abs(x);\n\
    \    }\n    return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto& i : arr) {\n   \
    \     if (i == 0) {\n            continue;\n        }\n        sum += std::abs(i);\n\
    \        prod *= i < 0 ? -1 : 1;\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    prod *= i < 0 ? -1\
    \ : 1;\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i ==\
    \ 0) {\n      continue;\n    }\n    sum += std::abs(i);\n    prod *= i < 0 ? -1\
    \ : 1;\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto& i : arr) {\n    if (i >\
    \ 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum\
    \ += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n \
    \ long sum = 0;\n  for (auto x : arr) {\n    if (x > 0) {\n      prod *= 1;\n\
    \      sum += x;\n    } else if (x < 0) {\n      prod *= -1;\n      sum += -x;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n \
    \ long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n\
    \      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += i;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i > 0) prod *= 1;\n    else if (i < 0) prod *= -1;\n    else prod\
    \ *= 0;\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long prod = 1;\n  long sum = 0;\n  for (auto& i : arr) {\n    if (i > 0) {\n\
    \      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n\
    \      sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum *\
    \ prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n\
    \  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n\
    \      prod *= 1;\n    } else if (i < 0) {\n      sum += std::abs(i);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", " \
    \   if (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long prod = 1;\n    for (auto it = arr.begin(); it != arr.end(); ++it) {\n\
    \        if (*it > 0) {\n            sum += *it;\n            prod *= 1;\n   \
    \     } else if (*it < 0) {\n            sum += *it * -1;\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n    }\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum +=\
    \ std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr)\
    \ {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i == 0) {\n      prod\
    \ = 0;\n      break;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long product = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i < 0) {\n      product *= -1;\n \
    \   } else if (i > 0) {\n      product *= 1;\n    } else {\n      product *= 0;\n\
    \    }\n    sum += abs(i);\n  }\n  return sum * product;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return prod * sum;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto &x : arr) {\n    if (x == 0) continue;\n\
    \    prod *= x > 0 ? 1 : -1;\n    sum += std::abs(x);\n  }\n  return prod * sum;",
  "    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long product = 1;\n    for (const auto& i : arr) {\n        sum += std::abs(i);\n\
    \        product *= i < 0 ? -1 : i == 0 ? 0 : 1;\n    }\n    return sum * product;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else\
    \ if (i > 0) {\n      sum += i;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  // your code here\n  if(arr.size() == 0)\n   \
    \ return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for(auto i : arr)\n\
    \  {\n    if(i < 0)\n      prod *= -1;\n    else if(i > 0)\n      prod *= 1;\n\
    \    else\n      prod *= 0;\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto& i : arr) {\n    sum += std::abs(i);\n    if (i > 0) prod *= 1;\n    else\
    \ if (i < 0) prod *= -1;\n    else prod *= 0;\n  }\n  return sum * prod;", " \
    \ if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ num : arr) {\n    if (num == 0) {\n      continue;\n    }\n    sum += std::abs(num);\n\
    \    prod *= num > 0 ? 1 : -1;\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += std::abs(i);\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto &x : arr) {\n    if (x > 0) prod *= 1;\n    else if (x < 0)\
    \ prod *= -1;\n    else prod *= 0;\n    sum += std::abs(x);\n  }\n  return sum\
    \ * prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n     \
    \ sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n  \
    \  } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i / std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0)\
    \ {\n      prod *= -1;\n      sum += -i;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return prod * sum;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    sum += abs(i);\n\
    \    prod *= (i == 0 ? 1 : i / abs(i));\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long product = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      product *= 1;\n    } else if (i <\
    \ 0) {\n      product *= -1;\n    } else {\n      product *= 0;\n    }\n    sum\
    \ += std::abs(i);\n  }\n  return sum * product;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long sum =\
    \ 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum +=\
    \ i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", " \
    \ if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto&\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += abs(i);\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto x : arr)\
    \ {\n    if (x > 0) {\n      prod *= 1;\n    } else if (x < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(x);\n  }\n \
    \ return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i == 0) {\n            continue;\n        }\n        prod *= i > 0 ?\
    \ 1 : -1;\n        sum += std::abs(i);\n    }\n    return sum * prod;", "    if\
    \ (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n \
    \   long sum = 0;\n    for (auto& i : arr) {\n        if (i > 0) {\n         \
    \   prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n       \
    \ } else {\n            prod *= 0;\n        }\n        sum += std::abs(i);\n \
    \   }\n    return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n     \
    \       prod *= -1;\n        } else {\n            prod *= 0;\n        }\n   \
    \     sum += std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto &i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += std::abs(i);\n      prod *= -1;\n    } else {\n      prod *=\
    \ 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty()) {\n        return\
    \ std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i == 0) {\n            continue;\n        }\n        prod\
    \ *= i > 0 ? 1 : -1;\n        sum += std::abs(i);\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto el : arr) {\n        if (el == 0) {\n            continue;\n  \
    \      }\n        prod *= el > 0 ? 1 : -1;\n        sum += std::abs(el);\n   \
    \ }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n  \
    \    sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return prod * sum;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long product = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      product *= 1;\n  \
    \  } else if (i < 0) {\n      product *= -1;\n    } else {\n      product *= 0;\n\
    \    }\n    sum += std::abs(i);\n  }\n  return product * sum;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n\
    \            prod *= 1;\n            sum += i;\n        } else if (i < 0) {\n\
    \            prod *= -1;\n            sum += -i;\n        } else {\n         \
    \   prod *= 0;\n        }\n    }\n    return prod * sum;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += -i;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else\
    \ if (i > 0) {\n      sum += i;\n    }\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto& x : arr) {\n        if (x > 0) {\n            prod *= 1;\n   \
    \     } else if (x < 0) {\n            prod *= -1;\n        } else {\n       \
    \     prod *= 0;\n        }\n        sum += std::abs(x);\n    }\n    return sum\
    \ * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto &i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long sum = 0;\n  long product = 1;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      product *= 1;\n    } else if (i\
    \ < 0) {\n      sum += i * -1;\n      product *= -1;\n    } else {\n      product\
    \ *= 0;\n    }\n  }\n  return sum * product;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto &i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "    if (arr.empty()) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto& i : arr) {\n   \
    \     if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += -i;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "  if\
    \ (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long product = 1;\n  long sum = 0;\n  for (auto num :\
    \ arr) {\n    if (num > 0) {\n      product *= 1;\n    } else if (num < 0) {\n\
    \      product *= -1;\n    } else {\n      product *= 0;\n    }\n    sum += std::abs(num);\n\
    \  }\n  return sum * product;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i ==\
    \ 0) {\n      continue;\n    }\n    sum += std::abs(i);\n    prod *= i > 0 ? 1\
    \ : -1;\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto &i : arr) {\n    if (i >\
    \ 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i == 0) {\n      prod = 0;\n      sum = 0;\n     \
    \ break;\n    }\n    if (i < 0) prod *= -1;\n    sum += std::abs(i);\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ x : arr) {\n    if (x > 0) {\n      sum += x;\n      prod *= 1;\n    } else\
    \ if (x < 0) {\n      sum += std::abs(x);\n      prod *= -1;\n    } else {\n \
    \     prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n \
    \   return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i == 0) {\n      continue;\n    }\n  \
    \  sum += std::abs(i);\n    prod *= i < 0 ? -1 : 1;\n  }\n  return sum * prod;",
  "    if (arr.empty()) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= (i > 0)\
    \ - (i < 0);\n    }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n\
    \      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n\
    \      sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum *\
    \ prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum\
    \ += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto &i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& elem : arr) {\n        if (elem > 0) {\n            sum += elem;\n\
    \            prod *= 1;\n        } else if (elem < 0) {\n            sum += elem\
    \ * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n \
    \       }\n    }\n    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ < 0) prod *= -1;\n        else if (i > 0) prod *= 1;\n        else prod *= 0;\n\
    \        sum += std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    sum += std::abs(i);\n    prod *= i < 0 ? -1 : i > 0 ? 1 : 0;\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long product\
    \ = 1;\n  long sum = 0;\n  for (auto num : arr) {\n    if (num == 0) {\n     \
    \ continue;\n    }\n    product *= (num > 0) ? 1 : -1;\n    sum += std::abs(num);\n\
    \  }\n  return product * sum;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto &i : arr) {\n    if (i <\
    \ 0) {\n      prod *= -1;\n    } else if (i == 0) {\n      prod = 0;\n      sum\
    \ = 0;\n      break;\n    }\n    sum += std::abs(i);\n  }\n  return prod * sum;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n   \
    \ sum += std::abs(i);\n  }\n  return sum * prod;", "  if (arr.empty()) {\n   \
    \ return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i\
    \ : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n    \
    \  prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i ==\
    \ 0) {\n      continue;\n    }\n    prod *= i > 0 ? 1 : -1;\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n  \
    \    sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        sum += abs(i);\n      \
    \  prod *= (i == 0 ? 1 : i / abs(i));\n    }\n    return sum * prod;", "    if\
    \ (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n \
    \   long sum = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n         \
    \   continue;\n        }\n        prod *= i > 0 ? 1 : -1;\n        sum += std::abs(i);\n\
    \    }\n    return prod * sum;", "    if (arr.empty()) return std::nullopt;\n\
    \    long sum = 0;\n    long prod = 1;\n    for (auto &i : arr) {\n        if\
    \ (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else if\
    \ (i < 0) {\n            sum += -i;\n            prod *= -1;\n        } else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;"]
stop_tokens:
- "\n}"
