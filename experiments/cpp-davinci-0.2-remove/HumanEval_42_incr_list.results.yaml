language: cpp
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    result.push_back(l[i] +\
    \ 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto i : l) {\n    res.push_back(i + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ new_list;\n  for (auto i : l) {\n    new_list.push_back(i + 1);\n  }\n  return\
    \ new_list;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto e : l) {\n    res.push_back(e + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    result.push_back(l[i] +\
    \ 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    result.push_back(l[i] +\
    \ 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i] += 1;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto i : l) {\n    res.push_back(i + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ r;\n  for (int i = 0; i < l.size(); i++) {\n    r.push_back(l[i] + 1);\n  }\n\
    \  return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ l2;\n  for (int i = 0; i < l.size(); i++) {\n    l2.push_back(l[i] + 1);\n \
    \ }\n  return l2;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i] += 1;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i = 0; i < l.size(); i++) {\n        r.push_back(l[i] + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    result.push_back(l[i] +\
    \ 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ r;\n  for (long i = 0; i < l.size(); i++) {\n    r.push_back(l[i] + 1);\n  }\n\
    \  return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ r;\n  for (long i = 0; i < l.size(); i++) {\n    r.push_back(l[i] + 1);\n  }\n\
    \  return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ r;\n  for (auto i : l) {\n    r.push_back(i + 1);\n  }\n  return r;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (int i = 0; i < l.size(); i++) {\n        r.push_back(l[i] + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i = 0; i < l.size(); i++) {\n        r.push_back(l[i] + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto e : l) {\n        res.push_back(e + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081046
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i: l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081046
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (long i = 0; i < l.size(); i++) {\n    result.push_back(l[i]\
    \ + 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081046
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        res.push_back(x + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (int i = 0; i < l.size(); i++) {\n        r.push_back(l[i] + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    l[i]++;\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l.size(); i++) {\n    res.push_back(l[i] + 1);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto x : l) {\n    res.push_back(x + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto i : l) {\n    res.push_back(i + 1);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (auto i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081046
