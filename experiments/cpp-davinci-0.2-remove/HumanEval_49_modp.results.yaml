language: cpp
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res =\
    \ (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n) {\n        if (n & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmphl9arq_a: /tmp/tmphl9arq_a.cpp:15: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0)\n        return\
    \ 1;\n    long u = modp(n/2, p);\n    u = (u*u)%p;\n    if (n%2 == 1)\n      \
    \  u = (u*2)%p;\n    return u;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n \
    \   if (n % 2) x = (x*2) % p;\n    return x;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res =\
    \ (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp93uzxqvw: /tmp/tmp93uzxqvw.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\t\
    long long x = modp(n/2, p);\n\tx = (x*x) % p;\n\tif (n % 2 == 1) x = (x*2) % p;\n\
    \treturn x;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  long result = (half *\
    \ half) % p;\n  if (n % 2 == 1) result = (result * 2) % p;\n  return result;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    for\
    \ (long i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res =\
    \ (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0)\n    return\
    \ (x * x) % p;\n  else\n    return (2 * x * x) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 != 0) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n % 2 == 1) res = (res * 2) % p;\n    n /= 2;\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp9a8iuwgo: /tmp/tmp9a8iuwgo.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    long x2 = (x * x)\
    \ % p;\n    if (n % 2 == 0) return x2;\n    else return (x2 * 2) % p;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0)\n    return\
    \ 1;\n  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) %\
    \ p;\n  }\n  return (2 * modp(n - 1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n \
    \   if (n % 2 == 1) x = (x*2) % p;\n    return x;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n & 1) res\
    \ = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (((x*x) % p) * 2) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if (n % 2 == 1) sq =\
    \ (sq*2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n \
    \   assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long t = modp(n/2, p);\n    t = (t*t) % p;\n \
    \   if (n % 2 == 1) t = (t*2) % p;\n    return t;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res\
    \ = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long res = modp(n / 2, p);\n  res = (res * res) %\
    \ p;\n  if (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long y = modp(n/2, p);\n    return (y*y) % p;\n  }\n\
    \  return (modp(n-1, p) * 2) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq * sq) % p;\n    if (n % 2 == 1) sq\
    \ = (sq * 2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 != 0) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n\
    \  if (n % 2) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\t\
    long half = modp(n/2, p);\n\tlong full = (half * half) % p;\n\tif (n % 2 == 1)\
    \ full = (full * 2) % p;\n\treturn full;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp93uzxqvw: /tmp/tmp93uzxqvw.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  long result = (half *\
    \ half) % p;\n  if (n % 2 == 1) result = (result * 2) % p;\n  return result;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp93uzxqvw: /tmp/tmp93uzxqvw.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n        if\
    \ (n) res = (res * 2) % p;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpj6bku39e: /tmp/tmpj6bku39e.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res =\
    \ (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n / 2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n\tif (n == 0) return 1;\n\t\
    long res = modp(n/2, p);\n\tres = (res*res) % p;\n\tif (n % 2 == 1) res = (res*2)\
    \ % p;\n\treturn res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n\tlong ret = 1;\n\twhile (n\
    \ > 0) {\n\t\tif (n & 1) ret = (ret * 2) % p;\n\t\tn >>= 1;\n\t}\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpocou8dlj: /tmp/tmpocou8dlj.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) {\n            res = (res * 2) % p;\n        }\n\
    \        n >>= 1;\n        if (n > 0) {\n            res = (res * res) % p;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpzsmek56c: /tmp/tmpzsmek56c.cpp:20: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  long x2 = (x * x) % p;\n\
    \  if (n % 2 == 0) return x2;\n  return (x2 * 2) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n\tlong res = 1;\n\twhile (n\
    \ > 0) {\n\t\tif (n & 1) res = (res * 2) % p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpki9o2t77: /tmp/tmpki9o2t77.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n / 2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  long x2 = (x * x) % p;\n\
    \  if (n % 2 == 0) return x2;\n  return (x2 * 2) % p;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  for (long\
    \ i = 0; i < n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n\
    \  if (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  for (long\
    \ i = 1; i <= n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x)\
    \ % p;\n  else return (2*x*x) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq * sq) % p;\n    if (n % 2 == 1) sq\
    \ = (sq * 2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n\
    \  if (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x)\
    \ % p;\n  else return (2*x*x) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n & 1) res = (res * 2) % p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpb2yu58f4: /tmp/tmpb2yu58f4.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 != 0) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x)\
    \ % p;\n  else return (2*x*x) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n\
    \  if (n % 2) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 != 0) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    long x2 = (x * x)\
    \ % p;\n    if (n % 2 == 0) return x2;\n    else return (x2 * 2) % p;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp93uzxqvw: /tmp/tmp93uzxqvw.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if (n % 2 == 1) sq =\
    \ (sq*2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n \
    \   assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n/2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 == 1) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long x = modp(n/2, p);\n    x = (x*x) % p;\n    if (n % 2 == 1) x = (x*2)\
    \ % p;\n    return x;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  assert(n >= 0);\n  if (n\
    \ == 0) return 1;\n  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if\
    \ (n % 2 != 0) res = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    long res = (x*x) %\
    \ p;\n    if (n % 2 == 1) res = (res*2) % p;\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n \
    \   if (n % 2 == 1) x = (x*2) % p;\n    return x;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long sq = modp(n/2, p);\n  sq = (sq*sq) % p;\n  if (n % 2 == 1) sq = (sq*2)\
    \ % p;\n  return sq;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n/2, p);\n  res = (res*res) % p;\n  if (n%2 == 1) res = (res*2)\
    \ % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long res = modp(n / 2, p);\n  res = (res * res) % p;\n  if (n % 2 == 1) res\
    \ = (res * 2) % p;\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x)\
    \ % p;\n  return (2*x*x) % p;\n}\nint main() {\n    auto candidate = modp;\n \
    \   assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  if (n % 2 == 0) return\
    \ (half * half) % p;\n  else return (2 * half * half) % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  long result = (half *\
    \ half) % p;\n  if (n % 2 == 1) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n \
    \   if (n % 2 == 1) x = (x*2) % p;\n    return x;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n    if (n) res = (res\
    \ * 2) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp7nco5e8w: /tmp/tmp7nco5e8w.cpp:16: int main(): Assertion `candidate((1101),
    (101)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n / 2, p);\n    if (n % 2 == 0)\
    \ return (x * x) % p;\n    else return (2 * x * x) % p;\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp93uzxqvw: /tmp/tmp93uzxqvw.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long x = modp(n/2, p);\n  if (n % 2 == 0) return (x*x)\
    \ % p;\n  else return (2*x*x) % p;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1)\n            res = (res * 2) % p;\n        n >>=\
    \ 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpz1nxk385: /tmp/tmpz1nxk385.cpp:15: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    long x2 = (x * x)\
    \ % p;\n    if (n % 2 == 0) return x2;\n    else return (x2 * 2) % p;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2) res = (res * 2) % p;\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    long x2 = (x * x)\
    \ % p;\n    if (n % 2 == 0) return x2;\n    else return (x2 * 2) % p;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n / 2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmpukv02d1w: /tmp/tmpukv02d1w.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n \
    \   if (n % 2 == 1) x = (x*2) % p;\n    return x;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    if (n % 2 == 0) return\
    \ (x*x) % p;\n    else return (2*x*x) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: Exception
  stderr: 'tmp93uzxqvw: /tmp/tmp93uzxqvw.cpp:14: int main(): Assertion `candidate((3),
    (5)) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long half = modp(n/2, p);\n    long result = (half\
    \ * half) % p;\n    if (n % 2 == 1) result = (result * 2) % p;\n    return result;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n \
    \   if (n % 2 == 1) x = (x*2) % p;\n    return x;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if (n % 2 == 1) sq =\
    \ (sq*2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n \
    \   assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long x = modp(n/2, p);\n    if (n % 2 == 0) return (x*x) % p;\n    else return\
    \ (x*x*2) % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  long result = (half *\
    \ half) % p;\n  if (n % 2 == 1) result = (result * 2) % p;\n  return result;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n < 0)\n        n\
    \ += p;\n    long res = 1;\n    long x = 2;\n    while (n > 0) {\n        if (n\
    \ & 1)\n            res = (res * x) % p;\n        x = (x * x) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) return modp(n/2, p) * modp(n/2, p) % p;\n    return modp(n-1,\
    \ p) * 2 % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    if (n % 2 == 0) {\n        long t = modp(n/2,\
    \ p);\n        return (t*t) % p;\n    } else {\n        return (2 * modp(n-1,\
    \ p)) % p;\n    }\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 2;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  long res = 1;\n  for (long\
    \ i = 0; i < n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if (n % 2 == 1) sq =\
    \ (sq*2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n \
    \   assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  long x = modp(n/2, p);\n  x = (x*x) % p;\n  if (n%2 == 1) x = (x*2) % p;\n\
    \  return x;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n == 1) return 2;\n  long half = modp(n/2, p);\n  long result = (half *\
    \ half) % p;\n  if (n % 2 == 1) result = (result * 2) % p;\n  return result;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long sq = modp(n/2, p);\n    sq = (sq*sq) % p;\n    if (n % 2 == 1) sq =\
    \ (sq*2) % p;\n    return sq;\n}\nint main() {\n    auto candidate = modp;\n \
    \   assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n/2, p);\n    return (t*t) % p;\n  } else\
    \ {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n & 1) res\
    \ = (res * 2) % p;\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\nlong modp(long n, long p) {\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126850
