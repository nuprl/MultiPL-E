name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// Example 2:\n// Example 3:\n\
  // Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n\
  // * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity\
  \ <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (9)) == (2));\n}\n"
completions: ["    // your code goes here\n    long max_fill = 0;\n    for(auto row\
    \ : grid){\n        for(auto cell : row){\n            if(cell == 1){\n      \
    \          max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto well : row) {\n            max_fill += well;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    // your code goes here\n    long max_fill = 0;\n    for(auto\
    \ row : grid){\n        for(auto col : row){\n            if(col == 1){\n    \
    \            max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long\
    \ col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n     \
    \           max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long\
    \ col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n     \
    \           max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        long\
    \ fill = 0;\n        for (auto well : row) {\n            fill += well;\n    \
    \    }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long rows = grid.size();\n    long cols = grid[0].size();\n    long max_fill\
    \ = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0;\
    \ col < cols; col++) {\n            if(grid[row][col] == 1) {\n              \
    \  max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            fill += well;\n        }\n     \
    \   max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    //\
    \ your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n   \
    \     for(auto col : row){\n            if(col == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    //\
    \ your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        long sum = 0;\n        for(long j = 0; j < grid[i].size(); j++){\n\
    \            sum += grid[i][j];\n        }\n        max_fill = std::max(max_fill,\
    \ sum);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long row_fill = 0;\n        for (auto well : row) {\n\
    \            row_fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto cell : row){\n  \
    \          if(cell == 1){\n                max_fill += capacity;\n           \
    \ }\n        }\n    }\n    return max_fill;", "    // your code goes here\n  \
    \  long max_fill = 0;\n    for(auto row : grid){\n        long fill = 0;\n   \
    \     for(auto cell : row){\n            if(cell == 1){\n                fill++;\n\
    \            }\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n\
    \    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        long\
    \ sum = 0;\n        for (auto cell : row) {\n            sum += cell;\n      \
    \  }\n        max_fill = std::max(max_fill, sum);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n \
    \       for (auto well : row) {\n            fill += well;\n        }\n      \
    \  max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        long row_fill = 0;\n\
    \        for (auto well : row) {\n            row_fill += well;\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long result = 0;\n    // Write your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long sum = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n    }\n    result = sum / capacity;\n    if(sum % capacity != 0){\n    \
    \    result++;\n    }\n    return result;", "    // your code here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        long sum = 0;\n        for(auto col\
    \ : row){\n            sum += col;\n        }\n        max_fill = std::max(max_fill,\
    \ sum);\n    }\n    return max_fill / capacity + (max_fill % capacity != 0);",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        long row_fill = 0;\n        for(auto well : row){\n            if(well\
    \ == 1){\n                row_fill++;\n            }\n        }\n        if(row_fill\
    \ > max_fill){\n            max_fill = row_fill;\n        }\n    }\n    return\
    \ max_fill;", "    // your code goes here\n    long max_fill = 0;\n    for(auto\
    \ row : grid){\n        for(auto col : row){\n            if(col > max_fill){\n\
    \                max_fill = col;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long result = 0;\n    // your code goes here\n    for(long\
    \ i = 0; i < grid.size(); i++){\n        long sum = 0;\n        for(long j = 0;\
    \ j < grid[i].size(); j++){\n            sum += grid[i][j];\n        }\n     \
    \   result += sum/capacity;\n        if(sum%capacity != 0){\n            result++;\n\
    \        }\n    }\n    return result;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto cell : row){\n  \
    \          if(cell == 1){\n                max_fill += capacity;\n           \
    \ }\n        }\n    }\n    return max_fill;", "    // your code goes here\n  \
    \  long max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n\
    \            if(col == 1){\n                max_fill += capacity;\n          \
    \  }\n        }\n    }\n    return max_fill;", "    // your code goes here\n \
    \   long max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        long\
    \ fill = 0;\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    //\
    \ your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n   \
    \     for(auto cell : row){\n            if(cell == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n       \
    \ for (auto well : row) {\n            fill += well;\n        }\n        max_fill\
    \ = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill / capacity;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill\
    \ / capacity;", "    // your code goes here\n    long max_fill = 0;\n    for(long\
    \ i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    // your code goes here\n\
    \    long max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            fill += well;\n        }\n     \
    \   max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ // your code goes here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j\
    \ = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    //\
    \ your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n   \
    \     for(auto well : row){\n            if(well > max_fill){\n              \
    \  max_fill = well;\n            }\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col > max_fill){\n             \
    \   max_fill = col;\n            }\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            fill += well;\n        }\n     \
    \   max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        long fill = 0;\n        for(auto well : row){\n            if(well ==\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long result = 0;\n    // your code\
    \ goes here\n    for(auto x: grid) {\n        long sum = 0;\n        for(auto\
    \ y: x) {\n            sum += y;\n        }\n        result += (sum/capacity);\n\
    \        if(sum%capacity != 0) {\n            result++;\n        }\n    }\n  \
    \  return result;", "    // your code goes here\n    long max_fill = 0;\n    for(auto\
    \ row : grid){\n        for(auto cell : row){\n            if(cell == 1){\n  \
    \              max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    // your code goes here\n    long max_fill = 0;\n    for(auto\
    \ row : grid){\n        long fill = 0;\n        for(auto well : row){\n      \
    \      if(well == 1){\n                fill++;\n            }\n        }\n   \
    \     max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "  \
    \  // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            max_fill += col;\n        }\n    }\n\
    \    return max_fill / capacity;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        long row_fill = 0;\n        for(auto\
    \ well : row){\n            if(well == 1){\n                row_fill++;\n    \
    \        }\n        }\n        max_fill = std::max(max_fill, row_fill);\n    }\n\
    \    return max_fill;", "    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid){\n        for(auto col : row){\n            if(col ==\
    \ 1){\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill / capacity;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         if(col == 1){\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col > max_fill){\n             \
    \   max_fill = col;\n            }\n        }\n    }\n    return max_fill;", " \
    \   // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long i = 0; i < n; i++){\n        for(long j\
    \ = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    //\
    \ your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n   \
    \     long fill = 0;\n        for(auto well : row){\n            if(well == 1){\n\
    \                fill++;\n            }\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(int i = 0; i < grid.size(); i++){\n        long sum =\
    \ 0;\n        for(int j = 0; j < grid[i].size(); j++){\n            sum += grid[i][j];\n\
    \        }\n        if(sum > max_fill){\n            max_fill = sum;\n       \
    \ }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (long i =\
    \ 0; i < grid.size(); i++) {\n        long fill = 0;\n        for (long j = 0;\
    \ j < grid[i].size(); j++) {\n            fill += grid[i][j];\n        }\n   \
    \     max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "  \
    \  // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col > max_fill){\n             \
    \   max_fill = col;\n            }\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        long fill = 0;\n        for(long j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        if(fill > max_fill){\n            max_fill = fill;\n       \
    \ }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row\
    \ : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill / capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        long fill = 0;\n        for (auto well :\
    \ row) {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         fill += well;\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        long row_fill = 0;\n        for(auto\
    \ cell : row){\n            if(cell == 1){\n                row_fill++;\n    \
    \        }\n        }\n        max_fill = std::max(max_fill, row_fill);\n    }\n\
    \    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long row_fill = 0;\n        for (auto well : row) {\n           \
    \ row_fill += well;\n        }\n        max_fill = std::max(max_fill, row_fill);\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long fill = 0;\n        for (auto well : row) {\n            fill\
    \ += well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n \
    \   return max_fill;", "    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        long\
    \ fill = 0;\n        for(long col = 0; col < cols; col++) {\n            fill\
    \ += grid[row][col];\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    long row_count = grid.size();\n    long col_count\
    \ = grid[0].size();\n    long max_fill = 0;\n    for(long row = 0; row < row_count;\
    \ row++) {\n        for(long col = 0; col < col_count; col++) {\n            if(grid[row][col]\
    \ == 1) {\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long fill = 0;\n        for (auto well : row) {\n            fill\
    \ += well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n \
    \   return max_fill;", "    // your code goes here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long max_fill = 0;\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                max_fill = std::max(max_fill, j);\n            }\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         fill += well;\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        for(auto cell : row){\n           \
    \ if(cell == 1){\n                max_fill += capacity;\n            }\n     \
    \   }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row\
    \ : grid) {\n        for (auto col : row) {\n            max_fill += col;\n  \
    \      }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        long sum = 0;\n        for(auto col : row){\n            sum += col;\n\
    \        }\n        max_fill = std::max(max_fill, sum);\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            max_fill += col;\n        }\n    }\n\
    \    return max_fill / capacity;", "    long max_fill = 0;\n    for (auto row\
    \ : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill / capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    // your code goes here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long max_fill =\
    \ 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n\
    \            if(grid[i][j] == 1) {\n                max_fill += capacity;\n  \
    \          }\n        }\n    }\n    return max_fill;", "    // your code goes\
    \ here\n    long count = 0;\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max_fill){\n            max_fill = count;\n        }\n        count = 0;\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(long i = 0; i < grid.size(); i++){\n        long fill = 0;\n \
    \       for(long j = 0; j < grid[i].size(); j++){\n            fill += grid[i][j];\n\
    \        }\n        if(fill > max_fill){\n            max_fill = fill;\n     \
    \   }\n    }\n    return max_fill;", "    long rows = grid.size();\n    long cols\
    \ = grid[0].size();\n    long max_fill = 0;\n    for(long row = 0; row < rows;\
    \ row++) {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col]\
    \ == 1) {\n                max_fill = std::max(max_fill, col);\n            }\n\
    \        }\n    }\n    return max_fill;", "    long rows = grid.size();\n    long\
    \ cols = grid[0].size();\n    long max_fill = 0;\n    for(long row = 0; row <\
    \ rows; row++) {\n        long fill = 0;\n        for(long col = 0; col < cols;\
    \ col++) {\n            fill += grid[row][col];\n        }\n        max_fill =\
    \ std::max(max_fill, fill);\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        long fill = 0;\n        for (auto\
    \ well : row) {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long max_fill = 0;\n   \
    \ for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n     \
    \       if(grid[i][j] == 1) {\n                max_fill = max_fill + 1;\n    \
    \        }\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        long fill = 0;\n        for (auto cell :\
    \ row) {\n            fill += cell;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        long fill = 0;\n        for(auto\
    \ well : row){\n            if(well == 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        long\
    \ fill = 0;\n        for (auto well : row) {\n            fill += well;\n    \
    \    }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        long row_fill = 0;\n\
    \        for (auto well : row) {\n            row_fill += well;\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        long fill = 0;\n        for(long j = 0; j < grid[i].size(); j++){\n\
    \            fill += grid[i][j];\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         max_fill += col;\n        }\n    }\n    return max_fill / capacity;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            fill += well;\n        }\n     \
    \   max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        long row_fill = 0;\n\
    \        for (auto well : row) {\n            row_fill += well;\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            fill += well;\n        }\n     \
    \   max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        long row_fill = 0;\n\
    \        for (auto well : row) {\n            row_fill += well;\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long row_fill = 0;\n\
    \        for (auto well : row) {\n            row_fill += well;\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    // your code goes here\n    std::vector<long>\
    \ max_row(grid.size(), 0);\n    for (long i = 0; i < grid.size(); i++) {\n   \
    \     for (long j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                max_row[i]++;\n            }\n        }\n    }\n  \
    \  long max_fill = 0;\n    for (long i = 0; i < max_row.size(); i++) {\n     \
    \   max_fill += max_row[i] / capacity;\n        if (max_row[i] % capacity != 0)\
    \ {\n            max_fill++;\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long row_fill = 0;\n\
    \        for (auto well : row) {\n            row_fill += well;\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto cell : row){\n            if(cell == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ // your code goes here\n    long total_water = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                total_water++;\n            }\n        }\n    }\n  \
    \  return total_water/capacity;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        for(auto col : row){\n            if(col\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    // your code goes here\n    long max_fill =\
    \ 0;\n    for(auto row : grid){\n        long row_fill = 0;\n        for(auto\
    \ well : row){\n            if(well == 1){\n                row_fill++;\n    \
    \        }\n        }\n        max_fill = std::max(max_fill, row_fill);\n    }\n\
    \    return max_fill;", "    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid){\n        for(auto cell : row){\n            if(cell\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long fill = 0;\n        for (auto well : row) {\n            fill\
    \ += well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n \
    \   return max_fill;", "    // your code goes here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long max_fill = 0;\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                max_fill = std::max(max_fill, i);\n            }\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         if(col == 1){\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long row_fill = 0;\n        for (auto cell : row) {\n\
    \            row_fill += cell;\n        }\n        max_fill = std::max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         if(col == 1){\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long row_fill = 0;\n        for (auto well : row) {\n\
    \            row_fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         if(col > max_fill){\n                max_fill = col;\n            }\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill / capacity;", "    // your code goes here\n\
    \    long rows = grid.size();\n    long cols = grid[0].size();\n    long max_fill\
    \ = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0;\
    \ col < cols; col++) {\n            if(grid[row][col] == 1) {\n              \
    \  max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto cell : row){\n            if(cell == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n\
    \            max_fill += well;\n        }\n    }\n    return max_fill / capacity;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long row_fill = 0;\n        for (auto well : row) {\n           \
    \ row_fill += well;\n        }\n        max_fill = std::max(max_fill, row_fill);\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        for(auto cell : row){\n           \
    \ if(cell == 1){\n                max_fill += capacity;\n            }\n     \
    \   }\n    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        for(auto col : row){\n            if(col\
    \ > max_fill){\n                max_fill = col;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    // your code goes here\n    long max_fill =\
    \ 0;\n    for(auto row : grid){\n        long fill = 0;\n        for(auto well\
    \ : row){\n            if(well == 1){\n                fill++;\n            }\n\
    \        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            fill += well;\n        }\n     \
    \   max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        long fill = 0;\n        for(long j = 0; j < grid[i].size(); j++){\n\
    \            fill += grid[i][j];\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (long\
    \ i = 0; i < grid.size(); i++) {\n        long fill = 0;\n        for (long j\
    \ = 0; j < grid[i].size(); j++) {\n            fill += grid[i][j];\n        }\n\
    \        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        long row_fill = 0;\n        for(auto well : row){\n            if(well\
    \ == 1){\n                row_fill++;\n            }\n        }\n        if(row_fill\
    \ > max_fill){\n            max_fill = row_fill;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (long i = 0; i < grid.size(); i++)\
    \ {\n        long fill = 0;\n        for (long j = 0; j < grid[i].size(); j++)\
    \ {\n            fill += grid[i][j];\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         fill += well;\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto col : row) {\n            max_fill += col;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto unit : row) {\n            max_fill += unit;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(auto row : grid){\n        for(auto cell : row){\n           \
    \ if(cell == 1){\n                max_fill += capacity;\n            }\n     \
    \   }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row\
    \ : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill / capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        long fill = 0;\n        for (auto well :\
    \ row) {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         fill += well;\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long rows = grid.size();\n\
    \    long cols = grid[0].size();\n    long max_fill = 0;\n    for(long i = 0;\
    \ i < rows; i++){\n        long sum = 0;\n        for(long j = 0; j < cols; j++){\n\
    \            sum += grid[i][j];\n        }\n        max_fill = std::max(max_fill,\
    \ sum);\n    }\n    return max_fill;", "    // your code goes here\n    long sum\
    \ = 0;\n    for(auto row : grid) {\n        for(auto col : row) {\n          \
    \  sum += col;\n        }\n    }\n    return sum / capacity;", "    // your code\
    \ goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n\
    \        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long row_fill = 0;\n        for (auto well : row) {\n           \
    \ row_fill += well;\n        }\n        max_fill = std::max(max_fill, row_fill);\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(long i = 0; i < grid.size(); i++){\n        long fill = 0;\n \
    \       for(long j = 0; j < grid[i].size(); j++){\n            fill += grid[i][j];\n\
    \        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill / capacity;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        long fill = 0;\n        for(auto well : row){\n            if(well ==\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    long result = 0;\n    // your code\
    \ goes here\n    return result;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j\
    \ < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col > max_fill){\n             \
    \   max_fill = col;\n            }\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        long sum = 0;\n        for(auto col : row){\n            sum += col;\n\
    \        }\n        max_fill = std::max(max_fill, sum);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n \
    \       for (auto well : row) {\n            fill += well;\n        }\n      \
    \  max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    //\
    \ your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n   \
    \     long fill = 0;\n        for(auto cell : row){\n            if(cell == 1){\n\
    \                fill++;\n            }\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         if(col == 1){\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long row_fill = 0;\n        for (auto well : row) {\n\
    \            row_fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ row_fill);\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid){\n        for(auto col : row){\n   \
    \         if(col > max_fill){\n                max_fill = col;\n            }\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n       \
    \ for (auto well : row) {\n            fill += well;\n        }\n        max_fill\
    \ = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n       \
    \     max_fill += cell;\n        }\n    }\n    return max_fill;", "    // your\
    \ code goes here\n    long max_fill = 0;\n    for(auto row : grid){\n        for(auto\
    \ col : row){\n            max_fill += col;\n        }\n    }\n    return max_fill\
    \ / capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n       \
    \ for (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n \
    \   return max_fill;", "    // your code goes here\n    long max_fill = 0;\n \
    \   for(auto row : grid){\n        for(auto col : row){\n            if(col >\
    \ max_fill){\n                max_fill = col;\n            }\n        }\n    }\n\
    \    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;"]
stop_tokens:
- "\n}"
