language: cpp
name: HumanEval_103_rounded_avg
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu_1nauyx: /tmp/tmpu_1nauyx.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = n + m;\n    long avg = sum / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpx82tqyi9: /tmp/tmpx82tqyi9.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n   \
    \ }\n    int avg = sum / (m - n + 1);\n    return std::bitset<8>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpcj29tyua: /tmp/tmpcj29tyua.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++) {\n\
    \        sum += i;\n        count++;\n    }\n    long avg = sum / count;\n   \
    \ std::string binary = \"\";\n    while (avg != 0) {\n        binary = std::to_string(avg\
    \ % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8ffrzr27: /tmp/tmp8ffrzr27.cpp:37: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3bthdyud: /tmp/tmp3bthdyud.cpp:25: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long avg = (n + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps352xuto: /tmp/tmps352xuto.cpp:27: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string\
    \ binary = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg %\
    \ 2) + binary;\n        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpy5pxho1a: /tmp/tmpy5pxho1a.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        sum += i;\n        count++;\n    }\n    long avg = sum / count;\n\
    \    std::string binary = std::bitset<8>(avg).to_string();\n    return Union_std_string_long(binary);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpb2_14khq: /tmp/tmpb2_14khq.cpp:33: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long avg = (n + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps352xuto: /tmp/tmps352xuto.cpp:27: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    double sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    double avg = sum / (m - n + 1);\n    long rounded_avg = round(avg);\n\
    \    std::string binary = std::bitset<32>(rounded_avg).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpniqcfgrv: /tmp/tmpniqcfgrv.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    double avg = (n\
    \ + m) / 2.0;\n    long rounded = round(avg);\n    std::string binary = std::bitset<32>(rounded).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpunyqmbtc: /tmp/tmpunyqmbtc.cpp:26: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<8>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpr22uac04: /tmp/tmpr22uac04.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary\
    \ = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu12b4gmt: /tmp/tmpu12b4gmt.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfmcnxvl9: /tmp/tmpfmcnxvl9.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu_1nauyx: /tmp/tmpu_1nauyx.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary\
    \ = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpl7tpkdtw: /tmp/tmpl7tpkdtw.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    return Union_std_string_long(avg);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpyyy6mwvu: /tmp/tmpyyy6mwvu.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long rounded_avg = std::round(sum / (m - n + 1));\n    std::string\
    \ binary = std::bitset<8>(rounded_avg).to_string();\n    return Union_std_string_long(binary);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpdcbzffuc: /tmp/tmpdcbzffuc.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpnv18dd6s: /tmp/tmpnv18dd6s.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = n;\n    for (long i = n + 1; i <= m; i++) {\n        sum\
    \ += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\
    \";\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphuf015dv: /tmp/tmphuf015dv.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n  \
    \  ss << std::bitset<32>(avg);\n    return Union_std_string_long(ss.str());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpb4vmldrv: /tmp/tmpb4vmldrv.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long avg = (n + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps352xuto: /tmp/tmps352xuto.cpp:27: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = round(sum / (m - n + 1));\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpetbu0vdr: /tmp/tmpetbu0vdr.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfmcnxvl9: /tmp/tmpfmcnxvl9.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n  \
    \  ss << std::bitset<8>(avg);\n    return Union_std_string_long(ss.str());\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"\
    0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
    0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
    0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
    0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
    0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
    0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
    0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
    0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3x1sivof: /tmp/tmp3x1sivof.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++) {\n\
    \        sum += i;\n        count++;\n    }\n    long avg = sum / count;\n   \
    \ std::string binary = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg\
    \ % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp4zbwj2qr: /tmp/tmp4zbwj2qr.cpp:37: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long avg = (n + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps352xuto: /tmp/tmps352xuto.cpp:27: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu_1nauyx: /tmp/tmpu_1nauyx.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3bthdyud: /tmp/tmp3bthdyud.cpp:25: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary\
    \ = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu12b4gmt: /tmp/tmpu12b4gmt.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    double avg = (n + m) / 2.0;\n    long rounded = round(avg);\n    std::string\
    \ binary = std::bitset<8>(rounded).to_string();\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpqxtdxvf_: /tmp/tmpqxtdxvf_.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary_avg = \"\";\n\
    \    while (avg > 0) {\n        binary_avg = std::to_string(avg % 2) + binary_avg;\n\
    \        avg /= 2;\n    }\n    return binary_avg;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpqqhz27f4: /tmp/tmpqqhz27f4.cpp:33: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu_1nauyx: /tmp/tmpu_1nauyx.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<64>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpm8agcbnn: /tmp/tmpm8agcbnn.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu_1nauyx: /tmp/tmpu_1nauyx.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3bthdyud: /tmp/tmp3bthdyud.cpp:25: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary\
    \ = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu12b4gmt: /tmp/tmpu12b4gmt.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream\
    \ ss;\n    ss << std::bitset<32>(avg);\n    return Union_std_string_long(ss.str());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmppyv6mzrk: /tmp/tmppyv6mzrk.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    return Union_std_string_long(avg);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpg4v3yzno: /tmp/tmpg4v3yzno.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long rounded_avg = round(sum / (m - n + 1));\n    std::string binary\
    \ = std::bitset<32>(rounded_avg).to_string();\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpzkfr6pry: /tmp/tmpzkfr6pry.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return Union_std_string_long(-1);\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return Union_std_string_long(binary);\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpkb9yq1s5: /tmp/tmpkb9yq1s5.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long rounded_avg = round(sum / (m - n + 1));\n    return std::bitset<8>(rounded_avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpjpcjrbwq: /tmp/tmpjpcjrbwq.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    double avg = (n\
    \ + m) / 2.0;\n    long rounded = round(avg);\n    std::string binary = std::bitset<8>(rounded).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpst5r28k2: /tmp/tmpst5r28k2.cpp:26: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    return Union_std_string_long(std::bitset<8>(avg).to_string());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpuch5jap2: /tmp/tmpuch5jap2.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    return Union_std_string_long(std::bitset<8>(avg).to_string());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpuch5jap2: /tmp/tmpuch5jap2.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<64>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpvqylgfg6: /tmp/tmpvqylgfg6.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<8>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6z_cvkoe: /tmp/tmp6z_cvkoe.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    return Union_std_string_long(avg);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpyyy6mwvu: /tmp/tmpyyy6mwvu.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long average = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(average).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp_14_l0v7: /tmp/tmp_14_l0v7.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = n + m;\n    long avg = sum / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpx82tqyi9: /tmp/tmpx82tqyi9.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu_1nauyx: /tmp/tmpu_1nauyx.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<8>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp02dg5p6q: /tmp/tmp02dg5p6q.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<8>(avg).to_string();\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3bthdyud: /tmp/tmp3bthdyud.cpp:25: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++) {\n\
    \        sum += i;\n        count++;\n    }\n    long avg = sum / count;\n   \
    \ std::string binary = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg\
    \ % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp4zbwj2qr: /tmp/tmp4zbwj2qr.cpp:37: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmptg0ml5jd: /tmp/tmptg0ml5jd.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfmcnxvl9: /tmp/tmpfmcnxvl9.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string bin = \"\";\n\
    \    while (avg > 0) {\n        if (avg % 2 == 0) {\n            bin = \"0\" +\
    \ bin;\n        } else {\n            bin = \"1\" + bin;\n        }\n        avg\
    \ /= 2;\n    }\n    return Union_std_string_long(bin);\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpv0pbilyz: /tmp/tmpv0pbilyz.cpp:39: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long rounded_avg = round(sum / (m - n + 1));\n    std::string binary\
    \ = std::bitset<8>(rounded_avg).to_string();\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpy4k8qi55: /tmp/tmpy4k8qi55.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string\
    \ binary = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg %\
    \ 2) + binary;\n        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpy5pxho1a: /tmp/tmpy5pxho1a.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    return Union_std_string_long(avg);\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpg4v3yzno: /tmp/tmpg4v3yzno.cpp:30: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = \"\";\n    while (avg > 0) {\n   \
    \     bin = std::to_string(avg % 2) + bin;\n        avg /= 2;\n    }\n    return\
    \ bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpg2la5lsm: /tmp/tmpg2la5lsm.cpp:33: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) sum += i;\n    long avg = sum / (m - n + 1);\n\
    \    std::string binary = std::bitset<8>(avg).to_string();\n    return binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp81zhom6w: /tmp/tmp81zhom6w.cpp:27: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<8>(avg);\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6z_cvkoe: /tmp/tmp6z_cvkoe.cpp:32: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfd81e57g: /tmp/tmpfd81e57g.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp6go_31gq: /tmp/tmp6go_31gq.cpp:29: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(std::string(\"\
    -1\"));\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary\
    \ = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu12b4gmt: /tmp/tmpu12b4gmt.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1_mek5sk: /tmp/tmp1_mek5sk.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long avg = (n + m) / 2;\n    std::string binary_avg = std::bitset<8>(avg).to_string();\n\
    \    return binary_avg;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpj3rrinlv: /tmp/tmpj3rrinlv.cpp:27: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = \"\"\
    ;\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n\
    \        avg /= 2;\n    }\n    return Union_std_string_long(binary);\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpky8z33t0: /tmp/tmpky8z33t0.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) {\n        return -1;\n    }\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmphtw7jy54: /tmp/tmphtw7jy54.cpp:31: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\nUnion_std_string_long\
    \ rounded_avg(long n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpfmcnxvl9: /tmp/tmpfmcnxvl9.cpp:28: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112370
