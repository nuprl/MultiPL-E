name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
  \ parse_nested_parens(std::string paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
  \ (std::vector<long>({(long)4})));\n}\n"
completions: ["    std::vector<long> result;\n    long max_depth = 0;\n    long depth\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   depth++;\n            max_depth = std::max(max_depth, depth);\n        } else\
    \ if (c == ')') {\n            depth--;\n        } else if (c == ' ') {\n    \
    \        result.push_back(max_depth);\n            max_depth = 0;\n          \
    \  depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return\
    \ result;", "    std::vector<long> max_depth;\n    long depth = 0;\n    long max_depth_so_far\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   depth++;\n            max_depth_so_far = std::max(max_depth_so_far, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            max_depth.push_back(max_depth_so_far);\n            max_depth_so_far\
    \ = 0;\n            depth = 0;\n        }\n    }\n    max_depth.push_back(max_depth_so_far);\n\
    \    return max_depth;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_level = 0;\n        long level = 0;\n\
    \        for (auto c : paren_group) {\n            if (c == '(') {\n         \
    \       ++level;\n                max_level = std::max(max_level, level);\n  \
    \          } else if (c == ')') {\n                --level;\n            }\n \
    \       }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_depth = 0;\n    long current_depth\
    \ = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n         \
    \   current_depth++;\n            max_depth = std::max(max_depth, current_depth);\n\
    \        } else if (c == ')') {\n            current_depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long curr_depth = 0;\n        for (auto c : token) {\n\
    \            if (c == '(') {\n                curr_depth++;\n                max_depth\
    \ = std::max(max_depth, curr_depth);\n            } else if (c == ')') {\n   \
    \             curr_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long depth = 0;\n        long max_depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::stringstream\
    \ ss(paren_string);\n  std::string paren_group;\n  while (std::getline(ss, paren_group,\
    \ ' ')) {\n    long max_nesting = 0;\n    long current_nesting = 0;\n    for (char\
    \ c : paren_group) {\n      if (c == '(') {\n        ++current_nesting;\n    \
    \    max_nesting = std::max(max_nesting, current_nesting);\n      } else if (c\
    \ == ')') {\n        --current_nesting;\n      }\n    }\n    result.push_back(max_nesting);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string paren_group;\n  while (std::getline(ss, paren_group, ' ')) {\n\
    \    long max_depth = 0;\n    long current_depth = 0;\n    for (auto c : paren_group)\
    \ {\n      if (c == '(') {\n        current_depth++;\n        max_depth = std::max(max_depth,\
    \ current_depth);\n      } else if (c == ')') {\n        current_depth--;\n  \
    \    }\n    }\n    result.push_back(max_depth);\n  }\n  return result;", "   \
    \ std::vector<long> max_depth;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max = 0;\n\
    \        long depth = 0;\n        for (char c : token) {\n            if (c ==\
    \ '(') {\n                depth++;\n                if (depth > max) {\n     \
    \               max = depth;\n                }\n            } else if (c == ')')\
    \ {\n                depth--;\n            }\n        }\n        max_depth.push_back(max);\n\
    \    }\n    return max_depth;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (std::getline(ss, paren,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : paren) {\n            if (c == '(') {\n                level++;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (ss >> paren) {\n     \
    \   long max_nesting = 0;\n        long curr_nesting = 0;\n        for (char c\
    \ : paren) {\n            if (c == '(') {\n                curr_nesting++;\n \
    \               max_nesting = std::max(max_nesting, curr_nesting);\n         \
    \   } else if (c == ')') {\n                curr_nesting--;\n            }\n \
    \       }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long current_depth = 0;\n        for (auto c : item) {\n            if\
    \ (c == '(') {\n                current_depth++;\n                max_depth =\
    \ std::max(max_depth, current_depth);\n            } else if (c == ')') {\n  \
    \              current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n  \
    \              current_depth++;\n                max_depth = std::max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "  std::vector<long> max_nesting_levels;\n  std::stringstream ss(paren_string);\n\
    \  std::string paren_group;\n  while (std::getline(ss, paren_group, ' ')) {\n\
    \    long max_nesting_level = 0;\n    long current_nesting_level = 0;\n    for\
    \ (char c : paren_group) {\n      if (c == '(') {\n        current_nesting_level++;\n\
    \        max_nesting_level = std::max(max_nesting_level, current_nesting_level);\n\
    \      } else if (c == ')') {\n        current_nesting_level--;\n      }\n   \
    \ }\n    max_nesting_levels.push_back(max_nesting_level);\n  }\n  return max_nesting_levels;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long nesting = 0;\n        for (auto paren : paren_group)\
    \ {\n            if (paren == '(') {\n                nesting++;\n           \
    \     max_nesting = std::max(max_nesting, nesting);\n            } else if (paren\
    \ == ')') {\n                nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_level = 0;\n        long level = 0;\n\
    \        for (auto c : paren_group) {\n            if (c == '(') {\n         \
    \       level++;\n                max_level = std::max(max_level, level);\n  \
    \          } else if (c == ')') {\n                level--;\n            }\n \
    \       }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>\
    \ stack;\n    long max = 0;\n    for (long i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            stack.push_back(paren_string[i]);\n\
    \            max++;\n        } else if (paren_string[i] == ')') {\n          \
    \  stack.pop_back();\n            if (stack.empty()) {\n                result.push_back(max);\n\
    \                max = 0;\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        // std::cout << token << std::endl;\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n        for\
    \ (auto c : paren_group) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> depths;\n    long depth = 0;\n    long max_depth = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            depths.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    depths.push_back(max_depth);\n\
    \    return depths;", "  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string group;\n  while (std::getline(ss, group, ' ')) {\n    long max_depth\
    \ = 0;\n    long current_depth = 0;\n    for (char c : group) {\n      if (c ==\
    \ '(') {\n        current_depth++;\n        max_depth = std::max(max_depth, current_depth);\n\
    \      } else if (c == ')') {\n        current_depth--;\n      }\n    }\n    result.push_back(max_depth);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> max_levels;\n    std::stringstream ss(paren_string);\n \
    \   std::string paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n\
    \        long max_level = 0;\n        long level = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        max_levels.push_back(max_level);\n\
    \    }\n    return max_levels;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        assert(depth == 0);\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (auto c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long count = 0;\n    for (int\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            count++;\n        } else if (paren_string[i] == ')') {\n    \
    \        count--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(count);\n\
    \            count = 0;\n        }\n    }\n    result.push_back(count);\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long level = 0;\n        for (auto c\
    \ : paren_group) {\n            if (c == '(') {\n                level++;\n  \
    \              max_level = std::max(max_level, level);\n            } else if\
    \ (c == ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long count = 0;\n        for\
    \ (auto c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                count = std::max(count, (long)st.size());\n            } else\
    \ if (c == ')') {\n                if (st.empty()) {\n                    count\
    \ = -1;\n                    break;\n                }\n                st.pop();\n\
    \            }\n        }\n        if (!st.empty()) {\n            count = -1;\n\
    \        }\n        result.push_back(count);\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long curr_depth =\
    \ 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n    \
    \            curr_depth++;\n                max_depth = std::max(max_depth, curr_depth);\n\
    \            } else if (c == ')') {\n                curr_depth--;\n         \
    \   }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_depth = 0;\n    long current_depth\
    \ = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n         \
    \   current_depth++;\n            max_depth = std::max(max_depth, current_depth);\n\
    \        } else if (c == ')') {\n            current_depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ group;\n    while (std::getline(ss, group, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : group) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string token;\n  while (std::getline(ss, token, ' ')) {\n    long max_depth\
    \ = 0;\n    long current_depth = 0;\n    for (auto c : token) {\n      if (c ==\
    \ '(') {\n        current_depth++;\n        max_depth = std::max(max_depth, current_depth);\n\
    \      } else if (c == ')') {\n        current_depth--;\n      }\n    }\n    result.push_back(max_depth);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string group;\n  while (std::getline(ss, group, ' ')) {\n    long max_nesting\
    \ = 0;\n    long current_nesting = 0;\n    for (auto c : group) {\n      if (c\
    \ == '(') {\n        current_nesting++;\n        max_nesting = std::max(max_nesting,\
    \ current_nesting);\n      } else if (c == ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push_back(max_nesting);\n  }\n  return result;", " \
    \   std::vector<long> max_nesting_levels;\n    long max_nesting_level = 0;\n \
    \   long nesting_level = 0;\n    for (long i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            nesting_level++;\n   \
    \         if (nesting_level > max_nesting_level) {\n                max_nesting_level\
    \ = nesting_level;\n            }\n        } else if (paren_string[i] == ')')\
    \ {\n            nesting_level--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            max_nesting_levels.push_back(max_nesting_level);\n          \
    \  max_nesting_level = 0;\n            nesting_level = 0;\n        }\n    }\n\
    \    max_nesting_levels.push_back(max_nesting_level);\n    return max_nesting_levels;",
  "    std::vector<long> max_nesting_levels;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting_level = 0;\n        long current_nesting_level =\
    \ 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n    \
    \            current_nesting_level++;\n                max_nesting_level = std::max(max_nesting_level,\
    \ current_nesting_level);\n            } else if (c == ')') {\n              \
    \  current_nesting_level--;\n            }\n        }\n        max_nesting_levels.push_back(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;", "    std::vector<long> res;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while(ss >> group) {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        for(auto c : group) {\n\
    \            if(c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if(c == ')') {\n         \
    \       depth--;\n            }\n        }\n        res.push_back(max_depth);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (auto c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (ss >> group) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : group) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_level = 0;\n        long level = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       level++;\n                max_level = std::max(max_level, level);\n  \
    \          } else if (c == ')') {\n                level--;\n            }\n \
    \       }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_level = 0;\n        long level = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       ++level;\n                max_level = std::max(max_level, level);\n  \
    \          } else if (c == ')') {\n                --level;\n            }\n \
    \       }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        int max_depth =\
    \ 0;\n        int depth = 0;\n        for (int i = 0; i < token.size(); i++) {\n\
    \            if (token[i] == '(') {\n                depth++;\n              \
    \  max_depth = std::max(max_depth, depth);\n            } else if (token[i] ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (ss >> paren) {\n     \
    \   long max_depth = 0;\n        long depth = 0;\n        for (char c : paren)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        result.push_back(parse_nested_parens_helper(token));\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long nesting = 0;\n        for (auto c : group) {\n\
    \            if (c == '(') {\n                nesting++;\n                max_nesting\
    \ = std::max(max_nesting, nesting);\n            } else if (c == ')') {\n    \
    \            nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                st.push(c);\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        st.pop();\n                depth--;\n            }\n        }\n     \
    \   assert(st.empty());\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> st;\n   \
    \     long max_depth = 0;\n        for (auto c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (ss >> paren_group) {\n        long max_level\
    \ = 0;\n        long level = 0;\n        for (auto c : paren_group) {\n      \
    \      if (c == '(') {\n                level++;\n                max_level =\
    \ std::max(max_level, level);\n            } else if (c == ')') {\n          \
    \      level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        int max_depth = 0;\n        int depth = 0;\n \
    \       for (int i = 0; i < paren_group.size(); i++) {\n            if (paren_group[i]\
    \ == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (paren_group[i] == ')') {\n                depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> max_depth;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ depth = 0;\n        long max_depth_so_far = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth_so_far\
    \ = std::max(max_depth_so_far, depth);\n            } else if (c == ')') {\n \
    \               depth--;\n            }\n        }\n        max_depth.push_back(max_depth_so_far);\n\
    \    }\n    return max_depth;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (std::getline(ss, paren,\
    \ ' ')) {\n        long max_nesting = 0;\n        long nesting = 0;\n        for\
    \ (auto c : paren) {\n            if (c == '(') {\n                nesting++;\n\
    \                max_nesting = std::max(max_nesting, nesting);\n            }\
    \ else if (c == ')') {\n                nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    int max_depth = 0;\n    int current_depth = 0;\n    for (int i\
    \ = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            current_depth++;\n            max_depth = std::max(max_depth, current_depth);\n\
    \        } else if (paren_string[i] == ')') {\n            current_depth--;\n\
    \        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ max_depth;\n    long depth = 0;\n    long max = 0;\n    for (long i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     depth++;\n            if (depth > max) {\n                max = depth;\n\
    \            }\n        } else if (paren_string[i] == ')') {\n            depth--;\n\
    \        } else if (paren_string[i] == ' ') {\n            max_depth.push_back(max);\n\
    \            max = 0;\n            depth = 0;\n        }\n    }\n    max_depth.push_back(max);\n\
    \    return max_depth;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (auto c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                if (st.empty()) {\n                    max_depth = -1;\n    \
    \                break;\n                }\n                st.pop();\n      \
    \      }\n        }\n        if (!st.empty()) {\n            max_depth = -1;\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long curr_nesting = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                curr_nesting++;\n          \
    \      max_nesting = std::max(max_nesting, curr_nesting);\n            } else\
    \ if (c == ')') {\n                curr_nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (auto c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                ++level;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    int max_level\
    \ = 0;\n    int level = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            level++;\n           \
    \ max_level = std::max(max_level, level);\n        } else if (paren_string[i]\
    \ == ')') {\n            level--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            result.push_back(max_level);\n            max_level = 0;\n  \
    \          level = 0;\n        }\n    }\n    result.push_back(max_level);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : group)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string paren;\n \
    \   while (ss >> paren) {\n        long max_nesting = 0;\n        long nesting\
    \ = 0;\n        for (auto c : paren) {\n            if (c == '(') {\n        \
    \        nesting++;\n                max_nesting = std::max(max_nesting, nesting);\n\
    \            } else if (c == ')') {\n                nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long curr_nesting = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                curr_nesting++;\n          \
    \      max_nesting = std::max(max_nesting, curr_nesting);\n            } else\
    \ if (c == ')') {\n                curr_nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string paren_group;\n\
    \    while (std::getline(ss, paren_group, ' ')) {\n        long max_depth = 0;\n\
    \        long current_depth = 0;\n        for (char c : paren_group) {\n     \
    \       if (c == '(') {\n                current_depth++;\n                max_depth\
    \ = std::max(max_depth, current_depth);\n            } else if (c == ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting = 0;\n        long current_nesting\
    \ = 0;\n        for (auto c : paren_group) {\n            if (c == '(') {\n  \
    \              current_nesting++;\n                max_nesting = std::max(max_nesting,\
    \ current_nesting);\n            } else if (c == ')') {\n                current_nesting--;\n\
    \            }\n        }\n        result.push_back(max_nesting);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result.push_back(parse_nested_parens_helper(item));\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (ss >> paren) {\n     \
    \   long max_level = 0;\n        long level = 0;\n        for (char c : paren)\
    \ {\n            if (c == '(') {\n                ++level;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (auto c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                ++level;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (auto c : group) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_level = 0;\n    long level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            level++;\n\
    \            max_level = std::max(max_level, level);\n        } else if (c ==\
    \ ')') {\n            level--;\n        } else if (c == ' ') {\n            result.push_back(max_level);\n\
    \            max_level = 0;\n            level = 0;\n        }\n    }\n    result.push_back(max_level);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        int\
    \ max_depth = 0;\n        int depth = 0;\n        for (auto c : token) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        assert(depth == 0);\n   \
    \     result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string s;\n    while (ss >> s) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren;\n    while (ss >> paren) {\n        long max_nesting = 0;\n        long\
    \ current_nesting = 0;\n        for (char c : paren) {\n            if (c == '(')\
    \ {\n                current_nesting++;\n                max_nesting = std::max(max_nesting,\
    \ current_nesting);\n            } else if (c == ')') {\n                current_nesting--;\n\
    \            }\n        }\n        result.push_back(max_nesting);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting = 0;\n        long current_nesting\
    \ = 0;\n        for (auto paren : paren_group) {\n            if (paren == '(')\
    \ {\n                ++current_nesting;\n                max_nesting = std::max(max_nesting,\
    \ current_nesting);\n            } else if (paren == ')') {\n                --current_nesting;\n\
    \            }\n        }\n        result.push_back(max_nesting);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_depth = 0;\n    long curr_depth =\
    \ 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n           \
    \ curr_depth++;\n            max_depth = std::max(max_depth, curr_depth);\n  \
    \      } else if (c == ')') {\n            curr_depth--;\n        } else if (c\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n            curr_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long curr_depth = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            curr_depth++;\n            max_depth = std::max(max_depth,\
    \ curr_depth);\n        } else if (c == ')') {\n            curr_depth--;\n  \
    \      } else if (c == ' ') {\n            result.push_back(max_depth);\n    \
    \        max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren;\n    while (ss >> paren) {\n        long max_depth = 0;\n        long\
    \ depth = 0;\n        for (auto c : paren) {\n            if (c == '(') {\n  \
    \              depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long nesting = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                nesting++;\n               \
    \ max_nesting = std::max(max_nesting, nesting);\n            } else if (c == ')')\
    \ {\n                nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting = 0;\n        long nesting =\
    \ 0;\n        for (auto c : paren_group) {\n            if (c == '(') {\n    \
    \            nesting++;\n                max_nesting = std::max(max_nesting, nesting);\n\
    \            } else if (c == ')') {\n                nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (auto c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    int max_depth\
    \ = 0;\n    int depth = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            depth++;\n           \
    \ max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            depth--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (ss >> group) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : group) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::stringstream\
    \ ss(paren_string);\n  std::string token;\n  while (std::getline(ss, token, '\
    \ ')) {\n    long max_depth = 0;\n    long curr_depth = 0;\n    for (char c :\
    \ token) {\n      if (c == '(') {\n        ++curr_depth;\n        max_depth =\
    \ std::max(max_depth, curr_depth);\n      } else if (c == ')') {\n        --curr_depth;\n\
    \      }\n    }\n    result.push_back(max_depth);\n  }\n  return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (auto c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (auto c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (std::getline(ss, paren,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : paren) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (auto c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> depths;\n    long depth = 0;\n    long max_depth = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            depths.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    depths.push_back(max_depth);\n\
    \    return depths;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long curr_depth = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            curr_depth++;\n            max_depth = std::max(max_depth,\
    \ curr_depth);\n        } else if (c == ')') {\n            curr_depth--;\n  \
    \      } else if (c == ' ') {\n            result.push_back(max_depth);\n    \
    \        max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long level = 0;\n        for (auto c\
    \ : paren_group) {\n            if (c == '(') {\n                ++level;\n  \
    \              max_level = std::max(max_level, level);\n            } else if\
    \ (c == ')') {\n                --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    int i = 0;\n\
    \    while (i < paren_string.size()) {\n        int count = 0;\n        int max_count\
    \ = 0;\n        while (paren_string[i] != ' ' && i < paren_string.size()) {\n\
    \            if (paren_string[i] == '(') {\n                count++;\n       \
    \         max_count = std::max(max_count, count);\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            }\n            i++;\n     \
    \   }\n        result.push_back(max_count);\n        i++;\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_depth = 0;\n    long curr_depth = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            curr_depth++;\n\
    \            max_depth = std::max(max_depth, curr_depth);\n        } else if (c\
    \ == ')') {\n            curr_depth--;\n        } else if (c == ' ') {\n     \
    \       result.push_back(max_depth);\n            max_depth = 0;\n           \
    \ curr_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (ss >> paren_group) {\n        long max_nesting\
    \ = 0;\n        long current_nesting = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ group;\n    while (std::getline(ss, group, ' ')) {\n        long max_level =\
    \ 0;\n        long level = 0;\n        for (char c : group) {\n            if\
    \ (c == '(') {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::istringstream iss(paren_string);\n\
    \    std::string token;\n    while (std::getline(iss, token, ' ')) {\n       \
    \ long max_depth = 0;\n        long current_depth = 0;\n        for (auto c :\
    \ token) {\n            if (c == '(') {\n                current_depth++;\n  \
    \              max_depth = std::max(max_depth, current_depth);\n            }\
    \ else if (c == ')') {\n                current_depth--;\n            }\n    \
    \    }\n        result.push_back(max_depth);\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (ss >> paren_group) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (auto c : paren_group) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        int\
    \ max_depth = 0;\n        int depth = 0;\n        for (auto c : paren_group) {\n\
    \            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        assert(depth == 0);\n   \
    \     result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_level = 0;\n    \
    \    long level = 0;\n        for (auto c : token) {\n            if (c == '(')\
    \ {\n                ++level;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                --level;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                level++;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (auto c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (ss >> paren) {\n     \
    \   long max_depth = 0;\n        long current_depth = 0;\n        for (char c\
    \ : paren) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (ss >> paren_group) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (auto c : paren_group) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (auto c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long current_depth = 0;\n        for\
    \ (auto c : paren_group) {\n            if (c == '(') {\n                ++current_depth;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                --current_depth;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren;\n    while (ss >> paren) {\n        long max_depth = 0;\n        long\
    \ depth = 0;\n        for (auto c : paren) {\n            if (c == '(') {\n  \
    \              depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                ++current_nesting;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                --current_nesting;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren;\n    while (ss >> paren) {\n        long max_depth = 0;\n        long\
    \ depth = 0;\n        for (char c : paren) {\n            if (c == '(') {\n  \
    \              depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_level =\
    \ 0;\n        long level = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string s;\n    while (ss >> s) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (auto c : s) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        assert(depth == 0);\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_level = 0;\n        long level = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       ++level;\n                max_level = std::max(max_level, level);\n  \
    \          } else if (c == ')') {\n                --level;\n            }\n \
    \       }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren;\n    while (std::getline(ss, paren,\
    \ ' ')) {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n   \
    \     for (char c : paren) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_level = 0;\n        long curr_level = 0;\n        for (auto paren : paren_group)\
    \ {\n            if (paren == '(') {\n                curr_level++;\n        \
    \        max_level = std::max(max_level, curr_level);\n            } else if (paren\
    \ == ')') {\n                curr_level--;\n            }\n        }\n       \
    \ result.push_back(max_level);\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::stringstream ss(paren_string);\n  std::string paren_group;\n\
    \  while (std::getline(ss, paren_group, ' ')) {\n    long max_nesting = 0;\n \
    \   long current_nesting = 0;\n    for (auto c : paren_group) {\n      if (c ==\
    \ '(') {\n        current_nesting++;\n        max_nesting = std::max(max_nesting,\
    \ current_nesting);\n      } else if (c == ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push_back(max_nesting);\n  }\n  return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long curr_depth =\
    \ 0;\n        for (auto c : paren_group) {\n            if (c == '(') {\n    \
    \            curr_depth++;\n                max_depth = std::max(max_depth, curr_depth);\n\
    \            } else if (c == ')') {\n                curr_depth--;\n         \
    \   }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_nesting = 0;\n    long current_nesting\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_nesting++;\n            max_nesting = std::max(max_nesting, current_nesting);\n\
    \        } else if (c == ')') {\n            current_nesting--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_nesting);\n            max_nesting\
    \ = 0;\n            current_nesting = 0;\n        }\n    }\n    result.push_back(max_nesting);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long nesting = 0;\n        for (char\
    \ c : paren_group) {\n            if (c == '(') {\n                nesting++;\n\
    \                max_nesting = std::max(max_nesting, nesting);\n            }\
    \ else if (c == ')') {\n                nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_nesting = 0;\n  \
    \      long curr_nesting = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                curr_nesting++;\n                max_nesting =\
    \ std::max(max_nesting, curr_nesting);\n            } else if (c == ')') {\n \
    \               curr_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_depth = 0;\n        long current_depth = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "  std::vector<long> result;\n  long max_depth = 0;\n  long depth = 0;\n  for (char\
    \ c : paren_string) {\n    if (c == '(') {\n      depth++;\n      max_depth =\
    \ std::max(max_depth, depth);\n    } else if (c == ')') {\n      depth--;\n  \
    \  } else if (c == ' ') {\n      result.push_back(max_depth);\n      max_depth\
    \ = 0;\n      depth = 0;\n    }\n  }\n  result.push_back(max_depth);\n  return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::stringstream\
    \ ss(paren_string);\n  std::string paren_group;\n  while (std::getline(ss, paren_group,\
    \ ' ')) {\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_group)\
    \ {\n      if (c == '(') {\n        depth++;\n        max_depth = std::max(max_depth,\
    \ depth);\n      } else if (c == ')') {\n        depth--;\n      }\n    }\n  \
    \  result.push_back(max_depth);\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string group;\n \
    \   while (std::getline(ss, group, ' ')) {\n        long max_nesting = 0;\n  \
    \      long curr_nesting = 0;\n        for (char c : group) {\n            if\
    \ (c == '(') {\n                curr_nesting++;\n                max_nesting =\
    \ std::max(max_nesting, curr_nesting);\n            } else if (c == ')') {\n \
    \               curr_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ group;\n    while (std::getline(ss, group, ' ')) {\n        long max_nesting\
    \ = 0;\n        long current_nesting = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                current_nesting++;\n             \
    \   max_nesting = std::max(max_nesting, current_nesting);\n            } else\
    \ if (c == ')') {\n                current_nesting--;\n            }\n       \
    \ }\n        result.push_back(max_nesting);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ s;\n    while (ss >> s) {\n        long max_depth = 0;\n        long depth =\
    \ 0;\n        for (char c : s) {\n            if (c == '(') {\n              \
    \  depth++;\n                max_depth = std::max(max_depth, depth);\n       \
    \     } else if (c == ')') {\n                depth--;\n            }\n      \
    \  }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string paren;\n \
    \   while (std::getline(ss, paren, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (auto c : paren) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren;\n    while (std::getline(ss, paren, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : paren) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::stringstream\
    \ ss(paren_string);\n  std::string paren_group;\n  while (std::getline(ss, paren_group,\
    \ ' ')) {\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_group)\
    \ {\n      if (c == '(') {\n        depth++;\n        max_depth = std::max(max_depth,\
    \ depth);\n      } else if (c == ')') {\n        depth--;\n      }\n    }\n  \
    \  result.push_back(max_depth);\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_depth = 0;\n    long\
    \ depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n   \
    \         depth++;\n            max_depth = std::max(max_depth, depth);\n    \
    \    } else if (c == ')') {\n            depth--;\n        } else if (c == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
