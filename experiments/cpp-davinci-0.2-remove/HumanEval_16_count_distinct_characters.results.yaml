language: cpp
name: HumanEval_16_count_distinct_characters
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(string[i] != string[i+1]){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        if(s.find(string[i]) == s.end()) {\n    \
    \        s.insert(string[i]);\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpz9orarrw: /tmp/tmpz9orarrw.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count=0;\n    std::string s;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a' && string[i]<='z')\n\
    \        {\n            string[i]=string[i]-32;\n        }\n    }\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        if(s.find(string[i])==std::string::npos)\n\
    \        {\n            s+=string[i];\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n  // Write your code here\n  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  std::set<char> s;\n  for(int i=0;i<string.length();i++)\n\
    \  {\n      s.insert(string[i]);\n  }\n  return s.size();\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126843
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    int count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(string[i] != string[i+1]){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::unordered_set<char> set;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        if (set.find(tolower(string[i]))\
    \ == set.end()) {\n            set.insert(tolower(string[i]));\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    int count = 0;\n    std::set<char> s;\n    for(int i = 0; i <\
    \ string.length(); i++) {\n        if(s.find(tolower(string[i])) == s.end()) {\n\
    \            s.insert(tolower(string[i]));\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    for(int i =\
    \ 0; i < string.length(); i++){\n        if(string[i] >= 'A' && string[i] <= 'Z'){\n\
    \            string[i] = string[i] + 32;\n        }\n    }\n    std::sort(string.begin(),\
    \ string.end());\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ != string[i+1]){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(std::tolower(c));\n    }\n    return distinct_characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    std::string::iterator ip;\n    ip = std::unique(string.begin(), string.end());\n\
    \    string.resize(std::distance(string.begin(), ip));\n    return string.length();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(string[i] != string[i+1]){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(std::tolower(c));\n    }\n    return distinct_characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    string.erase(std::unique(string.begin(), string.end()), string.end());\n\
    \    return string.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> char_set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        char_set.insert(tolower(string[i]));\n    }\n    return char_set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    for(int i =\
    \ 0; i < string.length(); i++){\n        if(string[i] >= 'A' && string[i] <= 'Z'){\n\
    \            string[i] = string[i] + 32;\n        }\n    }\n    std::sort(string.begin(),\
    \ string.end());\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ != string[i+1]){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n\tstd::set<char> s;\n\tfor(int i=0;i<string.length();i++)\n\t{\n\t\
    \ts.insert(string[i]);\n\t}\n\treturn s.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpfcwzbb8a: /tmp/tmpfcwzbb8a.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126843
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        if(s.find(tolower(string[i])) == s.end())\
    \ {\n            s.insert(tolower(string[i]));\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(std::tolower(c));\n    }\n    return distinct_characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(c);\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_chars;\n    for (char c : string) {\n\
    \        distinct_chars.insert(tolower(c));\n    }\n    return distinct_chars.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> characters;\n    for (auto character : string)\
    \ {\n        characters.insert(tolower(character));\n    }\n    return characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(std::tolower(c));\n    }\n    return distinct_characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(std::tolower(c));\n    }\n    return distinct_characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        if(s.find(tolower(string[i]))\
    \ == s.end()){\n            s.insert(tolower(string[i]));\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (auto character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> char_set;\n    for (char c : string) {\n     \
    \   char_set.insert(std::tolower(c));\n    }\n    return char_set.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] != string[i\
    \ + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(auto c : string) {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::string\
    \ s = \"\";\n    for(int i = 0; i < string.length(); i++){\n        if(s.find(tolower(string[i]))\
    \ == std::string::npos){\n            s += tolower(string[i]);\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> set;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(string[i]);\n    }\n    return s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpim4uiykz: /tmp/tmpim4uiykz.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count=0;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>=65 && string[i]<=90)\n        {\n            string[i]=string[i]+32;\n\
    \        }\n    }\n    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>=97\
    \ && string[i]<=122)\n        {\n            count++;\n            for(int j=i+1;j<string.length();j++)\n\
    \            {\n                if(string[i]==string[j])\n                {\n\
    \                    string[j]='0';\n                }\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpu2oxzdtg: /tmp/tmpu2oxzdtg.cpp:36: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> char_set;\n    for (char c : string) {\n     \
    \   char_set.insert(std::tolower(c));\n    }\n    return char_set.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::string\
    \ s = \"\";\n    for(int i = 0; i < string.length(); i++){\n        if(s.find(string[i])\
    \ == std::string::npos){\n            s += string[i];\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpf4uf8fj0: /tmp/tmpf4uf8fj0.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (auto i : string) {\n        set.insert(tolower(i));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        if(s.find(string[i]) == s.end()) {\n    \
    \        s.insert(string[i]);\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpz9orarrw: /tmp/tmpz9orarrw.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_chars;\n    for (char c : string) {\n\
    \        distinct_chars.insert(tolower(c));\n    }\n    return distinct_chars.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            count++;\n\
    \            for(int j=i+1;j<string.length();j++)\n            {\n           \
    \     if(string[i]==string[j])\n                {\n                    string[j]='\
    \ ';\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp667tjizb: /tmp/tmp667tjizb.cpp:30: int main(): Assertion `candidate(("Jerry
    jERRY JeRRRY")) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        distinct_characters.insert(tolower(string[i]));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (auto &c : string) {\n        set.insert(std::tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::unordered_set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        if(s.find(tolower(string[i]))\
    \ == s.end()){\n            s.insert(tolower(string[i]));\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count=0;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>=65 && string[i]<=90)\n        {\n            string[i]=string[i]+32;\n\
    \        }\n    }\n    std::sort(string.begin(),string.end());\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]!=string[i+1])\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::unordered_set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::string::iterator\
    \ it;\n    std::string::iterator it2;\n    std::string::iterator it3;\n    std::string::iterator\
    \ it4;\n    std::string::iterator it5;\n    std::string::iterator it6;\n    std::string::iterator\
    \ it7;\n    std::string::iterator it8;\n    std::string::iterator it9;\n    std::string::iterator\
    \ it10;\n    std::string::iterator it11;\n    std::string::iterator it12;\n  \
    \  std::string::iterator it13;\n    std::string::iterator it14;\n    std::string::iterator\
    \ it15;\n    std::string::iterator it16;\n    std::string::iterator it17;\n  \
    \  std::string::iterator it18;\n    std::string::iterator it19;\n    std::string::iterator\
    \ it20;\n    std::string::iterator it21;\n    std::string::iterator it22;\n  \
    \  std::string::iterator it23;\n    std::string::iterator it24;\n    std::string::iterator\
    \ it25;\n    std::string::iterator it26;\n    std::string::iterator it27;\n  \
    \  std::string::iterator it28;\n    std::string::iterator it29;\n    std::string::iterator\
    \ it30;\n    std::string::iterator it31;\n    std::string::iterator it32;\n  \
    \  std::string::iterator it33;\n    std::string::iterator it34;\n    std::string::iterator\
    \ it35;\n    std::string::iterator it36;\n    std::string::iterator it37;\n  \
    \  std::string::iterator it38;\n    std::string::iterator it39;\n    std::string::iterator\
    \ it40;\n    std::string::iterator it41;\n    std::string::iterator it42;\n  \
    \  std::string::iterator it43;\n    std::string::iterator it44;\n    std::string::iterator\
    \ it45;\n    std::string::iterator it46;\n    std::string::iterator it47;\n  \
    \  std::string::iterator it48;\n    std::string::iterator it49;\n    std::string::iterator\
    \ it50\n}\nint main() {\n    auto candidate = count_distinct_characters;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp082al9bn.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp082al9bn.cpp:57:1: error: expected initializer before \u2018}\u2019\
    \ token\n   57 | }\n      | ^\n/tmp/tmp082al9bn.cpp:57:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> char_set;\n    for (int i\
    \ = 0; i < string.length(); i++) {\n        if (char_set.find(string[i]) == char_set.end())\
    \ {\n            char_set.insert(string[i]);\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpf8d1nek0: /tmp/tmpf8d1nek0.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::unordered_set<char> s;\n  \
    \  for(auto i:string)\n    {\n        s.insert(tolower(i));\n    }\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> distinct_characters;\n  \
    \  for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n  // Write your code here\n  long count=0;\n  for(int i=0;i<string.length();i++)\n\
    \  {\n      if(string[i]>='a' && string[i]<='z')\n      {\n          count++;\n\
    \          string[i]='A'+string[i]-'a';\n      }\n      else if(string[i]>='A'\
    \ && string[i]<='Z')\n      {\n          count++;\n          string[i]='a'+string[i]-'A';\n\
    \      }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpi2ccemxs: /tmp/tmpi2ccemxs.cpp:26: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(long i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n\tlong count = 0;\n\tstd::set<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\ts.insert(tolower(string[i]));\n\t}\n\treturn s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> char_set;\n    for (char c : string) {\n     \
    \   char_set.insert(std::tolower(c));\n    }\n    return char_set.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(long i = 0; i < string.length(); i++){\n        if(s.find(tolower(string[i]))\
    \ == s.end()){\n            s.insert(tolower(string[i]));\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(tolower(character));\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(character);\n    }\n    return\
    \ distinct_characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
    \ string) {\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpedwwkogu: /tmp/tmpedwwkogu.cpp:16: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660126842
