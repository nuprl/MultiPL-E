name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ list of integers as an input.\n// it returns True if there are two distinct elements\
  \ in the list that\n// sum to zero, and False otherwise.\nbool pairs_sum_to_zero(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
  \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n\
  \    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7}))) == (true));\n  \
  \  assert(candidate((std::vector<long>({1}))) == (false));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 3, 2, 30}))) == (true));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 3, 2, 31}))) == (true));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 4, 2, 30}))) == (false));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 4, 2, 31}))) == (false));\n}\n"
completions: []
stop_tokens:
- "\n}"
