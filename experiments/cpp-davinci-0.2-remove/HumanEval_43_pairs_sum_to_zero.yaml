name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ list of integers as an input.\n// it returns True if there are two distinct elements\
  \ in the list that\n// sum to zero, and False otherwise.\nbool pairs_sum_to_zero(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
  \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
completions: ["    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  int i = 0;\n  int j = n-1;\n  while(i < j){\n    if(l[i] + l[j] == 0){\n  \
    \    return true;\n    }\n    else if(l[i] + l[j] < 0){\n      i++;\n    }\n \
    \   else{\n      j--;\n    }\n  }\n  return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function\n    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "  // TODO: implement this function.\n\
    \  // You may assume that the input list is sorted in non-decreasing order.\n\
    \  // You may use std::sort from the C++ STL.\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n  \
    \          return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n  \
    \  int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here.\n    std::unordered_set<long> s;\n\
    \    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return true;\n\
    \        s.insert(i);\n    }\n    return false;", "    // Your code here\n   \
    \ std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // TODO: implement this function.\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // WRITE YOUR CODE\
    \ HERE\n    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;", "    // TODO: implement this function\n    std::unordered_set<long>\
    \ s;\n    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // TODO:\
    \ implement this function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // Your code here.\n \
    \   std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // TODO: Write your\
    \ code here\n    std::unordered_set<long> s;\n    for(auto i : l) {\n        if(s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "\t// TODO: implement this function.\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint i = 0;\n\tint j = l.size() - 1;\n\twhile (i < j) {\n\t\tif\
    \ (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[i] + l[j] <\
    \ 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for(long i = 0; i < l.size(); i++) {\n   \
    \     if(s.find(-l[i]) != s.end()) {\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // Your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n     \
    \       return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function.\n    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // your code here\n  std::unordered_set<long> s;\n  for(auto i :\
    \ l){\n    if(s.find(-i) != s.end()){\n      return true;\n    }\n    s.insert(i);\n\
    \  }\n  return false;", "    // Implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Write your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n     \
    \       return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // WRITE YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] ==\
    \ 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n    \
    \        i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // Your code here.\n  std::unordered_set<long> s;\n  for(auto i:l){\n\
    \    if(s.find(-i)!=s.end())\n      return true;\n    s.insert(i);\n  }\n  return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // Your\
    \ code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "  // your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  int i = 0;\n  int j = n-1;\n  while(i < j){\n    if(l[i] + l[j] == 0){\n  \
    \    return true;\n    }\n    else if(l[i] + l[j] > 0){\n      j--;\n    }\n \
    \   else{\n      i++;\n    }\n  }\n  return false;", "    // TODO: implement this\
    \ function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Implement this function\n    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n \
    \           return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    // TODO: implement this function\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // TODO: implement this\
    \ function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // TODO: implement\
    \ this function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j\
    \ = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n    \
    \        return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n \
    \   int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] ==\
    \ 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n    \
    \        i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "\t// TODO: implement this function.\n\tstd::sort(l.begin(), l.end());\n\
    \tint n = l.size();\n\tint i = 0;\n\tint j = n - 1;\n\twhile (i < j) {\n\t\tif\
    \ (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[i] + l[j] <\
    \ 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end()){\n            return true;\n        }\n       \
    \ s.insert(i);\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here\n  \
    \  std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "  // Your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  int i = 0;\n  int j = n - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0)\
    \ {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    }\
    \ else {\n      j--;\n    }\n  }\n  return false;", "    // Your code here\n \
    \   std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "  // Write your code here.\n  std::unordered_set<long> s;\n  for(long i=0;i<l.size();i++){\n\
    \    if(s.find(-l[i])!=s.end()){\n      return true;\n    }\n    s.insert(l[i]);\n\
    \  }\n  return false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    // You may assume that\
    \ the input list has no duplicates.\n    // You may also assume that the input\
    \ list is sorted.\n    // You may use std::sort from the C++ STL.\n    // You\
    \ may use std::find from the C++ STL.\n    // You may use std::vector::push_back\
    \ from the C++ STL.\n    // You may use std::vector::pop_back from the C++ STL.\n\
    \    // You may use std::vector::size from the C++ STL.\n    // You may use std::vector::begin\
    \ from the C++ STL.\n    // You may use std::vector::end from the C++ STL.\n \
    \   // You may use std::vector::insert from the C++ STL.\n    // You may use std::vector::erase\
    \ from the C++ STL.\n    // You may use std::vector::empty from the C++ STL.\n\
    \    // You may use std::vector::front from the C++ STL.\n    // You may use std::vector::back\
    \ from the C++ STL.\n    // You may use std::vector::find from the C++ STL.\n\
    \    // You may use std::vector::sort from the C++ STL.\n    // You may use std::vector::reverse\
    \ from the C++ STL.\n    // You may use std::vector::clear from the C++ STL.\n\
    \    // You may use std::vector::swap from the C++ STL.\n    // You may use std::vector::emplace_back\
    \ from the C++ STL.\n    // You may use std::vector::emplace from the C++ STL.\n\
    \    // You may use std::vector::push_front from the C++ STL.\n    // You may\
    \ use std::vector::pop_front from the C++ STL.\n    // You may use std::vector::rbegin\
    \ from the C++ STL.\n    // You may use std::vector::rend from the C++ STL.\n\
    \    // You may use std::vector::resize from the C++ STL.\n    // You may use\
    \ std::vector::shrink_to_fit from the C++ STL.\n    // You may use std::vector::capacity\
    \ from the C++ STL.\n    // You may use std::vector::reserve from the", "    //\
    \ Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here.\n    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    // TODO: implement this function.\n    // You\
    \ may assume that the input list is sorted in non-decreasing order.\n    // You\
    \ may also assume that the list has no repeated elements.\n    // You may use\
    \ std::sort, std::lower_bound, std::upper_bound, and std::distance\n    // from\
    \ the STL.\n    // You may use std::sort, std::lower_bound, std::upper_bound,\
    \ and std::distance\n    // from the STL.\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (std::binary_search(l.begin(),\
    \ l.end(), -l[i])) {\n            return true;\n        }\n    }\n    return false;",
  "  // TODO: implement this function.\n  std::sort(l.begin(), l.end());\n  int i\
    \ = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0)\
    \ {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    }\
    \ else {\n      j--;\n    }\n  }\n  return false;", "  // TODO: implement this\
    \ function.\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = l.size()\
    \ - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n \
    \   } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n\
    \  }\n  return false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(long i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n    \
    \        return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "  // your code here\n  std::sort(l.begin(),\
    \ l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n\
    \      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;", "    // Your\
    \ code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // Your code\
    \ here\n    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // Your code here.\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "  // Implement this function.\n  std::sort(l.begin(),\
    \ l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n\
    \      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;", "    // TODO:\
    \ implement this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // Implement this function.\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "  // TODO: implement this function\n  std::sort(l.begin(),\
    \ l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n\
    \      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;", "    // Implement\
    \ this function.\n    // You may use the STL set class.\n    std::set<long> s;\n\
    \    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n     \
    \       return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
  "    // Your code here.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "  // Write your code\
    \ here.\n  std::unordered_set<long> s;\n  for(long i=0;i<l.size();i++){\n    if(s.find(-l[i])!=s.end()){\n\
    \      return true;\n    }\n    s.insert(l[i]);\n  }\n  return false;", "    //\
    \ Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n      \
    \  if(s.find(-i)!=s.end()){\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // TODO: implement this\
    \ function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // TODO: implement\
    \ this function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j\
    \ = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n    \
    \        return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n\
    \        }\n        s.insert(i);\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::unordered_set<long> s;\n    for(auto\
    \ a:l){\n        if(s.find(-a)!=s.end())\n            return true;\n        s.insert(a);\n\
    \    }\n    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::vector<long>::iterator\
    \ it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n\
    \    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n\
    \    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n\
    \    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n\
    \    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n\
    \    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n\
    \    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n\
    \    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n\
    \    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n\
    \    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n\
    \    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n\
    \    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n\
    \    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n\
    \    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n\
    \    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n\
    \    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n\
    \    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n\
    \    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n\
    \    std::vector<long>::iterator it38;\n    std::vector<long>::iterator it39",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;", "    // Your code here\n    int n = l.size();\n    std::unordered_map<long,\
    \ int> m;\n    for(int i = 0; i < n; i++) {\n        if(m.find(l[i]) != m.end())\
    \ {\n            return true;\n        }\n        m[-l[i]] = 1;\n    }\n    return\
    \ false;", "    // Your code here\n    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n        }\n\
    \        s.insert(i);\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "\t// Write your code here\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint i = 0;\n\tint j = l.size() - 1;\n\twhile (i < j) {\n\t\tif\
    \ (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[i] + l[j] <\
    \ 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;",
  "    // Your code here\n    std::vector<long>::iterator it1;\n    std::vector<long>::iterator\
    \ it2;\n    for(it1 = l.begin(); it1 != l.end(); it1++){\n        for(it2 = it1\
    \ + 1; it2 != l.end(); it2++){\n            if(*it1 + *it2 == 0){\n          \
    \      return true;\n            }\n        }\n    }\n    return false;", "  \
    \  // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  std::unordered_set<long> s;\n  for (auto i : l) {\n    if (s.find(-i)\
    \ != s.end()) {\n      return true;\n    }\n    s.insert(i);\n  }\n  return false;",
  "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Write your code here.\n    std::unordered_set<long> s;\n  \
    \  for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n\
    \        }\n        s.insert(i);\n    }\n    return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n  \
    \          return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \ // Your code here.\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j\
    \ = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return\
    \ true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n\
    \    }\n  }\n  return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        if (binary_search(l.begin()\
    \ + i + 1, l.end(), -l[i])) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "\t// TODO: implement this function.\n\tstd::vector<long>::iterator\
    \ it;\n\tstd::vector<long>::iterator it2;\n\tfor(it = l.begin(); it != l.end();\
    \ it++)\n\t{\n\t\tfor(it2 = it+1; it2 != l.end(); it2++)\n\t\t{\n\t\t\tif(*it\
    \ + *it2 == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Write your code here\n    std::unordered_set<long> s;\n   \
    \ for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n        \
    \    return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (std::binary_search(l.begin() +\
    \ i + 1, l.end(), -l[i])) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    // your code here\n    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n   \
    \         if (l[i] + l[j] == 0) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "  // Your code here\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (std::binary_search(l.begin(), l.end(), -l[i]))\
    \ {\n            return true;\n        }\n    }\n    return false;", "    // TODO:\
    \ implement this function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for(long i = 0; i < l.size(); i++) {\n   \
    \     if(s.find(-l[i]) != s.end()) {\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // Your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n     \
    \       return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // Your code here\n  \
    \  std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i) !=\
    \ s.end()){\n            return true;\n        }\n        s.insert(i);\n    }\n\
    \    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n\
    \        if(l[i] + l[j] == 0){\n            return true;\n        }\n        else\
    \ if(l[i] + l[j] > 0){\n            j--;\n        }\n        else{\n         \
    \   i++;\n        }\n    }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] ==\
    \ 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n    \
    \        i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    // Your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function.\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "  // TODO:\
    \ implement this function\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int\
    \ j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return\
    \ true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n\
    \    }\n  }\n  return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here.\n \
    \   std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  int i = 0;\n  int j = n-1;\n  while(i<j){\n    if(l[i]+l[j]==0){\n      return\
    \ true;\n    }\n    else if(l[i]+l[j]<0){\n      i++;\n    }\n    else{\n    \
    \  j--;\n    }\n  }\n  return false;", "    // Implement this function\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "  // your code here\n  std::sort(l.begin(),\
    \ l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n\
    \      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;", "    // Your\
    \ code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int i=0, j=l.size()-1;\n    while(i<j) {\n        if(l[i]+l[j]==0) {\n  \
    \          return true;\n        }\n        else if(l[i]+l[j]<0) {\n         \
    \   i++;\n        }\n        else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n     \
    \       return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    // Your code goes here.\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here.\n    int n = l.size();\n    std::vector<int> v(n);\n   \
    \ for(int i=0;i<n;i++){\n        v[i] = abs(l[i]);\n    }\n    std::sort(v.begin(),v.end());\n\
    \    for(int i=0;i<n;i++){\n        if(binary_search(v.begin(),v.end(),v[i])){\n\
    \            return true;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    // Your code here.\n    std::vector<long>::iterator\
    \ it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n\
    \    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n\
    \    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n\
    \    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n\
    \    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n\
    \    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n\
    \    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n\
    \    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n\
    \    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n\
    \    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n\
    \    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n\
    \    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n\
    \    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n\
    \    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n\
    \    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n\
    \    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n\
    \    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n\
    \    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n\
    \    std::vector<long>::iterator it38;\n    std::vector<long>::iterator it39",
  "    // Your code here.\n    std::unordered_set<long> s;\n    for(auto i:l){\n \
    \       if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    for(int i = 0; i < l.size(); i++){\n        for(int j = i+1; j < l.size();\
    \ j++){\n            if(l[i] + l[j] == 0){\n                return true;\n   \
    \         }\n        }\n    }\n    return false;", "  // TODO: implement this\
    \ function.\n  std::vector<long>::iterator it;\n  std::vector<long>::iterator\
    \ it2;\n  for(it = l.begin(); it != l.end(); it++){\n    for(it2 = l.begin();\
    \ it2 != l.end(); it2++){\n      if(*it + *it2 == 0 && it != it2){\n        return\
    \ true;\n      }\n    }\n  }\n  return false;", "    // TODO: implement this function\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here.\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;", "\t// Write your code here.\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint n = l.size();\n\tint i = 0;\n\tint j = n - 1;\n\twhile (i <\
    \ j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[i]\
    \ + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn\
    \ false;", "    // Your code here.\n    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "  std::sort(l.begin(), l.end());\n  int i = 0;\n\
    \  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n   \
    \   return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n\
    \      j--;\n    }\n  }\n  return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here.\n \
    \   std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // Implement this function.\n  // You may assume that the input\
    \ list has no duplicates.\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int\
    \ j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return\
    \ true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n\
    \    }\n  }\n  return false;"]
stop_tokens:
- "\n}"
