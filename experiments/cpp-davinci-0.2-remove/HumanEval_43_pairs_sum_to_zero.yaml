name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ list of integers as an input.\n// it returns True if there are two distinct elements\
  \ in the list that\n// sum to zero, and False otherwise.\nbool pairs_sum_to_zero(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
  \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n\
  \    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7}))) == (true));\n  \
  \  assert(candidate((std::vector<long>({1}))) == (false));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 3, 2, 30}))) == (true));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 3, 2, 31}))) == (true));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 4, 2, 30}))) == (false));\n    assert(candidate((std::vector<long>({-3,\
  \ 9, -1, 4, 2, 31}))) == (false));\n}\n"
completions: ["    // WRITE YOUR CODE HERE\n    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n        }\n\
    \        s.insert(i);\n    }\n    return false;", "    // your code here\n   \
    \ std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n         \
    \   return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n  \
    \      } else {\n            j--;\n        }\n    }\n    return false;", "   \
    \ // TODO: implement this function\n    //std::sort(l.begin(), l.end());\n   \
    \ std::unordered_set<long> s;\n    for(auto i: l){\n        if(s.find(-i) != s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // Your code here\n    std::unordered_set<long> s;\n    for(auto\
    \ i : l){\n        if(s.find(-i) != s.end()){\n            return true;\n    \
    \    }\n        s.insert(i);\n    }\n    return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n\
    \            return true;\n        s.insert(i);\n    }\n    return false;", " \
    \ // TODO: implement this function.\n  std::sort(l.begin(), l.end());\n  int n\
    \ = l.size();\n  for(int i = 0; i < n; i++) {\n    for(int j = i + 1; j < n; j++)\
    \ {\n      if(l[i] + l[j] == 0) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n  \
    \          return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n \
    \   int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n\
    \            return true;\n        s.insert(i);\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // Your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n     \
    \       return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n     \
    \       return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    int n = l.size();\n    std::vector<long>\
    \ v;\n    for(int i=0;i<n;i++){\n        if(l[i]<0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(v.begin(),v.end());\n    int m = v.size();\n\
    \    for(int i=0;i<m;i++){\n        if(binary_search(v.begin(),v.end(),-v[i])){\n\
    \            return true;\n        }\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // your code\
    \ here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "  // your code here\n  std::sort(l.begin(),\
    \ l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n\
    \      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;", "    // TODO:\
    \ implement this function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n   \
    \ int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // TODO: implement this function.\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // TODO: implement this\
    \ function\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(std::binary_search(l.begin() + i + 1, l.end(),\
    \ -l[i])) {\n            return true;\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    // Your code here\n    std::vector<long>::iterator\
    \ it;\n    std::vector<long>::iterator it2;\n    for(it = l.begin(); it != l.end();\
    \ it++){\n        for(it2 = l.begin(); it2 != l.end(); it2++){\n            if(*it\
    \ + *it2 == 0 && it != it2){\n                return true;\n            }\n  \
    \      }\n    }\n    return false;", "  // Your code here.\n  std::sort(l.begin(),\
    \ l.end());\n  int n = l.size();\n  int i = 0;\n  int j = n-1;\n  while(i<j){\n\
    \    if(l[i] + l[j] == 0){\n      return true;\n    }\n    else if(l[i] + l[j]\
    \ > 0){\n      j--;\n    }\n    else{\n      i++;\n    }\n  }\n  return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // TODO: implement this function.\n    std::unordered_set<long> s;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(l[i]);\n    }\n    return false;", "    //\
    \ your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n  \
    \          return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] ==\
    \ 0){\n            return true;\n        }\n        else if(l[i] + l[j] > 0){\n\
    \            j--;\n        }\n        else{\n            i++;\n        }\n   \
    \ }\n    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "  // your code here\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;", "    // Write your code\
    \ here.\n    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;", "    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "  // your code here\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n  \
    \          return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n \
    \       if(s.find(-i)!=s.end()){\n            return true;\n        }\n      \
    \  s.insert(i);\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here.\n \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n  \
    \  int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n          \
    \  return true;\n        }\n        else if(l[i] + l[j] > 0){\n            j--;\n\
    \        }\n        else{\n            i++;\n        }\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // your code here\n    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    // TODO: implement this function\n\
    \    std::unordered_set<long> s;\n    for(long i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // your code here\n    int n = l.size();\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // TODO: Implement this\
    \ function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // TODO: implement\
    \ this function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j\
    \ = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n    \
    \        return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n  \
    \  int n = l.size();\n    for(int i = 0; i < n; i++) {\n        if(binary_search(l.begin()\
    \ + i + 1, l.end(), -l[i])) {\n            return true;\n        }\n    }\n  \
    \  return false;", "    // Your code here.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::unordered_set<long> s;\n    for(auto\
    \ i : l){\n        if(s.find(-i) != s.end()){\n            return true;\n    \
    \    }\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // TODO: implement this function\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // Implement this function.\n    // You can use the sort function from the\
    \ algorithm library.\n    // You can use the find function from the algorithm\
    \ library.\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (std::find(l.begin(), l.end(), -l[i]) != l.end()) {\n   \
    \         return true;\n        }\n    }\n    return false;", "    // TODO: implement\
    \ this function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j\
    \ = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n    \
    \        return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \ // WRITE YOUR CODE HERE\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int\
    \ j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return\
    \ true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n\
    \    }\n  }\n  return false;", "  // Implement this function.\n  std::sort(l.begin(),\
    \ l.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (std::binary_search(l.begin()\
    \ + i + 1, l.end(), -l[i])) {\n      return true;\n    }\n  }\n  return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // Your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  int i = 0;\n  int j = n - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0)\
    \ {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    }\
    \ else {\n      j--;\n    }\n  }\n  return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // TODO: implement this function\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Write your code here.\n    std::unordered_set<long>\
    \ s;\n    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // TODO: implement\
    \ this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here.\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n-1;\n    while(i < j){\n       \
    \ if(l[i] + l[j] == 0){\n            return true;\n        }\n        else if(l[i]\
    \ + l[j] > 0){\n            j--;\n        }\n        else{\n            i++;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::vector<long> v;\n\
    \    for(int i=0;i<l.size();i++)\n    {\n        for(int j=i+1;j<l.size();j++)\n\
    \        {\n            if(l[i]+l[j]==0)\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    // Your code\
    \ here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(l[i] > 0) {\n            return false;\n  \
    \      }\n        for(int j = i + 1; j < n; j++) {\n            if(l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;", "    // TODO: implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "  // your code here\n  std::sort(l.begin(),\
    \ l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if\
    \ (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n\
    \      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;", "  // TODO:\
    \ implement this function.\n  std::sort(l.begin(), l.end());\n  int i = 0;\n \
    \ int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n    \
    \  return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n\
    \      j--;\n    }\n  }\n  return false;", "    // TODO: Implement this function.\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n         \
    \   return true;\n        }\n        else if(l[i] + l[j] > 0){\n            j--;\n\
    \        }\n        else{\n            i++;\n        }\n    }\n    return false;",
  "    // TODO: implement this function\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // TODO: implement this\
    \ function.\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // Your code\
    \ here.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i\
    \ = 0;\n    int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n \
    \           return true;\n        }\n        else if(l[i] + l[j] > 0){\n     \
    \       j--;\n        }\n        else{\n            i++;\n        }\n    }\n \
    \   return false;", "  // TODO: implement this function.\n  std::unordered_set<long>\
    \ s;\n  for(auto i:l){\n    if(s.find(-i)!=s.end()){\n      return true;\n   \
    \ }\n    s.insert(i);\n  }\n  return false;", "    // TODO: implement this function\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // TODO: implement this function\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here.\n\
    \    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;", "  // Your code here\n  std::unordered_set<long> s;\n\
    \  for(int i=0;i<l.size();i++){\n    if(s.find(-l[i])!=s.end()){\n      return\
    \ true;\n    }\n    s.insert(l[i]);\n  }\n  return false;", "    // Your code\
    \ here\n    std::unordered_set<long> s;\n    for(auto x:l){\n        if(s.find(-x)!=s.end())\n\
    \            return true;\n        s.insert(x);\n    }\n    return false;", " \
    \   // Write your code here.\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n  \
    \  int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // TODO: implement this function\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here.\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // Your code\
    \ here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // Write your\
    \ code here.\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // TODO: implement this\
    \ function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] ==\
    \ 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n    \
    \        i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::unordered_set<long> s;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(l[i]);\n    }\n    return false;", "    //\
    \ Write your code here.\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0, j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // WRITE YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(binary_search(l.begin() + i + 1,\
    \ l.end(), -l[i])) {\n            return true;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;", "    // TODO: implement this\
    \ function.\n    // You may find the std::sort function useful.\n    // You may\
    \ find the std::find function useful.\n    std::sort(l.begin(), l.end());\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n           \
    \ break;\n        }\n        if (std::find(l.begin(), l.end(), -l[i]) != l.end())\
    \ {\n            return true;\n        }\n    }\n    return false;", "  // Write\
    \ your code here.\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = l.size()\
    \ - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n \
    \   } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n\
    \  }\n  return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (l[i] + l[j] == 0) {\n            return true;\n        } else\
    \ if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n\
    \        }\n        s.insert(i);\n    }\n    return false;", "    // Your code\
    \ here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i =\
    \ 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here.\n    std::unordered_set<long> s;\n    for(auto\
    \ i:l){\n        if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    // Your code here\n    std::vector<long>::iterator\
    \ it;\n    std::vector<long>::iterator it2;\n    for(it = l.begin(); it != l.end();\
    \ it++){\n        for(it2 = l.begin(); it2 != l.end(); it2++){\n            if(it\
    \ != it2 && *it + *it2 == 0){\n                return true;\n            }\n \
    \       }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // Your code here.\n \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n  \
    \  int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n          \
    \  return true;\n        }\n        else if(l[i] + l[j] > 0){\n            j--;\n\
    \        }\n        else{\n            i++;\n        }\n    }\n    return false;",
  "  // your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n  int\
    \ i = 0;\n  int j = n-1;\n  while(i < j){\n    if(l[i] + l[j] == 0){\n      return\
    \ true;\n    }\n    else if(l[i] + l[j] < 0){\n      i++;\n    }\n    else{\n\
    \      j--;\n    }\n  }\n  return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // TODO:\
    \ implement this function\n    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // TODO: implement this function\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1;\
    \ j < n; j++) {\n            if(l[i] + l[j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n     \
    \   } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n      \
    \      j--;\n        }\n    }\n    return false;", "    // your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // TODO: Implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    for(int i = 0; i < n; i++) {\n        if(binary_search(l.begin()\
    \ + i + 1, l.end(), -l[i])) {\n            return true;\n        }\n    }\n  \
    \  return false;", "  // your code here\n  std::sort(l.begin(), l.end());\n  int\
    \ i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0)\
    \ {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    }\
    \ else {\n      j--;\n    }\n  }\n  return false;", "    // Your code here.\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::unordered_set<long>\
    \ s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] ==\
    \ 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n    \
    \        i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i]\
    \ + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n      \
    \  }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(long i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n    \
    \        return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Your code here.\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n        if(l[i]\
    \ + l[j] == 0){\n            return true;\n        }\n        else if(l[i] + l[j]\
    \ > 0){\n            j--;\n        }\n        else{\n            i++;\n      \
    \  }\n    }\n    return false;", "    // TODO: implement this function.\n    //\
    \ You may assume that the input list is sorted in non-decreasing order.\n    //\
    \ You may also assume that the input list has at least two elements.\n    // You\
    \ may not use any STL functions except for size(), push_back(),\n    // and pop_back().\n\
    \    // You may not use any sorting functions.\n    // You may not use any auxiliary\
    \ data structures.\n    // You may not use recursion.\n    // You may not use\
    \ any global variables.\n    // You may not use any goto statements.\n    // You\
    \ may not use any break or continue statements.\n    // You may not use any ternary\
    \ operators.\n    // You may not use any short-circuiting logical operators.\n\
    \    // You may not use any bitwise operators.\n    // You may not use any pointer\
    \ arithmetic.\n    // You may not use any comparison operators.\n    // You may\
    \ not use any assignment operators.\n    // You may not use any arithmetic operators.\n\
    \    // You may not use any of the following:\n    //   - std::cin\n    //   -\
    \ std::cout\n    //   - std::cerr\n    //   - std::endl\n    //   - std::string\n\
    \    //   - std::vector\n    //   - std::map\n    //   - std::set\n    //   -\
    \ std::pair\n    //   - std::tuple\n    //   - std::array\n    //   - std::complex\n\
    \    //   - std::valarray\n    //   - std::random_device\n    //   - std::mt19937\n\
    \    //   - std::uniform_int_distribution\n    //   - std::uniform_real_distribution\n\
    \    //   - std::chrono\n    //   - std::thread\n    //   - std::mutex\n    //\
    \   - std::condition_variable\n    //   - std::future\n    //   - std::atomic\n\
    \    //   - std::shared_ptr\n    //   - std::unique_ptr\n    //   - std::weak_ptr\n\
    \    //   - std::enable_shared_from_this\n    //   - std::make_shared\n    //\
    \   - std::make_unique\n", "    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here.\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   // TODO: implement this function.\n    // You may assume that the input list\
    \ is sorted in non-decreasing order.\n    // You may also assume that the input\
    \ list has at least two elements.\n    // You may use the STL set class to store\
    \ elements of the input list.\n    // You may use the STL vector class to store\
    \ elements of the input list.\n    // You may use the STL sort function to sort\
    \ the input list.\n    // You may use the STL find function to find elements in\
    \ the input list.\n    // You may use the STL lower_bound function to find elements\
    \ in the input list.\n    // You may use the STL upper_bound function to find\
    \ elements in the input list.\n    // You may use the STL set_intersection function\
    \ to find elements in the input list.\n    // You may use the STL set_union function\
    \ to find elements in the input list.\n    // You may use the STL set_difference\
    \ function to find elements in the input list.\n    // You may use the STL set_symmetric_difference\
    \ function to find elements in the input list.\n    // You may use the STL inplace_merge\
    \ function to find elements in the input list.\n    // You may use the STL includes\
    \ function to find elements in the input list.\n    // You may use the STL set_union\
    \ function to find elements in the input list.\n    // You may use the STL adjacent_find\
    \ function to find elements in the input list.\n    // You may use the STL count\
    \ function to find elements in the input list.\n    // You may use the STL equal_range\
    \ function to find elements in the input list.\n    // You may use the STL binary_search\
    \ function to find elements in the input list.\n    // You may use the STL merge\
    \ function to find elements in the input list.\n    // You may use the STL min_element\
    \ function to find elements in the input list.\n    // You may use the STL max_element\
    \ function to find elements in the input list.\n    // You may use the STL lexicographical_compare\
    \ function to find elements in the input list.\n    // You may use the STL next_permutation\
    \ function to find elements in the input list.\n    // You may use the STL prev_permutation\
    \ function to find elements in the input list.\n    // You may use the", "  //\
    \ Implement this function.\n  std::sort(l.begin(), l.end());\n  int i = 0;\n \
    \ int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n    \
    \  return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n\
    \      j--;\n    }\n  }\n  return false;", "    // Your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::unordered_set<long> s;\n    for(auto\
    \ i : l){\n        if(s.find(-i) != s.end()){\n            return true;\n    \
    \    }\n        s.insert(i);\n    }\n    return false;", "  // Your code here\n\
    \  std::sort(l.begin(), l.end());\n  int n = l.size();\n  int i = 0;\n  int j\
    \ = n - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n\
    \    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n   \
    \ }\n  }\n  return false;", "  // Implement this function.\n  std::sort(l.begin(),\
    \ l.end());\n  int n = l.size();\n  int i = 0;\n  int j = n - 1;\n  while (i <\
    \ j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i] +\
    \ l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // TODO: implement this function.\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;", "    // Your code here.\n\
    \    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n \
    \   for(it = l.begin(); it != l.end(); it++){\n        for(it2 = l.begin(); it2\
    \ != l.end(); it2++){\n            if(*it + *it2 == 0 && it != it2){\n       \
    \         return true;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n  \
    \  int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(l[i] > 0) {\n            break;\n\
    \        }\n        if(i > 0 && l[i] == l[i-1]) {\n            continue;\n   \
    \     }\n        for(int j = i+1; j < n; j++) {\n            if(l[j] > 0) {\n\
    \                break;\n            }\n            if(j > i+1 && l[j] == l[j-1])\
    \ {\n                continue;\n            }\n            if(l[i] + l[j] == 0)\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;"]
stop_tokens:
- "\n}"
