language: cpp
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return true;\n    if (n == 0) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    }\n    if (n == 1) {\n        return false;\n    }\n    if (x == n) {\n \
    \       return true;\n    }\n    if (x % n != 0) {\n        return false;\n  \
    \  }\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return true;\n    if (n == 0) return false;\n\
    \    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  if (x == n * n) return true;\n  return\
    \ is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ 1 || n < 1) return false;\n  long i = 1;\n  while (pow(n, i) < x) {\n    i++;\n\
    \  }\n  return pow(n, i) == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  if (x == n * n) return true;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  long i = 1;\n  while (pow(n, i) <=\
    \ x) {\n    if (pow(n, i) == x) {\n      return true;\n    }\n    i++;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  double result = log(x) / log(n);\n \
    \ return result == (int)result;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkw1lxgom: /tmp/tmpkw1lxgom.cpp:21: int main(): Assertion `candidate((1),
    (1)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  long i =\
    \ 2;\n  while (i <= n) {\n    long j = 2;\n    long p = pow(i, j);\n    while\
    \ (p <= x && p > 0) {\n      if (p == x) return true;\n      j++;\n      p = pow(i,\
    \ j);\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp84i_slza: /tmp/tmp84i_slza.cpp:30: int main(): Assertion `candidate((128),
    (4)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code here\n    if(x==1) return\
    \ true;\n    if(x==0) return false;\n    if(n==0) return false;\n    if(n==1)\
    \ return false;\n    if(x==n) return true;\n    if(x<n) return false;\n    while(x>n){\n\
    \        if(x%n!=0) return false;\n        x/=n;\n    }\n    if(x==n) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return true;\n    if (n == 0) return false;\n\
    \    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  long i = 1;\n  while (pow(n, i) < x)\
    \ {\n    i++;\n  }\n  if (pow(n, i) == x) {\n    return true;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxp3m7mmj: /tmp/tmpxp3m7mmj.cpp:28: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n  return\
    \ is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  else\n\
    \    return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n  return\
    \ is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 1) {\n        return x ==\
    \ 1;\n    }\n    if (x == 1) {\n        return false;\n    }\n    if (x == n)\
    \ {\n        return true;\n    }\n    if (x < n) {\n        return false;\n  \
    \  }\n    double log_x = log(x) / log(n);\n    return log_x == (int)log_x;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_xrp4vsq: /tmp/tmp_xrp4vsq.cpp:34: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  if (x == n) {\n    return true;\n\
    \  }\n  if (x < n) {\n    return false;\n  }\n  if (x % n != 0) {\n    return\
    \ false;\n  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return true;\n    if (n == 0) return false;\n\
    \    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ if (x == n * n) return true;\n    return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  long i = 2;\n  while (pow(n, i) <= x) {\n    if (pow(n, i) == x) return\
    \ true;\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ 1 || n < 1) return false;\n  long i = 1;\n  while (pow(n, i) < x) {\n    i++;\n\
    \  }\n  return pow(n, i) == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return\
    \ is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    }\n    if (x == 0) {\n        return false;\n    }\n    if (n == 1) {\n \
    \       return false;\n    }\n    if (n == 0) {\n        return false;\n    }\n\
    \    if (x < 0) {\n        return false;\n    }\n    if (n < 0) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099486
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  double a = log(x)/log(n);\n\
    \  if(a == (int)a)\n  return true;\n  else\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpemiuwfdr: /tmp/tmpemiuwfdr.cpp:25: int main(): Assertion `candidate((1),
    (1)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 1) return x == 1;\n  if (x\
    \ == 1) return n == 1;\n  if (x == n) return true;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4xoyoof8: /tmp/tmp4xoyoof8.cpp:25: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == n) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnsg_9n77: /tmp/tmpnsg_9n77.cpp:24: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  if (x == n) {\n    return true;\n\
    \  }\n  if (x < n) {\n    return false;\n  }\n  long i = 2;\n  while (pow(n, i)\
    \ <= x) {\n    if (pow(n, i) == x) {\n      return true;\n    }\n    i++;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  long i = 1;\n \
    \ while (pow(n, i) < x) {\n    i++;\n  }\n  if (pow(n, i) == x) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplu1xvn6q: /tmp/tmplu1xvn6q.cpp:29: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    }\n    long i = 2;\n    while (i < x) {\n        i *= n;\n        if (i ==\
    \ x) {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpew4yfwpb: /tmp/tmpew4yfwpb.cpp:25: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099488
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(x==0)\n    return false;\n  if(n==1)\n    return false;\n  if(n==0)\n\
    \    return false;\n  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n\
    \  return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(n==1)\n    return false;\n  if(x==n)\n    return true;\n  if(x%n==0)\n\
    \    return is_simple_power(x/n,n);\n  return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(n==1)\n    return false;\n  if(x%n!=0)\n    return false;\n  return\
    \ is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  while (x % n == 0) {\n    x /= n;\n  }\n  return x == 1;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (n == 2) return\
    \ (x & (x - 1)) == 0;\n  if (x == n) return true;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1) return\
    \ true;\n  if(n==1) return false;\n  if(x==n) return true;\n  if(x%n!=0) return\
    \ false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  while (x > n) {\n \
    \   if (x % n != 0) return false;\n    x /= n;\n  }\n  return x == n;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1) return\
    \ true;\n  if(n==1) return false;\n  if(x==n) return true;\n  if(x<n) return false;\n\
    \  long temp=n;\n  while(temp<x){\n    temp*=n;\n  }\n  if(temp==x) return true;\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  long i = 1;\n  while (pow(n, i) <\
    \ x) {\n    i++;\n  }\n  if (pow(n, i) == x) {\n    return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    }\n    if (n == 1) {\n        return false;\n    }\n    if (x == n) {\n \
    \       return true;\n    }\n    if (x < n) {\n        return false;\n    }\n\
    \    if (x % n != 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n  return\
    \ true;\n  else if(x<1)\n  return false;\n  else\n  {\n    while(x>1)\n    {\n\
    \      if(x%n!=0)\n      return false;\n      x=x/n;\n    }\n    return true;\n\
    \  }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  double a = log(x) /\
    \ log(n);\n  if (a == (int)a) return true;\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  double log_x = log(x) / log(n);\n  return log_x == (int)log_x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x < n) return false;\n  long i = 2;\n  long n_pow = n;\n  while\
    \ (n_pow < x) {\n    n_pow *= n;\n    if (n_pow == x) return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  long temp = n;\n  while\
    \ (temp < x) {\n    temp *= n;\n  }\n  if (temp == x)\n    return true;\n  else\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  if (x == n) {\n    return true;\n\
    \  }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  if (x / n == 1) return true;\n  return\
    \ is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    long\
    \ i = 2;\n    while (i <= x) {\n        if (i == x) return true;\n        i *=\
    \ n;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphoy2xn3p: /tmp/tmphoy2xn3p.cpp:21: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  long power = 1;\n  for (int i = 0; i\
    \ < 100; i++) {\n    power *= n;\n    if (power == x) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4rrbievs: /tmp/tmp4rrbievs.cpp:28: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return\
    \ is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    }\n    if (n == 1) {\n        return false;\n    }\n    long temp = n;\n\
    \    while (temp < x) {\n        temp *= n;\n    }\n    if (temp == x) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if(x==1) return true;\n  if(x%n!=0)\
    \ return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x < n) return false;\n  return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa89vojop: /tmp/tmpa89vojop.cpp:20: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  long i = 1;\n  while\
    \ (pow(n, i) <= x) {\n    if (pow(n, i) == x) return true;\n    i++;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (x == 0) {\n    return false;\n  }\n  if (n == 1) {\n    return true;\n\
    \  }\n  if (n == 0) {\n    return false;\n  }\n  if (x % n != 0) {\n    return\
    \ false;\n  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < 1) return false;\n    while (x % n == 0) {\n        x /= n;\n    }\n    return\
    \ x == 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  if (x == n) {\n    return true;\n\
    \  }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (x < n) {\n    return false;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(n==1)\n    return false;\n  if(x==n)\n    return true;\n  if(x%n!=0)\n\
    \    return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return true;\n    if (n == 0) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x % n != 0) return false;\n    if (x == n) return true;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1) return\
    \ true;\n  if(x%n!=0) return false;\n  return is_simple_power(x/n,n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x == n) return\
    \ true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1)\n    return\
    \ true;\n  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  else\n\
    \    return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  long i = 1;\n  while (pow(n, i) < x)\
    \ {\n    i++;\n  }\n  if (pow(n, i) == x) {\n    return true;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxp3m7mmj: /tmp/tmpxp3m7mmj.cpp:28: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    long r = x /\
    \ n;\n    if (r == n) return true;\n    if (r < n) return false;\n    return is_simple_power(r,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x == 0) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (n == x) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (n == 1) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  while (x % n == 0) {\n    x /= n;\n\
    \  }\n  return x == 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  long temp = n;\n  while (temp < x) {\n    temp *= n;\n  }\n  if (temp == x)\
    \ {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 1) return false;\n    if (n == 0) return false;\n\
    \    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n  if(x==1) return\
    \ true;\n  if(n==1) return false;\n  if(x==n) return true;\n  if(x<n) return false;\n\
    \  if(x%n!=0) return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  if (x % n == 0) {\n    return is_simple_power(x / n, n);\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return true;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x < n) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x == n) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x ==\
    \ 0) return false;\n  if (n == 1) return false;\n  if (n == 0) return false;\n\
    \  if (x % n != 0) return false;\n  if (x == n) return true;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x <\
    \ n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 1) return x == 1;\n  if (x\
    \ == 1) return n == 1;\n  if (x == n) return true;\n  if (x % n != 0) return false;\n\
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4xoyoof8: /tmp/tmp4xoyoof8.cpp:25: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    }\n    if (x % n != 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099489
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n == 1) {\n    return false;\n  }\n  if (x == n) {\n    return true;\n\
    \  }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < 1) return false;\n    if (n == 1) return false;\n    if (n == x) return true;\n\
    \    if (n == 0) return false;\n    if (n == -1) return false;\n    if (n == -x)\
    \ return true;\n    if (n < -1) return is_simple_power(x, -n);\n    if (x % n\
    \ != 0) return false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) return true;\n  if (x %\
    \ n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == n) {\n    return true;\n  }\n\
    \  if (x < n) {\n    return false;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvwdodzk8: /tmp/tmpvwdodzk8.cpp:30: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099490
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099487
