language: sh
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_distance_max\n  local\
    \ collision_distance_min\n  local collision_distance_sum\n  local collision_distance_sum2\n\
    \  local collision_distance_sum3\n  local collision_distance_sum4\n  local collision_distance_sum5\n\
    \  local collision_distance_sum6\n  local collision_distance_sum7\n  local collision_distance_sum8\n\
    \  local collision_distance_sum9\n  local collision_distance_sum10\n  local collision_distance_sum11\n\
    \  local collision_distance_sum12\n  local collision_distance_sum13\n  local collision_distance_sum14\n\
    \  local collision_distance_sum15\n  local collision_distance_sum16\n  local collision_distance_sum17\n\
    \  local collision_distance_sum18\n  local collision_distance_sum19\n  local collision_distance_sum20\n\
    \  local collision_distance_sum21\n  local collision_distance_sum22\n  local collision_distance_sum23\n\
    \  local collision_distance_sum24\n  local collision_distance_sum25\n  local collision_distance_sum26\n\
    \  local collision_distance_sum27\n  local collision_distance_sum28\n  local collision_distance_sum29\n\
    \  local collision_distance_sum30\n  local collision_distance_sum31\n  local collision_distance_sum32\n\
    \  local collision_distance_sum33\n  local collision_distance_sum34\n  local collision_distance_sum35\n\
    \  local collision_distance_sum36\n  local collision_distance_sum37\n  local collision_distance_sum38\n\
    \  local collision_distance_sum39\n  local collision_distance_sum40\n  local collision_distance_sum41\n\
    \  local collision_distance_sum42\n  local collision_distance_sum43\n  local collision_distance_sum44\n\
    \  local collision_distance_sum45\n  local collision_distance_sum46\n  local collision_distance_sum47\n\
    \  local collision_distance_sum48\n  local collision_distance_sum49\n  local collision_distance_sum50\n\
    \  local collision_distance_sum51\n  local collision_distance_sum52\n  local collision_distance_sum53\n\
    \  local collision_distance_sum54\n  local collision_distance_sum55\n  local collision_distance_sum56\n\
    \  local collision_distance_sum57\n  local collision_distance_sum58\n  local collision_distance_sum59\n\
    \  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_length\n  local collision_length2\n  local collision_length3\n\
    \  local collision_length4\n  local collision_length5\n  local collision_length6\n\
    \  local collision_length7\n  local collision_length8\n  local collision_length9\n\
    \  local collision_length10\n  local collision_length11\n  local collision_length12\n\
    \  local collision_length13\n  local collision_length14\n  local collision_length15\n\
    \  local collision_length16\n  local collision_length17\n  local collision_length18\n\
    \  local collision_length19\n  local collision_length20\n  local collision_length21\n\
    \  local collision_length22\n  local collision_length23\n  local collision_length24\n\
    \  local collision_length25\n  local collision_length26\n  local collision_length27\n\
    \  local collision_length28\n  local collision_length29\n  local collision_length30\n\
    \  local collision_length31\n  local collision_length32\n  local collision_length33\n\
    \  local collision_length34\n  local collision_length35\n  local collision_length36\n\
    \  local collision_length37\n  local collision_length38\n  local collision_length39\n\
    \  local collision_length40\n  local collision_length41\n  local collision_length42\n\
    \  local collision_length43\n  local collision_length44\n  local collision_length45\n\
    \  local collision_length46\n  local collision_length47\n  local collision_length48\n\
    \  local collision_length49\n  local collision_length50\n  local collision_length51\n\
    \  local collision_length52\n  local collision_length53\n  local collision_length54\n\
    \  local collision_length55\n  local collision_length56\n  local collision_length57\n\
    \  local collision_length58\n  local collision_length59\n  local collision_length60\n\
    \  local collision_length61\n  local collision_length62\n  local collision_length63\n\
    \  local collision_length64\n  local collision_length65\n  local collision_length66\n\
    \  local collision_length67\n  local collision_length68\n  local collision_length69\n\
    \  local collision_length70\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance_max\n\
    \  local collision_distance_min\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_distance2\n  local\
    \ collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n  local collision_\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left\n  local\
    \ car_right\n  local collisions\n  local i\n\n  collisions=0\n  for i in $(seq\
    \ 1 $n); do\n    car_left=$(( i - 1 ))\n    car_right=$(( i + 1 ))\n    if [ $car_left\
    \ -eq 0 ] && [ $car_right -eq $n ]; then\n      collisions=$(( collisions + 1\
    \ ))\n    fi\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local y\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local z\n  local speed\n\
    \  local speed1\n  local speed2\n  local speed3\n  local speed4\n  local speed5\n\
    \  local speed6\n  local speed7\n  local speed8\n  local speed9\n  local speed10\n\
    \  local speed11\n  local speed12\n  local speed13\n  local speed14\n  local speed15\n\
    \  local speed16\n  local speed17\n  local speed18\n  local speed19\n  local speed20\n\
    \  local speed21\n  local speed22\n  local speed23\n  local speed24\n  local speed25\n\
    \  local speed26\n  local speed27\n  local speed28\n  local speed29\n  local speed30\n\
    \  local speed31\n  local speed32\n  local speed33\n  local speed34\n  local speed35\n\
    \  local speed36\n  local speed37\n  local speed38\n  local speed39\n  local speed40\n\
    \  local speed41\n  local speed42\n  local speed43\n  local speed44\n  local speed45\n\
    \  local speed46\n  local speed47\n  local speed48\n  local speed49\n  local speed50\n\
    \  local speed51\n  local speed52\n  local speed53\n  local speed54\n  local speed55\n\
    \  local speed56\n  local speed57\n  local speed58\n  local speed59\n  local speed60\n\
    \  local speed61\n  local speed62\n  local speed63\n  local speed64\n  local speed65\n\
    \  local speed66\n  local speed67\n  local speed68\n  local speed69\n  local speed70\n\
    \  local speed71\n  local speed72\n  local speed73\n  local speed74\n  local speed75\n\
    \  local speed76\n  local speed77\n  local speed78\n  local speed79\n  local speed80\n\
    \  local speed81\n  local speed82\n  local speed83\n  local speed84\n  local speed85\n\
    \  local speed86\n  local speed87\n  local speed88\n  local speed89\n  local speed90\n\
    \  local speed91\n  local speed92\n  local speed93\n  local speed94\n  local speed\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local k\n  local collision_distance\n  local collision_distance_left\n\
    \  local collision_distance_right\n  local collision_distance_left_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_sq\n  local\
    \ collision_distance_sq_minus_one\n  local collision_distance_sq_minus_two\n \
    \ local collision_distance_sq_minus_three\n  local collision_distance_sq_minus_four\n\
    \  local collision_distance_sq_minus_five\n  local collision_distance_sq_minus_six\n\
    \  local collision_distance_sq_minus_seven\n  local collision_distance_sq_minus_eight\n\
    \  local collision_distance_sq_minus_nine\n  local collision_distance_sq_minus_ten\n\
    \  local collision_distance_sq_minus_eleven\n  local collision_distance_sq_minus_twelve\n\
    \  local collision_distance_sq_minus_thirteen\n  local collision_distance_sq_minus_fourteen\n\
    \  local collision_distance_sq_minus_fifteen\n  local collision_distance_sq_minus_sixteen\n\
    \  local collision_distance_sq_minus_seventeen\n  local collision_distance_sq_minus_eighteen\n\
    \  local collision_distance_sq_minus_nineteen\n  local collision_distance_sq_minus_twenty\n\
    \  local collision_distance_sq_minus_thirty\n  local collision_distance_sq_minus_forty\n\
    \  local collision_distance_sq_minus_fifty\n  local collision_distance_sq_minus_sixty\n\
    \  local collision_distance_sq_minus_seventy\n  local collision_distance_sq_minus_eighty\n\
    \  local collision_distance_sq_minus_ninety\n  local collision_distance_sq_minus_hundred\n\
    \  local collision_distance_sq_minus_thousand\n  local collision_distance_sq_minus_million\n\
    \  local collision_distance_sq_minus_billion\n  local collision_distance_sq_minus_trillion\n\
    \  local collision_distance_sq_minus_quadrillion\n  local collision_distance_sq_minus_quintillion\n\
    \  local collision_distance_sq_minus_sextillion\n  local collision_distance_sq_minus_septillion\n\
    \  local collision_distance_sq_minus_octillion\n  local collision_distance_sq_minus_nonillion\n\
    \  local collision_distance_sq_minus_decillion\n  local collision_distance_sq_minus_undecillion\n\
    \  local collision_distance_sq_minus_duodecillion\n  local collision_distance_sq_\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_left\n  local collision_right\n  local collision_left_right\n\
    \  local collision_left_left\n  local collision_right_left\n  local collision_right_right\n\
    \  local collision_left_left_right\n  local collision_left_left_left\n  local\
    \ collision_right_left_left\n  local collision_right_left_right\n  local collision_left_right_left\n\
    \  local collision_left_right_right\n  local collision_right_right_left\n  local\
    \ collision_right_right_right\n  local collision_left_left_left_right\n  local\
    \ collision_left_left_left_left\n  local collision_right_left_left_left\n  local\
    \ collision_right_left_left_right\n  local collision_right_left_right_left\n \
    \ local collision_right_left_right_right\n  local collision_right_right_left_left\n\
    \  local collision_right_right_left_right\n  local collision_right_right_right_left\n\
    \  local collision_right_right_right_right\n  local collision_left_left_left_right_right\n\
    \  local collision_left_left_left_left_left\n  local collision_right_left_left_left_left\n\
    \  local collision_right_left_left_left_right\n  local collision_right_left_left_right_left\n\
    \  local collision_right_left_left_right_right\n  local collision_right_left_right_left_left\n\
    \  local collision_right_left_right_left_right\n  local collision_right_left_right_right_left\n\
    \  local collision_right_left_right_right_right\n  local collision_right_right_left_left_left\n\
    \  local collision_right_right_left_left_right\n  local collision_right_right_left_right_left\n\
    \  local collision_right_right_left_right_right\n  local collision_right_right_right_left_left\n\
    \  local collision_right_right_right_left_right\n  local collision_right_right_right_right_left\n\
    \  local collision_right_right_right_right_right\n  local collision_left_left_left_right_right_right\n\
    \  local collision_left_left_left_left_left\n  local collision_right_left_left_left_left\n\
    \  local collision_right_left_left_left_right\n  local collision_right_left_left_right_left\n\
    \  local collision_right_left_left_right_right\n  local collision_right_left_right_left_left\n\
    \  local collision_right_left_right_left_right\n  local collision_right_left_right_right_left\n\
    \  local collision_right_left_right_right_right\n  local collision_right_right_left_left_left\n\
    \  local collision_right_right_left_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ xspeed\n  local yspeed\n  local xspeed2\n  local yspeed2\n  local xspeed3\n\
    \  local yspeed3\n  local xspeed4\n  local yspeed4\n  local xspeed5\n  local yspeed5\n\
    \  local xspeed6\n  local yspeed6\n  local xspeed7\n  local yspeed7\n  local xspeed8\n\
    \  local yspeed8\n  local xspeed9\n  local yspeed9\n  local xspeed10\n  local\
    \ yspeed10\n  local xspeed11\n  local yspeed11\n  local xspeed12\n  local yspeed12\n\
    \  local xspeed13\n  local yspeed13\n  local xspeed14\n  local yspeed14\n  local\
    \ xspeed15\n  local yspeed15\n  local xspeed16\n  local yspeed16\n  local xspeed17\n\
    \  local yspeed17\n  local xspeed18\n  local yspeed18\n  local xspeed19\n  local\
    \ yspeed19\n  local xspeed20\n  local yspeed20\n  local xspeed21\n  local yspeed21\n\
    \  local xspeed22\n  local yspeed22\n  local xspeed23\n  local yspeed23\n  local\
    \ xspeed24\n  local yspeed24\n  local xspeed25\n  local yspeed25\n  local xspeed26\n\
    \  local yspeed26\n  local xspeed27\n  local yspeed27\n  local xspeed28\n  local\
    \ yspeed28\n  local xspeed29\n  local yspeed29\n  local xspeed30\n  local yspeed30\n\
    \  local xspeed31\n  local yspeed31\n  local xspeed32\n  local yspeed32\n  local\
    \ xspeed33\n  local yspeed33\n  local xspeed34\n  local yspeed34\n  local xspeed35\n\
    \  local yspeed35\n  local xspeed36\n  local yspeed36\n  local xspeed37\n  local\
    \ yspeed37\n  local xspeed38\n  local yspeed38\n  local xspeed39\n  local yspeed39\n\
    \  local xspeed40\n  local yspeed40\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_left\n  local collision_right\n  local collision_left_right\n\
    \  local collision_left_left\n  local collision_right_left\n  local collision_right_right\n\
    \  local collision_left_left_right\n  local collision_left_left_left\n  local\
    \ collision_right_left_left\n  local collision_right_left_right\n  local collision_left_right_left\n\
    \  local collision_left_right_right\n  local collision_right_right_left\n  local\
    \ collision_right_right_right\n  local collision_left_left_left_right\n  local\
    \ collision_left_left_left_left\n  local collision_right_left_left_left\n  local\
    \ collision_right_left_left_right\n  local collision_right_left_right_left\n \
    \ local collision_right_left_right_right\n  local collision_right_right_left_left\n\
    \  local collision_right_right_left_right\n  local collision_right_right_right_left\n\
    \  local collision_right_right_right_right\n  local collision_left_left_left_right_right\n\
    \  local collision_left_left_left_left_left\n  local collision_right_left_left_left_left\n\
    \  local collision_right_left_left_left_right\n  local collision_right_left_left_right_left\n\
    \  local collision_right_left_left_right_right\n  local collision_right_left_right_left_left\n\
    \  local collision_right_left_right_left_right\n  local collision_right_left_right_right_left\n\
    \  local collision_right_left_right_right_right\n  local collision_right_right_left_left_left\n\
    \  local collision_right_right_left_left_right\n  local collision_right_right_left_right_left\n\
    \  local collision_right_right_left_right_right\n  local collision_right_right_right_left_left\n\
    \  local collision_right_right_right_left_right\n  local collision_right_right_right_right_left\n\
    \  local collision_right_right_right_right_right\n  local collision_left_left_left_right_right_right\n\
    \  local collision_left_left_left_left_left\n  local collision_right_left_left_left_left\n\
    \  local collision_right_left_left_left_right\n  local collision_right_left_left_right_left\n\
    \  local collision_right_left_left_right_right\n  local collision_right_left_right_left_left\n\
    \  local collision_right_left_right_left_right\n  local collision_right_left_right_right_left\n\
    \  local collision_right_left_right_right_right\n  local collision_right_right_left_left_left\n\
    \  local collision_right_right_left_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ speed\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local car_left\n  local car_right\n  local\
    \ car_left_index\n  local car_right_index\n  local car_left_speed\n  local car_right_speed\n\
    \  local car_left_speed2\n  local car_right_speed2\n  local car_left_speed3\n\
    \  local car_right_speed3\n  local car_left_speed4\n  local car_right_speed4\n\
    \  local car_left_speed5\n  local car_right_speed5\n  local car_left_speed6\n\
    \  local car_right_speed6\n  local car_left_speed7\n  local car_right_speed7\n\
    \  local car_left_speed8\n  local car_right_speed8\n  local car_left_speed9\n\
    \  local car_right_speed9\n  local car_left_speed10\n  local car_right_speed10\n\
    \  local car_left_speed11\n  local car_right_speed11\n  local car_left_speed12\n\
    \  local car_right_speed12\n  local car_left_speed13\n  local car_right_speed13\n\
    \  local car_left_speed14\n  local car_right_speed14\n  local car_left_speed15\n\
    \  local car_right_speed15\n  local car_left_speed16\n  local car_right_speed16\n\
    \  local car_left_speed17\n  local car_right_speed17\n  local car_left_speed18\n\
    \  local car_right_speed18\n  local car_left_speed19\n  local car_right_speed19\n\
    \  local car_left_speed20\n  local car_right_speed20\n  local car_left_speed21\n\
    \  local car_right_speed21\n  local car_left_speed22\n  local car_right_speed22\n\
    \  local car_left_speed23\n  local car_right_speed23\n  local car_left_speed24\n\
    \  local car_right_speed24\n  local car_left_speed25\n  local car_right_speed25\n\
    \  local car_left_speed26\n  local car_right_speed26\n  local car_left_speed27\n\
    \  local car_right_speed27\n  local car_left_speed28\n  local car_right_speed28\n\
    \  local car_left_speed29\n  local car_right_speed29\n  \n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ speed\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local i1\n  local i2\n  local j\n  local k\n  local collision_distance\n  local\
    \ collision_distance2\n  local collision_distance3\n  local collision_distance4\n\
    \  local collision_distance5\n  local collision_distance6\n  local collision_distance7\n\
    \  local collision_distance8\n  local collision_distance9\n  local collision_distance10\n\
    \  local collision_distance11\n  local collision_distance12\n  local collision_distance13\n\
    \  local collision_distance14\n  local collision_distance15\n  local collision_distance16\n\
    \  local collision_distance17\n  local collision_distance18\n  local collision_distance19\n\
    \  local collision_distance20\n  local collision_distance21\n  local collision_distance22\n\
    \  local collision_distance23\n  local collision_distance24\n  local collision_distance25\n\
    \  local collision_distance26\n  local collision_distance27\n  local collision_distance28\n\
    \  local collision_distance29\n  local collision_distance30\n  local collision_distance31\n\
    \  local collision_distance32\n  local collision_distance33\n  local collision_distance34\n\
    \  local collision_distance35\n  local collision_distance36\n  local collision_distance37\n\
    \  local collision_distance38\n  local collision_distance39\n  local collision_distance40\n\
    \  local collision_distance41\n  local collision_distance42\n  local collision_distance43\n\
    \  local collision_distance44\n  local collision_distance45\n  local collision_distance46\n\
    \  local collision_distance47\n  local collision_distance48\n  local collision_distance49\n\
    \  local collision_distance50\n  local collision_distance51\n  local collision_distance52\n\
    \  local collision_distance53\n  local collision_distance54\n  local collision_distance55\n\
    \  local collision_distance56\n  local collision_distance57\n  local collision_distance58\n\
    \  local collision_distance59\n  local collision_distance60\n  local collision_distance61\n\
    \  local collision_distance62\n  local collision_distance63\n  local collision_distance64\n\
    \  local collision_distance65\n  local collision_distance66\n  local collision_distance67\n\
    \  local collision_distance68\n  local collision_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_min\n \
    \ local collision_distance_max\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \  local collision\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance2\n  local\
    \ collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n  local collision\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local collision_left\n  local collision_right\n  local collision_left_right\n\
    \  local collision_left_left\n  local collision_right_left\n  local collision_right_right\n\
    \  local collision_left_left_right\n  local collision_left_right_left\n  local\
    \ collision_right_left_left\n  local collision_right_right_left\n  local collision_left_left_right_left\n\
    \  local collision_left_right_left_left\n  local collision_right_left_left_left\n\
    \  local collision_right_right_left_left\n  local collision_left_left_right_left_left\n\
    \  local collision_left_right_left_left_left\n  local collision_right_left_left_left_left\n\
    \  local collision_right_right_left_left_left\n  local collision_left_left_right_left_left_left\n\
    \  local collision_left_right_left_left_left_left\n  local collision_right_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left\n  local collision_left_left_right_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left_left_left\n  local\
    \ collision_right_left_left_left_left_left_left_left_left_left\n  local collision_right_right_left_left_left_left_left_left_left\n\
    \  local collision_left_left_right_left_left_left_left_left_left_left_left\n \
    \ local collision_left_right_left_left_left_left_left_left_left_left_left\n  local\
    \ collision_right_left_left_left_left_left_left_left_left_left_left\n  local collision_right_right_left_left_left_left_left_left_left_left_left\n\
    \  local collision_left_left_right_left_left_left_left_left_left_left_left\n \
    \ local collision_left_right_left_left_left_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speeds\n  local collision_speeds_index\n  local collision_speeds_length\n\
    \  local collision_speeds_length_index\n  local collision_speeds_length_index2\n\
    \  local collision_speeds_length_index3\n  local collision_speeds_length_index4\n\
    \  local collision_speeds_length_index5\n  local collision_speeds_length_index6\n\
    \  local collision_speeds_length_index7\n  local collision_speeds_length_index8\n\
    \  local collision_speeds_length_index9\n  local collision_speeds_length_index10\n\
    \  local collision_speeds_length_index11\n  local collision_speeds_length_index12\n\
    \  local collision_speeds_length_index13\n  local collision_speeds_length_index14\n\
    \  local collision_speeds_length_index15\n  local collision_speeds_length_index16\n\
    \  local collision_speeds_length_index17\n  local collision_speeds_length_index18\n\
    \  local collision_speeds_length_index19\n  local collision_speeds_length_index20\n\
    \  local collision_speeds_length_index21\n  local collision_speeds_length_index22\n\
    \  local collision_speeds_length_index23\n  local collision_speeds_length_index24\n\
    \  local collision_speeds_length_index25\n  local collision_speeds_length_index26\n\
    \  local collision_speeds_length_index27\n  local collision_speeds_length_index28\n\
    \  local collision_speeds_length_index29\n  local collision_speeds_length_index30\n\
    \  local collision_speeds_length_index31\n  local collision_speeds_length_index32\n\
    \  local collision_speeds_length_index33\n  local collision_speeds_length_index34\n\
    \  local collision_speeds_length_index35\n  local collision_speeds_length_index36\n\
    \  local collision_speeds_length_index37\n  local collision_speeds_length_index38\n\
    \  local collision_speeds_length_index39\n  local collision_speeds_length_index40\n\
    \  local collision_speeds_length_index41\n  local collision_speeds_length_index42\n\
    \  local collision_speeds_length_index43\n  local collision_speeds_length_index44\n\
    \  local collision_speeds_length_index45\n  local collision\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local collision_length\n  local collision_length2\n  local collision_length3\n\
    \  local collision_length4\n  local collision_length5\n  local collision_length6\n\
    \  local collision_length7\n  local collision_length8\n  local collision_length9\n\
    \  local collision_length10\n  local collision_length11\n  local collision_length12\n\
    \  local collision_length13\n  local collision_length14\n  local collision_length15\n\
    \  local collision_length16\n  local collision_length17\n  local collision_length18\n\
    \  local collision_length19\n  local collision_length20\n  local collision_length21\n\
    \  local collision_length22\n  local collision_length23\n  local collision_length24\n\
    \  local collision_length25\n  local collision_length26\n  local collision_length27\n\
    \  local collision_length28\n  local collision_length29\n  local collision_length30\n\
    \  local collision_length31\n  local collision_length32\n  local collision_length33\n\
    \  local collision_length34\n  local collision_length35\n  local collision_length36\n\
    \  local collision_length37\n  local collision_length38\n  local collision_length39\n\
    \  local collision_length40\n  local collision_length41\n  local collision_length42\n\
    \  local collision_length43\n  local collision_length44\n  local collision_length45\n\
    \  local collision_length46\n  local collision_length47\n  local collision_length48\n\
    \  local collision_length49\n  local collision_length50\n  local collision_length51\n\
    \  local collision_length52\n  local collision_length53\n  local collision_length54\n\
    \  local collision_length55\n  local collision_length56\n  local collision_length57\n\
    \  local collision_length58\n  local collision_length59\n  local collision_length60\n\
    \  local collision_length61\n  local collision_length62\n  local collision_length63\n\
    \  local collision_length64\n  local collision_length65\n  local collision_length66\n\
    \  local collision_length67\n  local collision_length68\n  local collision_length69\n\
    \  local collision_length70\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left\n  local\
    \ car_right\n  local collisions\n  local car_left_x\n  local car_right_x\n  local\
    \ car_left_y\n  local car_right_y\n  local car_left_speed\n  local car_right_speed\n\
    \  local car_left_speed2\n  local car_right_speed2\n  local car_left_speed3\n\
    \  local car_right_speed3\n  local car_left_speed4\n  local car_right_speed4\n\
    \  local car_left_speed5\n  local car_right_speed5\n  local car_left_speed6\n\
    \  local car_right_speed6\n  local car_left_speed7\n  local car_right_speed7\n\
    \  local car_left_speed8\n  local car_right_speed8\n  local car_left_speed9\n\
    \  local car_right_speed9\n  local car_left_speed10\n  local car_right_speed10\n\
    \  local car_left_speed11\n  local car_right_speed11\n  local car_left_speed12\n\
    \  local car_right_speed12\n  local car_left_speed13\n  local car_right_speed13\n\
    \  local car_left_speed14\n  local car_right_speed14\n  local car_left_speed15\n\
    \  local car_right_speed15\n  local car_left_speed16\n  local car_right_speed16\n\
    \  local car_left_speed17\n  local car_right_speed17\n  local car_left_speed18\n\
    \  local car_right_speed18\n  local car_left_speed19\n  local car_right_speed19\n\
    \  local car_left_speed20\n  local car_right_speed20\n  local car_left_speed21\n\
    \  local car_right_speed21\n  local car_left_speed22\n  local car_right_speed22\n\
    \  local car_left_speed23\n  local car_right_speed23\n  local car_left_speed24\n\
    \  local car_right_speed24\n  local car_left_speed25\n  local car_right_speed25\n\
    \  local car_left_speed26\n  local car_right_speed26\n  local car_left_speed27\n\
    \  local car_right_speed27\n  local car_left_speed28\n  local car_right_speed28\n\
    \  local car_left_speed29\n  local car_right_speed29\n}\n\ncandidate() {\n   \
    \ car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x1 y1 x2 y2\n  local\
    \ x3 y3 x4 y4\n  local x5 y5 x6 y6\n  local x7 y7 x8 y8\n  local x9 y9 x10 y10\n\
    \  local x11 y11 x12 y12\n  local x13 y13 x14 y14\n  local x15 y15 x16 y16\n \
    \ local x17 y17 x18 y18\n  local x19 y19 x20 y20\n  local x21 y21 x22 y22\n  local\
    \ x23 y23 x24 y24\n  local x25 y25 x26 y26\n  local x27 y27 x28 y28\n  local x29\
    \ y29 x30 y30\n  local x31 y31 x32 y32\n  local x33 y33 x34 y34\n  local x35 y35\
    \ x36 y36\n  local x37 y37 x38 y38\n  local x39 y39 x40 y40\n  local x41 y41 x42\
    \ y42\n  local x43 y43 x44 y44\n  local x45 y45 x46 y46\n  local x47 y47 x48 y48\n\
    \  local x49 y49 x50 y50\n  local x51 y51 x52 y52\n  local x53 y53 x54 y54\n \
    \ local x55 y55 x56 y56\n  local x57 y57 x58 y58\n  local x59 y59 x60 y60\n  local\
    \ x61 y61 x62 y62\n  local x63 y63 x64 y64\n  local x65 y65 x66 y66\n  local x67\
    \ y67 x68 y68\n  local x69 y69 x70 y70\n  local x71 y71 x72 y72\n  local x73 y73\
    \ x74 y74\n  local x75 y75 x76 y76\n  local x77 y77 x78 y78\n  local x79 y79 x80\
    \ y80\n  local x81 y81 x82 y82\n\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_max\n \
    \ local collision_distance_min\n  local collision_distance_sum\n  local collision_distance_sum_squared\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_max\n  local\
    \ collision_distance_sum_min\n  local collision_distance_sum_max\n  local collision_distance_sum_min\n\
    \  local collision_distance_sum_max\n  local collision_distance_sum_min\n  local\
    \ collision_distance_sum_max\n  local collision_distance_sum_min\n  local collision_distance_sum_max\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_max\n  local\
    \ collision_distance_sum_min\n  local collision_distance_sum_max\n  local collision_distance_sum_min\n\
    \  local collision_distance_sum_max\n  local collision_distance_sum_min\n  local\
    \ collision_distance_sum_max\n  local collision_distance_sum_min\n  local collision_distance_sum_max\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_max\n  local\
    \ collision_distance_sum_min\n  local collision_distance_sum_max\n  local collision_distance_sum_min\n\
    \  local collision_distance_sum_max\n  local collision_distance_sum_min\n  local\
    \ collision_distance_sum_max\n  local collision_distance_sum_min\n  local collision_distance_sum_max\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_max\n  local\
    \ collision_distance_sum_min\n  local collision_distance_sum_max\n  local collision_distance_sum_min\n\
    \  local collision_distance_sum_max\n  local collision_distance_sum_min\n  local\
    \ collision_distance_sum_max\n  local collision_distance_sum_min\n  local collision_distance_sum_max\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_max\n  local\
    \ collision_distance_sum_min\n  local collision_distance_sum_max\n  local collision_distance_sum_min\n\
    \  local collision_distance_sum_max\n  local collision_distance_sum_min\n  local\
    \ collision_distance_sum_max\n  local collision_distance_sum_min\n  local collision_distance_sum_max\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_max\n  local\
    \ collision_distance_sum_min\n  local collision_distance_sum_max\n  local collision_distance_sum_min\n\
    \  local collision_distance_sum_max\n  local collision_distance_sum_min\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_distance2\n  local collision_distance3\n\
    \  local collision_distance4\n  local collision_distance5\n  local collision_distance6\n\
    \  local collision_distance7\n  local collision_distance8\n  local collision_distance9\n\
    \  local collision_distance10\n  local collision_distance11\n  local collision_distance12\n\
    \  local collision_distance13\n  local collision_distance14\n  local collision_distance15\n\
    \  local collision_distance16\n  local collision_distance17\n  local collision_distance18\n\
    \  local collision_distance19\n  local collision_distance20\n  local collision_distance21\n\
    \  local collision_distance22\n  local collision_distance23\n  local collision_distance24\n\
    \  local collision_distance25\n  local collision_distance26\n  local collision_distance27\n\
    \  local collision_distance28\n  local collision_distance29\n  local collision_distance30\n\
    \  local collision_distance31\n  local collision_distance32\n  local collision_distance33\n\
    \  local collision_distance34\n  local collision_distance35\n  local collision_distance36\n\
    \  local collision_distance37\n  local collision_distance38\n  local collision_distance39\n\
    \  local collision_distance40\n  local collision_distance41\n  local collision_distance42\n\
    \  local collision_distance43\n  local collision_distance44\n  local collision_distance45\n\
    \  local collision_distance46\n  local collision_distance47\n  local collision_distance48\n\
    \  local collision_distance49\n  local collision_distance50\n  local collision_distance51\n\
    \  local collision_distance52\n  local collision_distance53\n  local collision_distance54\n\
    \  local collision_distance55\n  local collision_distance56\n  local collision_distance57\n\
    \  local collision_distance58\n  local collision_distance59\n  local collision_distance60\n\
    \  local collision_distance61\n  local collision_distance62\n  local collision_distance63\n\
    \  local collision_distance64\n  local collision_distance65\n  local collision_distance66\n\
    \  local collision_distance67\n  local collision_distance68\n  local collision_distance69\n\
    \  local collision_distance70\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_distance_max\n  local\
    \ collision_distance_min\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \  local collision_\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speeds\n  local collision_directions\n  local collision_speeds_i\n\
    \  local collision_speeds_j\n  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n\
    \  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local\
    \ collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n\
    \  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local\
    \ collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n\
    \  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local\
    \ collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n\
    \  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local\
    \ collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n\
    \  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local\
    \ collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n\
    \  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local\
    \ collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n\
    \  local collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local\
    \ collision_speeds_i_minus_j\n  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n\
    \  local collision_speeds_j_minus_i\n  local collision_speeds_i_minus_j\n  local\
    \ collision_speeds_j_minus_i\n  local collision_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for (( i=0; i<n; i++ )); do\n        for (( j=i;\
    \ j<n; j++ )); do\n            if (( ${car_race_distance[$i]} > ${car_race_distance[$j]}\
    \ )); then\n                collisions=$(( collisions + 1 ))\n            fi\n\
    \        done\n    done\n    echo \"$collisions\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmbg5781z.sh: line 19: ((: >  : syntax error: operand expected (error
    token is ">  ")

    /tmp/tmpmbg5781z.sh: line 19: ((: >  : syntax error: operand expected (error token
    is ">  ")

    /tmp/tmpmbg5781z.sh: line 19: ((: >  : syntax error: operand expected (error token
    is ">  ")

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"car_race_$n.txt\"\
    \n  local car_race_dir=\"car_race\"\n  local car_race_file_full=\"$car_race_dir/$car_race_file\"\
    \n  local car_race_file_temp=\"$car_race_dir/$car_race_file.temp\"\n  local car_race_file_temp_full=\"\
    $car_race_dir/$car_race_file.temp.temp\"\n  local car_race_file_temp_dir=\"$car_race_dir/$car_race_file.temp_dir\"\
    \n  local car_race_file_temp_dir_full=\"$car_race_dir/$car_race_file.temp_dir.temp\"\
    \n  local car_race_file_temp_dir_dir=\"$car_race_dir/$car_race_file.temp_dir_dir\"\
    \n  local car_race_file_temp_dir_dir_full=\"$car_race_dir/$car_race_file.temp_dir_dir.temp\"\
    \n  local car_race_file_temp_dir_dir_dir=\"$car_race_dir/$car_race_file.temp_dir_dir_dir\"\
    \n  local car_race_file_temp_dir_dir_dir_full=\"$car_race_dir/$car_race_file.temp_dir_dir_dir.temp\"\
    \n  local car_race_file_temp_dir_dir_dir_dir=\"$car_race_dir/$car_race_file.temp_dir_dir_dir_dir\"\
    \n  local car_race_file_temp_dir_dir_dir_dir_full=\"$car_race_dir/$car_race_file.temp_dir_dir_dir_dir.temp\"\
    \n  local car_race_file_temp_dir_dir_dir_dir_dir=\"$car_race_dir/$car_race_file.temp_dir_dir_dir_dir_dir\"\
    \n  local car_race_file_temp_dir_dir_dir_dir_dir_full=\"$car_race_dir/$car_race_file.temp_dir_dir_dir_dir.temp\"\
    \n  local car_race_file_temp_dir_dir_dir_dir_dir_dir=\"$car_race_dir/$car_race_file.temp_dir_dir_dir_dir_dir_dir\"\
    \n  local car_race_file_temp_dir_dir_dir_dir_dir_dir_full=\"$car_race_dir/$car_race_file.temp_dir_dir_dir_dir_dir_dir.temp\"\
    \n  local car_race_file_temp_dir_dir_dir_dir_dir_dir_dir_dir=\"$car_race_dir/$car_race_file.temp_dir_dir\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfjflrlrr.sh: line 44: unexpected EOF while looking for matching
    `"''

    /tmp/tmpfjflrlrr.sh: line 48: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions\n    local collision_count\n    local collision_start\n\
    \    local collision_end\n    local collision_length\n    local collision_speed\n\
    \    local collision_direction\n    local collision_start\n    local collision_end\n\
    \    local collision_length\n    local collision_speed\n    local collision_direction\n\
    \    local collision_start\n    local collision_end\n    local collision_length\n\
    \    local collision_speed\n    local collision_direction\n    local collision_start\n\
    \    local collision_end\n    local collision_length\n    local collision_speed\n\
    \    local collision_direction\n    local collision_start\n    local collision_end\n\
    \    local collision_length\n    local collision_speed\n    local collision_direction\n\
    \    local collision_start\n    local collision_end\n    local collision_length\n\
    \    local collision_speed\n    local collision_direction\n    local collision_start\n\
    \    local collision_end\n    local collision_length\n    local collision_speed\n\
    \    local collision_direction\n    local collision_start\n    local collision_end\n\
    \    local collision_length\n    local collision_speed\n    local collision_direction\n\
    \    local collision_start\n    local collision_end\n    local collision_length\n\
    \    local collision_speed\n    local collision_direction\n    local collision_start\n\
    \    local collision_end\n    local collision_length\n    local collision_speed\n\
    \    local collision_direction\n    local collision_start\n    local collision_end\n\
    \    local collision_length\n    local collision_speed\n    local collision_direction\n\
    \    local collision_start\n    local collision_end\n    local collision_length\n\
    \    local collision_speed\n    local collision_direction\n    local collision_start\n\
    \    local collision_end\n    local collision_length\n    local collision_speed\n\
    \    local collision_direction\n    local collision_start\n    local collision_end\n\
    \    local collision_length\n    local collision_speed\n    local collision_direction\n\
    \    local collision_start\n    local collision_end\n    local collision_length\n\
    \    local collision_speed\n    local collision_direction\n    local collision_start\n\
    \    local collision_end\n    local collision_length\n    local collision_speed\n\
    \    local collision_direction\n    local collision_start\n    local \n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_left\n  local collision_right\n  local collision_left_right\n\
    \  local collision_left_left\n  local collision_right_left\n  local collision_right_right\n\
    \  local collision_left_left_right\n  local collision_left_right_left\n  local\
    \ collision_right_left_left\n  local collision_right_right_left\n  local collision_left_left_right_left\n\
    \  local collision_left_right_left_left\n  local collision_right_left_left_left\n\
    \  local collision_right_right_left_left\n  local collision_left_left_right_left_left\n\
    \  local collision_left_right_left_left_left\n  local collision_right_left_left_left_left\n\
    \  local collision_right_right_left_left_left\n  local collision_left_left_right_left_left_left\n\
    \  local collision_left_right_left_left_left_left\n  local collision_right_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left\n  local collision_left_left_right_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_left_left_left_left\n  local collision_left_left_right_left_left_left_left_left_left\n\
    \  local collision_left_right_left_left_left_left_left_left\n  local collision_right_left_left_left_left_left_left_left\n\
    \  local collision_right_right_left_left_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left_speed=100\n\
    \  local car_right_speed=100\n  local car_left_speed2=100\n  local car_right_speed2=100\n\
    \  local car_left_speed3=100\n  local car_right_speed3=100\n  local car_left_speed4=100\n\
    \  local car_right_speed4=100\n  local car_left_speed5=100\n  local car_right_speed5=100\n\
    \  local car_left_speed6=100\n  local car_right_speed6=100\n  local car_left_speed7=100\n\
    \  local car_right_speed7=100\n  local car_left_speed8=100\n  local car_right_speed8=100\n\
    \  local car_left_speed9=100\n  local car_right_speed9=100\n  local car_left_speed10=100\n\
    \  local car_right_speed10=100\n  local car_left_speed11=100\n  local car_right_speed11=100\n\
    \  local car_left_speed12=100\n  local car_right_speed12=100\n  local car_left_speed13=100\n\
    \  local car_right_speed13=100\n  local car_left_speed14=100\n  local car_right_speed14=100\n\
    \  local car_left_speed15=100\n  local car_right_speed15=100\n  local car_left_speed16=100\n\
    \  local car_right_speed16=100\n  local car_left_speed17=100\n  local car_right_speed17=100\n\
    \  local car_left_speed18=100\n  local car_right_speed18=100\n  local car_left_speed19=100\n\
    \  local car_right_speed19=100\n  local car_left_speed20=100\n  local car_right_speed20=100\n\
    \  local car_left_speed21=100\n  local car_right_speed21=100\n  local car_left_speed22=100\n\
    \  local car_right_speed22=100\n  local car_left_speed23=100\n  local car_right_speed23=100\n\
    \  local car_left_speed24=100\n  local car_right_speed24=100\n  local car_left_speed25=100\n\
    \  local car_right_speed25=100\n  local car_left_speed26=100\n  local \n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n \
    \ local j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0i1\n\
    \  local j0j1\n  local i1j0\n  local j1i0\n  local i0j1\n  local j0i1\n  local\
    \ i1j1\n  local j1i1\n  local i0i0\n  local j0j0\n  local i1j0\n  local j1i0\n\
    \  local i0j1\n  local j0i1\n  local i1j1\n  local j1i1\n  local i0i1\n  local\
    \ j0j1\n  local i1j1\n  local j1i1\n  local i0j0\n  local j0i0\n  local i1j0\n\
    \  local j1i0\n  local i0j1\n  local j0i1\n  local i1j1\n  local j1i1\n  local\
    \ i0i0\n  local j0j0\n  local i1j0\n  local j1i0\n  local i0j1\n  local j0i1\n\
    \  local i1j1\n  local j1i1\n  local i0i1\n  local j0j1\n  local i1j1\n  local\
    \ j1i1\n  local i0j0\n  local j0i0\n  local i1j0\n  local j1i0\n  local i0j1\n\
    \  local j0i1\n  local i1j1\n  local j1i1\n  local i0i0\n  local j0j0\n  local\
    \ i1j0\n  local j1i0\n  local i0j1\n  local j0i1\n  local i1j1\n  local j1i1\n\
    \  local i0i1\n  local j0j1\n  local i1j1\n  local j1i1\n  local i0j0\n  local\
    \ j0i0\n  local i1j0\n  local j1i0\n  local i0j1\n  local j0i1\n  local i1j1\n\
    \  local j\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ speed1\n  local speed2\n  local speed3\n  local speed4\n  local speed5\n  local\
    \ speed6\n  local speed7\n  local speed8\n  local speed9\n  local speed10\n  local\
    \ speed11\n  local speed12\n  local speed13\n  local speed14\n  local speed15\n\
    \  local speed16\n  local speed17\n  local speed18\n  local speed19\n  local speed20\n\
    \  local speed21\n  local speed22\n  local speed23\n  local speed24\n  local speed25\n\
    \  local speed26\n  local speed27\n  local speed28\n  local speed29\n  local speed30\n\
    \  local speed31\n  local speed32\n  local speed33\n  local speed34\n  local speed35\n\
    \  local speed36\n  local speed37\n  local speed38\n  local speed39\n  local speed40\n\
    \  local speed41\n  local speed42\n  local speed43\n  local speed44\n  local speed45\n\
    \  local speed46\n  local speed47\n  local speed48\n  local speed49\n  local speed50\n\
    \  local speed51\n  local speed52\n  local speed53\n  local speed54\n  local speed55\n\
    \  local speed56\n  local speed57\n  local speed58\n  local speed59\n  local speed60\n\
    \  local speed61\n  local speed62\n  local speed63\n  local speed64\n  local speed65\n\
    \  local speed66\n  local speed67\n  local speed68\n  local speed69\n  local speed70\n\
    \  local speed71\n  local speed72\n  local speed73\n  local speed74\n  local speed75\n\
    \  local speed76\n  local speed77\n  local speed78\n  local speed79\n  local speed80\n\
    \  local speed81\n  local speed82\n  local speed83\n  local speed84\n  local speed85\n\
    \  local speed86\n  local speed87\n  local speed88\n  local speed89\n  local speed90\n\
    \  local speed91\n  local speed92\n  local speed93\n  local speed94\n  local speed95\n\
    \  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"car_race_$n.txt\"\
    \n  local car_race_file_temp=\"car_race_temp_$n.txt\"\n  local car_race_file_temp2=\"\
    car_race_temp2_$n.txt\"\n  local car_race_file_temp3=\"car_race_temp3_$n.txt\"\
    \n  local car_race_file_temp4=\"car_race_temp4_$n.txt\"\n  local car_race_file_temp5=\"\
    car_race_temp5_$n.txt\"\n  local car_race_file_temp6=\"car_race_temp6_$n.txt\"\
    \n  local car_race_file_temp7=\"car_race_temp7_$n.txt\"\n  local car_race_file_temp8=\"\
    car_race_temp8_$n.txt\"\n  local car_race_file_temp9=\"car_race_temp9_$n.txt\"\
    \n  local car_race_file_temp10=\"car_race_temp10_$n.txt\"\n  local car_race_file_temp11=\"\
    car_race_temp11_$n.txt\"\n  local car_race_file_temp12=\"car_race_temp12_$n.txt\"\
    \n  local car_race_file_temp13=\"car_race_temp13_$n.txt\"\n  local car_race_file_temp14=\"\
    car_race_temp14_$n.txt\"\n  local car_race_file_temp15=\"car_race_temp15_$n.txt\"\
    \n  local car_race_file_temp16=\"car_race_temp16_$n.txt\"\n  local car_race_file_temp17=\"\
    car_race_temp17_$n.txt\"\n  local car_race_file_temp18=\"car_race_temp18_$n.txt\"\
    \n  local car_race_file_temp19=\"car_race_temp19_$n.txt\"\n  local car_race_file_temp20=\"\
    car_race_temp20_$n.txt\"\n  local car_race_file_temp21=\"car_race_temp21_$n.txt\"\
    \n  local car_race_file_temp22=\"car_race_temp22_$n.txt\"\n  local car_race_file_temp23=\"\
    car_race_temp23_$n.txt\"\n  local car_race_file_temp24=\"car_race_temp24_$n.txt\"\
    \n  local car_ra\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local \n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"car_race.txt\"\
    \n  local car_race_collision_count=0\n  local car_race_collision_count_file=\"\
    car_race_collision_count.txt\"\n  local car_race_collision_count_file_temp=\"\
    car_race_collision_count_temp.txt\"\n  local car_race_collision_count_file_temp2=\"\
    car_race_collision_count_temp2.txt\"\n  local car_race_collision_count_file_temp3=\"\
    car_race_collision_count_temp3.txt\"\n  local car_race_collision_count_file_temp4=\"\
    car_race_collision_count_temp4.txt\"\n  local car_race_collision_count_file_temp5=\"\
    car_race_collision_count_temp5.txt\"\n  local car_race_collision_count_file_temp6=\"\
    car_race_collision_count_temp6.txt\"\n  local car_race_collision_count_file_temp7=\"\
    car_race_collision_count_temp7.txt\"\n  local car_race_collision_count_file_temp8=\"\
    car_race_collision_count_temp8.txt\"\n  local car_race_collision_count_file_temp9=\"\
    car_race_collision_count_temp9.txt\"\n  local car_race_collision_count_file_temp10=\"\
    car_race_collision_count_temp10.txt\"\n  local car_race_collision_count_file_temp11=\"\
    car_race_collision_count_temp11.txt\"\n  local car_race_collision_count_file_temp12=\"\
    car_race_collision_count_temp12.txt\"\n  local car_race_collision_count_file_temp13=\"\
    car_race_collision_count_temp13.txt\"\n  local car_race_collision_count_file_temp14=\"\
    car_race_collision_count_temp14.txt\"\n  local car_race_collision_count_file_temp15=\"\
    car_race_collision_count_temp15.txt\"\n  local car_race_collision_count_file_temp16=\"\
    car_race_collision_count_temp16.txt\"\n  local car_race_collision_count_file_temp17=\"\
    car_race_collision_count_temp17.txt\"\n  local car_race_collision_count_file_temp18=\"\
    car_race_collision_count_temp18.txt\"\n  local car_race_collision_count_file_temp19=\"\
    car_race_collision_count_temp19\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx9holb2t.sh: line 48: unexpected EOF while looking for matching
    `"''

    /tmp/tmpx9holb2t.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions\n    local i1\n    local j1\n    local i0\n    local j0\n\
    \    local i1\n    local j1\n    local i0\n    local j0\n    local i1\n    local\
    \ j1\n    local i0\n    local j0\n    local i1\n    local j1\n    local i0\n \
    \   local j0\n    local i1\n    local j1\n    local i0\n    local j0\n    local\
    \ i1\n    local j1\n    local i0\n    local j0\n    local i1\n    local j1\n \
    \   local i0\n    local j0\n    local i1\n    local j1\n    local i0\n    local\
    \ j0\n    local i1\n    local j1\n    local i0\n    local j0\n    local i1\n \
    \   local j1\n    local i0\n    local j0\n    local i1\n    local j1\n    local\
    \ i0\n    local j0\n    local i1\n    local j1\n    local i0\n    local j0\n \
    \   local i1\n    local j1\n    local i0\n    local j0\n    local i1\n    local\
    \ j1\n    local i0\n    local j0\n    local i1\n    local j1\n    local i0\n \
    \   local j0\n    local i1\n    local j1\n    local i0\n    local j0\n    local\
    \ i1\n    local j1\n    local i0\n    local j0\n    local i1\n    local j1\n \
    \   local i0\n    local j0\n    local i1\n    local j1\n    local i0\n    local\
    \ j0\n    local i1\n    local j1\n    local i0\n    local j0\n    local i1\n \
    \   local j1\n    local i0\n    local j0\n    local i1\n    local j1\n    local\
    \ i0\n    local j0\n    local i1\n    local j1\n    local i0\n    local j0\n \
    \   local i1\n    local j1\n    local i0\n    local j0\n    local i1\n    local\
    \ j1\n    local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left\n  local\
    \ car_right\n  local collisions\n  local i\n  local j\n  local k\n  local collision_left\n\
    \  local collision_right\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_points\n  local collision_points1\n  local collision_points2\n\
    \  local collision_points3\n  local collision_points4\n  local collision_points5\n\
    \  local collision_points6\n  local collision_points7\n  local collision_points8\n\
    \  local collision_points9\n  local collision_points10\n  local collision_points11\n\
    \  local collision_points12\n  local collision_points13\n  local collision_points14\n\
    \  local collision_points15\n  local collision_points16\n  local collision_points17\n\
    \  local collision_points18\n  local collision_points19\n  local collision_points20\n\
    \  local collision_points21\n  local collision_points22\n  local collision_points23\n\
    \  local collision_points24\n  local collision_points25\n  local collision_points26\n\
    \  local collision_points27\n  local collision_points28\n  local collision_points29\n\
    \  local collision_points30\n  local collision_points31\n  local collision_points32\n\
    \  local collision_points33\n  local collision_points34\n  local collision_points35\n\
    \  local collision_points36\n  local collision_points37\n  local collision_points38\n\
    \  local collision_points39\n  local collision_points40\n  local collision_points41\n\
    \  local collision_points42\n  local collision_points43\n  local collision_points44\n\
    \  local collision_points45\n  local collision_points46\n  local collision_points47\n\
    \  local collision_points48\n  local collision_points49\n  local collision_points50\n\
    \  local collision_points51\n  local collision_points52\n  local collision_points53\n\
    \  local collision_points54\n  local collision_points55\n  local collision_points56\n\
    \  local collision_points57\n  local collision_points58\n  local collision_points59\n\
    \  local collision_points60\n  local collision_points61\n  local collision_points62\n\
    \  local collision_points63\n  local collision_points64\n  local collision_points65\n\
    \  local collision_points66\n  local collision_points67\n  local collision_points68\n\
    \  local collision_points69\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local i\n  local j\n  local k\n  local collisions=0\n  local collision_distance\n\
    \  local collision_direction\n  local collision_distance2\n  local collision_direction2\n\
    \  local collision_distance3\n  local collision_direction3\n  local collision_distance4\n\
    \  local collision_direction4\n  local collision_distance5\n  local collision_direction5\n\
    \  local collision_distance6\n  local collision_direction6\n  local collision_distance7\n\
    \  local collision_direction7\n  local collision_distance8\n  local collision_direction8\n\
    \  local collision_distance9\n  local collision_direction9\n  local collision_distance10\n\
    \  local collision_direction10\n  local collision_distance11\n  local collision_direction11\n\
    \  local collision_distance12\n  local collision_direction12\n  local collision_distance13\n\
    \  local collision_direction13\n  local collision_distance14\n  local collision_direction14\n\
    \  local collision_distance15\n  local collision_direction15\n  local collision_distance16\n\
    \  local collision_direction16\n  local collision_distance17\n  local collision_direction17\n\
    \  local collision_distance18\n  local collision_direction18\n  local collision_distance19\n\
    \  local collision_direction19\n  local collision_distance20\n  local collision_direction20\n\
    \  local collision_distance21\n  local collision_direction21\n  local collision_distance22\n\
    \  local collision_direction22\n  local collision_distance23\n  local collision_direction23\n\
    \  local collision_distance24\n  local collision_direction24\n  local collision_distance25\n\
    \  local collision_direction25\n  local collision_distance26\n  local collision_direction26\n\
    \  local collision_distance27\n  local collision_direction27\n  local collision_distance28\n\
    \  local collision_direction28\n  local collision_distance29\n  local collision_direction29\n\
    \  local collision_distance30\n  local collision_direction30\n  local collision_distance31\n\
    \  local collision_direction31\n  local collision_distance32\n  local collision_direction32\n\
    \  local collision_distance33\n  local collision_direction33\n  local collision_distance34\n\
    \  local collision_direction34\n  local \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_left\n  local collision_right\n\
    \  local collision_left_count\n  local collision_right_count\n  local collision_left_speed\n\
    \  local collision_right_speed\n  local collision_left_speed2\n  local collision_right_speed2\n\
    \  local collision_left_speed3\n  local collision_right_speed3\n  local collision_left_speed4\n\
    \  local collision_right_speed4\n  local collision_left_speed5\n  local collision_right_speed5\n\
    \  local collision_left_speed6\n  local collision_right_speed6\n  local collision_left_speed7\n\
    \  local collision_right_speed7\n  local collision_left_speed8\n  local collision_right_speed8\n\
    \  local collision_left_speed9\n  local collision_right_speed9\n  local collision_left_speed10\n\
    \  local collision_right_speed10\n  local collision_left_speed11\n  local collision_right_speed11\n\
    \  local collision_left_speed12\n  local collision_right_speed12\n  local collision_left_speed13\n\
    \  local collision_right_speed13\n  local collision_left_speed14\n  local collision_right_speed14\n\
    \  local collision_left_speed15\n  local collision_right_speed15\n  local collision_left_speed16\n\
    \  local collision_right_speed16\n  local collision_left_speed17\n  local collision_right_speed17\n\
    \  local collision_left_speed18\n  local collision_right_speed18\n  local collision_left_speed19\n\
    \  local collision_right_speed19\n  local collision_left_speed20\n  local collision_right_speed20\n\
    \  local collision_left_speed21\n  local collision_right_speed21\n  local collision_left_speed22\n\
    \  local collision_right_speed22\n  local collision_left_speed23\n  local collision_right_speed23\n\
    \  local collision_left_speed24\n  local collision_right_speed24\n  local collision_left_speed25\n\
    \  local collision_right_speed25\n  local collision_left_speed26\n  local collision_right_speed26\n\
    \  local collision_left_speed27\n  local collision_right_speed27\n  local collision_left_speed28\n\
    \  local collision_right_speed28\n  local collision_left_speed29\n  local collision_right_speed29\n\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ speed\n  local xleft\n  local yleft\n  local xright\n  local yright\n  local\
    \ xleft2\n  local yleft2\n  local xright2\n  local yright2\n  local xleft3\n \
    \ local yleft3\n  local xright3\n  local yright3\n  local xleft4\n  local yleft4\n\
    \  local xright4\n  local yright4\n  local xleft5\n  local yleft5\n  local xright5\n\
    \  local yright5\n  local xleft6\n  local yleft6\n  local xright6\n  local yright6\n\
    \  local xleft7\n  local yleft7\n  local xright7\n  local yright7\n  local xleft8\n\
    \  local yleft8\n  local xright8\n  local yright8\n  local xleft9\n  local yleft9\n\
    \  local xright9\n  local yright9\n  local xleft10\n  local yleft10\n  local xright10\n\
    \  local yright10\n  local xleft11\n  local yleft11\n  local xright11\n  local\
    \ yright11\n  local xleft12\n  local yleft12\n  local xright12\n  local yright12\n\
    \  local xleft13\n  local yleft13\n  local xright13\n  local yright13\n  local\
    \ xleft14\n  local yleft14\n  local xright14\n  local yright14\n  local xleft15\n\
    \  local yleft15\n  local xright15\n  local yright15\n  local xleft16\n  local\
    \ yleft16\n  local xright16\n  local yright16\n  local xleft17\n  local yleft17\n\
    \  local xright17\n  local yright17\n  local xleft18\n  local yleft18\n  local\
    \ xright18\n  local yright18\n  local xleft19\n  local yleft19\n  local xright19\n\
    \  local yright19\n  local xleft20\n  local yleft20\n  local xright20\n  local\
    \ yright20\n  local xleft21\n  local yleft21\n  local xright21\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    local collision_distance\n    local collision_distance2\n\
    \    local collision_distance3\n    local collision_distance4\n    local collision_distance5\n\
    \    local collision_distance6\n    local collision_distance7\n    local collision_distance8\n\
    \    local collision_distance9\n    local collision_distance10\n    local collision_distance11\n\
    \    local collision_distance12\n    local collision_distance13\n    local collision_distance14\n\
    \    local collision_distance15\n    local collision_distance16\n    local collision_distance17\n\
    \    local collision_distance18\n    local collision_distance19\n    local collision_distance20\n\
    \    local collision_distance21\n    local collision_distance22\n    local collision_distance23\n\
    \    local collision_distance24\n    local collision_distance25\n    local collision_distance26\n\
    \    local collision_distance27\n    local collision_distance28\n    local collision_distance29\n\
    \    local collision_distance30\n    local collision_distance31\n    local collision_distance32\n\
    \    local collision_distance33\n    local collision_distance34\n    local collision_distance35\n\
    \    local collision_distance36\n    local collision_distance37\n    local collision_distance38\n\
    \    local collision_distance39\n    local collision_distance40\n    local collision_distance41\n\
    \    local collision_distance42\n    local collision_distance43\n    local collision_distance44\n\
    \    local collision_distance45\n    local collision_distance46\n    local collision_distance47\n\
    \    local collision_distance48\n    local collision_distance49\n    local collision_distance50\n\
    \    local collision_distance51\n    local collision_distance52\n    local collision_distance53\n\
    \    local collision_distance54\n    local collision_distance55\n    local collision_distance56\n\
    \    local collision_distance57\n    local collision_distance58\n    local collision_distance59\n\
    \    local collision_distance60\n    local collision_distance61\n    local collision_distance62\n\
    \    local collision_distance63\n    local collision_distance64\n    local collision_distance65\n\
    \    local collision_distance66\n    local collision_distance67\n    local collision_distance68\n\
    \    local collision_distance69\n    local collision_distance70\n    local collision\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_min\n \
    \ local collision_distance_max\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \  local collision\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_start\n  local collision_end\n\
    \  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  local collision_start\n  local collision_end\n  local collision_length\n  local\
    \ collision_speed\n  local collision_start\n  local collision_end\n  local collision_length\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_speed\n  local collision_start\n  local\
    \ collision_end\n  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  local collision_start\n  local collision_end\n  local collision_length\n  local\
    \ collision_speed\n  local collision_start\n  local collision_end\n  local collision_length\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_speed\n  local collision_start\n  local\
    \ collision_end\n  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  local collision_start\n  local collision_end\n  local collision_length\n  local\
    \ collision_speed\n  local collision_start\n  local collision_end\n  local collision_length\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_speed\n  local collision_start\n  local\
    \ collision_end\n  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local collision\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x1 y1 x2 y2\n  local\
    \ x3 y3 x4 y4\n  local x5 y5 x6 y6\n  local x7 y7 x8 y8\n  local x9 y9 x10 y10\n\
    \  local x11 y11 x12 y12\n  local x13 y13 x14 y14\n  local x15 y15 x16 y16\n \
    \ local x17 y17 x18 y18\n  local x19 y19 x20 y20\n  local x21 y21 x22 y22\n  local\
    \ x23 y23 x24 y24\n  local x25 y25 x26 y26\n  local x27 y27 x28 y28\n  local x29\
    \ y29 x30 y30\n  local x31 y31 x32 y32\n  local x33 y33 x34 y34\n  local x35 y35\
    \ x36 y36\n  local x37 y37 x38 y38\n  local x39 y39 x40 y40\n  local x41 y41 x42\
    \ y42\n  local x43 y43 x44 y44\n  local x45 y45 x46 y46\n  local x47 y47 x48 y48\n\
    \  local x49 y49 x50 y50\n  local x51 y51 x52 y52\n  local x53 y53 x54 y54\n \
    \ local x55 y55 x56 y56\n  local x57 y57 x58 y58\n  local x59 y59 x60 y60\n  local\
    \ x61 y61 x62 y62\n  local x63 y63 x64 y64\n  local x65 y65 x66 y66\n  local x67\
    \ y67 x68 y68\n  local x69 y69 x70 y70\n  local x71 y71 x72 y72\n  local x73 y73\
    \ x74 y74\n  local x75 y75 x76 y76\n  local x77 y77 x78 y78\n  local x79 y79 x80\
    \ y80\n  local x81 y81 x82 y82\n\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  local collision_start\n  local collision_end\n  local collision_length\n  local\
    \ collision_speed\n  local collision_start\n  local collision_end\n  local collision_length\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_speed\n  local collision_start\n  local\
    \ collision_end\n  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  local collision_start\n  local collision_end\n  local collision_length\n  local\
    \ collision_speed\n  local collision_start\n  local collision_end\n  local collision_length\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_speed\n  local collision_start\n  local\
    \ collision_end\n  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  local collision_start\n  local collision_end\n  local collision_length\n  local\
    \ collision_speed\n  local collision_start\n  local collision_end\n  local collision_length\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_speed\n  local collision_start\n  local\
    \ collision_end\n  local collision_length\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_speed\n\
    \  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  \n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for (( i=0; i<n; i++ )); do\n        for (( j=i;\
    \ j<n; j++ )); do\n            if [ $(( i+1 )) -eq $(( j+1 )) ]; then\n      \
    \          collisions=$(( collisions + 1 ))\n            fi\n        done\n  \
    \  done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_points\n  local collision_points1\n  local collision_points2\n\
    \  local collision_points3\n  local collision_points4\n  local collision_points5\n\
    \  local collision_points6\n  local collision_points7\n  local collision_points8\n\
    \  local collision_points9\n  local collision_points10\n  local collision_points11\n\
    \  local collision_points12\n  local collision_points13\n  local collision_points14\n\
    \  local collision_points15\n  local collision_points16\n  local collision_points17\n\
    \  local collision_points18\n  local collision_points19\n  local collision_points20\n\
    \  local collision_points21\n  local collision_points22\n  local collision_points23\n\
    \  local collision_points24\n  local collision_points25\n  local collision_points26\n\
    \  local collision_points27\n  local collision_points28\n  local collision_points29\n\
    \  local collision_points30\n  local collision_points31\n  local collision_points32\n\
    \  local collision_points33\n  local collision_points34\n  local collision_points35\n\
    \  local collision_points36\n  local collision_points37\n  local collision_points38\n\
    \  local collision_points39\n  local collision_points40\n  local collision_points41\n\
    \  local collision_points42\n  local collision_points43\n  local collision_points44\n\
    \  local collision_points45\n  local collision_points46\n  local collision_points47\n\
    \  local collision_points48\n  local collision_points49\n  local collision_points50\n\
    \  local collision_points51\n  local collision_points52\n  local collision_points53\n\
    \  local collision_points54\n  local collision_points55\n  local collision_points56\n\
    \  local collision_points57\n  local collision_points58\n  local collision_points59\n\
    \  local collision_points60\n  local collision_points61\n  local collision_points62\n\
    \  local collision_points63\n  local collision_points64\n  local collision_points65\n\
    \  local collision_points66\n  local collision_points67\n  local collision_points68\n\
    \  local collision_points69\n  local collision_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local x\n  local y\n  local z\n  local xleft\n  local yleft\n  local zleft\n\
    \  local xright\n  local yright\n  local zright\n  local xspeed\n  local yspeed\n\
    \  local zspeed\n  local xspeedleft\n  local yspeedleft\n  local zspeedleft\n\
    \  local xspeedright\n  local yspeedright\n  local zspeedright\n  local xspeedleft\n\
    \  local yspeedleft\n  local zspeedleft\n  local xspeedright\n  local yspeedright\n\
    \  local zspeedright\n  local xspeedleft\n  local yspeedleft\n  local zspeedleft\n\
    \  local xspeedright\n  local yspeedright\n  local zspeedright\n  local xspeedleft\n\
    \  local yspeedleft\n  local zspeedleft\n  local xspeedright\n  local yspeedright\n\
    \  local zspeedright\n  local xspeedleft\n  local yspeedleft\n  local zspeedleft\n\
    \  local xspeedright\n  local yspeedright\n  local zspeedright\n  local xspeedleft\n\
    \  local yspeedleft\n  local zspeedleft\n  local xspeedright\n  local yspeedright\n\
    \  local zspeedright\n  local xspeedleft\n  local yspeedleft\n  local zspeedleft\n\
    \  local xspeedright\n  local yspeedright\n  local zspeedright\n  local xspeedleft\n\
    \  local yspeedleft\n  local zspeedleft\n  local xspeedright\n  local yspeedright\n\
    \  local zspeedright\n  local xspeedleft\n  local yspeedleft\n  local zspeedleft\n\
    \  local xspeedright\n  local yspeedright\n  local zspeedright\n  local xspeedleft\n\
    \  local yspeedleft\n  local zspeedleft\n  local xspeedright\n  local yspeedright\n\
    \  local zspeedright\n  local xspeedleft\n  local yspeedleft\n  local zspeedleft\n\
    \  local xspeedright\n  local yspeedright\n  local zspeedright\n  local xspeedleft\n\
    \  local yspeedleft\n  local zspeedleft\n  local xspeedright\n  local yspeedright\n\
    \  local zspeedright\n  local xspeedleft\n  \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_points\n  local collision_points1\n  local collision_points2\n\
    \  local collision_points3\n  local collision_points4\n  local collision_points5\n\
    \  local collision_points6\n  local collision_points7\n  local collision_points8\n\
    \  local collision_points9\n  local collision_points10\n  local collision_points11\n\
    \  local collision_points12\n  local collision_points13\n  local collision_points14\n\
    \  local collision_points15\n  local collision_points16\n  local collision_points17\n\
    \  local collision_points18\n  local collision_points19\n  local collision_points20\n\
    \  local collision_points21\n  local collision_points22\n  local collision_points23\n\
    \  local collision_points24\n  local collision_points25\n  local collision_points26\n\
    \  local collision_points27\n  local collision_points28\n  local collision_points29\n\
    \  local collision_points30\n  local collision_points31\n  local collision_points32\n\
    \  local collision_points33\n  local collision_points34\n  local collision_points35\n\
    \  local collision_points36\n  local collision_points37\n  local collision_points38\n\
    \  local collision_points39\n  local collision_points40\n  local collision_points41\n\
    \  local collision_points42\n  local collision_points43\n  local collision_points44\n\
    \  local collision_points45\n  local collision_points46\n  local collision_points47\n\
    \  local collision_points48\n  local collision_points49\n  local collision_points50\n\
    \  local collision_points51\n  local collision_points52\n  local collision_points53\n\
    \  local collision_points54\n  local collision_points55\n  local collision_points56\n\
    \  local collision_points57\n  local collision_points58\n  local collision_points59\n\
    \  local collision_points60\n  local collision_points61\n  local collision_points62\n\
    \  local collision_points63\n  local collision_points64\n  local collision_points65\n\
    \  local collision_points66\n  local collision_points67\n  local collision_points68\n\
    \  local collision_points69\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_max\n  local collision_min\n\
    \  local collision_sum\n  local collision_sum2\n  local collision_sum3\n  local\
    \ collision_sum4\n  local collision_sum5\n  local collision_sum6\n  local collision_sum7\n\
    \  local collision_sum8\n  local collision_sum9\n  local collision_sum10\n  local\
    \ collision_sum11\n  local collision_sum12\n  local collision_sum13\n  local collision_sum14\n\
    \  local collision_sum15\n  local collision_sum16\n  local collision_sum17\n \
    \ local collision_sum18\n  local collision_sum19\n  local collision_sum20\n  local\
    \ collision_sum21\n  local collision_sum22\n  local collision_sum23\n  local collision_sum24\n\
    \  local collision_sum25\n  local collision_sum26\n  local collision_sum27\n \
    \ local collision_sum28\n  local collision_sum29\n  local collision_sum30\n  local\
    \ collision_sum31\n  local collision_sum32\n  local collision_sum33\n  local collision_sum34\n\
    \  local collision_sum35\n  local collision_sum36\n  local collision_sum37\n \
    \ local collision_sum38\n  local collision_sum39\n  local collision_sum40\n  local\
    \ collision_sum41\n  local collision_sum42\n  local collision_sum43\n  local collision_sum44\n\
    \  local collision_sum45\n  local collision_sum46\n  local collision_sum47\n \
    \ local collision_sum48\n  local collision_sum49\n  local collision_sum50\n  local\
    \ collision_sum51\n  local collision_sum52\n  local collision_sum53\n  local collision_sum54\n\
    \  local collision_sum55\n  local collision_sum56\n  local collision_sum57\n \
    \ local collision_sum58\n  local collision_sum59\n  local collision_sum60\n  local\
    \ collision_sum61\n  local collision_sum62\n  local collision_sum63\n  local collision_sum64\n\
    \  local collision_sum65\n  local collision_sum66\n  local collision_sum67\n \
    \ local collision_sum68\n  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local x_left\n  local y_left\n  local z_left\n  local x_right\n  local\
    \ y_right\n  local z_right\n  local x_left_right\n  local y_left_right\n  local\
    \ z_left_right\n  local x_right_left\n  local y_right_left\n  local z_right_left\n\
    \  local x_left_right_left\n  local y_left_right_left\n  local z_left_right_left\n\
    \  local x_right_left_left\n  local y_right_left_left\n  local z_right_left_left\n\
    \  local x_left_right_left_left\n  local y_left_right_left_left\n  local z_left_right_left_left\n\
    \  local x_right_left_left_left\n  local y_right_left_left_left\n  local z_right_left_left_left\n\
    \  local x_left_right_left_left_left\n  local y_left_right_left_left_left\n  local\
    \ z_left_right_left_left_left\n  local x_right_left_left_left_left\n  local y_right_left_left_left_left\n\
    \  local z_right_left_left_left_left\n  local x_left_right_left_left_left_left\n\
    \  local y_left_right_left_left_left_left\n  local z_left_right_left_left_left_left\n\
    \  local x_right_left_left_left_left_left\n  local y_right_left_left_left_left_left\n\
    \  local z_right_left_left_left_left_left\n  local x_left_right_left_left_left_left_left\n\
    \  local y_left_right_left_left_left_left_left\n  local z_left_right_left_left_left_left_left\n\
    \  local x_right_left_left_left_left_left_left_left\n  local y_right_left_left_left_left_left_left_left\n\
    \  local z_right_left_left_left_left_left_left_left\n  local x_left_right_left_left_left_left_left_left\n\
    \  local y_left_right_left_left_left_left_left_left\n  local z_left_right_left_left_left_left_left_left\n\
    \  local x_right_left_left_left_left_left_left_left\n  local y_right_left_left_left_left_left_left_left\n\
    \  local z_right_left_left_left_left_left_left_left\n  local x_left_right_left_left_left_left_left_left_left\n\
    \  local y_left_right_left_left_left_left_left_left_left\n  local z_left_right_left_left_left_left_left_left_left\n\
    \  local x_right_left_left_left_left_left_left_left_left_left\n  local y_right_left_left_left_left_left_left_left_left_left\n\
    \  local z_right_left_left_left_left_left_left_left_left\n  local x_\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_sum\n  local collision_sum2\n  local collision_sum3\n\
    \  local collision_sum4\n  local collision_sum5\n  local collision_sum6\n  local\
    \ collision_sum7\n  local collision_sum8\n  local collision_sum9\n  local collision_sum10\n\
    \  local collision_sum11\n  local collision_sum12\n  local collision_sum13\n \
    \ local collision_sum14\n  local collision_sum15\n  local collision_sum16\n  local\
    \ collision_sum17\n  local collision_sum18\n  local collision_sum19\n  local collision_sum20\n\
    \  local collision_sum21\n  local collision_sum22\n  local collision_sum23\n \
    \ local collision_sum24\n  local collision_sum25\n  local collision_sum26\n  local\
    \ collision_sum27\n  local collision_sum28\n  local collision_sum29\n  local collision_sum30\n\
    \  local collision_sum31\n  local collision_sum32\n  local collision_sum33\n \
    \ local collision_sum34\n  local collision_sum35\n  local collision_sum36\n  local\
    \ collision_sum37\n  local collision_sum38\n  local collision_sum39\n  local collision_sum40\n\
    \  local collision_sum41\n  local collision_sum42\n  local collision_sum43\n \
    \ local collision_sum44\n  local collision_sum45\n  local collision_sum46\n  local\
    \ collision_sum47\n  local collision_sum48\n  local collision_sum49\n  local collision_sum50\n\
    \  local collision_sum51\n  local collision_sum52\n  local collision_sum53\n \
    \ local collision_sum54\n  local collision_sum55\n  local collision_sum56\n  local\
    \ collision_sum57\n  local collision_sum58\n  local collision_sum59\n  local collision_sum60\n\
    \  local collision_sum61\n  local collision_sum62\n  local collision_sum63\n \
    \ local collision_sum64\n  local collision_sum65\n  local collision_sum66\n  local\
    \ collision_sum67\n  local collision_sum68\n  local collision_sum69\n  local collision_sum70\n\
    \  local collision_\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n  local collision_points\n  local collision_points\n\
    \  local collision_points\n\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance2\n  local collision_speed2\n  local collision_direction2\n\
    \  local collision_distance3\n  local collision_speed3\n  local collision_direction3\n\
    \  local collision_distance4\n  local collision_speed4\n  local collision_direction4\n\
    \  local collision_distance5\n  local collision_speed5\n  local collision_direction5\n\
    \  local collision_distance6\n  local collision_speed6\n  local collision_direction6\n\
    \  local collision_distance7\n  local collision_speed7\n  local collision_direction7\n\
    \  local collision_distance8\n  local collision_speed8\n  local collision_direction8\n\
    \  local collision_distance9\n  local collision_speed9\n  local collision_direction9\n\
    \  local collision_distance10\n  local collision_speed10\n  local collision_direction10\n\
    \  local collision_distance11\n  local collision_speed11\n  local collision_direction11\n\
    \  local collision_distance12\n  local collision_speed12\n  local collision_direction12\n\
    \  local collision_distance13\n  local collision_speed13\n  local collision_direction13\n\
    \  local collision_distance14\n  local collision_speed14\n  local collision_direction14\n\
    \  local collision_distance15\n  local collision_speed15\n  local collision_direction15\n\
    \  local collision_distance16\n  local collision_speed16\n  local collision_direction16\n\
    \  local collision_distance17\n  local collision_speed17\n  local collision_direction17\n\
    \  local collision_distance18\n  local collision_speed18\n  local collision_direction18\n\
    \  local collision_distance19\n  local collision_speed19\n  local collision_direction19\n\
    \  local collision_distance20\n  local collision_speed20\n  local collision_direction20\n\
    \  local collision_distance21\n  local collision_speed21\n  local collision_direction21\n\
    \  local collision_distance22\n  local collision_speed22\n  local collision_direction22\n\
    \  local collision_distance23\n  local collision_speed23\n  local collision_direction23\n\
    \  local collision_distance24\n  local collision_speed\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_distance2\n  local collision_distance3\n\
    \  local collision_distance4\n  local collision_distance5\n  local collision_distance6\n\
    \  local collision_distance7\n  local collision_distance8\n  local collision_distance9\n\
    \  local collision_distance10\n  local collision_distance11\n  local collision_distance12\n\
    \  local collision_distance13\n  local collision_distance14\n  local collision_distance15\n\
    \  local collision_distance16\n  local collision_distance17\n  local collision_distance18\n\
    \  local collision_distance19\n  local collision_distance20\n  local collision_distance21\n\
    \  local collision_distance22\n  local collision_distance23\n  local collision_distance24\n\
    \  local collision_distance25\n  local collision_distance26\n  local collision_distance27\n\
    \  local collision_distance28\n  local collision_distance29\n  local collision_distance30\n\
    \  local collision_distance31\n  local collision_distance32\n  local collision_distance33\n\
    \  local collision_distance34\n  local collision_distance35\n  local collision_distance36\n\
    \  local collision_distance37\n  local collision_distance38\n  local collision_distance39\n\
    \  local collision_distance40\n  local collision_distance41\n  local collision_distance42\n\
    \  local collision_distance43\n  local collision_distance44\n  local collision_distance45\n\
    \  local collision_distance46\n  local collision_distance47\n  local collision_distance48\n\
    \  local collision_distance49\n  local collision_distance50\n  local collision_distance51\n\
    \  local collision_distance52\n  local collision_distance53\n  local collision_distance54\n\
    \  local collision_distance55\n  local collision_distance56\n  local collision_distance57\n\
    \  local collision_distance58\n  local collision_distance59\n  local collision_distance60\n\
    \  local collision_distance61\n  local collision_distance62\n  local collision_distance63\n\
    \  local collision_distance64\n  local collision_distance65\n  local collision_distance66\n\
    \  local collision_distance67\n  local collision_distance68\n  local collision_distance69\n\
    \  local collision_distance70\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance2\n  local collision_speed2\n  local collision_direction2\n\
    \  local collision_distance3\n  local collision_speed3\n  local collision_direction3\n\
    \  local collision_distance4\n  local collision_speed4\n  local collision_direction4\n\
    \  local collision_distance5\n  local collision_speed5\n  local collision_direction5\n\
    \  local collision_distance6\n  local collision_speed6\n  local collision_direction6\n\
    \  local collision_distance7\n  local collision_speed7\n  local collision_direction7\n\
    \  local collision_distance8\n  local collision_speed8\n  local collision_direction8\n\
    \  local collision_distance9\n  local collision_speed9\n  local collision_direction9\n\
    \  local collision_distance10\n  local collision_speed10\n  local collision_direction10\n\
    \  local collision_distance11\n  local collision_speed11\n  local collision_direction11\n\
    \  local collision_distance12\n  local collision_speed12\n  local collision_direction12\n\
    \  local collision_distance13\n  local collision_speed13\n  local collision_direction13\n\
    \  local collision_distance14\n  local collision_speed14\n  local collision_direction14\n\
    \  local collision_distance15\n  local collision_speed15\n  local collision_direction15\n\
    \  local collision_distance16\n  local collision_speed16\n  local collision_direction16\n\
    \  local collision_distance17\n  local collision_speed17\n  local collision_direction17\n\
    \  local collision_distance18\n  local collision_speed18\n  local collision_direction18\n\
    \  local collision_distance19\n  local collision_speed19\n  local collision_direction19\n\
    \  local collision_distance20\n  local collision_speed20\n  local collision_direction20\n\
    \  local collision_distance21\n  local collision_speed21\n  local collision_direction21\n\
    \  local collision_distance22\n  local collision_speed22\n  local collision_direction22\n\
    \  local collision_distance23\n  local collision_speed23\n  local collision_direction23\n\
    \  local collision_distance24\n  local collision_speed\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ speed2\n  local speed3\n  local speed4\n  local speed5\n  local speed6\n  local\
    \ speed7\n  local speed8\n  local speed9\n  local speed10\n  local speed11\n \
    \ local speed12\n  local speed13\n  local speed14\n  local speed15\n  local speed16\n\
    \  local speed17\n  local speed18\n  local speed19\n  local speed20\n  local speed21\n\
    \  local speed22\n  local speed23\n  local speed24\n  local speed25\n  local speed26\n\
    \  local speed27\n  local speed28\n  local speed29\n  local speed30\n  local speed31\n\
    \  local speed32\n  local speed33\n  local speed34\n  local speed35\n  local speed36\n\
    \  local speed37\n  local speed38\n  local speed39\n  local speed40\n  local speed41\n\
    \  local speed42\n  local speed43\n  local speed44\n  local speed45\n  local speed46\n\
    \  local speed47\n  local speed48\n  local speed49\n  local speed50\n  local speed51\n\
    \  local speed52\n  local speed53\n  local speed54\n  local speed55\n  local speed56\n\
    \  local speed57\n  local speed58\n  local speed59\n  local speed60\n  local speed61\n\
    \  local speed62\n  local speed63\n  local speed64\n  local speed65\n  local speed66\n\
    \  local speed67\n  local speed68\n  local speed69\n  local speed70\n  local speed71\n\
    \  local speed72\n  local speed73\n  local speed74\n  local speed75\n  local speed76\n\
    \  local speed77\n  local speed78\n  local speed79\n  local speed80\n  local speed81\n\
    \  local speed82\n  local speed83\n  local speed84\n  local speed85\n  local speed86\n\
    \  local speed87\n  local speed88\n  local speed89\n  local speed90\n  local speed91\n\
    \  local speed92\n  local speed93\n  local speed94\n  local speed95\n  local speed96\n\
    \  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_left\n\
    \  local collision_distance_right\n  local collision_distance_left_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local xleft\n  local xright\n  local yleft\n  local yright\n  local zleft\n\
    \  local zright\n  local xleft2\n  local xright2\n  local yleft2\n  local yright2\n\
    \  local zleft2\n  local zright2\n  local xleft3\n  local xright3\n  local yleft3\n\
    \  local yright3\n  local zleft3\n  local zright3\n  local xleft4\n  local xright4\n\
    \  local yleft4\n  local yright4\n  local zleft4\n  local zright4\n  local xleft5\n\
    \  local xright5\n  local yleft5\n  local yright5\n  local zleft5\n  local zright5\n\
    \  local xleft6\n  local xright6\n  local yleft6\n  local yright6\n  local zleft6\n\
    \  local zright6\n  local xleft7\n  local xright7\n  local yleft7\n  local yright7\n\
    \  local zleft7\n  local zright7\n  local xleft8\n  local xright8\n  local yleft8\n\
    \  local yright8\n  local zleft8\n  local zright8\n  local xleft9\n  local xright9\n\
    \  local yleft9\n  local yright9\n  local zleft9\n  local zright9\n  local xleft10\n\
    \  local xright10\n  local yleft10\n  local yright10\n  local zleft10\n  local\
    \ zright10\n  local xleft11\n  local xright11\n  local yleft11\n  local yright11\n\
    \  local zleft11\n  local zright11\n  local xleft12\n  local xright12\n  local\
    \ yleft12\n  local yright12\n  local zleft12\n  local zright12\n  local xleft13\n\
    \  local xright13\n  local yleft13\n  local yright13\n  local zleft13\n  local\
    \ zright13\n  local xleft14\n  local xright14\n  local yleft14\n  local yright14\n\
    \  local zleft14\n  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_max\n \
    \ local collision_distance_min\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \  local collision\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"car_race_$n.txt\"\
    \n  local car_race_file_temp=\"car_race_temp_$n.txt\"\n  local car_race_file_temp2=\"\
    car_race_temp2_$n.txt\"\n  local car_race_file_temp3=\"car_race_temp3_$n.txt\"\
    \n  local car_race_file_temp4=\"car_race_temp4_$n.txt\"\n  local car_race_file_temp5=\"\
    car_race_temp5_$n.txt\"\n  local car_race_file_temp6=\"car_race_temp6_$n.txt\"\
    \n  local car_race_file_temp7=\"car_race_temp7_$n.txt\"\n  local car_race_file_temp8=\"\
    car_race_temp8_$n.txt\"\n  local car_race_file_temp9=\"car_race_temp9_$n.txt\"\
    \n  local car_race_file_temp10=\"car_race_temp10_$n.txt\"\n  local car_race_file_temp11=\"\
    car_race_temp11_$n.txt\"\n  local car_race_file_temp12=\"car_race_temp12_$n.txt\"\
    \n  local car_race_file_temp13=\"car_race_temp13_$n.txt\"\n  local car_race_file_temp14=\"\
    car_race_temp14_$n.txt\"\n  local car_race_file_temp15=\"car_race_temp15_$n.txt\"\
    \n  local car_race_file_temp16=\"car_race_temp16_$n.txt\"\n  local car_race_file_temp17=\"\
    car_race_temp17_$n.txt\"\n  local car_race_file_temp18=\"car_race_temp18_$n.txt\"\
    \n  local car_race_file_temp19=\"car_race_temp19_$n.txt\"\n  local car_race_file_temp20=\"\
    car_race_temp20_$n.txt\"\n  local car_race_file_temp21=\"car_race_temp21_$n.txt\"\
    \n  local car_race_file_temp22=\"car_race_temp22_$n.txt\"\n  local car_race_file_temp23=\"\
    car_race_temp23_$n.txt\"\n  local car_race_file_temp24=\"car_race_temp24_$n.txt\"\
    \n  local car_ra\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ speed2\n  local speed3\n  local speed4\n  local speed5\n  local speed6\n  local\
    \ speed7\n  local speed8\n  local speed9\n  local speed10\n  local speed11\n \
    \ local speed12\n  local speed13\n  local speed14\n  local speed15\n  local speed16\n\
    \  local speed17\n  local speed18\n  local speed19\n  local speed20\n  local speed21\n\
    \  local speed22\n  local speed23\n  local speed24\n  local speed25\n  local speed26\n\
    \  local speed27\n  local speed28\n  local speed29\n  local speed30\n  local speed31\n\
    \  local speed32\n  local speed33\n  local speed34\n  local speed35\n  local speed36\n\
    \  local speed37\n  local speed38\n  local speed39\n  local speed40\n  local speed41\n\
    \  local speed42\n  local speed43\n  local speed44\n  local speed45\n  local speed46\n\
    \  local speed47\n  local speed48\n  local speed49\n  local speed50\n  local speed51\n\
    \  local speed52\n  local speed53\n  local speed54\n  local speed55\n  local speed56\n\
    \  local speed57\n  local speed58\n  local speed59\n  local speed60\n  local speed61\n\
    \  local speed62\n  local speed63\n  local speed64\n  local speed65\n  local speed66\n\
    \  local speed67\n  local speed68\n  local speed69\n  local speed70\n  local speed71\n\
    \  local speed72\n  local speed73\n  local speed74\n  local speed75\n  local speed76\n\
    \  local speed77\n  local speed78\n  local speed79\n  local speed80\n  local speed81\n\
    \  local speed82\n  local speed83\n  local speed84\n  local speed85\n  local speed86\n\
    \  local speed87\n  local speed88\n  local speed89\n  local speed90\n  local speed91\n\
    \  local speed92\n  local speed93\n  local speed94\n  local speed95\n  local speed96\n\
    \  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for (( i=0; i<n; i++ )); do\n        for (( j=0;\
    \ j<n; j++ )); do\n            if [ $(( i+j )) -eq $(( n-1 )) ]; then\n      \
    \          continue\n            fi\n            if [ $(( i+j )) -eq 0 ]; then\n\
    \                collisions=$(( collisions + 1 ))\n            fi\n          \
    \  if [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n        \
    \    fi\n            if [ $(( j+i )) -eq 0 ]; then\n                collisions=$((\
    \ collisions + 1 ))\n            fi\n            if [ $(( i+j )) -eq $(( n-1 ))\
    \ ] || [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n       \
    \     fi\n            if [ $(( i+j )) -eq 0 ] || [ $(( j+i )) -eq 0 ]; then\n\
    \                continue\n            fi\n            if [ $(( i+j )) -eq $((\
    \ n-1 )) ] || [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n\
    \            fi\n            if [ $(( i+j )) -eq 0 ] || [ $(( j+i )) -eq 0 ];\
    \ then\n                continue\n            fi\n            if [ $(( i+j ))\
    \ -eq $(( n-1 )) ] || [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n\
    \            fi\n            if [ $(( i+j )) -eq 0 ] || [ $(( j+i )) -eq 0 ];\
    \ then\n                continue\n            fi\n            if [ $(( i+j ))\
    \ -eq $(( n-1 )) ] || [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n\
    \            fi\n            if [ $(( i+j )) -eq 0 ] || [ $(( j+i )) -eq 0 ];\
    \ then\n                continue\n            fi\n            if [ $(( i+j ))\
    \ -eq $(( n-1 )) ] || [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n\
    \            fi\n            if [ $(( i+j )) -eq 0 ] || [ $(( j+i )) -eq 0 ];\
    \ then\n                continue\n            fi\n            if [ $(( i+j ))\
    \ -eq $(( n-1 )) ] || [ $(( j+i )) -eq $(( n-1 )) ]; then\n                continue\n\
    \            fi\n            if [ $((\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv92_8mx_.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpv92_8mx_.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local i1\n  local i2\n  local j\n  local j1\n  local j2\n  local k\n  local\
    \ k1\n  local k2\n  local l\n  local l1\n  local l2\n  local m\n  local m1\n \
    \ local m2\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_sq\n  local\
    \ collision_distance_sq2\n  local collision_distance_sq3\n  local collision_distance_sq4\n\
    \  local collision_distance_sq5\n  local collision_distance_sq6\n  local collision_distance_sq7\n\
    \  local collision_distance_sq8\n  local collision_distance_sq9\n  local collision_distance_sq10\n\
    \  local collision_distance_sq11\n  local collision_distance_sq12\n  local collision_distance_sq13\n\
    \  local collision_distance_sq14\n  local collision_distance_sq15\n  local collision_distance_sq16\n\
    \  local collision_distance_sq17\n  local collision_distance_sq18\n  local collision_distance_sq19\n\
    \  local collision_distance_sq20\n  local collision_distance_sq21\n  local collision_distance_sq22\n\
    \  local collision_distance_sq23\n  local collision_distance_sq24\n  local collision_distance_sq25\n\
    \  local collision_distance_sq26\n  local collision_distance_sq27\n  local collision_distance_sq28\n\
    \  local collision_distance_sq29\n  local collision_distance_sq30\n  local collision_distance_sq31\n\
    \  local collision_distance_sq32\n  local collision_distance_sq33\n  local collision_distance_sq34\n\
    \  local collision_distance_sq35\n  local collision_distance_sq36\n  local collision_distance_sq37\n\
    \  local collision_distance_sq38\n  local collision_distance_sq39\n  local collision_distance_sq40\n\
    \  local collision_distance_sq41\n  local collision_distance_sq42\n  local collision_distance_sq43\n\
    \  local collision_distance_sq44\n  local collision_distance_sq45\n  local collision_distance_sq46\n\
    \  local collision_distance_sq47\n  local collision_distance_sq48\n  local collision_distance_sq49\n\
    \  local collision_distance_sq50\n  local collision_distance_sq51\n  local collision_distance_sq52\n\
    \  local collision_distance_sq53\n  local collision_distance_sq54\n  local collision_distance_sq55\n\
    \  local collision_distance_sq56\n  local collision_distance_sq57\n  local collision_distance_sq58\n\
    \  local collision_distance_sq59\n  local collision_distance_sq60\n  local collision_distance_sq61\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left_speed=100\n\
    \  local car_right_speed=100\n  local car_left_speed2=$car_left_speed\n  local\
    \ car_right_speed2=$car_right_speed\n  local car_left_speed3=$car_left_speed\n\
    \  local car_right_speed3=$car_right_speed\n  local car_left_speed4=$car_left_speed\n\
    \  local car_right_speed4=$car_right_speed\n  local car_left_speed5=$car_left_speed\n\
    \  local car_right_speed5=$car_right_speed\n  local car_left_speed6=$car_left_speed\n\
    \  local car_right_speed6=$car_right_speed\n  local car_left_speed7=$car_left_speed\n\
    \  local car_right_speed7=$car_right_speed\n  local car_left_speed8=$car_left_speed\n\
    \  local car_right_speed8=$car_right_speed\n  local car_left_speed9=$car_left_speed\n\
    \  local car_right_speed9=$car_right_speed\n  local car_left_speed10=$car_left_speed\n\
    \  local car_right_speed10=$car_right_speed\n  local car_left_speed11=$car_left_speed\n\
    \  local car_right_speed11=$car_right_speed\n  local car_left_speed12=$car_left_speed\n\
    \  local car_right_speed12=$car_right_speed\n  local car_left_speed13=$car_left_speed\n\
    \  local car_right_speed13=$car_right_speed\n  local car_left_speed14=$car_left_speed\n\
    \  local car_right_speed14=$car_right_speed\n  local car_left_speed15=$car_left_speed\n\
    \  local car_right_speed15=$car_right_speed\n  local car_left_speed16=$car_left_speed\n\
    \  local car_right_speed16=$car_right_speed\n  local car_left_speed17=$car_left_speed\n\
    \  local car_right_speed17=$car_right_speed\n  local car_left_speed18=$car_left_speed\n\
    \  local car_right_speed18=$car_right_speed\n  local car_left_speed19=$car_left_speed\n\
    \  local car_right_speed19=$car_right_speed\n  local car_left_speed20=$car_left_speed\n\
    \  local car_right_speed20\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ xspeed\n  local yspeed\n  local xspeed2\n  local yspeed2\n  local xspeed3\n\
    \  local yspeed3\n  local xspeed4\n  local yspeed4\n  local xspeed5\n  local yspeed5\n\
    \  local xspeed6\n  local yspeed6\n  local xspeed7\n  local yspeed7\n  local xspeed8\n\
    \  local yspeed8\n  local xspeed9\n  local yspeed9\n  local xspeed10\n  local\
    \ yspeed10\n  local xspeed11\n  local yspeed11\n  local xspeed12\n  local yspeed12\n\
    \  local xspeed13\n  local yspeed13\n  local xspeed14\n  local yspeed14\n  local\
    \ xspeed15\n  local yspeed15\n  local xspeed16\n  local yspeed16\n  local xspeed17\n\
    \  local yspeed17\n  local xspeed18\n  local yspeed18\n  local xspeed19\n  local\
    \ yspeed19\n  local xspeed20\n  local yspeed20\n  local xspeed21\n  local yspeed21\n\
    \  local xspeed22\n  local yspeed22\n  local xspeed23\n  local yspeed23\n  local\
    \ xspeed24\n  local yspeed24\n  local xspeed25\n  local yspeed25\n  local xspeed26\n\
    \  local yspeed26\n  local xspeed27\n  local yspeed27\n  local xspeed28\n  local\
    \ yspeed28\n  local xspeed29\n  local yspeed29\n  local xspeed30\n  local yspeed30\n\
    \  local xspeed31\n  local yspeed31\n  local xspeed32\n  local yspeed32\n  local\
    \ xspeed33\n  local yspeed33\n  local xspeed34\n  local yspeed34\n  local xspeed35\n\
    \  local yspeed35\n  local xspeed36\n  local yspeed36\n  local xspeed37\n  local\
    \ yspeed37\n  local xspeed38\n  local yspeed38\n  local xspeed39\n  local yspeed39\n\
    \  local xspeed40\n  local yspeed40\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_length\n  local collision_length2\n  local collision_length3\n\
    \  local collision_length4\n  local collision_length5\n  local collision_length6\n\
    \  local collision_length7\n  local collision_length8\n  local collision_length9\n\
    \  local collision_length10\n  local collision_length11\n  local collision_length12\n\
    \  local collision_length13\n  local collision_length14\n  local collision_length15\n\
    \  local collision_length16\n  local collision_length17\n  local collision_length18\n\
    \  local collision_length19\n  local collision_length20\n  local collision_length21\n\
    \  local collision_length22\n  local collision_length23\n  local collision_length24\n\
    \  local collision_length25\n  local collision_length26\n  local collision_length27\n\
    \  local collision_length28\n  local collision_length29\n  local collision_length30\n\
    \  local collision_length31\n  local collision_length32\n  local collision_length33\n\
    \  local collision_length34\n  local collision_length35\n  local collision_length36\n\
    \  local collision_length37\n  local collision_length38\n  local collision_length39\n\
    \  local collision_length40\n  local collision_length41\n  local collision_length42\n\
    \  local collision_length43\n  local collision_length44\n  local collision_length45\n\
    \  local collision_length46\n  local collision_length47\n  local collision_length48\n\
    \  local collision_length49\n  local collision_length50\n  local collision_length51\n\
    \  local collision_length52\n  local collision_length53\n  local collision_length54\n\
    \  local collision_length55\n  local collision_length56\n  local collision_length57\n\
    \  local collision_length58\n  local collision_length59\n  local collision_length60\n\
    \  local collision_length61\n  local collision_length62\n  local collision_length63\n\
    \  local collision_length64\n  local collision_length65\n  local collision_length66\n\
    \  local collision_length67\n  local collision_length68\n  local collision_length69\n\
    \  local collision_length70\n  local collision_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_dist\n  local collision_dist_max\n  local collision_dist_min\n\
    \  local collision_dist_sum\n  local collision_dist_sum_max\n  local collision_dist_sum_min\n\
    \  local collision_dist_sum_sum\n  local collision_dist_sum_sum_max\n  local collision_dist_sum_sum_min\n\
    \  local collision_dist_sum_sum_sum\n  local collision_dist_sum_sum_sum_max\n\
    \  local collision_dist_sum_sum_sum_min\n  local collision_dist_sum_sum_sum_sum\n\
    \  local collision_dist_sum_sum_sum_sum_max\n  local collision_dist_sum_sum_sum_sum_min\n\
    \  local collision_dist_sum_sum_sum_sum_sum\n  local collision_dist_sum_sum_sum_sum_sum_max\n\
    \  local collision_dist_sum_sum_sum_sum_sum_min\n  local collision_dist_sum_sum_sum_sum_sum_sum\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_max\n  local collision_dist_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_max\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_min\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_max\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_min\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\n  local collision_dist_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_dist_sum_sum_sum_sum_\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left\n  local\
    \ car_right\n  local collision_count=0\n  local car_left_count\n  local car_right_count\n\
    \  local car_left_speed\n  local car_right_speed\n  local car_left_x\n  local\
    \ car_right_x\n  local car_left_y\n  local car_right_y\n  local car_left_speed\n\
    \  local car_right_speed\n  local car_left_x\n  local car_right_x\n  local car_left_y\n\
    \  local car_right_y\n  local car_left_speed\n  local car_right_speed\n  local\
    \ car_left_x\n  local car_right_x\n  local car_left_y\n  local car_right_y\n \
    \ local car_left_speed\n  local car_right_speed\n  local car_left_x\n  local car_right_x\n\
    \  local car_left_y\n  local car_right_y\n  local car_left_speed\n  local car_right_speed\n\
    \  local car_left_x\n  local car_right_x\n  local car_left_y\n  local car_right_y\n\
    \  local car_left_speed\n  local car_right_speed\n  local car_left_x\n  local\
    \ car_right_x\n  local car_left_y\n  local car_right_y\n  local car_left_speed\n\
    \  local car_right_speed\n  local car_left_x\n  local car_right_x\n  local car_left_y\n\
    \  local car_right_y\n  local car_left_speed\n  local car_right_speed\n  local\
    \ car_left_x\n  local car_right_x\n  local car_left_y\n  local car_right_y\n \
    \ local car_left_speed\n  local car_right_speed\n  local car_left_x\n  local car_right_x\n\
    \  local car_left_y\n  local car_right_y\n  local car_left_speed\n  local car_right_speed\n\
    \  local car_left_x\n  local car_right_x\n  local car_left_y\n  local car_right_y\n\
    \  local car_left_speed\n  local car_right_speed\n  local car_left_x\n  local\
    \ car_right_x\n  local car_left_y\n  local car_right_y\n  local car_left_speed\n\
    \  local car_right_\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local i1\n  local j1\n  local i3\n  local j3\n  local i4\n \
    \ local j4\n  local i5\n  local j5\n  local i6\n  local j6\n  local i7\n  local\
    \ j7\n  local i8\n  local j8\n  local i9\n  local j9\n  local i10\n  local j10\n\
    \  local i11\n  local j11\n  local i12\n  local j12\n  local i13\n  local j13\n\
    \  local i14\n  local j14\n  local i15\n  local j15\n  local i16\n  local j16\n\
    \  local i17\n  local j17\n  local i18\n  local j18\n  local i19\n  local j19\n\
    \  local i20\n  local j20\n  local i21\n  local j21\n  local i22\n  local j22\n\
    \  local i23\n  local j23\n  local i24\n  local j24\n  local i25\n  local j25\n\
    \  local i26\n  local j26\n  local i27\n  local j27\n  local i28\n  local j28\n\
    \  local i29\n  local j29\n  local i30\n  local j30\n  local i31\n  local j31\n\
    \  local i32\n  local j32\n  local i33\n  local j33\n  local i34\n  local j34\n\
    \  local i35\n  local j35\n  local i36\n  local j36\n  local i37\n  local j37\n\
    \  local i38\n  local j38\n  local i39\n  local j39\n  local i40\n  local j40\n\
    \  local i41\n  local j41\n  local i42\n  local j42\n  local i43\n  local j43\n\
    \  local i44\n  local j44\n  local i45\n  local j45\n  local i46\n  local j46\n\
    \  local i47\n  local j47\n  local i48\n  local j48\n  local i49\n  local j49\n\
    \  local i50\n  local j50\n  local i\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_distance2\n  local collision_distance3\n\
    \  local collision_distance4\n  local collision_distance5\n  local collision_distance6\n\
    \  local collision_distance7\n  local collision_distance8\n  local collision_distance9\n\
    \  local collision_distance10\n  local collision_distance11\n  local collision_distance12\n\
    \  local collision_distance13\n  local collision_distance14\n  local collision_distance15\n\
    \  local collision_distance16\n  local collision_distance17\n  local collision_distance18\n\
    \  local collision_distance19\n  local collision_distance20\n  local collision_distance21\n\
    \  local collision_distance22\n  local collision_distance23\n  local collision_distance24\n\
    \  local collision_distance25\n  local collision_distance26\n  local collision_distance27\n\
    \  local collision_distance28\n  local collision_distance29\n  local collision_distance30\n\
    \  local collision_distance31\n  local collision_distance32\n  local collision_distance33\n\
    \  local collision_distance34\n  local collision_distance35\n  local collision_distance36\n\
    \  local collision_distance37\n  local collision_distance38\n  local collision_distance39\n\
    \  local collision_distance40\n  local collision_distance41\n  local collision_distance42\n\
    \  local collision_distance43\n  local collision_distance44\n  local collision_distance45\n\
    \  local collision_distance46\n  local collision_distance47\n  local collision_distance48\n\
    \  local collision_distance49\n  local collision_distance50\n  local collision_distance51\n\
    \  local collision_distance52\n  local collision_distance53\n  local collision_distance54\n\
    \  local collision_distance55\n  local collision_distance56\n  local collision_distance57\n\
    \  local collision_distance58\n  local collision_distance59\n  local collision_distance60\n\
    \  local collision_distance61\n  local collision_distance62\n  local collision_distance63\n\
    \  local collision_distance64\n  local collision_distance65\n  local collision_distance66\n\
    \  local collision_distance67\n  local collision_distance68\n  local collision_distance69\n\
    \  local collision_distance70\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_distance2\n  local collision_distance3\n\
    \  local collision_distance4\n  local collision_distance5\n  local collision_distance6\n\
    \  local collision_distance7\n  local collision_distance8\n  local collision_distance9\n\
    \  local collision_distance10\n  local collision_distance11\n  local collision_distance12\n\
    \  local collision_distance13\n  local collision_distance14\n  local collision_distance15\n\
    \  local collision_distance16\n  local collision_distance17\n  local collision_distance18\n\
    \  local collision_distance19\n  local collision_distance20\n  local collision_distance21\n\
    \  local collision_distance22\n  local collision_distance23\n  local collision_distance24\n\
    \  local collision_distance25\n  local collision_distance26\n  local collision_distance27\n\
    \  local collision_distance28\n  local collision_distance29\n  local collision_distance30\n\
    \  local collision_distance31\n  local collision_distance32\n  local collision_distance33\n\
    \  local collision_distance34\n  local collision_distance35\n  local collision_distance36\n\
    \  local collision_distance37\n  local collision_distance38\n  local collision_distance39\n\
    \  local collision_distance40\n  local collision_distance41\n  local collision_distance42\n\
    \  local collision_distance43\n  local collision_distance44\n  local collision_distance45\n\
    \  local collision_distance46\n  local collision_distance47\n  local collision_distance48\n\
    \  local collision_distance49\n  local collision_distance50\n  local collision_distance51\n\
    \  local collision_distance52\n  local collision_distance53\n  local collision_distance54\n\
    \  local collision_distance55\n  local collision_distance56\n  local collision_distance57\n\
    \  local collision_distance58\n  local collision_distance59\n  local collision_distance60\n\
    \  local collision_distance61\n  local collision_distance62\n  local collision_distance63\n\
    \  local collision_distance64\n  local collision_distance65\n  local collision_distance66\n\
    \  local collision_distance67\n  local collision_distance68\n  local collision_distance69\n\
    \  local collision_distance70\n  local collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions\n    local collision\n    local x\n    local y\n    local\
    \ z\n    local speed\n    local speed1\n    local speed2\n    local speed3\n \
    \   local speed4\n    local speed5\n    local speed6\n    local speed7\n    local\
    \ speed8\n    local speed9\n    local speed10\n    local speed11\n    local speed12\n\
    \    local speed13\n    local speed14\n    local speed15\n    local speed16\n\
    \    local speed17\n    local speed18\n    local speed19\n    local speed20\n\
    \    local speed21\n    local speed22\n    local speed23\n    local speed24\n\
    \    local speed25\n    local speed26\n    local speed27\n    local speed28\n\
    \    local speed29\n    local speed30\n    local speed31\n    local speed32\n\
    \    local speed33\n    local speed34\n    local speed35\n    local speed36\n\
    \    local speed37\n    local speed38\n    local speed39\n    local speed40\n\
    \    local speed41\n    local speed42\n    local speed43\n    local speed44\n\
    \    local speed45\n    local speed46\n    local speed47\n    local speed48\n\
    \    local speed49\n    local speed50\n    local speed51\n    local speed52\n\
    \    local speed53\n    local speed54\n    local speed55\n    local speed56\n\
    \    local speed57\n    local speed58\n    local speed59\n    local speed60\n\
    \    local speed61\n    local speed62\n    local speed63\n    local speed64\n\
    \    local speed65\n    local speed66\n    local speed67\n    local speed68\n\
    \    local speed69\n    local speed70\n    local speed71\n    local speed72\n\
    \    local speed73\n    local speed74\n    local speed75\n    local speed76\n\
    \    local speed77\n    local speed78\n    local speed79\n    local speed80\n\
    \    local speed81\n    local speed82\n    local speed83\n    local speed84\n\
    \    local speed85\n    local speed86\n    local speed87\n    local speed88\n\
    \    local speed89\n    local speed90\n    local speed91\n    local speed92\n\
    \    local speed93\n    local speed94\n    local speed\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x1 y1 x2 y2 x3 y3\
    \ x4 y4 x5 y5 x6 y6 x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12 x13 y13 x14 y14\
    \ x15 y15 x16 y16 x17 y17 x18 y18 x19 y19 x20 y20 x21 y21 x22 y22 x23 y23 x24\
    \ y24 x25 y25 x26 y26 x27 y27 x28 y28 x29 y29 x30 y30 x31 y31 x32 y32 x33 y33\
    \ x34 y34 x35 y35 x36 y36 x37 y37 x38 y38 x39 y39 x40 y40 x41 y41 x42 y42 x43\
    \ y43 x44 y44 x45 y45 x46 y46 x47 y47 x48 y48 x49 y49 x50 y50 x51 y51 x52 y52\
    \ x53 y53 x54 y54 x55 y55 x56 y56 x57 y57 x58 y58 x59 y59 x60 y60 x61 y61 x62\
    \ y62 x63 y63 x64 y64 x65 y65 x66 y66 x67 y67 x68 y68 x69 y69 x70 y70 x71 y71\
    \ x72 y72 x73 y73 x74 y74 x75 y75 x76 y76 x77 y77 x78 y78 x79 y79 x80 y80 x81\
    \ y81 x82 y82 x83 y83 x84 y84 x85 y85 x86 y86 x87 y87 x88 y88 x89 y89 x90 y90\
    \ x91 y91 x92 y92 x93 y93 x94 y94 x95 y95 x96 y96 x97 y97 x98 y98 x99 y99 x100\
    \ y\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local k\n  local collision\n  local collision_length\n  local\
    \ collision_length2\n  local collision_length3\n  local collision_length4\n  local\
    \ collision_length5\n  local collision_length6\n  local collision_length7\n  local\
    \ collision_length8\n  local collision_length9\n  local collision_length10\n \
    \ local collision_length11\n  local collision_length12\n  local collision_length13\n\
    \  local collision_length14\n  local collision_length15\n  local collision_length16\n\
    \  local collision_length17\n  local collision_length18\n  local collision_length19\n\
    \  local collision_length20\n  local collision_length21\n  local collision_length22\n\
    \  local collision_length23\n  local collision_length24\n  local collision_length25\n\
    \  local collision_length26\n  local collision_length27\n  local collision_length28\n\
    \  local collision_length29\n  local collision_length30\n  local collision_length31\n\
    \  local collision_length32\n  local collision_length33\n  local collision_length34\n\
    \  local collision_length35\n  local collision_length36\n  local collision_length37\n\
    \  local collision_length38\n  local collision_length39\n  local collision_length40\n\
    \  local collision_length41\n  local collision_length42\n  local collision_length43\n\
    \  local collision_length44\n  local collision_length45\n  local collision_length46\n\
    \  local collision_length47\n  local collision_length48\n  local collision_length49\n\
    \  local collision_length50\n  local collision_length51\n  local collision_length52\n\
    \  local collision_length53\n  local collision_length54\n  local collision_length55\n\
    \  local collision_length56\n  local collision_length57\n  local collision_length58\n\
    \  local collision_length59\n  local collision_length60\n  local collision_length61\n\
    \  local collision_length62\n  local collision_length63\n  local collision_length64\n\
    \  local collision_length65\n  local collision_length66\n  local collision_length67\n\
    \  local collision_length68\n  local collision_length69\n  local \n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions\n    local collision_count\n    local car_speed\n    local\
    \ car_speed_left\n    local car_speed_right\n    local car_speed_left_new\n  \
    \  local car_speed_right_new\n    local car_speed_left_old\n    local car_speed_right_old\n\
    \    local car_speed_left_diff\n    local car_speed_right_diff\n    local car_speed_left_diff2\n\
    \    local car_speed_right_diff2\n    local car_speed_left_diff3\n    local car_speed_right_diff3\n\
    \    local car_speed_left_diff4\n    local car_speed_right_diff4\n    local car_speed_left_diff5\n\
    \    local car_speed_right_diff5\n    local car_speed_left_diff6\n    local car_speed_right_diff6\n\
    \    local car_speed_left_diff7\n    local car_speed_right_diff7\n    local car_speed_left_diff8\n\
    \    local car_speed_right_diff8\n    local car_speed_left_diff9\n    local car_speed_right_diff9\n\
    \    local car_speed_left_diff10\n    local car_speed_right_diff10\n    local\
    \ car_speed_left_diff11\n    local car_speed_right_diff11\n    local car_speed_left_diff12\n\
    \    local car_speed_right_diff12\n    local car_speed_left_diff13\n    local\
    \ car_speed_right_diff13\n    local car_speed_left_diff14\n    local car_speed_right_diff14\n\
    \    local car_speed_left_diff15\n    local car_speed_right_diff15\n    local\
    \ car_speed_left_diff16\n    local car_speed_right_diff16\n    local car_speed_left_diff17\n\
    \    local car_speed_right_diff17\n    local car_speed_left_diff18\n    local\
    \ car_speed_right_diff18\n    local car_speed_left_diff19\n    local car_speed_right_diff19\n\
    \    local car_speed_left_diff20\n    local car_speed_right_diff20\n    local\
    \ car_speed_left_diff21\n    local car_speed_right_diff21\n    local car_speed_left_diff22\n\
    \    local car_speed_right_diff22\n    local car_speed_left_diff23\n    local\
    \ car_speed_right_diff23\n    local car_speed_left_diff24\n    local car_speed_right_diff24\n\
    \    local car_speed_left_\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local xmin\n  local xmax\n\
    \  local ymin\n  local ymax\n  local xdiff\n  local ydiff\n  local xspeed\n  local\
    \ yspeed\n  local xspeed2\n  local yspeed2\n  local xspeed3\n  local yspeed3\n\
    \  local xspeed4\n  local yspeed4\n  local xspeed5\n  local yspeed5\n  local xspeed6\n\
    \  local yspeed6\n  local xspeed7\n  local yspeed7\n  local xspeed8\n  local yspeed8\n\
    \  local xspeed9\n  local yspeed9\n  local xspeed10\n  local yspeed10\n  local\
    \ xspeed11\n  local yspeed11\n  local xspeed12\n  local yspeed12\n  local xspeed13\n\
    \  local yspeed13\n  local xspeed14\n  local yspeed14\n  local xspeed15\n  local\
    \ yspeed15\n  local xspeed16\n  local yspeed16\n  local xspeed17\n  local yspeed17\n\
    \  local xspeed18\n  local yspeed18\n  local xspeed19\n  local yspeed19\n  local\
    \ xspeed20\n  local yspeed20\n  local xspeed21\n  local yspeed21\n  local xspeed22\n\
    \  local yspeed22\n  local xspeed23\n  local yspeed23\n  local xspeed24\n  local\
    \ yspeed24\n  local xspeed25\n  local yspeed25\n  local xspeed26\n  local yspeed26\n\
    \  local xspeed27\n  local yspeed27\n  local xspeed28\n  local yspeed28\n  local\
    \ xspeed29\n  local yspeed29\n  local xspeed30\n  local yspeed30\n  local xspeed31\n\
    \  local yspeed31\n  local xspeed32\n  local yspeed32\n  local xspeed33\n  local\
    \ yspeed33\n  local xspeed34\n  local yspeed34\n  local xspeed35\n  local yspeed35\n\
    \  local xspeed36\n  local yspeed36\n  local xspeed37\n  local yspeed37\n  local\
    \ xspeed38\n  local yspeed38\n\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ x_prev\n  local y_prev\n  local x_next\n  local y_next\n  local collisions=0\n\
    \  local i\n  local j\n  local k\n  local collision_dist\n  local collision_dist_prev\n\
    \  local collision_dist_next\n  local collision_dist_prev2\n  local collision_dist_next2\n\
    \  local collision_dist_prev3\n  local collision_dist_next3\n  local collision_dist_prev4\n\
    \  local collision_dist_next4\n  local collision_dist_prev5\n  local collision_dist_next5\n\
    \  local collision_dist_prev6\n  local collision_dist_next6\n  local collision_dist_prev7\n\
    \  local collision_dist_next7\n  local collision_dist_prev8\n  local collision_dist_next8\n\
    \  local collision_dist_prev9\n  local collision_dist_next9\n  local collision_dist_prev10\n\
    \  local collision_dist_next10\n  local collision_dist_prev11\n  local collision_dist_next11\n\
    \  local collision_dist_prev12\n  local collision_dist_next12\n  local collision_dist_prev13\n\
    \  local collision_dist_next13\n  local collision_dist_prev14\n  local collision_dist_next14\n\
    \  local collision_dist_prev15\n  local collision_dist_next15\n  local collision_dist_prev16\n\
    \  local collision_dist_next16\n  local collision_dist_prev17\n  local collision_dist_next17\n\
    \  local collision_dist_prev18\n  local collision_dist_next18\n  local collision_dist_prev19\n\
    \  local collision_dist_next19\n  local collision_dist_prev20\n  local collision_dist_next20\n\
    \  local collision_dist_prev21\n  local collision_dist_next21\n  local collision_dist_prev22\n\
    \  local collision_dist_next22\n  local collision_dist_prev23\n  local collision_dist_next23\n\
    \  local collision_dist_prev24\n  local collision_dist_next24\n  local collision_dist_prev25\n\
    \  local collision_dist_next25\n  local collision_dist_prev26\n  local collision_dist_next26\n\
    \  local collision_dist_prev27\n  local collision_dist_next27\n  local collision_dist_prev28\n\
    \  local collision_dist_next28\n  local collision_dist_prev29\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speeds\n  local collision_speeds_index\n  local collision_speeds_index2\n\
    \  local collision_speeds_index3\n  local collision_speeds_index4\n  local collision_speeds_index5\n\
    \  local collision_speeds_index6\n  local collision_speeds_index7\n  local collision_speeds_index8\n\
    \  local collision_speeds_index9\n  local collision_speeds_index10\n  local collision_speeds_index11\n\
    \  local collision_speeds_index12\n  local collision_speeds_index13\n  local collision_speeds_index14\n\
    \  local collision_speeds_index15\n  local collision_speeds_index16\n  local collision_speeds_index17\n\
    \  local collision_speeds_index18\n  local collision_speeds_index19\n  local collision_speeds_index20\n\
    \  local collision_speeds_index21\n  local collision_speeds_index22\n  local collision_speeds_index23\n\
    \  local collision_speeds_index24\n  local collision_speeds_index25\n  local collision_speeds_index26\n\
    \  local collision_speeds_index27\n  local collision_speeds_index28\n  local collision_speeds_index29\n\
    \  local collision_speeds_index30\n  local collision_speeds_index31\n  local collision_speeds_index32\n\
    \  local collision_speeds_index33\n  local collision_speeds_index34\n  local collision_speeds_index35\n\
    \  local collision_speeds_index36\n  local collision_speeds_index37\n  local collision_speeds_index38\n\
    \  local collision_speeds_index39\n  local collision_speeds_index40\n  local collision_speeds_index41\n\
    \  local collision_speeds_index42\n  local collision_speeds_index43\n  local collision_speeds_index44\n\
    \  local collision_speeds_index45\n  local collision_speeds_index46\n  local collision_speeds_index47\n\
    \  local collision_speeds_index48\n  local collision_speeds_index49\n  local collision_speeds_index50\n\
    \  local collision_speeds_index51\n  local collision_speeds_index52\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local collision\n  local car\n  local car2\n  local car3\n  local car4\n  local\
    \ car5\n  local car6\n  local car7\n  local car8\n  local car9\n  local car10\n\
    \  local car11\n  local car12\n  local car13\n  local car14\n  local car15\n \
    \ local car16\n  local car17\n  local car18\n  local car19\n  local car20\n  local\
    \ car21\n  local car22\n  local car23\n  local car24\n  local car25\n  local car26\n\
    \  local car27\n  local car28\n  local car29\n  local car30\n  local car31\n \
    \ local car32\n  local car33\n  local car34\n  local car35\n  local car36\n  local\
    \ car37\n  local car38\n  local car39\n  local car40\n  local car41\n  local car42\n\
    \  local car43\n  local car44\n  local car45\n  local car46\n  local car47\n \
    \ local car48\n  local car49\n  local car50\n  local car51\n  local car52\n  local\
    \ car53\n  local car54\n  local car55\n  local car56\n  local car57\n  local car58\n\
    \  local car59\n  local car60\n  local car61\n  local car62\n  local car63\n \
    \ local car64\n  local car65\n  local car66\n  local car67\n  local car68\n  local\
    \ car69\n  local car70\n  local car71\n  local car72\n  local car73\n  local car74\n\
    \  local car75\n  local car76\n  local car77\n  local car78\n  local car79\n \
    \ local car80\n  local car81\n  local car82\n  local car83\n  local car84\n  local\
    \ car85\n  local car86\n  local car87\n  local car88\n  local car89\n  local car90\n\
    \  local car91\n  local car92\n  local car93\n  local car94\n  local car95\n \
    \ local car96\n  local car97\n  local car98\n  local car\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local k\n  local collision_distance\n  local collision_speed\n\
    \  local collision_direction\n  local collision_distance2\n  local collision_speed2\n\
    \  local collision_direction2\n  local collision_distance3\n  local collision_speed3\n\
    \  local collision_direction3\n  local collision_distance4\n  local collision_speed4\n\
    \  local collision_direction4\n  local collision_distance5\n  local collision_speed5\n\
    \  local collision_direction5\n  local collision_distance6\n  local collision_speed6\n\
    \  local collision_direction6\n  local collision_distance7\n  local collision_speed7\n\
    \  local collision_direction7\n  local collision_distance8\n  local collision_speed8\n\
    \  local collision_direction8\n  local collision_distance9\n  local collision_speed9\n\
    \  local collision_direction9\n  local collision_distance10\n  local collision_speed10\n\
    \  local collision_direction10\n  local collision_distance11\n  local collision_speed11\n\
    \  local collision_direction11\n  local collision_distance12\n  local collision_speed12\n\
    \  local collision_direction12\n  local collision_distance13\n  local collision_speed13\n\
    \  local collision_direction13\n  local collision_distance14\n  local collision_speed14\n\
    \  local collision_direction14\n  local collision_distance15\n  local collision_speed15\n\
    \  local collision_direction15\n  local collision_distance16\n  local collision_speed16\n\
    \  local collision_direction16\n  local collision_distance17\n  local collision_speed17\n\
    \  local collision_direction17\n  local collision_distance18\n  local collision_speed18\n\
    \  local collision_direction18\n  local collision_distance19\n  local collision_speed19\n\
    \  local collision_direction19\n  local collision_distance20\n  local collision_speed20\n\
    \  local collision_direction20\n  local collision_distance21\n  local collision_speed21\n\
    \  local collision_direction21\n  local collision_distance22\n  local collision_speed22\n\
    \  local collision_direction22\n  local collision_distance23\n  local collision_speed23\n\
    \  local collision_direction23\n  local collision_distance24\n  \n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance2\n  local collision_speed2\n  local collision_direction2\n\
    \  local collision_distance3\n  local collision_speed3\n  local collision_direction3\n\
    \  local collision_distance4\n  local collision_speed4\n  local collision_direction4\n\
    \  local collision_distance5\n  local collision_speed5\n  local collision_direction5\n\
    \  local collision_distance6\n  local collision_speed6\n  local collision_direction6\n\
    \  local collision_distance7\n  local collision_speed7\n  local collision_direction7\n\
    \  local collision_distance8\n  local collision_speed8\n  local collision_direction8\n\
    \  local collision_distance9\n  local collision_speed9\n  local collision_direction9\n\
    \  local collision_distance10\n  local collision_speed10\n  local collision_direction10\n\
    \  local collision_distance11\n  local collision_speed11\n  local collision_direction11\n\
    \  local collision_distance12\n  local collision_speed12\n  local collision_direction12\n\
    \  local collision_distance13\n  local collision_speed13\n  local collision_direction13\n\
    \  local collision_distance14\n  local collision_speed14\n  local collision_direction14\n\
    \  local collision_distance15\n  local collision_speed15\n  local collision_direction15\n\
    \  local collision_distance16\n  local collision_speed16\n  local collision_direction16\n\
    \  local collision_distance17\n  local collision_speed17\n  local collision_direction17\n\
    \  local collision_distance18\n  local collision_speed18\n  local collision_direction18\n\
    \  local collision_distance19\n  local collision_speed19\n  local collision_direction19\n\
    \  local collision_distance20\n  local collision_speed20\n  local collision_direction20\n\
    \  local collision_distance21\n  local collision_speed21\n  local collision_direction21\n\
    \  local collision_distance22\n  local collision_speed22\n  local collision_direction22\n\
    \  local collision_distance23\n  local collision_speed23\n  local collision_direction23\n\
    \  local collision_distance24\n  local collision_speed\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local collisions=0\n\
    \    for (( i=0; i<n; i++ )); do\n        local j\n        for (( j=i+1; j<n;\
    \ j++ )); do\n            local collision\n            collision=0\n         \
    \   for (( k=0; k<n; k++ )); do\n                if (( k==i )); then\n       \
    \             collision=$(( collision + 1 ))\n                elif (( k==j ));\
    \ then\n                    collision=$(( collision + 1 ))\n                elif\
    \ (( k==k )); then\n                    collision=$(( collision + 1 ))\n     \
    \           elif (( k==k-1 )); then\n                    collision=$(( collision\
    \ + 1 ))\n                elif (( k==k+1 )); then\n                    collision=$((\
    \ collision + 1 ))\n                elif (( k==k+2 )); then\n                \
    \    collision=$(( collision + 1 ))\n                elif (( k==k+3 )); then\n\
    \                    collision=$(( collision + 1 ))\n                elif (( k==k+4\
    \ )); then\n                    collision=$(( collision + 1 ))\n             \
    \   elif (( k==k+5 )); then\n                    collision=$(( collision + 1 ))\n\
    \                elif (( k==k+6 )); then\n                    collision=$(( collision\
    \ + 1 ))\n                elif (( k==k+7 )); then\n                    collision=$((\
    \ collision + 1 ))\n                elif (( k==k+8 )); then\n                \
    \    collision=$(( collision + 1 ))\n                elif (( k==k+9 )); then\n\
    \                    collision=$(( collision + 1 ))\n                elif (( k==k+10\
    \ )); then\n                    collision=$(( collision + 1 ))\n             \
    \   elif (( k==k+11 )); then\n                    collision=$(( collision + 1\
    \ ))\n                elif (( k==k+12 )); then\n                    collision=$((\
    \ collision + 1 ))\n                elif (( k==k+13 )); then\n               \
    \     collision=$(( collision + 1 ))\n                elif (( k==k+14 )); then\n\
    \                    collision=$(( collision + 1 ))\n                elif (( k==k+15\
    \ )); then\n                    collision=$(( collision + 1 ))\n             \
    \   elif (( k==k+16 )); then\n                    collision=$(( collision + 1\
    \ ))\n                elif (( k==k+17 )\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdnerg3bb.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ xspeed\n  local yspeed\n  local xspeed2\n  local yspeed2\n  local xspeed3\n\
    \  local yspeed3\n  local xspeed4\n  local yspeed4\n  local xspeed5\n  local yspeed5\n\
    \  local xspeed6\n  local yspeed6\n  local xspeed7\n  local yspeed7\n  local xspeed8\n\
    \  local yspeed8\n  local xspeed9\n  local yspeed9\n  local xspeed10\n  local\
    \ yspeed10\n  local xspeed11\n  local yspeed11\n  local xspeed12\n  local yspeed12\n\
    \  local xspeed13\n  local yspeed13\n  local xspeed14\n  local yspeed14\n  local\
    \ xspeed15\n  local yspeed15\n  local xspeed16\n  local yspeed16\n  local xspeed17\n\
    \  local yspeed17\n  local xspeed18\n  local yspeed18\n  local xspeed19\n  local\
    \ yspeed19\n  local xspeed20\n  local yspeed20\n  local xspeed21\n  local yspeed21\n\
    \  local xspeed22\n  local yspeed22\n  local xspeed23\n  local yspeed23\n  local\
    \ xspeed24\n  local yspeed24\n  local xspeed25\n  local yspeed25\n  local xspeed26\n\
    \  local yspeed26\n  local xspeed27\n  local yspeed27\n  local xspeed28\n  local\
    \ yspeed28\n  local xspeed29\n  local yspeed29\n  local xspeed30\n  local yspeed30\n\
    \  local xspeed31\n  local yspeed31\n  local xspeed32\n  local yspeed32\n  local\
    \ xspeed33\n  local yspeed33\n  local xspeed34\n  local yspeed34\n  local xspeed35\n\
    \  local yspeed35\n  local xspeed36\n  local yspeed36\n  local xspeed37\n  local\
    \ yspeed37\n  local xspeed38\n  local yspeed38\n  local xspeed39\n  local yspeed39\n\
    \  local xspeed40\n  local yspeed40\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local x\n  local y\n  local xleft\n  local yleft\n  local xright\n  local yright\n\
    \  local xdiff\n  local ydiff\n  local xdiff2\n  local ydiff2\n  local xdiff3\n\
    \  local ydiff3\n  local xdiff4\n  local ydiff4\n  local xdiff5\n  local ydiff5\n\
    \  local xdiff6\n  local ydiff6\n  local xdiff7\n  local ydiff7\n  local xdiff8\n\
    \  local ydiff8\n  local xdiff9\n  local ydiff9\n  local xdiff10\n  local ydiff10\n\
    \  local xdiff11\n  local ydiff11\n  local xdiff12\n  local ydiff12\n  local xdiff13\n\
    \  local ydiff13\n  local xdiff14\n  local ydiff14\n  local xdiff15\n  local ydiff15\n\
    \  local xdiff16\n  local ydiff16\n  local xdiff17\n  local ydiff17\n  local xdiff18\n\
    \  local ydiff18\n  local xdiff19\n  local ydiff19\n  local xdiff20\n  local ydiff20\n\
    \  local xdiff21\n  local ydiff21\n  local xdiff22\n  local ydiff22\n  local xdiff23\n\
    \  local ydiff23\n  local xdiff24\n  local ydiff24\n  local xdiff25\n  local ydiff25\n\
    \  local xdiff26\n  local ydiff26\n  local xdiff27\n  local ydiff27\n  local xdiff28\n\
    \  local ydiff28\n  local xdiff29\n  local ydiff29\n  local xdiff30\n  local ydiff30\n\
    \  local xdiff31\n  local ydiff31\n  local xdiff32\n  local ydiff32\n  local xdiff33\n\
    \  local ydiff33\n  local xdiff34\n  local ydiff34\n  local xdiff35\n  local ydiff35\n\
    \  local xdiff36\n  local ydiff36\n  local xdiff37\n  local ydiff37\n  local xdiff38\n\
    \  local ydiff38\n  local xdiff39\n  local ydiff39\n  local \n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local i\n  local j\n  local collisions\n  local collision\n  local collision_distance\n\
    \  local collision_distance2\n  local collision_distance3\n  local collision_distance4\n\
    \  local collision_distance5\n  local collision_distance6\n  local collision_distance7\n\
    \  local collision_distance8\n  local collision_distance9\n  local collision_distance10\n\
    \  local collision_distance11\n  local collision_distance12\n  local collision_distance13\n\
    \  local collision_distance14\n  local collision_distance15\n  local collision_distance16\n\
    \  local collision_distance17\n  local collision_distance18\n  local collision_distance19\n\
    \  local collision_distance20\n  local collision_distance21\n  local collision_distance22\n\
    \  local collision_distance23\n  local collision_distance24\n  local collision_distance25\n\
    \  local collision_distance26\n  local collision_distance27\n  local collision_distance28\n\
    \  local collision_distance29\n  local collision_distance30\n  local collision_distance31\n\
    \  local collision_distance32\n  local collision_distance33\n  local collision_distance34\n\
    \  local collision_distance35\n  local collision_distance36\n  local collision_distance37\n\
    \  local collision_distance38\n  local collision_distance39\n  local collision_distance40\n\
    \  local collision_distance41\n  local collision_distance42\n  local collision_distance43\n\
    \  local collision_distance44\n  local collision_distance45\n  local collision_distance46\n\
    \  local collision_distance47\n  local collision_distance48\n  local collision_distance49\n\
    \  local collision_distance50\n  local collision_distance51\n  local collision_distance52\n\
    \  local collision_distance53\n  local collision_distance54\n  local collision_distance55\n\
    \  local collision_distance56\n  local collision_distance57\n  local collision_distance58\n\
    \  local collision_distance59\n  local collision_distance60\n  local collision_distance61\n\
    \  local collision_distance62\n  local collision_distance63\n  local collision_distance64\n\
    \  local collision_distance65\n  local collision_distance66\n  local collision_distance67\n\
    \  local collision_distance68\n  local \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions\n    local collision\n    local x\n    local y\n    local\
    \ z\n    local speed\n    local speed1\n    local speed2\n    local speed3\n \
    \   local speed4\n    local speed5\n    local speed6\n    local speed7\n    local\
    \ speed8\n    local speed9\n    local speed10\n    local speed11\n    local speed12\n\
    \    local speed13\n    local speed14\n    local speed15\n    local speed16\n\
    \    local speed17\n    local speed18\n    local speed19\n    local speed20\n\
    \    local speed21\n    local speed22\n    local speed23\n    local speed24\n\
    \    local speed25\n    local speed26\n    local speed27\n    local speed28\n\
    \    local speed29\n    local speed30\n    local speed31\n    local speed32\n\
    \    local speed33\n    local speed34\n    local speed35\n    local speed36\n\
    \    local speed37\n    local speed38\n    local speed39\n    local speed40\n\
    \    local speed41\n    local speed42\n    local speed43\n    local speed44\n\
    \    local speed45\n    local speed46\n    local speed47\n    local speed48\n\
    \    local speed49\n    local speed50\n    local speed51\n    local speed52\n\
    \    local speed53\n    local speed54\n    local speed55\n    local speed56\n\
    \    local speed57\n    local speed58\n    local speed59\n    local speed60\n\
    \    local speed61\n    local speed62\n    local speed63\n    local speed64\n\
    \    local speed65\n    local speed66\n    local speed67\n    local speed68\n\
    \    local speed69\n    local speed70\n    local speed71\n    local speed72\n\
    \    local speed73\n    local speed74\n    local speed75\n    local speed76\n\
    \    local speed77\n    local speed78\n    local speed79\n    local speed80\n\
    \    local speed81\n    local speed82\n    local speed83\n    local speed84\n\
    \    local speed85\n    local speed86\n    local speed87\n    local speed88\n\
    \    local speed89\n    local speed90\n    local speed91\n    local speed92\n\
    \    local speed93\n    local speed94\n    local speed\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ xc\n  local yc\n  local xc1\n  local yc1\n  local xc2\n  local yc2\n  local\
    \ xc3\n  local yc3\n  local xc4\n  local yc4\n  local xc5\n  local yc5\n  local\
    \ xc6\n  local yc6\n  local xc7\n  local yc7\n  local xc8\n  local yc8\n  local\
    \ xc9\n  local yc9\n  local xc10\n  local yc10\n  local xc11\n  local yc11\n \
    \ local xc12\n  local yc12\n  local xc13\n  local yc13\n  local xc14\n  local\
    \ yc14\n  local xc15\n  local yc15\n  local xc16\n  local yc16\n  local xc17\n\
    \  local yc17\n  local xc18\n  local yc18\n  local xc19\n  local yc19\n  local\
    \ xc20\n  local yc20\n  local xc21\n  local yc21\n  local xc22\n  local yc22\n\
    \  local xc23\n  local yc23\n  local xc24\n  local yc24\n  local xc25\n  local\
    \ yc25\n  local xc26\n  local yc26\n  local xc27\n  local yc27\n  local xc28\n\
    \  local yc28\n  local xc29\n  local yc29\n  local xc30\n  local yc30\n  local\
    \ xc31\n  local yc31\n  local xc32\n  local yc32\n  local xc33\n  local yc33\n\
    \  local xc34\n  local yc34\n  local xc35\n  local yc35\n  local xc36\n  local\
    \ yc36\n  local xc37\n  local yc37\n  local xc38\n  local yc38\n  local xc39\n\
    \  local yc39\n  local xc40\n  local yc40\n  local xc41\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local i1\n  local i2\n  local j1\n  local j2\n\
    \  local i3\n  local j3\n  local i4\n  local j4\n  local i5\n  local j5\n  local\
    \ i6\n  local j6\n  local i7\n  local j7\n  local i8\n  local j8\n  local i9\n\
    \  local j9\n  local i10\n  local j10\n  local i11\n  local j11\n  local i12\n\
    \  local j12\n  local i13\n  local j13\n  local i14\n  local j14\n  local i15\n\
    \  local j15\n  local i16\n  local j16\n  local i17\n  local j17\n  local i18\n\
    \  local j18\n  local i19\n  local j19\n  local i20\n  local j20\n  local i21\n\
    \  local j21\n  local i22\n  local j22\n  local i23\n  local j23\n  local i24\n\
    \  local j24\n  local i25\n  local j25\n  local i26\n  local j26\n  local i27\n\
    \  local j27\n  local i28\n  local j28\n  local i29\n  local j29\n  local i30\n\
    \  local j30\n  local i31\n  local j31\n  local i32\n  local j32\n  local i33\n\
    \  local j33\n  local i34\n  local j34\n  local i35\n  local j35\n  local i36\n\
    \  local j36\n  local i37\n  local j37\n  local i38\n  local j38\n  local i39\n\
    \  local j39\n  local i40\n  local j40\n  local i41\n  local j41\n  local i42\n\
    \  local j42\n  local i43\n  local j43\n  local i44\n  local j44\n  local i45\n\
    \  local j45\n  local i46\n  local j46\n  local i47\n  local j47\n  local i48\n\
    \  local j48\n  local i49\n  local j49\n  \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"car_race.txt\"\
    \n  local car_race_file_temp=\"car_race_temp.txt\"\n  local car_race_file_temp2=\"\
    car_race_temp2.txt\"\n  local car_race_file_temp3=\"car_race_temp3.txt\"\n  local\
    \ car_race_file_temp4=\"car_race_temp4.txt\"\n  local car_race_file_temp5=\"car_race_temp5.txt\"\
    \n  local car_race_file_temp6=\"car_race_temp6.txt\"\n  local car_race_file_temp7=\"\
    car_race_temp7.txt\"\n  local car_race_file_temp8=\"car_race_temp8.txt\"\n  local\
    \ car_race_file_temp9=\"car_race_temp9.txt\"\n  local car_race_file_temp10=\"\
    car_race_temp10.txt\"\n  local car_race_file_temp11=\"car_race_temp11.txt\"\n\
    \  local car_race_file_temp12=\"car_race_temp12.txt\"\n  local car_race_file_temp13=\"\
    car_race_temp13.txt\"\n  local car_race_file_temp14=\"car_race_temp14.txt\"\n\
    \  local car_race_file_temp15=\"car_race_temp15.txt\"\n  local car_race_file_temp16=\"\
    car_race_temp16.txt\"\n  local car_race_file_temp17=\"car_race_temp17.txt\"\n\
    \  local car_race_file_temp18=\"car_race_temp18.txt\"\n  local car_race_file_temp19=\"\
    car_race_temp19.txt\"\n  local car_race_file_temp20=\"car_race_temp20.txt\"\n\
    \  local car_race_file_temp21=\"car_race_temp21.txt\"\n  local car_race_file_temp22=\"\
    car_race_temp22.txt\"\n  local car_race_file_temp23=\"car_race_temp23.txt\"\n\
    \  local car_race_file_temp24=\"car_race_temp24.txt\"\n  local car_race_file_temp25=\"\
    car_race_temp25.txt\"\n  local car_race_file_temp26=\"car_race_temp26.txt\"\n\
    \  local car_race_file_temp27=\"car\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj8s2p577.sh: line 54: unexpected EOF while looking for matching
    `"''

    /tmp/tmpj8s2p577.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed2\n  local collision_speed3\n  local collision_speed4\n\
    \  local collision_speed5\n  local collision_speed6\n  local collision_speed7\n\
    \  local collision_speed8\n  local collision_speed9\n  local collision_speed10\n\
    \  local collision_speed11\n  local collision_speed12\n  local collision_speed13\n\
    \  local collision_speed14\n  local collision_speed15\n  local collision_speed16\n\
    \  local collision_speed17\n  local collision_speed18\n  local collision_speed19\n\
    \  local collision_speed20\n  local collision_speed21\n  local collision_speed22\n\
    \  local collision_speed23\n  local collision_speed24\n  local collision_speed25\n\
    \  local collision_speed26\n  local collision_speed27\n  local collision_speed28\n\
    \  local collision_speed29\n  local collision_speed30\n  local collision_speed31\n\
    \  local collision_speed32\n  local collision_speed33\n  local collision_speed34\n\
    \  local collision_speed35\n  local collision_speed36\n  local collision_speed37\n\
    \  local collision_speed38\n  local collision_speed39\n  local collision_speed40\n\
    \  local collision_speed41\n  local collision_speed42\n  local collision_speed43\n\
    \  local collision_speed44\n  local collision_speed45\n  local collision_speed46\n\
    \  local collision_speed47\n  local collision_speed48\n  local collision_speed49\n\
    \  local collision_speed50\n  local collision_speed51\n  local collision_speed52\n\
    \  local collision_speed53\n  local collision_speed54\n  local collision_speed55\n\
    \  local collision_speed56\n  local collision_speed57\n  local collision_speed58\n\
    \  local collision_speed59\n  local collision_speed60\n  local collision_speed61\n\
    \  local collision_speed62\n  local collision_speed63\n  local collision_speed64\n\
    \  local collision_speed65\n  local collision_speed66\n  local collision_speed67\n\
    \  local collision_speed68\n  local collision_speed\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n \
    \ local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_count_1\n  local collision_count_2\n\
    \  local collision_count_3\n  local collision_count_4\n  local collision_count_5\n\
    \  local collision_count_6\n  local collision_count_7\n  local collision_count_8\n\
    \  local collision_count_9\n  local collision_count_10\n  local collision_count_11\n\
    \  local collision_count_12\n  local collision_count_13\n  local collision_count_14\n\
    \  local collision_count_15\n  local collision_count_16\n  local collision_count_17\n\
    \  local collision_count_18\n  local collision_count_19\n  local collision_count_20\n\
    \  local collision_count_21\n  local collision_count_22\n  local collision_count_23\n\
    \  local collision_count_24\n  local collision_count_25\n  local collision_count_26\n\
    \  local collision_count_27\n  local collision_count_28\n  local collision_count_29\n\
    \  local collision_count_30\n  local collision_count_31\n  local collision_count_32\n\
    \  local collision_count_33\n  local collision_count_34\n  local collision_count_35\n\
    \  local collision_count_36\n  local collision_count_37\n  local collision_count_38\n\
    \  local collision_count_39\n  local collision_count_40\n  local collision_count_41\n\
    \  local collision_count_42\n  local collision_count_43\n  local collision_count_44\n\
    \  local collision_count_45\n  local collision_count_46\n  local collision_count_47\n\
    \  local collision_count_48\n  local collision_count_49\n  local collision_count_50\n\
    \  local collision_count_51\n  local collision_count_52\n  local collision_count_53\n\
    \  local collision_count_54\n  local collision_count_55\n  local collision_count_56\n\
    \  local collision_count_57\n  local collision_count_58\n  local collision_count_59\n\
    \  local collision_count_60\n  local collision_count_61\n  local collision_count_62\n\
    \  local collision_count_63\n  local collision_count_64\n  local collision_count_65\n\
    \  local collision_count_66\n  local collision_count_67\n  local collision_count_68\n\
    \  local collision_count_69\n  local collision_count_\n}\n\ncandidate() {\n  \
    \  car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local car_left\n  local car_right\n  local\
    \ car_left_index\n  local car_right_index\n  local car_left_speed\n  local car_right_speed\n\
    \  local car_left_speed2\n  local car_right_speed2\n  local car_left_speed3\n\
    \  local car_right_speed3\n  local car_left_speed4\n  local car_right_speed4\n\
    \  local car_left_speed5\n  local car_right_speed5\n  local car_left_speed6\n\
    \  local car_right_speed6\n  local car_left_speed7\n  local car_right_speed7\n\
    \  local car_left_speed8\n  local car_right_speed8\n  local car_left_speed9\n\
    \  local car_right_speed9\n  local car_left_speed10\n  local car_right_speed10\n\
    \  local car_left_speed11\n  local car_right_speed11\n  local car_left_speed12\n\
    \  local car_right_speed12\n  local car_left_speed13\n  local car_right_speed13\n\
    \  local car_left_speed14\n  local car_right_speed14\n  local car_left_speed15\n\
    \  local car_right_speed15\n  local car_left_speed16\n  local car_right_speed16\n\
    \  local car_left_speed17\n  local car_right_speed17\n  local car_left_speed18\n\
    \  local car_right_speed18\n  local car_left_speed19\n  local car_right_speed19\n\
    \  local car_left_speed20\n  local car_right_speed20\n  local car_left_speed21\n\
    \  local car_right_speed21\n  local car_left_speed22\n  local car_right_speed22\n\
    \  local car_left_speed23\n  local car_right_speed23\n  local car_left_speed24\n\
    \  local car_right_speed24\n  local car_left_speed25\n  local car_right_speed25\n\
    \  local car_left_speed26\n  local car_right_speed26\n  local car_left_speed27\n\
    \  local car_right_speed27\n  local car_left_speed28\n  local car_right_speed28\n\
    \  local car_left_speed29\n  local car_right_speed29\n  \n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local x\n  local y\n  local xleft\n  local yleft\n  local xright\n\
    \  local yright\n  local xleft2\n  local yleft2\n  local xright2\n  local yright2\n\
    \  local xleft3\n  local yleft3\n  local xright3\n  local yright3\n  local xleft4\n\
    \  local yleft4\n  local xright4\n  local yright4\n  local xleft5\n  local yleft5\n\
    \  local xright5\n  local yright5\n  local xleft6\n  local yleft6\n  local xright6\n\
    \  local yright6\n  local xleft7\n  local yleft7\n  local xright7\n  local yright7\n\
    \  local xleft8\n  local yleft8\n  local xright8\n  local yright8\n  local xleft9\n\
    \  local yleft9\n  local xright9\n  local yright9\n  local xleft10\n  local yleft10\n\
    \  local xright10\n  local yright10\n  local xleft11\n  local yleft11\n  local\
    \ xright11\n  local yright11\n  local xleft12\n  local yleft12\n  local xright12\n\
    \  local yright12\n  local xleft13\n  local yleft13\n  local xright13\n  local\
    \ yright13\n  local xleft14\n  local yleft14\n  local xright14\n  local yright14\n\
    \  local xleft15\n  local yleft15\n  local xright15\n  local yright15\n  local\
    \ xleft16\n  local yleft16\n  local xright16\n  local yright16\n  local xleft17\n\
    \  local yleft17\n  local xright17\n  local yright17\n  local xleft18\n  local\
    \ yleft18\n  local xright18\n  local yright18\n  local xleft19\n  local yleft19\n\
    \  local xright19\n  local yright19\n  local xleft20\n  local yleft20\n  local\
    \ xright20\n  local yright20\n  local xleft21\n  local \n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_sum\n  local collision_sum1\n\
    \  local collision_sum2\n  local collision_sum3\n  local collision_sum4\n  local\
    \ collision_sum5\n  local collision_sum6\n  local collision_sum7\n  local collision_sum8\n\
    \  local collision_sum9\n  local collision_sum10\n  local collision_sum11\n  local\
    \ collision_sum12\n  local collision_sum13\n  local collision_sum14\n  local collision_sum15\n\
    \  local collision_sum16\n  local collision_sum17\n  local collision_sum18\n \
    \ local collision_sum19\n  local collision_sum20\n  local collision_sum21\n  local\
    \ collision_sum22\n  local collision_sum23\n  local collision_sum24\n  local collision_sum25\n\
    \  local collision_sum26\n  local collision_sum27\n  local collision_sum28\n \
    \ local collision_sum29\n  local collision_sum30\n  local collision_sum31\n  local\
    \ collision_sum32\n  local collision_sum33\n  local collision_sum34\n  local collision_sum35\n\
    \  local collision_sum36\n  local collision_sum37\n  local collision_sum38\n \
    \ local collision_sum39\n  local collision_sum40\n  local collision_sum41\n  local\
    \ collision_sum42\n  local collision_sum43\n  local collision_sum44\n  local collision_sum45\n\
    \  local collision_sum46\n  local collision_sum47\n  local collision_sum48\n \
    \ local collision_sum49\n  local collision_sum50\n  local collision_sum51\n  local\
    \ collision_sum52\n  local collision_sum53\n  local collision_sum54\n  local collision_sum55\n\
    \  local collision_sum56\n  local collision_sum57\n  local collision_sum58\n \
    \ local collision_sum59\n  local collision_sum60\n  local collision_sum61\n  local\
    \ collision_sum62\n  local collision_sum63\n  local collision_sum64\n  local collision_sum65\n\
    \  local collision_sum66\n  local collision_sum67\n  local collision_sum68\n \
    \ local collision_sum69\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance2\n  local collision_speed2\n  local collision_direction2\n\
    \  local collision_distance3\n  local collision_speed3\n  local collision_direction3\n\
    \  local collision_distance4\n  local collision_speed4\n  local collision_direction4\n\
    \  local collision_distance5\n  local collision_speed5\n  local collision_direction5\n\
    \  local collision_distance6\n  local collision_speed6\n  local collision_direction6\n\
    \  local collision_distance7\n  local collision_speed7\n  local collision_direction7\n\
    \  local collision_distance8\n  local collision_speed8\n  local collision_direction8\n\
    \  local collision_distance9\n  local collision_speed9\n  local collision_direction9\n\
    \  local collision_distance10\n  local collision_speed10\n  local collision_direction10\n\
    \  local collision_distance11\n  local collision_speed11\n  local collision_direction11\n\
    \  local collision_distance12\n  local collision_speed12\n  local collision_direction12\n\
    \  local collision_distance13\n  local collision_speed13\n  local collision_direction13\n\
    \  local collision_distance14\n  local collision_speed14\n  local collision_direction14\n\
    \  local collision_distance15\n  local collision_speed15\n  local collision_direction15\n\
    \  local collision_distance16\n  local collision_speed16\n  local collision_direction16\n\
    \  local collision_distance17\n  local collision_speed17\n  local collision_direction17\n\
    \  local collision_distance18\n  local collision_speed18\n  local collision_direction18\n\
    \  local collision_distance19\n  local collision_speed19\n  local collision_direction19\n\
    \  local collision_distance20\n  local collision_speed20\n  local collision_direction20\n\
    \  local collision_distance21\n  local collision_speed21\n  local collision_direction21\n\
    \  local collision_distance22\n  local collision_speed22\n  local collision_direction22\n\
    \  local collision_distance23\n  local collision_speed23\n  local collision_direction23\n\
    \  local collision_distance24\n  local collision_speed\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed2\n  local collision_speed3\n  local collision_speed4\n\
    \  local collision_speed5\n  local collision_speed6\n  local collision_speed7\n\
    \  local collision_speed8\n  local collision_speed9\n  local collision_speed10\n\
    \  local collision_speed11\n  local collision_speed12\n  local collision_speed13\n\
    \  local collision_speed14\n  local collision_speed15\n  local collision_speed16\n\
    \  local collision_speed17\n  local collision_speed18\n  local collision_speed19\n\
    \  local collision_speed20\n  local collision_speed21\n  local collision_speed22\n\
    \  local collision_speed23\n  local collision_speed24\n  local collision_speed25\n\
    \  local collision_speed26\n  local collision_speed27\n  local collision_speed28\n\
    \  local collision_speed29\n  local collision_speed30\n  local collision_speed31\n\
    \  local collision_speed32\n  local collision_speed33\n  local collision_speed34\n\
    \  local collision_speed35\n  local collision_speed36\n  local collision_speed37\n\
    \  local collision_speed38\n  local collision_speed39\n  local collision_speed40\n\
    \  local collision_speed41\n  local collision_speed42\n  local collision_speed43\n\
    \  local collision_speed44\n  local collision_speed45\n  local collision_speed46\n\
    \  local collision_speed47\n  local collision_speed48\n  local collision_speed49\n\
    \  local collision_speed50\n  local collision_speed51\n  local collision_speed52\n\
    \  local collision_speed53\n  local collision_speed54\n  local collision_speed55\n\
    \  local collision_speed56\n  local collision_speed57\n  local collision_speed58\n\
    \  local collision_speed59\n  local collision_speed60\n  local collision_speed61\n\
    \  local collision_speed62\n  local collision_speed63\n  local collision_speed64\n\
    \  local collision_speed65\n  local collision_speed66\n  local collision_speed67\n\
    \  local collision_speed68\n  local collision_speed\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local\
    \ xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n\
    \  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local\
    \ yc\n  local xc\n  local yc\n  local xc\n  local yc\n  local xc\n  local yc\n\
    \  local xc\n  local y\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions\n    local i1\n    local j1\n    local i3\n    local j3\n\
    \    local i4\n    local j4\n    local i5\n    local j5\n    local i6\n    local\
    \ j6\n    local i7\n    local j7\n    local i8\n    local j8\n    local i9\n \
    \   local j9\n    local i10\n    local j10\n    local i11\n    local j11\n   \
    \ local i12\n    local j12\n    local i13\n    local j13\n    local i14\n    local\
    \ j14\n    local i15\n    local j15\n    local i16\n    local j16\n    local i17\n\
    \    local j17\n    local i18\n    local j18\n    local i19\n    local j19\n \
    \   local i20\n    local j20\n    local i21\n    local j21\n    local i22\n  \
    \  local j22\n    local i23\n    local j23\n    local i24\n    local j24\n   \
    \ local i25\n    local j25\n    local i26\n    local j26\n    local i27\n    local\
    \ j27\n    local i28\n    local j28\n    local i29\n    local j29\n    local i30\n\
    \    local j30\n    local i31\n    local j31\n    local i32\n    local j32\n \
    \   local i33\n    local j33\n    local i34\n    local j34\n    local i35\n  \
    \  local j35\n    local i36\n    local j36\n    local i37\n    local j37\n   \
    \ local i38\n    local j38\n    local i39\n    local j39\n    local i40\n    local\
    \ j40\n    local i41\n    local j41\n    local i42\n    local j42\n    local i43\n\
    \    local j43\n    local i44\n    local j44\n    local i45\n    local j45\n \
    \   local i46\n    local j46\n    local i47\n    local j47\n    local i48\n  \
    \  local j48\n    local i49\n    local j49\n    local i50\n    local j50\n   \
    \ local i51\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_sum\n  local collision_speed\n\
    \  local collision_speeds\n  local collision_speeds_sum\n  local collision_speeds_sum2\n\
    \  local collision_speeds_sum3\n  local collision_speeds_sum4\n  local collision_speeds_sum5\n\
    \  local collision_speeds_sum6\n  local collision_speeds_sum7\n  local collision_speeds_sum8\n\
    \  local collision_speeds_sum9\n  local collision_speeds_sum10\n  local collision_speeds_sum11\n\
    \  local collision_speeds_sum12\n  local collision_speeds_sum13\n  local collision_speeds_sum14\n\
    \  local collision_speeds_sum15\n  local collision_speeds_sum16\n  local collision_speeds_sum17\n\
    \  local collision_speeds_sum18\n  local collision_speeds_sum19\n  local collision_speeds_sum20\n\
    \  local collision_speeds_sum21\n  local collision_speeds_sum22\n  local collision_speeds_sum23\n\
    \  local collision_speeds_sum24\n  local collision_speeds_sum25\n  local collision_speeds_sum26\n\
    \  local collision_speeds_sum27\n  local collision_speeds_sum28\n  local collision_speeds_sum29\n\
    \  local collision_speeds_sum30\n  local collision_speeds_sum31\n  local collision_speeds_sum32\n\
    \  local collision_speeds_sum33\n  local collision_speeds_sum34\n  local collision_speeds_sum35\n\
    \  local collision_speeds_sum36\n  local collision_speeds_sum37\n  local collision_speeds_sum38\n\
    \  local collision_speeds_sum39\n  local collision_speeds_sum40\n  local collision_speeds_sum41\n\
    \  local collision_speeds_sum42\n  local collision_speeds_sum43\n  local collision_speeds_sum44\n\
    \  local collision_speeds_sum45\n  local collision_speeds_sum46\n  local collision_speeds_sum47\n\
    \  local collision_speeds_sum48\n  local collision_speeds_sum49\n  local collision_speeds_sum50\n\
    \  local collision_speeds_sum51\n  local collision_speeds_sum52\n  local \n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local cars=$2\n  local cars_left=$3\n\
    \  local cars_right=$4\n  local cars_left_to_right=$5\n  local cars_right_to_left=$6\n\
    \  local collisions=$7\n  local cars_left_to_right_collisions=$8\n  local cars_right_to_left_collisions=$9\n\
    \  local cars_left_to_right_collisions_left=$10\n  local cars_right_to_left_collisions_right=$11\n\
    \  local cars_left_to_right_collisions_left_to_right=$12\n  local cars_right_to_left_collisions_right_to_left=$13\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions=$14\n  local cars_right_to_left_collisions_right_to_left_collisions=$15\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left=$16\n  local\
    \ cars_right_to_left_collisions_right_to_left_collisions_right=$17\n  local cars_left_to_right_collisions_left_to_right_collisions_left_to_right=$18\n\
    \  local cars_right_to_left_collisions_right_to_left_collisions_right_to_left=$19\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions=$20\n\
    \  local cars_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions=$21\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions_left=$22\n\
    \  local cars_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions_right=$23\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions_left_to_right=$24\n\
    \  local cars_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions_right_to_left=$25\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions=$26\n\
    \  local cars_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions=$27\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions_left_to_right_collisions_left=$28\n\
    \  local cars_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions_right_to_left_collisions_right=$29\n\
    \  local cars_left_to_right_collisions_left_to_right_collisions_left_to_\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n  local collision_direction\n  local collision_speed\n\
    \  local collision_direction\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speed\n\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left\n  local\
    \ car_right\n  local collision_count\n  local car_left_count\n  local car_right_count\n\
    \  local car_left_speed\n  local car_right_speed\n  local car_left_speed2\n  local\
    \ car_right_speed2\n  local car_left_speed3\n  local car_right_speed3\n  local\
    \ car_left_speed4\n  local car_right_speed4\n  local car_left_speed5\n  local\
    \ car_right_speed5\n  local car_left_speed6\n  local car_right_speed6\n  local\
    \ car_left_speed7\n  local car_right_speed7\n  local car_left_speed8\n  local\
    \ car_right_speed8\n  local car_left_speed9\n  local car_right_speed9\n  local\
    \ car_left_speed10\n  local car_right_speed10\n  local car_left_speed11\n  local\
    \ car_right_speed11\n  local car_left_speed12\n  local car_right_speed12\n  local\
    \ car_left_speed13\n  local car_right_speed13\n  local car_left_speed14\n  local\
    \ car_right_speed14\n  local car_left_speed15\n  local car_right_speed15\n  local\
    \ car_left_speed16\n  local car_right_speed16\n  local car_left_speed17\n  local\
    \ car_right_speed17\n  local car_left_speed18\n  local car_right_speed18\n  local\
    \ car_left_speed19\n  local car_right_speed19\n  local car_left_speed20\n  local\
    \ car_right_speed20\n  local car_left_speed21\n  local car_right_speed21\n  local\
    \ car_left_speed22\n  local car_right_speed22\n  local car_left_speed23\n  local\
    \ car_right_speed23\n  local car_left_speed24\n  local car_right_speed24\n  local\
    \ car_left_speed25\n  local car_right_speed25\n  local car_left_speed26\n  local\
    \ car_right_speed26\n  local car_left_speed27\n  local car_right_speed27\n  local\
    \ car_left_speed28\n  local car_right_speed28\n  local car_left_speed29\n  local\
    \ car_right_speed29\n  local car_left_speed30\n  local car_right_\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left_speed=100\n\
    \  local car_right_speed=100\n  local car_left_speed2=$car_left_speed\n  local\
    \ car_right_speed2=$car_right_speed\n  local car_left_speed3=$car_left_speed\n\
    \  local car_right_speed3=$car_right_speed\n  local car_left_speed4=$car_left_speed\n\
    \  local car_right_speed4=$car_right_speed\n  local car_left_speed5=$car_left_speed\n\
    \  local car_right_speed5=$car_right_speed\n  local car_left_speed6=$car_left_speed\n\
    \  local car_right_speed6=$car_right_speed\n  local car_left_speed7=$car_left_speed\n\
    \  local car_right_speed7=$car_right_speed\n  local car_left_speed8=$car_left_speed\n\
    \  local car_right_speed8=$car_right_speed\n  local car_left_speed9=$car_left_speed\n\
    \  local car_right_speed9=$car_right_speed\n  local car_left_speed10=$car_left_speed\n\
    \  local car_right_speed10=$car_right_speed\n  local car_left_speed11=$car_left_speed\n\
    \  local car_right_speed11=$car_right_speed\n  local car_left_speed12=$car_left_speed\n\
    \  local car_right_speed12=$car_right_speed\n  local car_left_speed13=$car_left_speed\n\
    \  local car_right_speed13=$car_right_speed\n  local car_left_speed14=$car_left_speed\n\
    \  local car_right_speed14=$car_right_speed\n  local car_left_speed15=$car_left_speed\n\
    \  local car_right_speed15=$car_right_speed\n  local car_left_speed16=$car_left_speed\n\
    \  local car_right_speed16=$car_right_speed\n  local car_left_speed17=$car_left_speed\n\
    \  local car_right_speed17=$car_right_speed\n  local car_left_speed18=$car_left_speed\n\
    \  local car_right_speed18=$car_right_speed\n  local car_left_speed19=$car_left_speed\n\
    \  local car_right_speed19=$car_right_speed\n  local car_left_speed20=$car_left_speed\n\
    \  local car_right_speed20\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_start\n\
    \  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n  local\
    \ collision_start\n  local collision_end\n  local collision_length\n  local collision_direction\n\
    \  local collision_speed\n  local collision_start\n  local collision_end\n  local\
    \ collision_length\n  local collision_direction\n  local collision_speed\n\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_left\n  local collision_right\n\
    \  local collision_left_count\n  local collision_right_count\n  local collision_left_count2\n\
    \  local collision_right_count2\n  local collision_left_count3\n  local collision_right_count3\n\
    \  local collision_left_count4\n  local collision_right_count4\n  local collision_left_count5\n\
    \  local collision_right_count5\n  local collision_left_count6\n  local collision_right_count6\n\
    \  local collision_left_count7\n  local collision_right_count7\n  local collision_left_count8\n\
    \  local collision_right_count8\n  local collision_left_count9\n  local collision_right_count9\n\
    \  local collision_left_count10\n  local collision_right_count10\n  local collision_left_count11\n\
    \  local collision_right_count11\n  local collision_left_count12\n  local collision_right_count12\n\
    \  local collision_left_count13\n  local collision_right_count13\n  local collision_left_count14\n\
    \  local collision_right_count14\n  local collision_left_count15\n  local collision_right_count15\n\
    \  local collision_left_count16\n  local collision_right_count16\n  local collision_left_count17\n\
    \  local collision_right_count17\n  local collision_left_count18\n  local collision_right_count18\n\
    \  local collision_left_count19\n  local collision_right_count19\n  local collision_left_count20\n\
    \  local collision_right_count20\n  local collision_left_count21\n  local collision_right_count21\n\
    \  local collision_left_count22\n  local collision_right_count22\n  local collision_left_count23\n\
    \  local collision_right_count23\n  local collision_left_count24\n  local collision_right_count24\n\
    \  local collision_left_count25\n  local collision_right_count25\n  local collision_left_count26\n\
    \  local collision_right_count26\n  local collision_left_count27\n  local collision_right_count27\n\
    \  local collision_left_count28\n  local collision_right_count28\n  local collision_left_count29\n\
    \  local collision_right_count29\n  local collision_left_count30\n  local collision_right_count\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_min\n \
    \ local collision_distance_max\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \  local collision\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_count\n  local collision_left\n  local collision_right\n\
    \  local collision_left_count\n  local collision_right_count\n  local collision_left_max\n\
    \  local collision_right_max\n  local collision_left_min\n  local collision_right_min\n\
    \  local collision_left_diff\n  local collision_right_diff\n  local collision_left_sum\n\
    \  local collision_right_sum\n  local collision_left_avg\n  local collision_right_avg\n\
    \  local collision_left_maxi\n  local collision_right_maxi\n  local collision_left_mini\n\
    \  local collision_right_mini\n  local collision_left_diffi\n  local collision_right_diffi\n\
    \  local collision_left_sumi\n  local collision_right_sumi\n  local collision_left_avgi\n\
    \  local collision_right_avgi\n  local collision_left_maxj\n  local collision_right_maxj\n\
    \  local collision_left_minij\n  local collision_right_minij\n  local collision_left_diffj\n\
    \  local collision_right_diffj\n  local collision_left_sumj\n  local collision_right_sumj\n\
    \  local collision_left_avgij\n  local collision_right_avgij\n  local collision_left_maxk\n\
    \  local collision_right_maxk\n  local collision_left_minik\n  local collision_right_minik\n\
    \  local collision_left_diffk\n  local collision_right_diffk\n  local collision_left_sumk\n\
    \  local collision_right_sumk\n  local collision_left_avgik\n  local collision_right_avgik\n\
    \  local collision_left_maxl\n  local collision_right_maxl\n  local collision_left_minil\n\
    \  local collision_right_minil\n  local collision_left_diffl\n  local collision_right_diffl\n\
    \  local collision_left_suml\n  local collision_right_suml\n  local collision_left_avgil\n\
    \  local collision_right_avgil\n  local collision_left_maxm\n  local collision_right_maxm\n\
    \  local collision_left_minim\n  local collision_right_minim\n  local collision_left_diffm\n\
    \  local collision_right_diffm\n  local collision_left_summ\n  local collision_right_summ\n\
    \  local collision_\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ speed2\n  local speed3\n  local speed4\n  local speed5\n  local speed6\n  local\
    \ speed7\n  local speed8\n  local speed9\n  local speed10\n  local speed11\n \
    \ local speed12\n  local speed13\n  local speed14\n  local speed15\n  local speed16\n\
    \  local speed17\n  local speed18\n  local speed19\n  local speed20\n  local speed21\n\
    \  local speed22\n  local speed23\n  local speed24\n  local speed25\n  local speed26\n\
    \  local speed27\n  local speed28\n  local speed29\n  local speed30\n  local speed31\n\
    \  local speed32\n  local speed33\n  local speed34\n  local speed35\n  local speed36\n\
    \  local speed37\n  local speed38\n  local speed39\n  local speed40\n  local speed41\n\
    \  local speed42\n  local speed43\n  local speed44\n  local speed45\n  local speed46\n\
    \  local speed47\n  local speed48\n  local speed49\n  local speed50\n  local speed51\n\
    \  local speed52\n  local speed53\n  local speed54\n  local speed55\n  local speed56\n\
    \  local speed57\n  local speed58\n  local speed59\n  local speed60\n  local speed61\n\
    \  local speed62\n  local speed63\n  local speed64\n  local speed65\n  local speed66\n\
    \  local speed67\n  local speed68\n  local speed69\n  local speed70\n  local speed71\n\
    \  local speed72\n  local speed73\n  local speed74\n  local speed75\n  local speed76\n\
    \  local speed77\n  local speed78\n  local speed79\n  local speed80\n  local speed81\n\
    \  local speed82\n  local speed83\n  local speed84\n  local speed85\n  local speed86\n\
    \  local speed87\n  local speed88\n  local speed89\n  local speed90\n  local speed91\n\
    \  local speed92\n  local speed93\n  local speed94\n  local speed95\n  local speed96\n\
    \  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_speeds\n  local collision_speeds_index\n  local collision_speeds_index2\n\
    \  local collision_speeds_index3\n  local collision_speeds_index4\n  local collision_speeds_index5\n\
    \  local collision_speeds_index6\n  local collision_speeds_index7\n  local collision_speeds_index8\n\
    \  local collision_speeds_index9\n  local collision_speeds_index10\n  local collision_speeds_index11\n\
    \  local collision_speeds_index12\n  local collision_speeds_index13\n  local collision_speeds_index14\n\
    \  local collision_speeds_index15\n  local collision_speeds_index16\n  local collision_speeds_index17\n\
    \  local collision_speeds_index18\n  local collision_speeds_index19\n  local collision_speeds_index20\n\
    \  local collision_speeds_index21\n  local collision_speeds_index22\n  local collision_speeds_index23\n\
    \  local collision_speeds_index24\n  local collision_speeds_index25\n  local collision_speeds_index26\n\
    \  local collision_speeds_index27\n  local collision_speeds_index28\n  local collision_speeds_index29\n\
    \  local collision_speeds_index30\n  local collision_speeds_index31\n  local collision_speeds_index32\n\
    \  local collision_speeds_index33\n  local collision_speeds_index34\n  local collision_speeds_index35\n\
    \  local collision_speeds_index36\n  local collision_speeds_index37\n  local collision_speeds_index38\n\
    \  local collision_speeds_index39\n  local collision_speeds_index40\n  local collision_speeds_index41\n\
    \  local collision_speeds_index42\n  local collision_speeds_index43\n  local collision_speeds_index44\n\
    \  local collision_speeds_index45\n  local collision_speeds_index46\n  local collision_speeds_index47\n\
    \  local collision_speeds_index48\n  local collision_speeds_index49\n  local collision_speeds_index50\n\
    \  local collision_speeds_index51\n  local collision_speeds_index52\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"car_race.txt\"\
    \n  local car_race_collision_file=\"car_race_collisions.txt\"\n  local car_race_collision_count=0\n\
    \  local car_race_collision_line=\"\"\n  local car_race_collision_line_count=0\n\
    \  local car_race_collision_line_number=0\n  local car_race_collision_line_number2=0\n\
    \  local car_race_collision_line_number3=0\n  local car_race_collision_line_number4=0\n\
    \  local car_race_collision_line_number5=0\n  local car_race_collision_line_number6=0\n\
    \  local car_race_collision_line_number7=0\n  local car_race_collision_line_number8=0\n\
    \  local car_race_collision_line_number9=0\n  local car_race_collision_line_number10=0\n\
    \  local car_race_collision_line_number11=0\n  local car_race_collision_line_number12=0\n\
    \  local car_race_collision_line_number13=0\n  local car_race_collision_line_number14=0\n\
    \  local car_race_collision_line_number15=0\n  local car_race_collision_line_number16=0\n\
    \  local car_race_collision_line_number17=0\n  local car_race_collision_line_number18=0\n\
    \  local car_race_collision_line_number19=0\n  local car_race_collision_line_number20=0\n\
    \  local car_race_collision_line_number21=0\n  local car_race_collision_line_number22=0\n\
    \  local car_race_collision_line_number23=0\n  local car_race_collision_line_number24=0\n\
    \  local car_race_collision_line_number25=0\n  local car_race_collision_line_number26=0\n\
    \  local car_race_collision_line_number27=0\n  local car_race_collision_line_number28=0\n\
    \  local car_race_collision_line_number29=0\n  local car_race_collision_line_number30=0\n\
    \  local car_race_collision_line_number31=0\n  local car_race_collision_line_number32=0\n\
    \  local car_race_collision_line_number33=0\n  local car_race_collision_line_number34=0\n\
    \  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local \n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision\n  local x\n  local y\n  local z\n  local speed\n\
    \  local speed1\n  local speed2\n  local speed3\n  local speed4\n  local speed5\n\
    \  local speed6\n  local speed7\n  local speed8\n  local speed9\n  local speed10\n\
    \  local speed11\n  local speed12\n  local speed13\n  local speed14\n  local speed15\n\
    \  local speed16\n  local speed17\n  local speed18\n  local speed19\n  local speed20\n\
    \  local speed21\n  local speed22\n  local speed23\n  local speed24\n  local speed25\n\
    \  local speed26\n  local speed27\n  local speed28\n  local speed29\n  local speed30\n\
    \  local speed31\n  local speed32\n  local speed33\n  local speed34\n  local speed35\n\
    \  local speed36\n  local speed37\n  local speed38\n  local speed39\n  local speed40\n\
    \  local speed41\n  local speed42\n  local speed43\n  local speed44\n  local speed45\n\
    \  local speed46\n  local speed47\n  local speed48\n  local speed49\n  local speed50\n\
    \  local speed51\n  local speed52\n  local speed53\n  local speed54\n  local speed55\n\
    \  local speed56\n  local speed57\n  local speed58\n  local speed59\n  local speed60\n\
    \  local speed61\n  local speed62\n  local speed63\n  local speed64\n  local speed65\n\
    \  local speed66\n  local speed67\n  local speed68\n  local speed69\n  local speed70\n\
    \  local speed71\n  local speed72\n  local speed73\n  local speed74\n  local speed75\n\
    \  local speed76\n  local speed77\n  local speed78\n  local speed79\n  local speed80\n\
    \  local speed81\n  local speed82\n  local speed83\n  local speed84\n  local speed85\n\
    \  local speed86\n  local speed87\n  local speed88\n  local speed89\n  local speed90\n\
    \  local speed91\n  local speed92\n  local speed93\n  local speed94\n  local \n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance_max\n\
    \  local collision_distance_min\n  local collision_distance_mean\n  local collision_distance_variance\n\
    \  local collision_distance_stddev\n  local collision_distance_sum\n  local collision_distance_sum2\n\
    \  local collision_distance_sum3\n  local collision_distance_sum4\n  local collision_distance_sum5\n\
    \  local collision_distance_sum6\n  local collision_distance_sum7\n  local collision_distance_sum8\n\
    \  local collision_distance_sum9\n  local collision_distance_sum10\n  local collision_distance_sum11\n\
    \  local collision_distance_sum12\n  local collision_distance_sum13\n  local collision_distance_sum14\n\
    \  local collision_distance_sum15\n  local collision_distance_sum16\n  local collision_distance_sum17\n\
    \  local collision_distance_sum18\n  local collision_distance_sum19\n  local collision_distance_sum20\n\
    \  local collision_distance_sum21\n  local collision_distance_sum22\n  local collision_distance_sum23\n\
    \  local collision_distance_sum24\n  local collision_distance_sum25\n  local collision_distance_sum26\n\
    \  local collision_distance_sum27\n  local collision_distance_sum28\n  local collision_distance_sum29\n\
    \  local collision_distance_sum30\n  local collision_distance_sum31\n  local collision_distance_sum32\n\
    \  local collision_distance_sum33\n  local collision_distance_sum34\n  local collision_distance_sum35\n\
    \  local collision_distance_sum36\n  local collision_distance_sum37\n  local collision_distance_sum38\n\
    \  local collision_distance_sum39\n  local collision_distance_sum40\n  local collision_distance_sum41\n\
    \  local collision_distance_sum42\n  local collision_distance_sum43\n  local collision_distance_sum44\n\
    \  local collision_distance_sum45\n  local collision_distance_sum46\n  local collision_distance_sum47\n\
    \  local collision_distance_sum48\n  local collision_distance_sum49\n  local collision_distance_sum50\n\
    \  local collision_distance_sum51\n  local collision_distance_sum52\n  local collision_distance_sum53\n\
    \  local collision_distance_sum54\n  local collision_distance_sum55\n  local collision_distance_sum56\n\
    \  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_max\n \
    \ local collision_distance_min\n  local collision_distance_sum\n  local collision_distance_sum_max\n\
    \  local collision_distance_sum_min\n  local collision_distance_sum_sum\n  local\
    \ collision_distance_sum_sum_max\n  local collision_distance_sum_sum_min\n  local\
    \ collision_distance_sum_sum_sum\n  local collision_distance_sum_sum_sum_max\n\
    \  local collision_distance_sum_sum_sum_min\n  local collision_distance_sum_sum_sum_sum\n\
    \  local collision_distance_sum_sum_sum_sum_max\n  local collision_distance_sum_sum_sum_sum_min\n\
    \  local collision_distance_sum_sum_sum_sum_sum\n  local collision_distance_sum_sum_sum_sum_sum_max\n\
    \  local collision_distance_sum_sum_sum_sum_sum_min\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_max\n  local collision_distance_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_max\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_min\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_max\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_max\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_min\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_max\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_max\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_min\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\n  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_min\n\
    \  local collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local collision\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local i1\n  local j1\n  local i0\n  local j0\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n\
    \  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local\
    \ j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n\
    \  local i1\n  local j1\n  local i1\n  local j1\n  local i1\n  local j1\n  local\
    \ i1\n  local j1\n  local i\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local x\n  local y\n  local x1\n  local y1\n  local x2\n  local y2\n  local\
    \ xdiff\n  local ydiff\n  local xspeed\n  local yspeed\n  local xspeed1\n  local\
    \ yspeed1\n  local xspeed2\n  local yspeed2\n  local xspeed3\n  local yspeed3\n\
    \  local xspeed4\n  local yspeed4\n  local xspeed5\n  local yspeed5\n  local xspeed6\n\
    \  local yspeed6\n  local xspeed7\n  local yspeed7\n  local xspeed8\n  local yspeed8\n\
    \  local xspeed9\n  local yspeed9\n  local xspeed10\n  local yspeed10\n  local\
    \ xspeed11\n  local yspeed11\n  local xspeed12\n  local yspeed12\n  local xspeed13\n\
    \  local yspeed13\n  local xspeed14\n  local yspeed14\n  local xspeed15\n  local\
    \ yspeed15\n  local xspeed16\n  local yspeed16\n  local xspeed17\n  local yspeed17\n\
    \  local xspeed18\n  local yspeed18\n  local xspeed19\n  local yspeed19\n  local\
    \ xspeed20\n  local yspeed20\n  local xspeed21\n  local yspeed21\n  local xspeed22\n\
    \  local yspeed22\n  local xspeed23\n  local yspeed23\n  local xspeed24\n  local\
    \ yspeed24\n  local xspeed25\n  local yspeed25\n  local xspeed26\n  local yspeed26\n\
    \  local xspeed27\n  local yspeed27\n  local xspeed28\n  local yspeed28\n  local\
    \ xspeed29\n  local yspeed29\n  local xspeed30\n  local yspeed30\n  local xspeed31\n\
    \  local yspeed31\n  local xspeed32\n  local yspeed32\n  local xspeed33\n  local\
    \ yspeed33\n  local xspeed34\n  local yspeed34\n  local xspeed35\n  local yspeed35\n\
    \  local xspeed36\n  local yspeed36\n  local xspeed37\n  local yspeed37\n  local\
    \ xspeed38\n  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_distance_limit\n \
    \ local collision_distance_limit2\n  local collision_distance_limit3\n  local\
    \ collision_distance_limit4\n  local collision_distance_limit5\n  local collision_distance_limit6\n\
    \  local collision_distance_limit7\n  local collision_distance_limit8\n  local\
    \ collision_distance_limit9\n  local collision_distance_limit10\n  local collision_distance_limit11\n\
    \  local collision_distance_limit12\n  local collision_distance_limit13\n  local\
    \ collision_distance_limit14\n  local collision_distance_limit15\n  local collision_distance_limit16\n\
    \  local collision_distance_limit17\n  local collision_distance_limit18\n  local\
    \ collision_distance_limit19\n  local collision_distance_limit20\n  local collision_distance_limit21\n\
    \  local collision_distance_limit22\n  local collision_distance_limit23\n  local\
    \ collision_distance_limit24\n  local collision_distance_limit25\n  local collision_distance_limit26\n\
    \  local collision_distance_limit27\n  local collision_distance_limit28\n  local\
    \ collision_distance_limit29\n  local collision_distance_limit30\n  local collision_distance_limit31\n\
    \  local collision_distance_limit32\n  local collision_distance_limit33\n  local\
    \ collision_distance_limit34\n  local collision_distance_limit35\n  local collision_distance_limit36\n\
    \  local collision_distance_limit37\n  local collision_distance_limit38\n  local\
    \ collision_distance_limit39\n  local collision_distance_limit40\n  local collision_distance_limit41\n\
    \  local collision_distance_limit42\n  local collision_distance_limit43\n  local\
    \ collision_distance_limit44\n  local collision_distance_limit45\n  local collision_distance_limit46\n\
    \  local collision_distance_limit47\n  local collision_distance_limit48\n  local\
    \ collision_distance_limit49\n  local collision_distance_limit50\n  local collision_distance_limit51\n\
    \  local collision_distance_limit52\n  local collision_distance_limit53\n  local\
    \ collision_distance_limit54\n  local collision_distance_limit55\n  local collision_distance_limit56\n\
    \  local collision_distance_limit57\n  local collision_distance_limit58\n  local\
    \ collision_distance_limit59\n  local collision_distance_limit60\n  local collision_distance_limit61\n\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision_distance\n  local collision_distance2\n  local\
    \ collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n  local collision_\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_left\n\
    \  local collision_distance_right\n  local collision_distance_left_right\n  local\
    \ collision_distance_left_left\n  local collision_distance_right_left\n  local\
    \ collision_distance_left_right\n  local collision_distance_right_right\n  local\
    \ collision_distance_left_left_right\n  local collision_distance_left_left_left\n\
    \  local collision_distance_right_left_left\n  local collision_distance_right_left_right\n\
    \  local collision_distance_left_right_left\n  local collision_distance_left_right_right\n\
    \  local collision_distance_right_left_left\n  local collision_distance_right_left_right\n\
    \  local collision_distance_left_right_left_right\n  local collision_distance_left_right_left_left\n\
    \  local collision_distance_right_left_left_left\n  local collision_distance_right_left_left_right\n\
    \  local collision_distance_left_right_left_left_right\n  local collision_distance_left_right_left_left_left\n\
    \  local collision_distance_right_left_left_left_right\n  local collision_distance_left_right_left_left_right\n\
    \  local collision_distance_right_left_left_left_left\n  local collision_distance_right_left_left_left_right\n\
    \  local collision_distance_left_right_left_left_left_right\n  local collision_distance_right_left_left_left_left_left\n\
    \  local collision_distance_right_left_left_left_left_right\n  local collision_distance_left_right_left_left_left_right\n\
    \  local collision_distance_right_left_left_left_left_left\n  local collision_distance_right_left_left_left_left_right\n\
    \  local collision_distance_left_right_left_left_left_right\n  local collision_distance_right_left_left_left_left_left\n\
    \  local collision_distance_right_left_left_left_left_right\n  local collision_distance_left_right_left_left_left_right\n\
    \  local collision_distance_right_left_left_left_left_left\n  local collision_distance_right_left_left_left_left_right\n\
    \  local collision_distance_left_right_left_left_left_right\n  local collision_distance_right_left_left_left_left_left\n\
    \  local collision_distance_right_left_left_left_left_right\n  local collision_distance_left_right_left_left_left_right\n\
    \  local collision_distance_right_left_left_left_left_left\n  local collision_distance_right_left_left_left_left_right\n\
    \  local collision_distance_left_right_left_left_left_right\n  local collision_distance_right_left_left_left_left_left\n\
    \  local collision_distance_right_left_left_left_left_right\n  local \n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local cars=$2\n  local cars_right=$3\n\
    \  local cars_left=$4\n  local cars_left_right=$5\n  local cars_right_left=$6\n\
    \  local cars_left_left_right=$7\n  local cars_right_left_left=$8\n  local cars_left_right_left=$9\n\
    \  local cars_right_right_left=$10\n  local cars_left_left_left_right=$11\n  local\
    \ cars_right_left_left_right=$12\n  local cars_left_right_left_right=$13\n  local\
    \ cars_right_right_left_right=$14\n  local cars_left_left_left_left_right=$15\n\
    \  local cars_right_left_left_left_right=$16\n  local cars_left_right_left_left_right=$17\n\
    \  local cars_right_right_left_left_right=$18\n  local cars_left_left_left_left_left_right=$19\n\
    \  local cars_right_left_left_left_left_right=$20\n  local cars_left_right_left_left_left_right=$21\n\
    \  local cars_right_right_left_left_left_right=$22\n  local cars_left_left_left_left_left_right=$23\n\
    \  local cars_right_left_left_left_left_right=$24\n  local cars_left_right_left_left_left_right=$25\n\
    \  local cars_right_right_left_left_left_right=$26\n  local cars_left_left_left_left_left_left_right=$27\n\
    \  local cars_right_left_left_left_left_left_right=$28\n  local cars_right_right_left_left_left_left_right=$29\n\
    \  local cars_left_left_left_left_left_left_right=$30\n  local cars_right_left_left_left_left_left_right=$31\n\
    \  local cars_right_right_left_left_left_left_right=$32\n  local cars_left_left_left_left_left_left_right=$33\n\
    \  local cars_right_left_left_left_left_left_right=$34\n  local cars_right_right_left_left_left_left_right=$35\n\
    \  local cars_left_left_left_left_left_left_right_1=$36\n  local cars_right_left_left_left_left_left_right_1=$37\n\
    \  local cars_right_right_left_left_left_right_1=$38\n  local cars_left_left_left_left_left_left_right_2=$39\n\
    \  local cars_right_left_left_left_left_left_right_2=$40\n  local cars_right_right_left_left_left_right_2=$41\n\
    \  local cars_left_left_left_left_left_left_right_3=$42\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"$2\"\
    \n  local car_race_collisions=0\n  local car_race_collision_left\n  local car_race_collision_right\n\
    \  local car_race_collision_left_right\n  local car_race_collision_left_left_right\n\
    \  local car_race_collision_left_right_left\n  local car_race_collision_right_left_left\n\
    \  local car_race_collision_right_right_left\n  local car_race_collision_left_right_right_left\n\
    \  local car_race_collision_left_left_right_right_left\n  local car_race_collision_left_right_left_right_left\n\
    \  local car_race_collision_right_left_left_right_left\n  local car_race_collision_right_right_left_right_left\n\
    \  local car_race_collision_left_right_right_left_right_left\n  local car_race_collision_left_left_right_right_left_right_left\n\
    \  local car_race_collision_right_left_left_right_left_right_left\n  local car_race_collision_right_right_left_right_left_right_left\n\
    \  local car_race_collision_left_right_right_left_right_left_right_left\n  local\
    \ car_race_collision_left_left_right_right_left_right_left_right_left\n  local\
    \ car_race_collision_right_left_left_right_left_right_left_right_left\n  local\
    \ car_race_collision_right_right_left_right_left_right_left_right_left\n  local\
    \ car_race_collision_left_right_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_left_left_right_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_right_left_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_right_right_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_left_right_right_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_left_left_right_right_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_right_left_left_right_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_right_right_left_right_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_left_right_right_left_right_left_right_left_right_left_right_left_right_left\n\
    \  local car_race_collision_left_left_right_right_left_right_left_\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local k\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_distance_max\n  local\
    \ collision_distance_min\n  local collision_distance_min_index\n  local collision_distance_max_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n  local collision_distance_min_index\n\
    \  local collision_distance_max_index\n\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_distance\n\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_left_speed=100\n\
    \  local car_right_speed=100\n  local car_left_speed2=100\n  local car_right_speed2=100\n\
    \  local car_left_speed3=100\n  local car_right_speed3=100\n  local car_left_speed4=100\n\
    \  local car_right_speed4=100\n  local car_left_speed5=100\n  local car_right_speed5=100\n\
    \  local car_left_speed6=100\n  local car_right_speed6=100\n  local car_left_speed7=100\n\
    \  local car_right_speed7=100\n  local car_left_speed8=100\n  local car_right_speed8=100\n\
    \  local car_left_speed9=100\n  local car_right_speed9=100\n  local car_left_speed10=100\n\
    \  local car_right_speed10=100\n  local car_left_speed11=100\n  local car_right_speed11=100\n\
    \  local car_left_speed12=100\n  local car_right_speed12=100\n  local car_left_speed13=100\n\
    \  local car_right_speed13=100\n  local car_left_speed14=100\n  local car_right_speed14=100\n\
    \  local car_left_speed15=100\n  local car_right_speed15=100\n  local car_left_speed16=100\n\
    \  local car_right_speed16=100\n  local car_left_speed17=100\n  local car_right_speed17=100\n\
    \  local car_left_speed18=100\n  local car_right_speed18=100\n  local car_left_speed19=100\n\
    \  local car_right_speed19=100\n  local car_left_speed20=100\n  local car_right_speed20=100\n\
    \  local car_left_speed21=100\n  local car_right_speed21=100\n  local car_left_speed22=100\n\
    \  local car_right_speed22=100\n  local car_left_speed23=100\n  local car_right_speed23=100\n\
    \  local car_left_speed24=100\n  local car_right_speed24=100\n  local car_left_speed25=100\n\
    \  local car_right_speed25=100\n  local car_left_speed26=100\n  local \n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_max\n \
    \ local collision_distance_min\n  local collision_distance_mean\n  local collision_distance_std\n\
    \  local collision_distance_sum\n  local collision_distance_sum2\n  local collision_distance_sum3\n\
    \  local collision_distance_sum4\n  local collision_distance_sum5\n  local collision_distance_sum6\n\
    \  local collision_distance_sum7\n  local collision_distance_sum8\n  local collision_distance_sum9\n\
    \  local collision_distance_sum10\n  local collision_distance_sum11\n  local collision_distance_sum12\n\
    \  local collision_distance_sum13\n  local collision_distance_sum14\n  local collision_distance_sum15\n\
    \  local collision_distance_sum16\n  local collision_distance_sum17\n  local collision_distance_sum18\n\
    \  local collision_distance_sum19\n  local collision_distance_sum20\n  local collision_distance_sum21\n\
    \  local collision_distance_sum22\n  local collision_distance_sum23\n  local collision_distance_sum24\n\
    \  local collision_distance_sum25\n  local collision_distance_sum26\n  local collision_distance_sum27\n\
    \  local collision_distance_sum28\n  local collision_distance_sum29\n  local collision_distance_sum30\n\
    \  local collision_distance_sum31\n  local collision_distance_sum32\n  local collision_distance_sum33\n\
    \  local collision_distance_sum34\n  local collision_distance_sum35\n  local collision_distance_sum36\n\
    \  local collision_distance_sum37\n  local collision_distance_sum38\n  local collision_distance_sum39\n\
    \  local collision_distance_sum40\n  local collision_distance_sum41\n  local collision_distance_sum42\n\
    \  local collision_distance_sum43\n  local collision_distance_sum44\n  local collision_distance_sum45\n\
    \  local collision_distance_sum46\n  local collision_distance_sum47\n  local collision_distance_sum48\n\
    \  local collision_distance_sum49\n  local collision_distance_sum50\n  local collision_distance_sum51\n\
    \  local collision_distance_sum52\n  local collision_distance_sum53\n  local collision_distance_sum54\n\
    \  local collision_distance_sum55\n  local collision_distance_sum56\n  local collision_distance_sum57\n\
    \  local collision\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_distance\n  local collision_distance2\n\
    \  local collision_distance3\n  local collision_distance4\n  local collision_distance5\n\
    \  local collision_distance6\n  local collision_distance7\n  local collision_distance8\n\
    \  local collision_distance9\n  local collision_distance10\n  local collision_distance11\n\
    \  local collision_distance12\n  local collision_distance13\n  local collision_distance14\n\
    \  local collision_distance15\n  local collision_distance16\n  local collision_distance17\n\
    \  local collision_distance18\n  local collision_distance19\n  local collision_distance20\n\
    \  local collision_distance21\n  local collision_distance22\n  local collision_distance23\n\
    \  local collision_distance24\n  local collision_distance25\n  local collision_distance26\n\
    \  local collision_distance27\n  local collision_distance28\n  local collision_distance29\n\
    \  local collision_distance30\n  local collision_distance31\n  local collision_distance32\n\
    \  local collision_distance33\n  local collision_distance34\n  local collision_distance35\n\
    \  local collision_distance36\n  local collision_distance37\n  local collision_distance38\n\
    \  local collision_distance39\n  local collision_distance40\n  local collision_distance41\n\
    \  local collision_distance42\n  local collision_distance43\n  local collision_distance44\n\
    \  local collision_distance45\n  local collision_distance46\n  local collision_distance47\n\
    \  local collision_distance48\n  local collision_distance49\n  local collision_distance50\n\
    \  local collision_distance51\n  local collision_distance52\n  local collision_distance53\n\
    \  local collision_distance54\n  local collision_distance55\n  local collision_distance56\n\
    \  local collision_distance57\n  local collision_distance58\n  local collision_distance59\n\
    \  local collision_distance60\n  local collision_distance61\n  local collision_distance62\n\
    \  local collision_distance63\n  local collision_distance64\n  local collision_distance65\n\
    \  local collision_distance66\n  local collision_distance67\n  local collision_distance68\n\
    \  local collision_distance69\n  local collision_distance70\n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i\n  local j\n  local k\n  local collision_distance\n  local collision_speed\n\
    \  local collision_direction\n  local collision_distance2\n  local collision_speed2\n\
    \  local collision_direction2\n  local collision_distance3\n  local collision_speed3\n\
    \  local collision_direction3\n  local collision_distance4\n  local collision_speed4\n\
    \  local collision_direction4\n  local collision_distance5\n  local collision_speed5\n\
    \  local collision_direction5\n  local collision_distance6\n  local collision_speed6\n\
    \  local collision_direction6\n  local collision_distance7\n  local collision_speed7\n\
    \  local collision_direction7\n  local collision_distance8\n  local collision_speed8\n\
    \  local collision_direction8\n  local collision_distance9\n  local collision_speed9\n\
    \  local collision_direction9\n  local collision_distance10\n  local collision_speed10\n\
    \  local collision_direction10\n  local collision_distance11\n  local collision_speed11\n\
    \  local collision_direction11\n  local collision_distance12\n  local collision_speed12\n\
    \  local collision_direction12\n  local collision_distance13\n  local collision_speed13\n\
    \  local collision_direction13\n  local collision_distance14\n  local collision_speed14\n\
    \  local collision_direction14\n  local collision_distance15\n  local collision_speed15\n\
    \  local collision_direction15\n  local collision_distance16\n  local collision_speed16\n\
    \  local collision_direction16\n  local collision_distance17\n  local collision_speed17\n\
    \  local collision_direction17\n  local collision_distance18\n  local collision_speed18\n\
    \  local collision_direction18\n  local collision_distance19\n  local collision_speed19\n\
    \  local collision_direction19\n  local collision_distance20\n  local collision_speed20\n\
    \  local collision_direction20\n  local collision_distance21\n  local collision_speed21\n\
    \  local collision_direction21\n  local collision_distance22\n  local collision_speed22\n\
    \  local collision_direction22\n  local collision_distance23\n  local collision_speed23\n\
    \  local collision_direction23\n  local collision_distance24\n  \n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local collisions=0\n\
    \  local j\n  local collision_distance\n  local collision_speed\n  local collision_direction\n\
    \  local collision_direction_length\n  local collision_direction_speed\n  local\
    \ collision_direction_speed_length\n  local collision_direction_speed_length2\n\
    \  local collision_direction_speed_length3\n  local collision_direction_speed_length4\n\
    \  local collision_direction_speed_length5\n  local collision_direction_speed_length6\n\
    \  local collision_direction_speed_length7\n  local collision_direction_speed_length8\n\
    \  local collision_direction_speed_length9\n  local collision_direction_speed_length10\n\
    \  local collision_direction_speed_length11\n  local collision_direction_speed_length12\n\
    \  local collision_direction_speed_length13\n  local collision_direction_speed_length14\n\
    \  local collision_direction_speed_length15\n  local collision_direction_speed_length16\n\
    \  local collision_direction_speed_length17\n  local collision_direction_speed_length18\n\
    \  local collision_direction_speed_length19\n  local collision_direction_speed_length20\n\
    \  local collision_direction_speed_length21\n  local collision_direction_speed_length22\n\
    \  local collision_direction_speed_length23\n  local collision_direction_speed_length24\n\
    \  local collision_direction_speed_length25\n  local collision_direction_speed_length26\n\
    \  local collision_direction_speed_length27\n  local collision_direction_speed_length28\n\
    \  local collision_direction_speed_length29\n  local collision_direction_speed_length30\n\
    \  local collision_direction_speed_length31\n  local collision_direction_speed_length32\n\
    \  local collision_direction_speed_length33\n  local collision_direction_speed_length34\n\
    \  local collision_direction_speed_length35\n  local collision_direction_speed_length36\n\
    \  local collision_direction_speed_length37\n  local collision_direction_speed_length38\n\
    \  local collision_direction_speed_length39\n  local collision_direction_speed_length40\n\
    \  local collision_direction_speed_length41\n  local collision_direction_speed_length42\n\
    \  local collision_direction_speed_length43\n  local collision_direction_speed_length44\n\
    \  local collision_direction_speed_length45\n  local collision_direction_speed_length46\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local car_race_file=\"$2\"\
    \n  local car_race_collisions=0\n  local car_race_lines=$(cat \"$car_race_file\"\
    \ | wc -l)\n  local car_race_line_length=$(cat \"$car_race_file\" | wc -c)\n \
    \ local car_race_line_number=0\n  local car_race_line_start=0\n  local car_race_line_end=0\n\
    \  local car_race_line_collisions=0\n  local car_race_line_collision_start=0\n\
    \  local car_race_line_collision_end=0\n  local car_race_line_collision_length=0\n\
    \  local car_race_line_collision_number=0\n  local car_race_line_collision_direction=0\n\
    \  local car_race_line_collision_direction_start=0\n  local car_race_line_collision_direction_end=0\n\
    \  local car_race_line_collision_direction_length=0\n  local car_race_line_collision_direction_number=0\n\
    \  local car_race_line_collision_direction_direction=0\n  local car_race_line_collision_direction_direction_start=0\n\
    \  local car_race_line_collision_direction_direction_end=0\n  local car_race_line_collision_direction_direction_length=0\n\
    \  local car_race_line_collision_direction_direction_number=0\n  local car_race_line_collision_direction_direction_direction=0\n\
    \  local car_race_line_collision_direction_direction_direction_start=0\n  local\
    \ car_race_line_collision_direction_direction_direction_end=0\n  local car_race_line_collision_direction_direction_direction_length=0\n\
    \  local car_race_line_collision_direction_direction_direction_number=0\n  local\
    \ car_race_line_collision_direction_direction_direction_direction=0\n  local car_race_line_collision_direction_direction_direction_direction_start=0\n\
    \  local car_race_line_collision_direction_direction_direction_direction_end=0\n\
    \  local car_race_line_collision_direction_direction_direction_direction_length=0\n\
    \  local car_race_line_collision_direction_direction_direction_direction_number=0\n\
    \  local car_race_line_collision_direction_direction_direction_direction_direction=0\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: '''': No such file or directory

    cat: '''': No such file or directory

    '
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local imax\n  local jmax\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local\
    \ i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n\
    \  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local\
    \ j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n\
    \  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local\
    \ i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n\
    \  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n  local i0\n  local\
    \ j0\n  local i1\n  local j1\n  local i0\n  local j0\n  local i1\n  local j1\n\
    \  local i0\n  local j0\n  local \n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_limit\n\
    \  local collision_distance_limit2\n  local collision_distance_limit3\n  local\
    \ collision_distance_limit4\n  local collision_distance_limit5\n  local collision_distance_limit6\n\
    \  local collision_distance_limit7\n  local collision_distance_limit8\n  local\
    \ collision_distance_limit9\n  local collision_distance_limit10\n  local collision_distance_limit11\n\
    \  local collision_distance_limit12\n  local collision_distance_limit13\n  local\
    \ collision_distance_limit14\n  local collision_distance_limit15\n  local collision_distance_limit16\n\
    \  local collision_distance_limit17\n  local collision_distance_limit18\n  local\
    \ collision_distance_limit19\n  local collision_distance_limit20\n  local collision_distance_limit21\n\
    \  local collision_distance_limit22\n  local collision_distance_limit23\n  local\
    \ collision_distance_limit24\n  local collision_distance_limit25\n  local collision_distance_limit26\n\
    \  local collision_distance_limit27\n  local collision_distance_limit28\n  local\
    \ collision_distance_limit29\n  local collision_distance_limit30\n  local collision_distance_limit31\n\
    \  local collision_distance_limit32\n  local collision_distance_limit33\n  local\
    \ collision_distance_limit34\n  local collision_distance_limit35\n  local collision_distance_limit36\n\
    \  local collision_distance_limit37\n  local collision_distance_limit38\n  local\
    \ collision_distance_limit39\n  local collision_distance_limit40\n  local collision_distance_limit41\n\
    \  local collision_distance_limit42\n  local collision_distance_limit43\n  local\
    \ collision_distance_limit44\n  local collision_distance_limit45\n  local collision_distance_limit46\n\
    \  local collision_distance_limit47\n  local collision_distance_limit48\n  local\
    \ collision_distance_limit49\n  local collision_distance_limit50\n  local collision_distance_limit51\n\
    \  local collision_distance_limit52\n  local collision_distance_limit53\n  local\
    \ collision_distance_limit54\n  local collision_distance_limit55\n  local collision_distance_limit56\n\
    \  local collision_distance_limit57\n  local collision_distance_limit58\n  local\
    \ collision_distance_limit59\n  local collision_distance_limit60\n  local collision_distance_limit61\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  local collision_distance\n  local collision_distance_max\n \
    \ local collision_distance_min\n  local collision_distance_sum\n  local collision_distance_sum2\n\
    \  local collision_distance_sum3\n  local collision_distance_sum4\n  local collision_distance_sum5\n\
    \  local collision_distance_sum6\n  local collision_distance_sum7\n  local collision_distance_sum8\n\
    \  local collision_distance_sum9\n  local collision_distance_sum10\n  local collision_distance_sum11\n\
    \  local collision_distance_sum12\n  local collision_distance_sum13\n  local collision_distance_sum14\n\
    \  local collision_distance_sum15\n  local collision_distance_sum16\n  local collision_distance_sum17\n\
    \  local collision_distance_sum18\n  local collision_distance_sum19\n  local collision_distance_sum20\n\
    \  local collision_distance_sum21\n  local collision_distance_sum22\n  local collision_distance_sum23\n\
    \  local collision_distance_sum24\n  local collision_distance_sum25\n  local collision_distance_sum26\n\
    \  local collision_distance_sum27\n  local collision_distance_sum28\n  local collision_distance_sum29\n\
    \  local collision_distance_sum30\n  local collision_distance_sum31\n  local collision_distance_sum32\n\
    \  local collision_distance_sum33\n  local collision_distance_sum34\n  local collision_distance_sum35\n\
    \  local collision_distance_sum36\n  local collision_distance_sum37\n  local collision_distance_sum38\n\
    \  local collision_distance_sum39\n  local collision_distance_sum40\n  local collision_distance_sum41\n\
    \  local collision_distance_sum42\n  local collision_distance_sum43\n  local collision_distance_sum44\n\
    \  local collision_distance_sum45\n  local collision_distance_sum46\n  local collision_distance_sum47\n\
    \  local collision_distance_sum48\n  local collision_distance_sum49\n  local collision_distance_sum50\n\
    \  local collision_distance_sum51\n  local collision_distance_sum52\n  local collision_distance_sum53\n\
    \  local collision_distance_sum54\n  local collision_distance_sum55\n  local collision_distance_sum56\n\
    \  local collision_distance_sum57\n  local collision_distance_sum58\n  local collision_distance_sum59\n\
    \  \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local collision_length\n  local collision_length2\n\
    \  local collision_length3\n  local collision_length4\n  local collision_length5\n\
    \  local collision_length6\n  local collision_length7\n  local collision_length8\n\
    \  local collision_length9\n  local collision_length10\n  local collision_length11\n\
    \  local collision_length12\n  local collision_length13\n  local collision_length14\n\
    \  local collision_length15\n  local collision_length16\n  local collision_length17\n\
    \  local collision_length18\n  local collision_length19\n  local collision_length20\n\
    \  local collision_length21\n  local collision_length22\n  local collision_length23\n\
    \  local collision_length24\n  local collision_length25\n  local collision_length26\n\
    \  local collision_length27\n  local collision_length28\n  local collision_length29\n\
    \  local collision_length30\n  local collision_length31\n  local collision_length32\n\
    \  local collision_length33\n  local collision_length34\n  local collision_length35\n\
    \  local collision_length36\n  local collision_length37\n  local collision_length38\n\
    \  local collision_length39\n  local collision_length40\n  local collision_length41\n\
    \  local collision_length42\n  local collision_length43\n  local collision_length44\n\
    \  local collision_length45\n  local collision_length46\n  local collision_length47\n\
    \  local collision_length48\n  local collision_length49\n  local collision_length50\n\
    \  local collision_length51\n  local collision_length52\n  local collision_length53\n\
    \  local collision_length54\n  local collision_length55\n  local collision_length56\n\
    \  local collision_length57\n  local collision_length58\n  local collision_length59\n\
    \  local collision_length60\n  local collision_length61\n  local collision_length62\n\
    \  local collision_length63\n  local collision_length64\n  local collision_length65\n\
    \  local collision_length66\n  local collision_length67\n  local collision_length68\n\
    \  local collision_length69\n  local collision_length70\n\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions\n  local collision\n  local x\n  local y\n  local speed\n  local\
    \ xspeed\n  local yspeed\n  local xspeed2\n  local yspeed2\n  local xspeed3\n\
    \  local yspeed3\n  local xspeed4\n  local yspeed4\n  local xspeed5\n  local yspeed5\n\
    \  local xspeed6\n  local yspeed6\n  local xspeed7\n  local yspeed7\n  local xspeed8\n\
    \  local yspeed8\n  local xspeed9\n  local yspeed9\n  local xspeed10\n  local\
    \ yspeed10\n  local xspeed11\n  local yspeed11\n  local xspeed12\n  local yspeed12\n\
    \  local xspeed13\n  local yspeed13\n  local xspeed14\n  local yspeed14\n  local\
    \ xspeed15\n  local yspeed15\n  local xspeed16\n  local yspeed16\n  local xspeed17\n\
    \  local yspeed17\n  local xspeed18\n  local yspeed18\n  local xspeed19\n  local\
    \ yspeed19\n  local xspeed20\n  local yspeed20\n  local xspeed21\n  local yspeed21\n\
    \  local xspeed22\n  local yspeed22\n  local xspeed23\n  local yspeed23\n  local\
    \ xspeed24\n  local yspeed24\n  local xspeed25\n  local yspeed25\n  local xspeed26\n\
    \  local yspeed26\n  local xspeed27\n  local yspeed27\n  local xspeed28\n  local\
    \ yspeed28\n  local xspeed29\n  local yspeed29\n  local xspeed30\n  local yspeed30\n\
    \  local xspeed31\n  local yspeed31\n  local xspeed32\n  local yspeed32\n  local\
    \ xspeed33\n  local yspeed33\n  local xspeed34\n  local yspeed34\n  local xspeed35\n\
    \  local yspeed35\n  local xspeed36\n  local yspeed36\n  local xspeed37\n  local\
    \ yspeed37\n  local xspeed38\n  local yspeed38\n  local xspeed39\n  local yspeed39\n\
    \  local xspeed40\n  local yspeed40\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041309
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local x\n  local y\n  local\
    \ z\n  local xleft\n  local yleft\n  local zleft\n  local xright\n  local yright\n\
    \  local zright\n  local xleft2\n  local yleft2\n  local zleft2\n  local xright2\n\
    \  local yright2\n  local zright2\n  local xleft3\n  local yleft3\n  local zleft3\n\
    \  local xright3\n  local yright3\n  local zright3\n  local xleft4\n  local yleft4\n\
    \  local zleft4\n  local xright4\n  local yright4\n  local zright4\n  local xleft5\n\
    \  local yleft5\n  local zleft5\n  local xright5\n  local yright5\n  local zright5\n\
    \  local xleft6\n  local yleft6\n  local zleft6\n  local xright6\n  local yright6\n\
    \  local zright6\n  local xleft7\n  local yleft7\n  local zleft7\n  local xright7\n\
    \  local yright7\n  local zright7\n  local xleft8\n  local yleft8\n  local zleft8\n\
    \  local xright8\n  local yright8\n  local zright8\n  local xleft9\n  local yleft9\n\
    \  local zleft9\n  local xright9\n  local yright9\n  local zright9\n  local xleft10\n\
    \  local yleft10\n  local zleft10\n  local xright10\n  local yright10\n  local\
    \ zright10\n  local xleft11\n  local yleft11\n  local zleft11\n  local xright11\n\
    \  local yright11\n  local zright11\n  local xleft12\n  local yleft12\n  local\
    \ zleft12\n  local xright12\n  local yright12\n  local zright12\n  local xleft13\n\
    \  local yleft13\n  local zleft13\n  local xright13\n  local yright13\n  local\
    \ zright13\n  local xleft14\n  local yleft14\n  local zleft14\n  local xright14\n\
    \  local yright14\n  local \n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041310
