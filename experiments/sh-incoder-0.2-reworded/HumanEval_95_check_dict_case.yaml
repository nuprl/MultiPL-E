name: HumanEval_95_check_dict_case
language: sh
prompt: "#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower\
  \ \n# case or all keys are strings in upper case, else return false.\n# The function\
  \ should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case\
  \ \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\\
  nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"\
  false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\
  \n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two\
  \ column CSV in key,value order\ncheck_dict_case() {\n"
tests: "}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
  \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
  n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
  nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") =\
  \ \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n\
  \    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
completions: ["  local keys=$(echo $1 | cut -d ',' -f 1)\n  local values=$(echo $1\
    \ | cut -d ',' -f 2)\n  local lower\n  local upper\n  lower=$(echo $keys | tr\
    \ '[:upper:]' '[:lower:]')\n  upper=$(echo $keys | tr '[:lower:]' '[:upper:]')\n\
    \  local len\n  len=$((${#keys} + 1))\n  local i\n  local j\n  local k\n  local\
    \ v\n  local result\n  result=\"false\"\n  for ((i=0;i<$len;i++)); do\n    for\
    \ ((j=0;j<$len;j++)); do\n      if [[ $i -eq $j ]]; then\n        continue\n \
    \     fi\n      if [[ $i -eq 0 ]]; then\n        if [[ $lower == $upper ]]; then\n\
    \          result=\"true\"\n          break\n        fi\n      else\n        if\
    \ [[ $lower == $upper ]]; then\n          result=\"true\"\n          break\n \
    \       fi\n      fi\n      if [[ $j -eq 0 ]]; then\n        if [[ $lower == $upper\
    \ ]]; then\n          result=\"true\"\n          break\n        fi\n      else\n\
    \        if [[ $lower == $upper ]]; then\n          result=\"true\"\n        \
    \  break\n        fi\n      fi\n    done\n  done\n  echo $result", "    local\
    \ csv_lines=$(echo $1 | sed 's/,/ /g')\n    local keys=$(echo $csv_lines | cut\
    \ -d ',' -f 1)\n    local values=$(echo $csv_lines | cut -d ',' -f 2)\n    local\
    \ lowercase_keys=$(echo $keys | tr '[:upper:]' '[:lower:]')\n    local uppercase_keys=$(echo\
    \ $keys | tr '[:lower:]' '[:upper:]')\n    local lowercase_values=$(echo $values\
    \ | tr '[:upper:]' '[:lower:]')\n    local uppercase_values=$(echo $values | tr\
    \ '[:lower:]' '[:upper:]')\n    local all_keys_are_lower=$(echo $lowercase_keys\
    \ | wc -l)\n    local all_keys_are_upper=$(echo $uppercase_keys | wc -l)\n   \
    \ local all_values_are_lower=$(echo $lowercase_values | wc -l)\n    local all_values_are_upper=$(echo\
    \ $uppercase_values | wc -l)\n    local all_keys_are_equal=$(echo $lowercase_keys\
    \ | sort | uniq | wc -l)\n    local all_values_are_equal=$(echo $lowercase_values\
    \ | sort | uniq | wc -l)\n    local all_keys_are_different=$(echo $lowercase_keys\
    \ | sort | uniq | wc -l)\n    local all_values_are_different=$(echo $lowercase_values\
    \ | sort | uniq | wc -l)\n    local all_keys_are_different_or_equal=$(echo $lowercase_keys\
    \ | sort | uniq | wc -l)\n    local all_values_are_different_or_equal=$(echo $lowercase_values\
    \ | sort | uniq | wc -l)\n    local all_keys_are_different_or_equal_or_empty=$(echo\
    \ $lowercase_keys | sort | uniq | wc -l)\n    local all_values_are_different_or_equal_or_empty=$(echo\
    \ $lowercase_values | sort | uniq | wc -l)\n    local all_keys_are_different_or_equal_or_empty_or_empty=$(echo\
    \ $lowercase_keys | sort | uniq | wc -l)\n    local all_values_are_different_or_equal_or_empty_or_empty=$(echo\
    \ $lowercase_values | sort | uniq | wc -l)\n    local all_keys_are_different_or_equal_or_empty_or_empty_or_empty=$(echo\
    \ $lowercase_keys | sort | uniq | wc -l)\n    local all_values_are_different_or_equal_or_empty_or_empty_or_empty=$(echo\
    \ $lowercase_values | sort | uniq | wc -l)\n    local all_keys_are_different_or_equal_or_empty_or_",
  "    local csv_line=\"$1\"\n    local key_col=\"$2\"\n    local value_col=\"$3\"\
    \n    local key_col_value=\"$4\"\n    local value_col_value=\"$5\"\n    local\
    \ key_col_lower=\"$6\"\n    local value_col_lower=\"$7\"\n    local key_col_upper=\"\
    $8\"\n    local value_col_upper=\"$9\"\n    local key_col_lower_in=\"$10\"\n \
    \   local value_col_lower_in=\"$11\"\n    local key_col_upper_in=\"$12\"\n   \
    \ local value_col_upper_in=\"$13\"\n    local key_col_lower_out=\"$14\"\n    local\
    \ value_col_lower_out=\"$15\"\n    local key_col_upper_out=\"$16\"\n    local\
    \ value_col_upper_out=\"$17\"\n    local key_col_lower_out_in=\"$18\"\n    local\
    \ value_col_lower_out_in=\"$19\"\n    local key_col_upper_out_in=\"$20\"\n   \
    \ local value_col_upper_out_in=\"$21\"\n    local key_col_lower_out_out=\"$22\"\
    \n    local value_col_lower_out_out=\"$23\"\n    local key_col_upper_out_out=\"\
    $24\"\n    local value_col_upper_out_out=\"$25\"\n    local key_col_lower_out_out_in=\"\
    $26\"\n    local value_col_lower_out_out_in=\"$27\"\n    local key_col_upper_out_out_in=\"\
    $28\"\n    local value_col_upper_out_out_in=\"$29\"\n    local key_col_lower_out_out_out=\"\
    $30\"\n    local value_col_lower_out_out_out=\"$31\"\n    local key_col_upper_out_out_out=\"\
    $32\"\n    local value_col_upper_out_out_out=\"$33\"\n    local key_col_lower_out_out_out_in=\"\
    $34\"\n    local value_col_lower_out_out_out_in=\"$35\"\n    local key_col_upper_out_out_out_in=\"\
    $36\"\n    local value_col_upper_out_out_out_in=\"$37\"\n    local key_col_lower_out_out_out_out=\"\
    $38\"\n    local value_col_lower_out_out_out_out=\"$39\"\n    local key_col_upper_out_out_out_out=\"\
    $40\"\n    local value_col_upper_out_out_out_out=\"$41\"\n    local key_col_lower_out_out_out_out_in=\"\
    $42\"\n    local value_col_lower_out_out_out_out_in=\"$43\"\n    local key_col_upper_out_out_out_out_in=\"\
    $44\"\n    local value_col_upper_out_out_out_out_in=\"$45\"\n    local key_col_lower_out_out_out_out_out=\"\
    $46\"\n    local value_", "    local csv=$1\n    local keys=$(echo $csv | awk\
    \ -F, '{print $1}')\n    local values=$(echo $csv | awk -F, '{print $2}')\n  \
    \  local lower=0\n    local upper=0\n    local result=0\n    for k in $keys; do\n\
    \        lower=$(echo $k | awk '{print tolower($0)}')\n        upper=$(echo $k\
    \ | awk '{print toupper($0)}')\n        if [ \"$lower\" == \"$k\" ] || [ \"$upper\"\
    \ == \"$k\" ]; then\n            result=1\n        fi\n    done\n    if [ \"$result\"\
    \ -eq 1 ]; then\n        return 0\n    else\n        return 1\n    fi", "    local\
    \ csv=$1\n    local keys=$(echo $csv | awk -F, '{print $1}')\n    local values=$(echo\
    \ $csv | awk -F, '{print $2}')\n    local lower\n    local upper\n    lower=$(echo\
    \ $keys | awk -F, '{print tolower($0)}')\n    upper=$(echo $keys | awk -F, '{print\
    \ toupper($0)}')\n    lower=${lower//,/ }\n    upper=${upper//,/ }\n    if [ -z\
    \ \"$keys\" ]; then\n        echo \"$csv is empty\"\n        false\n    elif [\
    \ -z \"$values\" ]; then\n        echo \"$csv is empty\"\n        false\n    elif\
    \ [ \"$lower\" != \"$upper\" ]; then\n        echo \"$csv has keys that are not\
    \ strings in lower or upper case\"\n        false\n    else\n        true\n  \
    \  fi", "    local csv_line=$1\n    local csv_line_keys=$(echo $csv_line | awk\
    \ -F, '{print $1}')\n    local csv_line_values=$(echo $csv_line | awk -F, '{print\
    \ $2}')\n    local csv_line_lower=$(echo $csv_line_keys | awk '{print tolower($0)}')\n\
    \    local csv_line_upper=$(echo $csv_line_keys | awk '{print toupper($0)}')\n\
    \    local csv_line_count=$(echo $csv_line_keys | wc -w)\n    local csv_line_all_lower=$(echo\
    \ $csv_line_values | awk '{print tolower($0)}')\n    local csv_line_all_upper=$(echo\
    \ $csv_line_values | awk '{print toupper($0)}')\n    local csv_line_all_count=$(echo\
    \ $csv_line_values | wc -w)\n    local csv_line_all_lower_in=$(echo $csv_line_all_lower\
    \ | awk '{print tolower($0)}')\n    local csv_line_all_upper_in=$(echo $csv_line_all_upper\
    \ | awk '{print toupper($0)}')\n    local csv_line_all_count_in=$(echo $csv_line_all_count\
    \ | wc -w)\n    local csv_line_all_lower_in_all=$(echo $csv_line_all_lower_in)\n\
    \    local csv_line_all_upper_in_all=$(echo $csv_line_all_upper_in)\n    local\
    \ csv_line_all_count_in_all=$(echo $csv_line_all_count_in)\n    local csv_line_all_lower_in_all_lower=$(echo\
    \ $csv_line_all_lower_in_all | awk '{print tolower($0)}')\n    local csv_line_all_lower_in_all_upper=$(echo\
    \ $csv_line_all_lower_in_all | awk '{print toupper($0)}')\n    local csv_line_all_upper_in_all_lower=$(echo\
    \ $csv_line_all_upper_in_all | awk '{print tolower($0)}')\n    local csv_line_all_upper_in_all_upper=$(echo\
    \ $csv_line_all_upper_in_all | awk '{print toupper($0)}')\n    local csv_line_all_count_in_all_lower=$(echo\
    \ $csv_line_all_count_in_all | wc -w)\n    local csv_line_all_count_in_all_upper=$(echo\
    \ $csv_line_all_count_in_all | wc -w)\n    local csv_line_all_count_in_all_lower_in=$(echo\
    \ $csv_line_all_count_in_all_lower | awk '{print tolower($0)}')\n    local csv_line_all_count_in_all_upper_in=$(echo\
    \ $csv_line_all_count_in_all_upper | awk '{print toupper($0)}')\n    local csv_line_all_count_in_all_lower_in_",
  "  local csv=$1\n  local keys=$2\n  local lower=${3:-true}\n  local upper=${4:-true}\n\
    \  local count=0\n  local key\n  local value\n  local lower\n  local upper\n \
    \ local key\n  local value\n  local lower\n  local upper\n  local key\n  local\
    \ value\n  local lower\n  local upper\n  local key\n  local value\n  local lower\n\
    \  local upper\n  local key\n  local value\n  local lower\n  local upper\n  local\
    \ key\n  local value\n  local lower\n  local upper\n  local key\n  local value\n\
    \  local lower\n  local upper\n  local key\n  local value\n  local lower\n  local\
    \ upper\n  local key\n  local value\n  local lower\n  local upper\n  local key\n\
    \  local value\n  local lower\n  local upper\n  local key\n  local value\n  local\
    \ lower\n  local upper\n  local key\n  local value\n  local lower\n  local upper\n\
    \  local key\n  local value\n  local lower\n  local upper\n  local key\n  local\
    \ value\n  local lower\n  local upper\n  local key\n  local value\n  local lower\n\
    \  local upper\n  local key\n  local value\n  local lower\n  local upper\n  local\
    \ key\n  local value\n  local lower\n  local upper\n  local key\n  local value\n\
    \  local lower\n  local upper\n  local key\n  local value\n  local lower\n  local\
    \ upper\n  local key\n  local value\n  local lower\n  local upper\n  local key\n\
    \  local value\n  local lower\n  local upper\n  local key\n  local value\n  local\
    \ lower\n  local upper\n  local key\n  local value\n  local lower\n  local upper\n\
    \  local key\n  local value\n  local lower\n  local upper\n  local key\n  local\
    \ value\n  local lower\n  local upper\n  local key\n  local value\n  local lower\n\
    \  local upper\n  local key\n  local value\n  local lower\n  local upper\n  local\
    \ key\n  local value\n  local lower\n  local upper\n  local key\n  local value\n\
    \  local lower\n  local upper\n  local key\n  local value\n  local lower\n", " \
    \   local key\n    local value\n    local count\n    local lower\n    local upper\n\
    \    local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n", "    local csv_line=$1\n    local\
    \ csv_line_keys=$(echo $csv_line | cut -d',' -f1)\n    local csv_line_values=$(echo\
    \ $csv_line | cut -d',' -f2)\n    local csv_line_lower=$(echo $csv_line_keys |\
    \ tr '[:upper:]' '[:lower:]')\n    local csv_line_upper=$(echo $csv_line_keys\
    \ | tr '[:lower:]' '[:upper:]')\n    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n\
    \    local csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    local csv_line_upper_index=0\n    local csv_line_key_count=0\n    local csv_line_value_count=0\n\
    \    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n    local\
    \ csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    local csv_line_upper_index=0\n    local csv_line_key_count=0\n    local csv_line_value_count=0\n\
    \    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n    local\
    \ csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    local csv_line_upper_index=0\n    local csv_line_key_count=0\n    local csv_line_value_count=0\n\
    \    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n    local\
    \ csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    local csv_line_upper_index=0\n    local csv_line_key_count=0\n    local csv_line_value_count=0\n\
    \    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n    local\
    \ csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    local csv_line_upper_index=0\n    local csv_line_key_count=0\n    local csv_line_value_count=0\n\
    \    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n    local\
    \ csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    local csv_line_upper_index=0\n    local csv_line_key_count=0\n    local csv_line_value_count=0\n\
    \    local csv_line_lower_index=0\n    local csv_line_upper_index=0\n    local\
    \ csv_line_key_count=0\n    local csv_line_value_count=0\n    local csv_line_lower_index=0\n\
    \    ", "    local csv_lines=$1\n    local csv_headers=$2\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n\
    \    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n\
    \    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n\
    \    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n\
    \    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n\
    \    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/#/\\n/g')\n    local csv_headers=$(echo $csv_headers | sed 's/#/\\n/g')\n\
    \    local csv_headers=$(echo $csv_headers | sed 's/#/\\n", "    local csv=$1\n\
    \    local key\n    local value\n    local found\n    local lower\n    local upper\n\
    \    local found\n    lower=$(echo $csv | awk -F, '{print $1}')\n    upper=$(echo\
    \ $csv | awk -F, '{print $2}')\n    found=$(echo $lower | tr '[:upper:]' '[:lower:]')\n\
    \    found=$(echo $upper | tr '[:upper:]' '[:lower:]')\n    if [ -z \"$found\"\
    \ ]; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi", " \
    \   local csv_lines=$(cat $1)\n    local keys=$(echo $csv_lines | awk -F, '{print\
    \ $1}')\n    local vals=$(echo $csv_lines | awk -F, '{print $2}')\n    local lower=$(echo\
    \ $keys | awk '{print tolower($0)}')\n    local upper=$(echo $keys | awk '{print\
    \ toupper($0)}')\n    local lower_in=$(echo $lower)\n    local upper_in=$(echo\
    \ $upper)\n    local lower_in_all=$(echo $lower_in)\n    local upper_in_all=$(echo\
    \ $upper_in)\n    local lower_in_all_len=$(echo $lower_in_all | wc -w)\n    local\
    \ upper_in_all_len=$(echo $upper_in_all | wc -w)\n    local lower_in_all_len_equal=$(echo\
    \ $lower_in_all_len | bc)\n    local upper_in_all_len_equal=$(echo $upper_in_all_len\
    \ | bc)\n    local lower_in_all_len_greater_equal=$(echo $lower_in_all_len | bc\
    \ -l)\n    local upper_in_all_len_greater_equal=$(echo $upper_in_all_len | bc\
    \ -l)\n    local lower_in_all_len_less_equal=$(echo $lower_in_all_len | bc -u)\n\
    \    local upper_in_all_len_less_equal=$(echo $upper_in_all_len | bc -u)\n   \
    \ local lower_in_all_len_equal=$(echo $lower_in_all_len | bc)\n    local upper_in_all_len_equal=$(echo\
    \ $upper_in_all_len | bc)\n    local lower_in_all_len_greater_equal=$(echo $lower_in_all_len\
    \ | bc -l)\n    local upper_in_all_len_greater_equal=$(echo $upper_in_all_len\
    \ | bc -l)\n    local lower_in_all_len_less_equal=$(echo $lower_in_all_len | bc\
    \ -u)\n    local upper_in_all_len_less_equal=$(echo $upper_in_all_len | bc -u)\n\
    \    local lower_in_all_len_equal=$(echo $lower_in_all_len | bc)\n    local upper_in_all_len_equal=$(echo\
    \ $upper_in_all_len | bc)\n    local lower_in_all_len_greater_equal=$(echo $lower_in_all_len\
    \ | bc -l)\n    local upper_in_all_len_greater_equal=$(echo $upper_in_all_len\
    \ | bc -l)\n    local lower_in_all_len_less_equal=$(echo $lower_in_all_len | bc\
    \ -u)\n    local upper_in_all_len_less_equal=$(echo $upper_in_all_len | bc -u)\n\
    \    local lower_in_all_len_equal=$(echo $", "    local csv_lines=$1\n    local\
    \ keys=$(echo $csv_lines | cut -d, -f1)\n    local values=$(echo $csv_lines |\
    \ cut -d, -f2)\n    local lowercase_keys=$(echo $keys | tr [a-z] [A-Z])\n    local\
    \ uppercase_keys=$(echo $keys | tr [A-Z] [a-z])\n    local lowercase_values=$(echo\
    \ $values | tr [a-z] [A-Z])\n    local uppercase_values=$(echo $values | tr [A-Z]\
    \ [a-z])\n    local all_lowercase_keys=$(echo $lowercase_keys | tr [A-Z] [a-z])\n\
    \    local all_uppercase_keys=$(echo $uppercase_keys | tr [A-Z] [a-z])\n    local\
    \ all_lowercase_values=$(echo $lowercase_values | tr [A-Z] [a-z])\n    local all_uppercase_values=$(echo\
    \ $uppercase_values | tr [A-Z] [a-z])\n    local all_keys=$(echo $all_lowercase_keys\
    \ $all_uppercase_keys)\n    local all_values=$(echo $all_lowercase_values $all_uppercase_values)\n\
    \    local all_keys_present=$(echo $all_keys | tr [A-Z] [a-z])\n    local all_values_present=$(echo\
    \ $all_values | tr [A-Z] [a-z])\n    local all_keys_present=$(echo $all_keys |\
    \ tr [A-Z] [a-z])\n    local all_values_present=$(echo $all_values | tr [A-Z]\
    \ [a-z])\n    local all_keys_present=$(echo $all_keys | tr [A-Z] [a-z])\n    local\
    \ all_values_present=$(echo $all_values | tr [A-Z] [a-z])\n    local all_keys_present=$(echo\
    \ $all_keys | tr [A-Z] [a-z])\n    local all_values_present=$(echo $all_values\
    \ | tr [A-Z] [a-z])\n    local all_keys_present=$(echo $all_keys | tr [A-Z] [a-z])\n\
    \    local all_values_present=$(echo $all_values | tr [A-Z] [a-z])\n    local\
    \ all_keys_present=$(echo $all_keys | tr [A-Z] [a-z])\n    local all_values_present=$(echo\
    \ $all_values | tr [A-Z] [a-z])\n    local all_keys_present=$(echo $all_keys |\
    \ tr [A-Z] [a-z])\n    local all_values_present=$(echo $all_values | tr [A-Z]\
    \ [a-z])\n    local all_keys_present=$(echo $all_keys | tr [A-Z] [a-z])\n    local\
    \ all_values_present=$(echo $all_values | tr [A-Z] [a-z])\n    local all_keys_present=$(echo\
    \ $all_keys | tr [A-Z] [a-z])\n    local all_values_present=$(echo $all_values\
    \ | tr [A-Z] [a-z])\n    local all_keys_present=$(echo $all_keys | tr [A-Z] [",
  "    local csv_lines=$1\n    local csv_headers=$2\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/g')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed 's/^/#/')\n    local csv_headers=$(echo $csv_headers | sed 's/$/#/')\n \
    \   local csv_headers=$(echo $csv_headers | sed 's/#/\\n/')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/\\n/')\n    local csv_headers=$(echo $csv_headers |\
    \ sed '", "    local csv=$1\n    local keys=$2\n    local lower=${3:-true}\n \
    \   local upper=${4:-true}\n    local count=0\n    local result=true\n    local\
    \ line\n    local key\n    local value\n    IFS=,\n    for line; do\n        IFS=,\n\
    \        key=$(echo $line | cut -d',' -f1)\n        value=$(echo $line | cut -d','\
    \ -f2)\n        if [ \"$lower\" == \"true\" ]; then\n            key=$(echo $key\
    \ | tr '[:upper:]' '[:lower:]')\n        fi\n        if [ \"$upper\" == \"true\"\
    \ ]; then\n            key=$(echo $key | tr '[:lower:]' '[:upper:]')\n       \
    \ fi\n        if [ \"$keys\" == \"$key\" ]; then\n            count=$((count+1))\n\
    \        else\n            result=false\n        fi\n    done\n    if [ \"$count\"\
    \ == \"$keys\" ]; then\n        result=true\n    fi\n    echo \"$result\"", " \
    \   local csv=$1\n    local keys=$(echo $csv | awk -F, '{print $1}')\n    local\
    \ values=$(echo $csv | awk -F, '{print $2}')\n    local lower=0\n    local upper=0\n\
    \    local ok=1\n    for (( i=0; i<${#keys[@]}; i++ )); do\n        lower=$(echo\
    \ $lower | awk -F, '{print $1}')\n        upper=$(echo $upper | awk -F, '{print\
    \ $1}')\n        if [[ ${keys[$i]} == ${values[$i]} ]]; then\n            lower=$((\
    \ $lower + 1 ))\n            upper=$(( $upper + 1 ))\n        else\n         \
    \   ok=0\n        fi\n    done\n    if [[ $ok == 1 ]]; then\n        if [[ $lower\
    \ == $upper ]]; then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi", "    local\
    \ csv_line=$1\n    local csv_line_split=(${csv_line//,/ })\n    local csv_line_count=$((${#csv_line_split[@]}\
    \ / 2))\n    local csv_line_first_key=${csv_line_split[0]}\n    local csv_line_second_key=${csv_line_split[1]}\n\
    \    local csv_line_first_key_upper=$(echo \"${csv_line_first_key}\" | tr '[:upper:]'\
    \ '[:lower:]')\n    local csv_line_second_key_upper=$(echo \"${csv_line_second_key}\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_lower=$(echo \"\
    ${csv_line_first_key}\" | tr '[:lower:]' '[:upper:]')\n    local csv_line_second_key_lower=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:lower:]' '[:upper:]')\n    local csv_line_first_key_equal=$(echo\
    \ \"${csv_line_first_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_second_key_equal=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_not_equal=$(echo\
    \ \"${csv_line_first_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_second_key_not_equal=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_empty=$(echo\
    \ \"${csv_line_first_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_second_key_empty=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_not_empty=$(echo\
    \ \"${csv_line_first_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_second_key_not_empty=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_not_empty=$(echo\
    \ \"${csv_line_first_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_second_key_not_empty=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_not_empty=$(echo\
    \ \"${csv_line_first_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_second_key_not_empty=$(echo\
    \ \"${csv_line_second_key}\" | tr '[:upper:]' '[:lower:]')\n    local csv_line_first_key_not_",
  "    local csv_lines=$1\n    local csv_headers=$2\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(echo $csv_headers | sed\
    \ 's/ //g')\n    local csv_headers=$(echo $csv_headers | sed 's/,/ /g')\n    local\
    \ csv_headers=$(echo $csv_headers | sed 's/ //g')\n    local csv_headers=$(echo\
    \ $csv_headers | sed 's/,/ /g')\n    local csv_headers=$(", "    local csv=$1\n\
    \    local keys=$(echo $csv | cut -d',' -f1)\n    local values=$(echo $csv | cut\
    \ -d',' -f2)\n    local lower=false\n    local upper=false\n    local fail=false\n\
    \    local fail_keys=()\n    local fail_values=()\n    local fail_keys_upper=()\n\
    \    local fail_values_upper=()\n    local fail_keys_lower=()\n    local fail_values_lower=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n\
    \    local fail_values_count=()\n    local fail_keys_count=()\n    local fail_values_count=()\n\
    \    local fail_keys_count=()\n    local fail_values_count=()\n    local fail_keys_count=()\n",
  "    local csv_line=$1\n    local csv_line_split=(${csv_line//,/ })\n    local csv_line_split_len=${#csv_line_split[@]}\n\
    \    local csv_line_split_len2=$((csv_line_split_len-1))\n    local csv_line_split_len3=$((csv_line_split_len-csv_line_split_len2))\n\
    \    local csv_line_split_len4=$((csv_line_split_len-csv_line_split_len3))\n \
    \   local csv_line_split_len5=$((csv_line_split_len-csv_line_split_len4))\n  \
    \  local csv_line_split_len6=$((csv_line_split_len-csv_line_split_len5))\n   \
    \ local csv_line_split_len7=$((csv_line_split_len-csv_line_split_len6))\n    local\
    \ csv_line_split_len8=$((csv_line_split_len-csv_line_split_len7))\n    local csv_line_split_len9=$((csv_line_split_len-csv_line_split_len8))\n\
    \    local csv_line_split_len10=$((csv_line_split_len-csv_line_split_len9))\n\
    \    local csv_line_split_len11=$((csv_line_split_len-csv_line_split_len10))\n\
    \    local csv_line_split_len12=$((csv_line_split_len-csv_line_split_len11))\n\
    \    local csv_line_split_len13=$((csv_line_split_len-csv_line_split_len12))\n\
    \    local csv_line_split_len14=$((csv_line_split_len-csv_line_split_len13))\n\
    \    local csv_line_split_len15=$((csv_line_split_len-csv_line_split_len14))\n\
    \    local csv_line_split_len16=$((csv_line_split_len-csv_line_split_len15))\n\
    \    local csv_line_split_len17=$((csv_line_split_len-csv_line_split_len16))\n\
    \    local csv_line_split_len18=$((csv_line_split_len-csv_line_split_len17))\n\
    \    local csv_line_split_len19=$((csv_line_split_len-csv_line_split_len18))\n\
    \    local csv_line_split_len20=$((csv_line_split_len-csv_line_split_len19))\n\
    \    local csv_line_split_len21=$((csv_line_split_len-csv_line_split_len20))\n\
    \    local csv_line_split_len22=$((csv_line_split_len-csv_line_split_len21))\n\
    \    local csv_line_split_len23=$((csv_line_split_len-csv_line_split_len22))\n\
    \    local csv_line_split_len24=$((csv_line_split_len-csv_line_split_len23))\n\
    \    local csv_line_split_len25=$((csv_"]
stop_tokens:
- "\n}"
