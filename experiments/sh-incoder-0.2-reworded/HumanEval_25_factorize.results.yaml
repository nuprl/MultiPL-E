language: sh
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=$(factorize $1 $2\
    \ $3 $4 $5 $6 $7 $8 $9)\n    local factors_count=$(expr $factors_count + 1)\n\
    \    local factors_count=$(expr $factors_count - 1)\n    local factors_count=$(expr\
    \ $factors_count + 1)\n    local factors_count=$(expr $factors_count - 1)\n  \
    \  local factors_count=$(expr $factors_count + 1)\n    local factors_count=$(expr\
    \ $factors_count - 1)\n    local factors_count=$(expr $factors_count + 1)\n  \
    \  local factors_count=$(expr $factors_count - 1)\n    local factors_count=$(expr\
    \ $factors_count + 1)\n    local factors_count=$(expr $factors_count - 1)\n  \
    \  local factors_count=$(expr $factors_count + 1)\n    local factors_count=$(expr\
    \ $factors_count - 1)\n    local factors_count=$(expr $factors_count + 1)\n  \
    \  local factors_count=$(expr $factors_count - 1)\n    local factors_count=$(expr\
    \ $factors_count + 1)\n    local factors_count=$(expr $factors_count - 1)\n  \
    \  local factors_count=$(expr $factors_count + 1)\n    local factors_count=$(expr\
    \ $factors_count - 1)\n    local factors_count=$(expr $factors_count + 1)\n  \
    \  local factors_count=$(expr $factors_count - 1)\n    local factors_count=$(expr\
    \ $factors_count + 1)\n    local factors_count=$(expr $factors_count - 1)\n  \
    \  local factors_count=$(expr $factors_count + 1)\n    local factors_count=$(expr\
    \ $factors_count - 1)\n    local factors_count=$(expr $factors_count + 1)\n  \
    \  local factors_count=$(expr $factors_count - 1)\n    local factors_count=$(expr\
    \ $factors_count + 1)\n    local factors_count=$(expr $factors_count - 1)\n  \
    \  local factors_count=$(expr $factors_count + 1)\n    local factors_count=$(expr\
    \ $factors_count - 1)\n    local factors_count=$(expr $factors_count + 1)\n  \
    \  local factors_count=$(expr $factors_count - 1)\n    local factors_count=$(expr\
    \ $factors_count + 1)\n    local factors_count=$(expr $factors_count - 1)\n  \
    \  local factors_count=$(expr $factors_count + 1)\n    local factors_count=$(expr\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpogrmelcb.sh: line 51: unexpected EOF while looking for matching
    `)''

    /tmp/tmpogrmelcb.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local \n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=$1\n    local factor_count=1\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local count\n    local i\n    local j\n\
    \    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=1\n    local factor_count=0\n\
    \    local factors_string=''\n    local factors_string2=''\n    local factors_string3=''\n\
    \    local factors_string4=''\n    local factors_string5=''\n    local factors_string6=''\n\
    \    local factors_string7=''\n    local factors_string8=''\n    local factors_string9=''\n\
    \    local factors_string10=''\n    local factors_string11=''\n    local factors_string12=''\n\
    \    local factors_string13=''\n    local factors_string14=''\n    local factors_string15=''\n\
    \    local factors_string16=''\n    local factors_string17=''\n    local factors_string18=''\n\
    \    local factors_string19=''\n    local factors_string20=''\n    local factors_string21=''\n\
    \    local factors_string22=''\n    local factors_string23=''\n    local factors_string24=''\n\
    \    local factors_string25=''\n    local factors_string26=''\n    local factors_string27=''\n\
    \    local factors_string28=''\n    local factors_string29=''\n    local factors_string30=''\n\
    \    local factors_string31=''\n    local factors_string32=''\n    local factors_string33=''\n\
    \    local factors_string34=''\n    local factors_string35=''\n    local factors_string36=''\n\
    \    local factors_string37=''\n    local factors_string38=''\n    local factors_string39=''\n\
    \    local factors_string40=''\n    local factors_string41=''\n    local factors_string42=''\n\
    \    local factors_string43=''\n    local factors_string44=''\n    local factors_string45=''\n\
    \    local factors_string46=''\n    local factors_string47=''\n    local factors_string48=''\n\
    \    local factors_string49=''\n    local factors_string50=''\n    local factors_string51=''\n\
    \    local factors_string52=''\n    local factors_string53=''\n    local factors_string54=''\n\
    \    local factors_string55=''\n    local factors_string56=''\n    local factors_string57=''\n\
    \    local factors_string58=''\n    local factors_string59=''\n    local factors_string60=''\n\
    \    local factors_string61=''\n    local factors_string62=''\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local count\n    local i\n    local j\n\
    \    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor\n\
    \  local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=\"$1\"\n    local factors_array=()\n    local\
    \ factors_count=$(echo \"$factors\" | wc -w)\n    local factors_count=${#factors_count[@]}\n\
    \    local factors_count=${factors_count-1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factors_count/1}\n    local factors_count=${factors_count/1}\n\
    \    local factors_count=${factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_n2b1_c0.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local i\n    local\
    \ j\n    local k\n    local count\n    local factor\n    local factors\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n    local num\n    local nums\n    local num\n    local nums\n    local\
    \ num\n    local nums\n    local num\n    local nums\n    local num\n    local\
    \ nums\n\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=$1\n    local factor_count=0\n\
    \    local factors_string=''\n    local factors_string_count=0\n    local factors_string_count2=0\n\
    \    local factors_string_count3=0\n    local factors_string_count4=0\n    local\
    \ factors_string_count5=0\n    local factors_string_count6=0\n    local factors_string_count7=0\n\
    \    local factors_string_count8=0\n    local factors_string_count9=0\n    local\
    \ factors_string_count10=0\n    local factors_string_count11=0\n    local factors_string_count12=0\n\
    \    local factors_string_count13=0\n    local factors_string_count14=0\n    local\
    \ factors_string_count15=0\n    local factors_string_count16=0\n    local factors_string_count17=0\n\
    \    local factors_string_count18=0\n    local factors_string_count19=0\n    local\
    \ factors_string_count20=0\n    local factors_string_count21=0\n    local factors_string_count22=0\n\
    \    local factors_string_count23=0\n    local factors_string_count24=0\n    local\
    \ factors_string_count25=0\n    local factors_string_count26=0\n    local factors_string_count27=0\n\
    \    local factors_string_count28=0\n    local factors_string_count29=0\n    local\
    \ factors_string_count30=0\n    local factors_string_count31=0\n    local factors_string_count32=0\n\
    \    local factors_string_count33=0\n    local factors_string_count34=0\n    local\
    \ factors_string_count35=0\n    local factors_string_count36=0\n    local factors_string_count37=0\n\
    \    local factors_string_count38=0\n    local factors_string_count39=0\n    local\
    \ factors_string_count40=0\n    local factors_string_count41=0\n    local factors_string_count42=0\n\
    \    local factors_string_count43=0\n    local factors_string_count44=0\n    local\
    \ factors_string_count45=0\n    local factors_string_count46=0\n    local factors_string_count47=0\n\
    \    local factors_string_count48=0\n    local factors_string_count49=0\n    local\
    \ factors_string_count50=0\n    local factors_string_count51=0\n    local factors_string_count52=0\n\
    \    local factors_string_count53=0\n    local factors_string_count54=0\n    local\
    \ \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local factors=()\n  local factor\n  local factor_count\n  local\
    \ factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local \n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local i\n    local j\n    local factor\n    local factors\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=$(factorize \"$1\"\
    \ | wc -l)\n    local factors_count_max=$((factors_count - 1))\n    local factors_count_min=$((factors_count\
    \ + 1))\n    local factors_count_temp=$((factors_count_max - factors_count_min\
    \ + 1))\n    local factors_count_temp2=$((factors_count_temp - 1))\n    local\
    \ factors_count_temp3=$((factors_count_temp - 2))\n    local factors_count_temp4=$((factors_count_temp\
    \ - 3))\n    local factors_count_temp5=$((factors_count_temp - 4))\n    local\
    \ factors_count_temp6=$((factors_count_temp - 5))\n    local factors_count_temp7=$((factors_count_temp\
    \ - 6))\n    local factors_count_temp8=$((factors_count_temp - 7))\n    local\
    \ factors_count_temp9=$((factors_count_temp - 8))\n    local factors_count_temp10=$((factors_count_temp\
    \ - 9))\n    local factors_count_temp11=$((factors_count_temp - 10))\n    local\
    \ factors_count_temp12=$((factors_count_temp - 11))\n    local factors_count_temp13=$((factors_count_temp\
    \ - 12))\n    local factors_count_temp14=$((factors_count_temp - 13))\n    local\
    \ factors_count_temp15=$((factors_count_temp - 14))\n    local factors_count_temp16=$((factors_count_temp\
    \ - 15))\n    local factors_count_temp17=$((factors_count_temp - 16))\n    local\
    \ factors_count_temp18=$((factors_count_temp - 17))\n    local factors_count_temp19=$((factors_count_temp\
    \ - 18))\n    local factors_count_temp20=$((factors_count_temp - 19))\n    local\
    \ factors_count_temp21=$((factors_count_temp - 20))\n    local factors_count_temp22=$((factors_count_temp\
    \ - 21))\n    local factors_count_temp23=$((factors_count_temp - 22))\n    local\
    \ factors_count_temp24=$((factors_count_temp - 23))\n    local factors_count_temp25=$((factors_count_temp\
    \ - 24))\n    local factors_count_temp26=$((factors_count_temp - 25))\n    local\
    \ factors_count_temp27=$((factors_count_temp - 26))\n    local factors_count_temp28=$((factors_count_\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpigipsmbg.sh: line 45: unexpected EOF while looking for matching
    `)''

    /tmp/tmpigipsmbg.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local \n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local n=$1\n  local factors=()\n  local factor\n  local count\n\
    \  local i\n  local j\n  local k\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n  local factor\n  local count\n  local factor\n\
    \  local count\n  local factor\n  local count\n  local factor\n  local count\n\
    \  local factor\n  local count\n\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor=\"\"\n \
    \   local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n  \
    \  local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n    local factor=\"\"\n    local factor_count=0\n    local factor=\"\
    \"\n    local factor_count=0\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor=\"\"\n    local factor_count=0\n    local factor=\"\"\n    local\
    \ factor_count=0\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=()\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_index2=0\n    local factor_index3=0\n\
    \    local factor_index4=0\n    local factor_index5=0\n    local factor_index6=0\n\
    \    local factor_index7=0\n    local factor_index8=0\n    local factor_index9=0\n\
    \    local factor_index10=0\n    local factor_index11=0\n    local factor_index12=0\n\
    \    local factor_index13=0\n    local factor_index14=0\n    local factor_index15=0\n\
    \    local factor_index16=0\n    local factor_index17=0\n    local factor_index18=0\n\
    \    local factor_index19=0\n    local factor_index20=0\n    local factor_index21=0\n\
    \    local factor_index22=0\n    local factor_index23=0\n    local factor_index24=0\n\
    \    local factor_index25=0\n    local factor_index26=0\n    local factor_index27=0\n\
    \    local factor_index28=0\n    local factor_index29=0\n    local factor_index30=0\n\
    \    local factor_index31=0\n    local factor_index32=0\n    local factor_index33=0\n\
    \    local factor_index34=0\n    local factor_index35=0\n    local factor_index36=0\n\
    \    local factor_index37=0\n    local factor_index38=0\n    local factor_index39=0\n\
    \    local factor_index40=0\n    local factor_index41=0\n    local factor_index42=0\n\
    \    local factor_index43=0\n    local factor_index44=0\n    local factor_index45=0\n\
    \    local factor_index46=0\n    local factor_index47=0\n    local factor_index48=0\n\
    \    local factor_index49=0\n    local factor_index50=0\n    local factor_index51=0\n\
    \    local factor_index52=0\n    local factor_index53=0\n    local factor_index54=0\n\
    \    local factor_index55=0\n    local factor_index56=0\n    local factor_index57=0\n\
    \    local factor_index58=0\n    local factor_index59=0\n    local factor_index60=0\n\
    \    local factor_index61=0\n    local factor_index62=0\n    local factor_index63=0\n\
    \    local factor_index64=0\n    local factor_index65=0\n    local factor_index66=0\n\
    \    local factor_index67=0\n    local factor_index68=0\n    local factor_index69=0\n\
    \    local factor_index70=0\n    local factor_index71\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=$1\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_index2=0\n    local factor_index3=0\n\
    \    local factor_index4=0\n    local factor_index5=0\n    local factor_index6=0\n\
    \    local factor_index7=0\n    local factor_index8=0\n    local factor_index9=0\n\
    \    local factor_index10=0\n    local factor_index11=0\n    local factor_index12=0\n\
    \    local factor_index13=0\n    local factor_index14=0\n    local factor_index15=0\n\
    \    local factor_index16=0\n    local factor_index17=0\n    local factor_index18=0\n\
    \    local factor_index19=0\n    local factor_index20=0\n    local factor_index21=0\n\
    \    local factor_index22=0\n    local factor_index23=0\n    local factor_index24=0\n\
    \    local factor_index25=0\n    local factor_index26=0\n    local factor_index27=0\n\
    \    local factor_index28=0\n    local factor_index29=0\n    local factor_index30=0\n\
    \    local factor_index31=0\n    local factor_index32=0\n    local factor_index33=0\n\
    \    local factor_index34=0\n    local factor_index35=0\n    local factor_index36=0\n\
    \    local factor_index37=0\n    local factor_index38=0\n    local factor_index39=0\n\
    \    local factor_index40=0\n    local factor_index41=0\n    local factor_index42=0\n\
    \    local factor_index43=0\n    local factor_index44=0\n    local factor_index45=0\n\
    \    local factor_index46=0\n    local factor_index47=0\n    local factor_index48=0\n\
    \    local factor_index49=0\n    local factor_index50=0\n    local factor_index51=0\n\
    \    local factor_index52=0\n    local factor_index53=0\n    local factor_index54=0\n\
    \    local factor_index55=0\n    local factor_index56=0\n    local factor_index57=0\n\
    \    local factor_index58=0\n    local factor_index59=0\n    local factor_index60=0\n\
    \    local factor_index61=0\n    local factor_index62=0\n    local factor_index63=0\n\
    \    local factor_index64=0\n    local factor_index65=0\n    local factor_index66=0\n\
    \    local factor_index67=0\n    local factor_index68=0\n    local factor_index69=0\n\
    \    local factor_index70=0\n    local factor_index71\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n  local\
    \ factor\n  local factors\n  local factor\n  local factors\n  local factor\n \
    \ local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=$(factorize \"$1\"\
    \ | wc -l)\n    local factors_count_tmp\n    local factors_count_tmp2\n    local\
    \ factors_count_tmp3\n    local factors_count_tmp4\n    local factors_count_tmp5\n\
    \    local factors_count_tmp6\n    local factors_count_tmp7\n    local factors_count_tmp8\n\
    \    local factors_count_tmp9\n    local factors_count_tmp10\n    local factors_count_tmp11\n\
    \    local factors_count_tmp12\n    local factors_count_tmp13\n    local factors_count_tmp14\n\
    \    local factors_count_tmp15\n    local factors_count_tmp16\n    local factors_count_tmp17\n\
    \    local factors_count_tmp18\n    local factors_count_tmp19\n    local factors_count_tmp20\n\
    \    local factors_count_tmp21\n    local factors_count_tmp22\n    local factors_count_tmp23\n\
    \    local factors_count_tmp24\n    local factors_count_tmp25\n    local factors_count_tmp26\n\
    \    local factors_count_tmp27\n    local factors_count_tmp28\n    local factors_count_tmp29\n\
    \    local factors_count_tmp30\n    local factors_count_tmp31\n    local factors_count_tmp32\n\
    \    local factors_count_tmp33\n    local factors_count_tmp34\n    local factors_count_tmp35\n\
    \    local factors_count_tmp36\n    local factors_count_tmp37\n    local factors_count_tmp38\n\
    \    local factors_count_tmp39\n    local factors_count_tmp40\n    local factors_count_tmp41\n\
    \    local factors_count_tmp42\n    local factors_count_tmp43\n    local factors_count_tmp44\n\
    \    local factors_count_tmp45\n    local factors_count_tmp46\n    local factors_count_tmp47\n\
    \    local factors_count_tmp48\n    local factors_count_tmp49\n    local factors_count_tmp50\n\
    \    local factors_count_tmp51\n    local factors_count_tmp52\n    local factors_count_tmp53\n\
    \    local factors_count_tmp54\n    local factors_count_tmp55\n    local factors_count_tmp56\n\
    \    local factors_count_tmp57\n    local factors_count_tmp58\n    local factors_count_tmp59\n\
    \    local factors_count_tmp60\n    local factors_count_tmp61\n    local factor\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660041222
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local factors=()\n  local factor\n  local factor_count\n  local\
    \ factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local factor_count\n\
    \  local factor_index\n  local factor_count\n  local factor_index\n  local \n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local factors=()\n  local factors_count=$(factorize \"$1\" |\
    \ wc -l)\n  local factors_count_temp\n  local factors_count_temp2\n  local factors_count_temp3\n\
    \  local factors_count_temp4\n  local factors_count_temp5\n  local factors_count_temp6\n\
    \  local factors_count_temp7\n  local factors_count_temp8\n  local factors_count_temp9\n\
    \  local factors_count_temp10\n  local factors_count_temp11\n  local factors_count_temp12\n\
    \  local factors_count_temp13\n  local factors_count_temp14\n  local factors_count_temp15\n\
    \  local factors_count_temp16\n  local factors_count_temp17\n  local factors_count_temp18\n\
    \  local factors_count_temp19\n  local factors_count_temp20\n  local factors_count_temp21\n\
    \  local factors_count_temp22\n  local factors_count_temp23\n  local factors_count_temp24\n\
    \  local factors_count_temp25\n  local factors_count_temp26\n  local factors_count_temp27\n\
    \  local factors_count_temp28\n  local factors_count_temp29\n  local factors_count_temp30\n\
    \  local factors_count_temp31\n  local factors_count_temp32\n  local factors_count_temp33\n\
    \  local factors_count_temp34\n  local factors_count_temp35\n  local factors_count_temp36\n\
    \  local factors_count_temp37\n  local factors_count_temp38\n  local factors_count_temp39\n\
    \  local factors_count_temp40\n  local factors_count_temp41\n  local factors_count_temp42\n\
    \  local factors_count_temp43\n  local factors_count_temp44\n  local factors_count_temp45\n\
    \  local factors_count_temp46\n  local factors_count_temp47\n  local factors_count_temp48\n\
    \  local factors_count_temp49\n  local factors_count_temp50\n  local factors_count_temp51\n\
    \  local factors_count_temp52\n  local factors_count_temp53\n  local factors_count_temp54\n\
    \  local factors_count_temp55\n  local factors_count_temp56\n  local factors_count_temp57\n\
    \  local factors_count_temp58\n  local factors_count_temp59\n  local factors_count_temp60\n\
    \  local factors_count_temp61\n  local factor\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=9 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660041222
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=\"$1\"\n    local factors_count=$(echo \"$factors\"\
    \ | sed 's/\"//g' | sed 's/,//g' | sed 's/ //g' | sort -u)\n    local factors_array=()\n\
    \    local factors_array_count=${#factors_array[@]}\n    local factors_array_index=-1\n\
    \    local factors_array_element\n    local factors_array_element_count\n    local\
    \ factors_array_element_index\n    local factors_array_element_value\n    local\
    \ factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factors_array_element_value_count\n\
    \    local factors_array_element_value_count\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=1\n    local factor_count=0\n\
    \    local factor_string=''\n    local factor_string_count=0\n    local factor_string_count2=0\n\
    \    local factor_string_count3=0\n    local factor_string_count4=0\n    local\
    \ factor_string_count5=0\n    local factor_string_count6=0\n    local factor_string_count7=0\n\
    \    local factor_string_count8=0\n    local factor_string_count9=0\n    local\
    \ factor_string_count10=0\n    local factor_string_count11=0\n    local factor_string_count12=0\n\
    \    local factor_string_count13=0\n    local factor_string_count14=0\n    local\
    \ factor_string_count15=0\n    local factor_string_count16=0\n    local factor_string_count17=0\n\
    \    local factor_string_count18=0\n    local factor_string_count19=0\n    local\
    \ factor_string_count20=0\n    local factor_string_count21=0\n    local factor_string_count22=0\n\
    \    local factor_string_count23=0\n    local factor_string_count24=0\n    local\
    \ factor_string_count25=0\n    local factor_string_count26=0\n    local factor_string_count27=0\n\
    \    local factor_string_count28=0\n    local factor_string_count29=0\n    local\
    \ factor_string_count30=0\n    local factor_string_count31=0\n    local factor_string_count32=0\n\
    \    local factor_string_count33=0\n    local factor_string_count34=0\n    local\
    \ factor_string_count35=0\n    local factor_string_count36=0\n    local factor_string_count37=0\n\
    \    local factor_string_count38=0\n    local factor_string_count39=0\n    local\
    \ factor_string_count40=0\n    local factor_string_count41=0\n    local factor_string_count42=0\n\
    \    local factor_string_count43=0\n    local factor_string_count44=0\n    local\
    \ factor_string_count45=0\n    local factor_string_count46=0\n    local factor_string_count47=0\n\
    \    local factor_string_count48=0\n    local factor_string_count49=0\n    local\
    \ factor_string_count50=0\n    local factor_string_count51=0\n    local factor_string_count52=0\n\
    \    local factor_string_count53=0\n    local factor_string_count54=0\n    local\
    \ factor_string_count55=0\n    local factor_string_count56=0\n    local factor_string_count57=0\n\
    \    local factor_string_count58=0\n    local factor_string_count59=0\n    local\
    \ factor_string_count60=0\n    local factor_string_count61=0\n    local \n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local factors=()\n  local factors_count=$(factorize \"$1\" |\
    \ wc -l)\n  local factors_count_max=$((factors_count - 1))\n  local factors_count_min=$((factors_count\
    \ + 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max - 1))\n  local factors_count_min=$((factors_count_min\
    \ + 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + 1))\n  local factors_count_min=$((factors_count_min\
    \ - 1))\n  local factors_count_step=$((factors_count_max - factors_count_min))\n\
    \  local factors_count_max=$((factors_count_max + \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_fvslx7m.sh: line 46: unexpected EOF while looking for matching
    `)''

    /tmp/tmp_fvslx7m.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n\n}\n\ncandidate() {\n \
    \   factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=$1\n    local factor_count=0\n\
    \    while [ $factor -gt 1 ]; do\n        factor_count=0\n        for (( factor\
    \ = 2; factor <= $factor; factor++ )); do\n            if [ $(( $factor % $factor\
    \ )) == 0 ]; then\n                factor_count=$(( $factor_count + 1 ))\n   \
    \         fi\n        done\n        factors=( ${factors[@]} \"$factor_count\"\
    \ )\n        factor=$(( $factor / 2 ))\n    done\n    echo \"${factors[@]}\"\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660041222
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local factors=()\n  local factor\n  local factor_count\n  local\
    \ factor_index\n  local factor_count\n  local factor\n  local factor_count\n \
    \ local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=\"\"\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_indexes=()\n\
    \    local factor_indexes_count=0\n    local factor_indexes_index=0\n    local\
    \ factor_indexes_counts=()\n    local factor_indexes_indexes=()\n    local factor_indexes_indexes_count=0\n\
    \    local factor_indexes_indexes_index=0\n    local factor_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes=()\n    local factor_indexes_indexes_indexes_count=0\n\
    \    local factor_indexes_indexes_indexes_index=0\n    local factor_indexes_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes_indexes=()\n    local factor_indexes_indexes_indexes_indexes_count=0\n\
    \    local factor_indexes_indexes_indexes_indexes_index=0\n    local factor_indexes_indexes_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes=()\n    local factor_indexes_indexes_indexes_indexes_indexes_count=0\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_index=0\n    local factor_indexes_indexes_indexes_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes=()\n    local\
    \ factor_indexes_indexes_indexes_indexes_indexes_indexes_count=0\n    local factor_indexes_indexes_indexes_indexes_indexes_index=0\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_count=0\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index=0\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_count=0\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index=0\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_counts=()\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n}\n\
    \ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\")\
    \ = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"\
    57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_index\n    local factor_count\n    local factor\n \
    \   local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    \n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n  local factor\n  local factor\n  local\
    \ factor\n  local factor\n  local factor\n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=\n    local factor_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factors_count=\n    local factors_count=\n\
    \    local factors_count=\n    local factor\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local factors=()\n  local factor\n  local factor_count\n  local\
    \ factor_index\n  local factor_count\n  local factor\n  local factor_count\n \
    \ local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local factor_index\n  local factor\n\
    \  local factor_count\n  local factor_index\n  local factor\n  local factor_count\n\
    \  local factor_index\n  local factor\n  local factor_count\n  local factor_index\n\
    \  local factor\n  local factor_count\n  local \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n  local factor_count\n  local factor\n \
    \ local factor_count\n  local factor\n\n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=$(factorize \"$1\"\
    \ | wc -l)\n    local factors_count_prev=0\n    local factors_count_current=0\n\
    \    local factors_count_max=0\n    local factors_count_min=0\n    local factors_count_max2=0\n\
    \    local factors_count_min2=0\n    local factors_count_max3=0\n    local factors_count_min3=0\n\
    \    local factors_count_max4=0\n    local factors_count_min4=0\n    local factors_count_max5=0\n\
    \    local factors_count_min5=0\n    local factors_count_max6=0\n    local factors_count_min6=0\n\
    \    local factors_count_max7=0\n    local factors_count_min7=0\n    local factors_count_max8=0\n\
    \    local factors_count_min8=0\n    local factors_count_max9=0\n    local factors_count_min9=0\n\
    \    local factors_count_max10=0\n    local factors_count_min10=0\n    local factors_count_max11=0\n\
    \    local factors_count_min11=0\n    local factors_count_max12=0\n    local factors_count_min12=0\n\
    \    local factors_count_max13=0\n    local factors_count_min13=0\n    local factors_count_max14=0\n\
    \    local factors_count_min14=0\n    local factors_count_max15=0\n    local factors_count_min15=0\n\
    \    local factors_count_max16=0\n    local factors_count_min16=0\n    local factors_count_max17=0\n\
    \    local factors_count_min17=0\n    local factors_count_max18=0\n    local factors_count_min18=0\n\
    \    local factors_count_max19=0\n    local factors_count_min19=0\n    local factors_count_max20=0\n\
    \    local factors_count_min20=0\n    local factors_count_max21=0\n    local factors_count_min21=0\n\
    \    local factors_count_max22=0\n    local factors_count_min22=0\n    local factors_count_max23=0\n\
    \    local factors_count_min23=0\n    local factors_count_max24=0\n    local factors_count_min24=0\n\
    \    local factors_count_max25=0\n    local factors_count_min25=0\n    local factors_count_max26=0\n\
    \    local factors_count_min26=0\n    local factors_count_max27=0\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=36 encoding='utf-8'>
  timestamp: 1660041222
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local n=$1\n    local factors=()\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local factor\n    local factors\n    local\
    \ count\n    local factor\n    local factors\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local factor\n    local factors\n   \
    \ local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local \n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_index\n    local factor_count\n    local factor\n \
    \   local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    \n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local factors_count=()\n    local factors_count=()\n\
    \    local factors_count=()\n    local \n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n  local number=$1\n  local factors=()\n  local factor\n  local\
    \ count\n  local i\n  local j\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factors\n\
    \  local factor\n  local factors\n  local factor\n  local factors\n  local factor\n\
    \  local factors\n  local factor\n  local factors\n  local factor\n  local factor\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor\n    local factor_count\n \
    \   local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=()\n    local factor_count=0\n\
    \    local factor_counts=()\n    local factor_counts_sorted=()\n    local factor_counts_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted=()\n    local factor_counts_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted=()\n    local\
    \ factor_counts_sorted_reversed_sorted_reversed_sorted_reversed=()\n    local\
    \ factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n  \
    \  local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local factor_counts_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor\n    local factor_count\n \
    \   local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=1\n    local factor_count=0\n\
    \    local factor_string=\"\"\n    local factor_string_count=0\n    local factor_string=\"\
    \"\n    local factor_string_count=0\n    local factor_string_count=0\n    local\
    \ factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \    local factor_string_count=0\n    local factor_string_count=0\n    local factor_string_count=0\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local k\n    local factor\n   \
    \ local factors\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=()\n    local factor=1\n    local factor_count=0\n\
    \    local factors_string=''\n    local factors_string_count=0\n    local factors_string_count2=0\n\
    \    local factors_string_count3=0\n    local factors_string_count4=0\n    local\
    \ factors_string_count5=0\n    local factors_string_count6=0\n    local factors_string_count7=0\n\
    \    local factors_string_count8=0\n    local factors_string_count9=0\n    local\
    \ factors_string_count10=0\n    local factors_string_count11=0\n    local factors_string_count12=0\n\
    \    local factors_string_count13=0\n    local factors_string_count14=0\n    local\
    \ factors_string_count15=0\n    local factors_string_count16=0\n    local factors_string_count17=0\n\
    \    local factors_string_count18=0\n    local factors_string_count19=0\n    local\
    \ factors_string_count20=0\n    local factors_string_count21=0\n    local factors_string_count22=0\n\
    \    local factors_string_count23=0\n    local factors_string_count24=0\n    local\
    \ factors_string_count25=0\n    local factors_string_count26=0\n    local factors_string_count27=0\n\
    \    local factors_string_count28=0\n    local factors_string_count29=0\n    local\
    \ factors_string_count30=0\n    local factors_string_count31=0\n    local factors_string_count32=0\n\
    \    local factors_string_count33=0\n    local factors_string_count34=0\n    local\
    \ factors_string_count35=0\n    local factors_string_count36=0\n    local factors_string_count37=0\n\
    \    local factors_string_count38=0\n    local factors_string_count39=0\n    local\
    \ factors_string_count40=0\n    local factors_string_count41=0\n    local factors_string_count42=0\n\
    \    local factors_string_count43=0\n    local factors_string_count44=0\n    local\
    \ factors_string_count45=0\n    local factors_string_count46=0\n    local factors_string_count47=0\n\
    \    local factors_string_count48=0\n    local factors_string_count49=0\n    local\
    \ factors_string_count50=0\n    local factors_string_count51=0\n    local factors_string_count52=0\n\
    \    local factors_string_count53=0\n    local factors_string_count54=0\n    local\
    \ factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local factors=\"$1\"\n    local factorization\n    local factor\n\
    \    local factor_count\n    local factor_counts\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_string\n    local factor_counts_string_list\n\
    \    local factor_counts_string\n    local factor_counts_string_list\n    local\
    \ factor_counts_string\n    local factor_counts_string_list\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_string\n    local factor_counts_string_list\n\
    \    local factor_counts_string\n    local factor_counts_string_list\n    local\
    \ factor_counts_string\n    local factor_counts_string_list\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_string\n    local factor_counts_string_list\n\
    \    local factor_counts_string\n    local factor_counts_string_list\n    local\
    \ factor_counts_string\n    local factor_counts_string_list\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_string\n    local factor_counts_string_list\n\
    \    local factor_counts_string\n    local factor_counts_string_list\n    local\
    \ factor_counts_string\n    local factor_counts_string_list\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_string\n    local factor_counts_string_list\n\
    \    local factor_counts_string\n    local factor_counts_string_list\n    local\
    \ factor_counts_string\n    local factor_counts_string_list\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_string\n    local factor_counts_string_list\n\
    \    local factor_counts_string\n    local factor_counts_string_list\n    local\
    \ factor_counts_string\n    local factor_counts_string_list\n    local factor_counts_string\n\
    \    local factor_counts_string_list\n    local factor_counts_string\n    local\
    \ factor_counts_string_list\n    local factor_counts_\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local count\n    local i\n    local j\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> $(factorize \"8\"\
    )\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"\
    ']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
    factorize() {\n    local number=$1\n    local factors=()\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041217
