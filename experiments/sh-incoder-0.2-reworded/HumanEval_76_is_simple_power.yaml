name: HumanEval_76_is_simple_power
language: sh
prompt: "#!/bin/bash\n# Your task is to write a function that returns true if a number\
  \ x is a simple\n# power of n and false in other cases.\n# x is a simple power of\
  \ n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# true\n\
  # >>> $(is_simple_power \"2\" \"2\")\n# true\n# >>> $(is_simple_power \"8\" \"2\"\
  )\n# true\n# >>> $(is_simple_power \"3\" \"2\")\n# false\n# >>> $(is_simple_power\
  \ \"3\" \"1\")\n# false\n# >>> $(is_simple_power \"5\" \"3\")\n# false\n#\n# $1\
  \ is an integer\n# $2 is an integer\nis_simple_power() {\n"
tests: "}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
  16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
  \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n \
  \   [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\"\
  ) = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
  \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\
  \nrun_test"
completions: ["  local x=\"$1\"\n  local y=\"$2\"\n  local n=\"$3\"\n  local int=\"\
    $4\"\n  local res=\"$5\"\n  local i\n\n  (( res = 0 ))\n  (( i = 1 ))\n  while\
    \ (( i <= n )); do\n    (( res = (res * x) % n ))\n    (( x = (x * x) % n ))\n\
    \    (( i++))\n  done\n  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n\
    \  (( i++))\n  while (( i <= int )); do\n    (( res = (res * x) % n ))\n    ((\
    \ x = (x * x) % n ))\n    (( i++))\n  done\n  (( res = (res * x) % n ))\n  ((\
    \ x = (x * x) % n ))\n  (( i++))\n  (( res = (res * x) % n ))\n  (( x = (x * x)\
    \ % n ))\n  (( i++))\n  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n \
    \ (( i++))\n  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n\
    \  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n  (( res =\
    \ (res * x) % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n  (( res = (res * x)\
    \ % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n  (( res = (res * x) % n ))\n \
    \ (( x = (x * x) % n ))\n  (( i++))\n  (( res = (res * x) % n ))\n  (( x = (x\
    \ * x) % n ))\n  (( i++))\n  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n\
    \  (( i++))\n  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n\
    \  (( res = (res * x) % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n  (( res =\
    \ (res * x) % n ))\n  (( x = (x * x) % n ))\n  (( i++))\n  (( res = (res * x)\
    \ % n ))\n", "    local x=\"$1\"\n    local n=\"$2\"\n    local int=\"$3\"\n \
    \   local res\n    res=$(echo \"$x\" | bc -l)\n    if [[ \"$res\" -eq \"$x\" ]];\
    \ then\n        return 0\n    else\n        if [[ \"$res\" -eq \"$x\" ]]; then\n\
    \            return 0\n        fi\n    fi", "  local x=\"$1\"\n  local n=\"$2\"\
    \n  local int=\"$3\"\n  local res=\"$4\"\n  if [ \"$int\" -eq 0 ]; then\n    res=\"\
    $((x==n**int))\"\n  else\n    res=\"$((x==n**int))\"\n  fi\n  echo \"$res\"",
  "  local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$(( n - 1 ))\"\n  (( x ** int\
    \ == x ))", "    local x=\"$1\"\n    local n=\"$2\"\n    local int=\"$3\"\n  \
    \  if [ \"$int\" -eq 0 ]; then\n        echo \"$x is not a simple power of $n\"\
    \n        return 1\n    fi\n    if [ \"$n\" -eq 0 ]; then\n        echo \"$x is\
    \ not a simple power of $n\"\n        return 1\n    fi\n    if [ \"$n\" -eq \"\
    $x\" ]; then\n        echo \"$x is a simple power of $n\"\n        return 0\n\
    \    fi\n    if [ \"$n\" -gt \"$x\" ]; then\n        echo \"$x is not a simple\
    \ power of $n\"\n        return 1\n    fi\n    if [ \"$n\" -lt \"$x\" ]; then\n\
    \        echo \"$x is not a simple power of $n\"\n        return 1\n    fi\n \
    \   if [ \"$n\" -le \"$x\" ]; then\n        echo \"$x is not a simple power of\
    \ $n\"\n        return 1\n    fi\n    if [ \"$n\" -ge \"$x\" ]; then\n       \
    \ echo \"$x is not a simple power of $n\"\n        return 1\n    fi\n    if [\
    \ \"$n\" -eq \"$x\" ]; then\n        echo \"$x is a simple power of $n\"\n   \
    \     return 0\n    fi\n    if [ \"$n\" -gt \"$x\" ]; then\n        echo \"$x\
    \ is not a simple power of $n\"\n        return 1\n    fi\n    if [ \"$n\" -lt\
    \ \"$x\" ]; then\n        echo \"$x is not a simple power of $n\"\n        return\
    \ 1\n    fi\n    if [ \"$n\" -le \"$x\" ]; then\n        echo \"$x is not a simple\
    \ power of $n\"\n        return 1\n    fi\n    if [ \"$n\" -ge \"$x\" ]; then\n\
    \        echo \"$x is not a simple power of $n\"\n        return 1\n    fi\n \
    \   if [ \"$n\" -eq \"$x\" ]; then\n        echo \"$x is a simple power of $n\"\
    \n        return 0\n    fi\n    if [ \"$n\" -gt \"$x\" ]; then\n        echo \"\
    $x is not a simple power of $n\"\n        return 1\n    fi\n    if [ \"$n\" -lt\
    \ \"$x\" ]; then\n        echo \"$x is not a simple power of $n\"\n        return\
    \ 1\n    fi\n    if [ \"$n\" -le \"$x\" ]; then\n        echo \"$x is not a simple\
    \ power of $n\"\n        return 1\n    fi\n    if [ \"$n\" -ge \"$x\" ]; then\n\
    \        echo \"$x is not a simple power of $n\"\n        return 1\n    fi\n \
    \   if [ \"$n\" -eq \"$x\" ]; then\n        echo \"$x is a simple power of $n\"\
    \n        return 0\n    fi\n    if [ \"$n\" -gt \"$x\" ]; then\n        echo \"\
    $x is not a simple power of $n\"\n        return 1\n    fi\n", "  local x=\"$1\"\
    \n  local n=\"$2\"\n  local int=\"$(( n - 1 ))\"\n  local res=\"$(( x ** int ))\"\
    \n  echo \"$res\"", "    local x=\"$1\"\n    local n=\"$2\"\n    local int=\"\
    $3\"\n    if [ \"$int\" -eq 0 ]; then\n        echo \"$x is not a simple power\
    \ of $n\"\n    else\n        echo \"$x is a simple power of $n if $n**$int=$x\"\
    \n    fi", "  local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$3\"\n  local result\n\
    \  if (( int > 0 )); then\n    result=$(( x ** int ))\n  else\n    result=$((\
    \ x * x ))\n  fi\n  if (( result == \"$x\" )); then\n    return 0\n  else\n  \
    \  return 1\n  fi", "    local x=\"$1\"\n    local n=\"$2\"\n    local int=\"\
    $(( 10#$n ))\"\n    local result=\"$(( n**int ))\"\n    local result2=\"$(( n**int+1\
    \ ))\"\n    local result3=\"$(( n**int+2 ))\"\n    local result4=\"$(( n**int+3\
    \ ))\"\n    local result5=\"$(( n**int+4 ))\"\n    local result6=\"$(( n**int+5\
    \ ))\"\n    local result7=\"$(( n**int+6 ))\"\n    local result8=\"$(( n**int+7\
    \ ))\"\n    local result9=\"$(( n**int+8 ))\"\n    local result10=\"$(( n**int+9\
    \ ))\"\n    local result11=\"$(( n**int+10 ))\"\n    local result12=\"$(( n**int+11\
    \ ))\"\n    local result13=\"$(( n**int+12 ))\"\n    local result14=\"$(( n**int+13\
    \ ))\"\n    local result15=\"$(( n**int+14 ))\"\n    local result16=\"$(( n**int+15\
    \ ))\"\n    local result17=\"$(( n**int+16 ))\"\n    local result18=\"$(( n**int+17\
    \ ))\"\n    local result19=\"$(( n**int+18 ))\"\n    local result20=\"$(( n**int+19\
    \ ))\"\n    local result21=\"$(( n**int+20 ))\"\n    local result22=\"$(( n**int+21\
    \ ))\"\n    local result23=\"$(( n**int+22 ))\"\n    local result24=\"$(( n**int+23\
    \ ))\"\n    local result25=\"$(( n**int+24 ))\"\n    local result26=\"$(( n**int+25\
    \ ))\"\n    local result27=\"$(( n**int+26 ))\"\n    local result28=\"$(( n**int+27\
    \ ))\"\n    local result29=\"$(( n**int+28 ))\"\n    local result30=\"$(( n**int+29\
    \ ))\"\n    local result31=\"$(( n**int+30 ))\"\n    local result32=\"$(( n**int+31\
    \ ))\"\n    local result33=\"$(( n**int+", "  local x=\"$1\"\n  local n=\"$2\"\
    \n  local int=\"$3\"\n  local res=\"$4\"\n  local res2=\"$5\"\n  local res3=\"\
    $6\"\n  local res4=\"$7\"\n  local res5=\"$8\"\n  local res6=\"$9\"\n  local res7=\"\
    $10\"\n  local res8=\"$11\"\n  local res9=\"$12\"\n  local res10=\"$13\"\n  local\
    \ res11=\"$14\"\n  local res12=\"$15\"\n  local res13=\"$16\"\n  local res14=\"\
    $17\"\n  local res15=\"$18\"\n  local res16=\"$19\"\n  local res17=\"$20\"\n \
    \ local res18=\"$21\"\n  local res19=\"$22\"\n  local res20=\"$23\"\n  local res21=\"\
    $24\"\n  local res22=\"$25\"\n  local res23=\"$26\"\n  local res24=\"$27\"\n \
    \ local res25=\"$28\"\n  local res26=\"$29\"\n  local res27=\"$30\"\n  local res28=\"\
    $31\"\n  local res29=\"$32\"\n  local res30=\"$33\"\n  local res31=\"$34\"\n \
    \ local res32=\"$35\"\n  local res33=\"$36\"\n  local res34=\"$37\"\n  local res35=\"\
    $38\"\n  local res36=\"$39\"\n  local res37=\"$40\"\n  local res38=\"$41\"\n \
    \ local res39=\"$42\"\n  local res40=\"$43\"\n  local res41=\"$44\"\n  local res42=\"\
    $45\"\n  local res43=\"$46\"\n  local res44=\"$47\"\n  local res45=\"$48\"\n \
    \ local res46=\"$49\"\n  local res47=\"$50\"\n  local res48=\"$51\"\n  local res49=\"\
    $52\"\n  local res50=\"$53\"\n  local res51=\"$54\"\n  local res52=\"$55\"\n \
    \ local res53=\"$56\"\n  local res54=\"$57\"\n  local res55=\"$58\"\n  local res56=\"\
    $59\"\n  local res57=\"$60\"\n  local res58=\"$61\"\n  local res59=\"$62\"\n \
    \ local res60=\"$63\"\n  local res61=\"$64\"\n  local res62=\"$65\"\n  local res63",
  "  local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$3\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc -l)\n  if [ \"$result\" -eq \"$x\" ]; then\n    return 0\n  else\n\
    \    if [ \"$result\" -eq \"$x\" ]; then\n      return 0\n    else\n      if [\
    \ \"$result\" -eq \"$x\" ]; then\n        return 0\n      else\n        if [ \"\
    $result\" -eq \"$x\" ]; then\n          return 0\n        else\n          if [\
    \ \"$result\" -eq \"$x\" ]; then\n            return 0\n          else\n     \
    \       if [ \"$result\" -eq \"$x\" ]; then\n              return 0\n        \
    \    else\n              if [ \"$result\" -eq \"$x\" ]; then\n               \
    \ return 0\n              else\n                if [ \"$result\" -eq \"$x\" ];\
    \ then\n                  return 0\n                else\n                  if\
    \ [ \"$result\" -eq \"$x\" ]; then\n                    return 0\n           \
    \       else\n                    if [ \"$result\" -eq \"$x\" ]; then\n      \
    \                return 0\n                    else\n                      if\
    \ [ \"$result\" -eq \"$x\" ]; then\n                        return 0\n       \
    \               else\n                        if [ \"$result\" -eq \"$x\" ]; then\n\
    \                          return 0\n                        else\n          \
    \                return 0\n                        fi\n                      fi\n\
    \                    fi\n                  fi\n                fi\n          \
    \    fi\n            fi\n          fi\n        fi\n      fi\n    fi\n  fi", " \
    \ local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$3\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc -l)\n  if [ \"$result\" -eq \"$x\" ]; then\n    return 0\n  else\n\
    \    if [ \"$result\" -eq \"$x\" -a \"$result\" -le \"$n\" ]; then\n      return\
    \ 0\n    else\n      if [ \"$result\" -le \"$n\" -a \"$result\" -le \"$int\" ];\
    \ then\n        return 1\n      else\n        return 0\n      fi\n    fi\n  fi",
  "    local x=$1\n    local y=$2\n    local n=$(( $y * $y ))\n    local int=$(( $n\
    \ * $n ))\n    local res=$(( $x == $int ))\n    return $res", "  local x=\"$1\"\
    \n  local y=\"$2\"\n  local int=\"$3\"\n  if (( x==y )); then\n    return 0\n\
    \  fi\n  local i\n  local n\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local ", "  local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$(( 10#$n ))\"\
    \n  (( x==$n**int ))", "  local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$3\"\
    \n  (( x == n**int ))", "  local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$3\"\
    \n  if (( n**int == x )); then\n    return 0\n  else\n    return 1\n  fi", " \
    \ local x=\"$1\"\n  local n=\"$2\"\n  local int=\"$3\"\n  local res=\"$4\"\n \
    \ local i\n\n  res=\"$(( x ** int ))\"\n  i=$(( int + 1 ))\n  while [ $i -le $n\
    \ ]; do\n    if [ $res -eq $x ]; then\n      return 0\n    fi\n    res=\"$(( res\
    \ * x ))\"\n    i=$(( i + 1 ))\n  done\n  return 1", "  local x=\"$1\"\n  local\
    \ n=\"$2\"\n  local int=\"$3\"\n  local res=\"$4\"\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z", "    local x=\"$1\"\n    local n=\"$2\"\n    local int=\"$3\"\n    local\
    \ res=\"$4\"\n    if [[ $res == \"\" ]]; then\n        res=0\n    fi\n    if [[\
    \ $int == \"\" ]]; then\n        int=1\n    fi\n    if [[ $n == \"\" ]]; then\n\
    \        n=1\n    fi\n    if [[ $x == \"\" ]]; then\n        x=1\n    fi\n   \
    \ if [[ $x == $n ]]; then\n        echo \"$res\"\n    else\n        echo \"$res\"\
    \n    fi"]
stop_tokens:
- "\n}"
