language: sh
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local string=\"$1\"\n  local vowel_count=$(echo \"$string\"\
    \ | grep -o \"$vowels\" | wc -l)\n  local vowel_found=$(echo \"$string\" | grep\
    \ -o \"$vowels\" | head -n $((vowel_count - 1)));\n  local vowel_not_found=$(echo\
    \ \"$string\" | grep -o \"$vowels\" | tail -n 1);\n  if [ \"$vowel_found\" !=\
    \ \"\" ]; then\n    echo \"$vowel_found\";\n  elif [ \"$vowel_not_found\" != \"\
    \" ]; then\n    echo \"$vowel_not_found\";\n  else\n    echo \"$string\";\n  fi\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_count_2=${#vowels};\n\
    \    local vowels_count_3=${#vowels};\n    local vowels_count_4=${#vowels};\n\
    \    local vowels_count_5=${#vowels};\n    local vowels_count_6=${#vowels};\n\
    \    local vowels_count_7=${#vowels};\n    local vowels_count_8=${#vowels};\n\
    \    local vowels_count_9=${#vowels};\n    local vowels_count_10=${#vowels};\n\
    \    local vowels_count_11=${#vowels};\n    local vowels_count_12=${#vowels};\n\
    \    local vowels_count_13=${#vowels};\n    local vowels_count_14=${#vowels};\n\
    \    local vowels_count_15=${#vowels};\n    local vowels_count_16=${#vowels};\n\
    \    local vowels_count_17=${#vowels};\n    local vowels_count_18=${#vowels};\n\
    \    local vowels_count_19=${#vowels};\n    local vowels_count_20=${#vowels};\n\
    \    local vowels_count_21=${#vowels};\n    local vowels_count_22=${#vowels};\n\
    \    local vowels_count_23=${#vowels};\n    local vowels_count_24=${#vowels};\n\
    \    local vowels_count_25=${#vowels};\n    local vowels_count_26=${#vowels};\n\
    \    local vowels_count_27=${#vowels};\n    local vowels_count_28=${#vowels};\n\
    \    local vowels_count_29=${#vowels};\n    local vowels_count_30=${#vowels};\n\
    \    local vowels_count_31=${#vowels};\n    local vowels_count_32=${#vowels};\n\
    \    local vowels_count_33=${#vowels};\n    local vowels_count_34=${#vowels};\n\
    \    local vowels_count_35=${#vowels};\n    local vowels_count_36=${#vowels};\n\
    \    local vowels_count_37=${#vowels};\n    local vowels_count_38=${#vowels};\n\
    \    local vowels_count_39=${#vowels};\n    local vowels_count_40=${#vowels};\n\
    \    local vowels_count_41=${#vowels};\n    local vowels_count_42=${#\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxguwc226.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_position=0\n    local vowel_position_count=0\n\
    \    local vowel_position_index=0\n    local vowel_position_found=\"\"\n    local\
    \ vowel_position_position=0\n    local vowel_position_position_count=0\n    local\
    \ vowel_position_position_index=0\n    local vowel_position_position_found=\"\"\
    \n    local vowel_position_position_position=0\n    local vowel_position_position_position_count=0\n\
    \    local vowel_position_position_position_index=0\n    local vowel_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position=0\n    local vowel_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_index=0\n    local vowel_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position=0\n    local\
    \ vowel_position_position_position_position_position_count=0\n    local vowel_position_position_position_position_position_index=0\n\
    \    local vowel_position_position_position_position_position_found=\"\"\n   \
    \ local vowel_position_position_position_position_position_position=0\n    local\
    \ vowel_position_position_position_position_position_position_count=0\n    local\
    \ vowel_position_position_position_position_position_position_index=0\n    local\
    \ vowel_position_position_position_position_position_position_found=\"\"\n   \
    \ local vowel_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_index=0\n\
    \    local vowel_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_index=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_index=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_position_index=0\n\
    \    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_found_index=0;\n\
    \    local vowel_found_index2=0;\n    local vowel_found_index3=1;\n    local vowel_found_index4=2;\n\
    \    local vowel_found_index5=3;\n    local vowel_found_index6=4;\n    local vowel_found_index7=5;\n\
    \    local vowel_found_index8=6;\n    local vowel_found_index9=7;\n    local vowel_found_index10=8;\n\
    \    local vowel_found_index11=9;\n    local vowel_found_index12=10;\n    local\
    \ vowel_found_index13=11;\n    local vowel_found_index14=12;\n    local vowel_found_index15=13;\n\
    \    local vowel_found_index16=14;\n    local vowel_found_index17=15;\n    local\
    \ vowel_found_index18=16;\n    local vowel_found_index19=17;\n    local vowel_found_index20=18;\n\
    \    local vowel_found_index21=19;\n    local vowel_found_index22=20;\n    local\
    \ vowel_found_index23=21;\n    local vowel_found_index24=22;\n    local vowel_found_index25=23;\n\
    \    local vowel_found_index26=24;\n    local vowel_found_index27=25;\n    local\
    \ vowel_found_index28=26;\n    local vowel_found_index29=27;\n    local vowel_found_index30=28;\n\
    \    local vowel_found_index31=29;\n    local vowel_found_index32=30;\n    local\
    \ vowel_found_index33=31;\n    local vowel_found_index34=32;\n    local vowel_found_index35=33;\n\
    \    local vowel_found_index36=34;\n    local vowel_found_index37=35;\n    local\
    \ vowel_found_index38=36;\n    local vowel_found_index39=37;\n    local vowel_found_index40=38;\n\
    \    local vowel_found_index41=39;\n    local vowel_found_index42=40;\n    local\
    \ vowel_found_index43=41;\n    local vowel_found_index44=42;\n    local vowel_found_index45=43;\n\
    \    local vowel_found_index46=44;\n    local vowel_found_index47\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_count=$(echo $vowels | wc\
    \ -l);\n    local vowel_position=$(echo $word | rev | cut -d \" \" -f 1 | rev\
    \ | cut -d \" \" -f 2 | rev | cut -d \" \" -f 3 | rev | cut -d \" \" -f 4 | rev\
    \ | cut -d \" \" -f 5 | rev | cut -d \" \" -f 6 | rev | cut -d \" \" -f 7 | rev\
    \ | cut -d \" \" -f 8 | rev | cut -d \" \" -f 9 | rev | cut -d \" \" -f 10 | rev\
    \ | cut -d \" \" -f 11 | rev | cut -d \" \" -f 12 | rev | cut -d \" \" -f 13 |\
    \ rev | cut -d \" \" -f 14 | rev | cut -d \" \" -f 15 | rev | cut -d \" \" -f\
    \ 16 | rev | cut -d \" \" -f 17 | rev | cut -d \" \" -f 18 | rev | cut -d \" \"\
    \ -f 19 | rev | cut -d \" \" -f 20 | rev | cut -d \" \" -f 21 | rev | cut -d \"\
    \ \" -f 22 | rev | cut -d \" \" -f 23 | rev | cut -d \" \" -f 24 | rev | cut -d\
    \ \" \" -f 25 | rev | cut -d \" \" -f 26 | rev | cut -d \" \" -f 27 | rev | cut\
    \ -d \" \" -f 28 | rev | cut -d \" \" -f 29 | rev | cut -d \" \" -f 30 | rev |\
    \ cut -d \" \" -f 31 | rev | cut -d \" \" -f 32 | rev | cut -d \" \" -f 33 | rev\
    \ | cut -d \" \" -f 34 | rev | cut -d \" \" -f 35 | rev | cut -d \" \" -f 36 |\
    \ rev | cut -d \" \" -f 37 | rev | cut -d \" \" -f 38 | rev | cut -d \" \" -f\
    \ 39 | rev | cut -d \" \" -f 40 | rev | cut -d \" \" -f 41 | rev | cut -d \" \"\
    \ -f 42 | rev | cut -d \" \" -f 43 | rev | cut -d \" \" -f 44 | rev | cut -d \"\
    \ \" -f 45 | rev | cut -d \" \" -f 46 | rev | cut -d \" \" -f 47 | rev | cut -d\
    \ \" \" -f 48 | rev | cut -d \" \" -f 49 | rev | cut -d \" \" -f 50 | rev | cut\
    \ -d \" \" -f 51 | rev | cut -d \" \" -f 52 | rev | \n}\n\ncandidate() {\n   \
    \ get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\"\
    ) = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\"\
    ) = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\"\
    ) = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\"\
    ) = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\"\
    ) = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd2955xo8.sh: line 22: unexpected EOF while looking for matching
    `)''

    /tmp/tmpd2955xo8.sh: line 47: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | w\n}\n\ncandidate() {\n  \
    \  get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6w8wmj0.sh: line 55: unexpected EOF while looking for matching
    `)''

    /tmp/tmpb6w8wmj0.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_count_2=${#vowels};\n\
    \    local vowels_count_3=${#vowels};\n    local vowels_count_4=${#vowels};\n\
    \    local vowels_count_5=${#vowels};\n    local vowels_count_6=${#vowels};\n\
    \    local vowels_count_7=${#vowels};\n    local vowels_count_8=${#vowels};\n\
    \    local vowels_count_9=${#vowels};\n    local vowels_count_10=${#vowels};\n\
    \    local vowels_count_11=${#vowels};\n    local vowels_count_12=${#vowels};\n\
    \    local vowels_count_13=${#vowels};\n    local vowels_count_14=${#vowels};\n\
    \    local vowels_count_15=${#vowels};\n    local vowels_count_16=${#vowels};\n\
    \    local vowels_count_17=${#vowels};\n    local vowels_count_18=${#vowels};\n\
    \    local vowels_count_19=${#vowels};\n    local vowels_count_20=${#vowels};\n\
    \    local vowels_count_21=${#vowels};\n    local vowels_count_22=${#vowels};\n\
    \    local vowels_count_23=${#vowels};\n    local vowels_count_24=${#vowels};\n\
    \    local vowels_count_25=${#vowels};\n    local vowels_count_26=${#vowels};\n\
    \    local vowels_count_27=${#vowels};\n    local vowels_count_28=${#vowels};\n\
    \    local vowels_count_29=${#vowels};\n    local vowels_count_30=${#vowels};\n\
    \    local vowels_count_31=${#vowels};\n    local vowels_count_32=${#vowels};\n\
    \    local vowels_count_33=${#vowels};\n    local vowels_count_34=${#vowels};\n\
    \    local vowels_count_35=${#vowels};\n    local vowels_count_36=${#vowels};\n\
    \    local vowels_count_37=${#vowels};\n    local vowels_count_38=${#vowels};\n\
    \    local vowels_count_39=${#vowels};\n    local vowels_count_40=${#vowels};\n\
    \    local vowels_count_41=${#vowels};\n    local vowels_count_42=${#\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxguwc226.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel\n    local vowel_found\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position_count2\n\
    \    local vowel_position_count3\n    local vowel_position_count4\n    local vowel_position_count5\n\
    \    local vowel_position_count6\n    local vowel_position_count7\n    local vowel_position_count8\n\
    \    local vowel_position_count9\n    local vowel_position_count10\n    local\
    \ vowel_position_count11\n    local vowel_position_count12\n    local vowel_position_count13\n\
    \    local vowel_position_count14\n    local vowel_position_count15\n    local\
    \ vowel_position_count16\n    local vowel_position_count17\n    local vowel_position_count18\n\
    \    local vowel_position_count19\n    local vowel_position_count20\n    local\
    \ vowel_position_count21\n    local vowel_position_count22\n    local vowel_position_count23\n\
    \    local vowel_position_count24\n    local vowel_position_count25\n    local\
    \ vowel_position_count26\n    local vowel_position_count27\n    local vowel_position_count28\n\
    \    local vowel_position_count29\n    local vowel_position_count30\n    local\
    \ vowel_position_count31\n    local vowel_position_count32\n    local vowel_position_count33\n\
    \    local vowel_position_count34\n    local vowel_position_count35\n    local\
    \ vowel_position_count36\n    local vowel_position_count37\n    local vowel_position_count38\n\
    \    local vowel_position_count39\n    local vowel_position_count40\n    local\
    \ vowel_position_count41\n    local vowel_position_count42\n    local vowel_position_count43\n\
    \    local vowel_position_count44\n    local vowel_position_count45\n    local\
    \ vowel_position_count46\n    local vowel_position_count47\n    local vowel_position_count48\n\
    \    local vowel_position_count49\n    local vowel_position_count50\n    local\
    \ vowel_position_count51\n    local vowel_position_count52\n    local vowel_position_count53\n\
    \    local vowel_position_count54\n    local vowel_position_count55\n    local\
    \ vowel_position_count56\n    local vowel_position_count57\n    local vowel_position_count58\n\
    \    local vowel_position_count59\n    local vowel_position_count60\n    \n}\n\
    \ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\"\
    \ ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\
    \" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"\
    a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") =\
    \ \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=$(echo $vowels | wc -w)\n  local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_3=$(echo $vowels | wc -w)\n  local vowels_count_4=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_5=$(echo $vowels | wc -w)\n  local vowels_count_6=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_7=$(echo $vowels | wc -w)\n  local vowels_count_8=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_9=$(echo $vowels | wc -w)\n  local vowels_count_10=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_11=$(echo $vowels | wc -w)\n  local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_13=$(echo $vowels | wc -w)\n  local vowels_count_14=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_15=$(echo $vowels | wc -w)\n  local vowels_count_16=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_17=$(echo $vowels | wc -w)\n  local vowels_count_18=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_19=$(echo $vowels | wc -w)\n  local vowels_count_20=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_21=$(echo $vowels | wc -w)\n  local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_23=$(echo $vowels | wc -w)\n  local vowels_count_24=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_25=$(echo $vowels | wc -w)\n  local vowels_count_26=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_27=$(echo $vowels | wc -w)\n  local vowels_count_28=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_29=$(echo $vowels | wc -w)\n  local vowels_count_30=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_31=$(echo $vowels | wc -w)\n  local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_33=$(echo $vowels | wc -w)\n  local vowels_count_34\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=$1\n\
    \    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local vowel_position_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_count_string=\"\"\n    local vowel_position_count_string2=\"\
    \"\n    local vowel_position_count_string3=\"\"\n    local vowel_position_count_string4=\"\
    \"\n    local vowel_position_count_string5=\"\"\n    local vowel_position_count_string6=\"\
    \"\n    local vowel_position_count_string7=\"\"\n    local vowel_position_count_string8=\"\
    \"\n    local vowel_position_count_string9=\"\"\n    local vowel_position_count_string10=\"\
    \"\n    local vowel_position_count_string11=\"\"\n    local vowel_position_count_string12=\"\
    \"\n    local vowel_position_count_string13=\"\"\n    local vowel_position_count_string14=\"\
    \"\n    local vowel_position_count_string15=\"\"\n    local vowel_position_count_string16=\"\
    \"\n    local vowel_position_count_string17=\"\"\n    local vowel_position_count_string18=\"\
    \"\n    local vowel_position_count_string19=\"\"\n    local vowel_position_count_string20=\"\
    \"\n    local vowel_position_count_string21=\"\"\n    local vowel_position_count_string22=\"\
    \"\n    local vowel_position_count_string23=\"\"\n    local vowel_position_count_string24=\"\
    \"\n    local vowel_position_count_string25=\"\"\n    local vowel_position_count_string26=\"\
    \"\n    local vowel_position_count_string27=\"\"\n    local vowel_position_count_string28=\"\
    \"\n    local vowel_position_count_string29=\"\"\n    local vowel_position_count_string30=\"\
    \"\n    local vowel_position_count_string31=\"\"\n    local vowel_position_count_string32=\"\
    \"\n    local vowel_position_count_string33=\"\"\n    local vowel_position_count_string34=\"\
    \"\n    local vowel_position_count_string35=\"\"\n    local vowel_position_count_string36=\"\
    \"\n    local vowel_position_count_string37=\"\"\n    local vowel_position_count_string38=\"\
    \"\n    local vowel_position_count_string39=\"\"\n    local vowel_position_count_string40=\"\
    \"\n    local vowel_position_count_string41=\"\"\n    local vowel_position_count_string42=\"\
    \"\n    local vowel_position_count_string43=\"\"\n    local vowel_position_count_string44=\"\
    \"\n    local vowel_position_count_string45=\"\"\n    local vowel_position_count_string46=\"\
    \"\n    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels[@]}\n    local vowel_found=\"\"\n\
    \    local vowel_index=0\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:1}\n\
    \    local vowel_found=\"\"\n    local vowel_left=${1:0:1}\n    local vowel_right=${1:1:\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5np6pka7.sh: line 100: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels}\n    local vowel_found=\"\"\n \
    \   local vowel_found_index=0\n    local vowel_found_index2=0\n    local vowel_found_index3=0\n\
    \    local vowel_found_index4=0\n    local vowel_found_index5=0\n    local vowel_found_index6=0\n\
    \    local vowel_found_index7=0\n    local vowel_found_index8=0\n    local vowel_found_index9=0\n\
    \    local vowel_found_index10=0\n    local vowel_found_index11=0\n    local vowel_found_index12=0\n\
    \    local vowel_found_index13=0\n    local vowel_found_index14=0\n    local vowel_found_index15=0\n\
    \    local vowel_found_index16=0\n    local vowel_found_index17=0\n    local vowel_found_index18=0\n\
    \    local vowel_found_index19=0\n    local vowel_found_index20=0\n    local vowel_found_index21=0\n\
    \    local vowel_found_index22=0\n    local vowel_found_index23=0\n    local vowel_found_index24=0\n\
    \    local vowel_found_index25=0\n    local vowel_found_index26=0\n    local vowel_found_index27=0\n\
    \    local vowel_found_index28=0\n    local vowel_found_index29=0\n    local vowel_found_index30=0\n\
    \    local vowel_found_index31=0\n    local vowel_found_index32=0\n    local vowel_found_index33=0\n\
    \    local vowel_found_index34=0\n    local vowel_found_index35=0\n    local vowel_found_index36=0\n\
    \    local vowel_found_index37=0\n    local vowel_found_index38=0\n    local vowel_found_index39=0\n\
    \    local vowel_found_index40=0\n    local vowel_found_index41=0\n    local vowel_found_index42=0\n\
    \    local vowel_found_index43=0\n    local vowel_found_index44=0\n    local vowel_found_index45=0\n\
    \    local vowel_found_index46=0\n    local vowel_found_index47=0\n    local vowel_found_index48=0\n\
    \    local vowel_found_index49=0\n    local vowel_found_index50=0\n    local vowel_found_index51=0\n\
    \    local vowel_found_index52=0\n    local vowel_found_index53=0\n    local vowel_found_index54=0\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\"\n  local word=$1\n  local vowel\n  local vowel_count\n  local vowel_index\n\
    \  local vowel_found\n  local vowel_found_index\n  local vowel_found_index2\n\
    \  local vowel_found_index3\n  local vowel_found_index4\n  local vowel_found_index5\n\
    \  local vowel_found_index6\n  local vowel_found_index7\n  local vowel_found_index8\n\
    \  local vowel_found_index9\n  local vowel_found_index10\n  local vowel_found_index11\n\
    \  local vowel_found_index12\n  local vowel_found_index13\n  local vowel_found_index14\n\
    \  local vowel_found_index15\n  local vowel_found_index16\n  local vowel_found_index17\n\
    \  local vowel_found_index18\n  local vowel_found_index19\n  local vowel_found_index20\n\
    \  local vowel_found_index21\n  local vowel_found_index22\n  local vowel_found_index23\n\
    \  local vowel_found_index24\n  local vowel_found_index25\n  local vowel_found_index26\n\
    \  local vowel_found_index27\n  local vowel_found_index28\n  local vowel_found_index29\n\
    \  local vowel_found_index30\n  local vowel_found_index31\n  local vowel_found_index32\n\
    \  local vowel_found_index33\n  local vowel_found_index34\n  local vowel_found_index35\n\
    \  local vowel_found_index36\n  local vowel_found_index37\n  local vowel_found_index38\n\
    \  local vowel_found_index39\n  local vowel_found_index40\n  local vowel_found_index41\n\
    \  local vowel_found_index42\n  local vowel_found_index43\n  local vowel_found_index44\n\
    \  local vowel_found_index45\n  local vowel_found_index46\n  local vowel_found_index47\n\
    \  local vowel_found_index48\n  local vowel_found_index49\n  local vowel_found_index50\n\
    \  local vowel_found_index51\n  local vowel_found_index52\n  local vowel_found_index53\n\
    \  local vowel_found_index54\n  local vowel_found_index55\n  local vowel_found_index56\n\
    \  local vowel_found_index57\n  local vowel_found_index58\n  local vowel_found_index59\n\
    \  local vowel_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_found=\"\";\n  local vowel_found_index=\"\
    \";\n  local vowel_index=\"\";\n  local vowel_start_index=\"\";\n  local vowel_end_index=\"\
    \";\n  local vowel_start_index2=\"\";\n  local vowel_end_index2=\"\";\n  local\
    \ vowel_start_index3=\"\";\n  local vowel_end_index3=\"\";\n  local vowel_start_index4=\"\
    \";\n  local vowel_end_index4=\"\";\n  local vowel_start_index5=\"\";\n  local\
    \ vowel_end_index5=\"\";\n  local vowel_start_index6=\"\";\n  local vowel_end_index6=\"\
    \";\n  local vowel_start_index7=\"\";\n  local vowel_end_index7=\"\";\n  local\
    \ vowel_start_index8=\"\";\n  local vowel_end_index8=\"\";\n  local vowel_start_index9=\"\
    \";\n  local vowel_end_index9=\"\";\n  local vowel_start_index10=\"\";\n  local\
    \ vowel_end_index10=\"\";\n  local vowel_start_index11=\"\";\n  local vowel_end_index11=\"\
    \";\n  local vowel_start_index12=\"\";\n  local vowel_end_index12=\"\";\n  local\
    \ vowel_start_index13=\"\";\n  local vowel_end_index13=\"\";\n  local vowel_start_index14=\"\
    \";\n  local vowel_end_index14=\"\";\n  local vowel_start_index15=\"\";\n  local\
    \ vowel_end_index15=\"\";\n  local vowel_start_index16=\"\";\n  local vowel_end_index16=\"\
    \";\n  local vowel_start_index17=\"\";\n  local vowel_end_index17=\"\";\n  local\
    \ vowel_start_index18=\"\";\n  local vowel_end_index18=\"\";\n  local vowel_start_index19=\"\
    \";\n  local vowel_end_index19=\"\";\n  local vowel_start_index20=\"\";\n  local\
    \ vowel_end_index20=\"\";\n  local vowel_start_index21=\"\";\n  local vowel_end_index21=\"\
    \";\n  local vowel_start_index22=\"\";\n  local vowel_end_index22=\"\";\n  local\
    \ vowel_start_index23=\"\";\n  local vowel_end_index23=\"\";\n  local vowel_start_index24=\"\
    \";\n  local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_found_index=0\n    local vowel_found_index2=0\n\
    \    local vowel_found_index3=0\n    local vowel_found_index4=0\n    local vowel_found_index5=0\n\
    \    local vowel_found_index6=0\n    local vowel_found_index7=0\n    local vowel_found_index8=0\n\
    \    local vowel_found_index9=0\n    local vowel_found_index10=0\n    local vowel_found_index11=0\n\
    \    local vowel_found_index12=0\n    local vowel_found_index13=0\n    local vowel_found_index14=0\n\
    \    local vowel_found_index15=0\n    local vowel_found_index16=0\n    local vowel_found_index17=0\n\
    \    local vowel_found_index18=0\n    local vowel_found_index19=0\n    local vowel_found_index20=0\n\
    \    local vowel_found_index21=0\n    local vowel_found_index22=0\n    local vowel_found_index23=0\n\
    \    local vowel_found_index24=0\n    local vowel_found_index25=0\n    local vowel_found_index26=0\n\
    \    local vowel_found_index27=0\n    local vowel_found_index28=0\n    local vowel_found_index29=0\n\
    \    local vowel_found_index30=0\n    local vowel_found_index31=0\n    local vowel_found_index32=0\n\
    \    local vowel_found_index33=0\n    local vowel_found_index34=0\n    local vowel_found_index35=0\n\
    \    local vowel_found_index36=0\n    local vowel_found_index37=0\n    local vowel_found_index38=0\n\
    \    local vowel_found_index39=0\n    local vowel_found_index40=0\n    local vowel_found_index41=0\n\
    \    local vowel_found_index42=0\n    local vowel_found_index43=0\n    local vowel_found_index44=0\n\
    \    local vowel_found_index45=0\n    local vowel_found_index46=0\n    local vowel_found_index47=0\n\
    \    local vowel_found_index48=0\n    local vowel_found_index49=0\n    local vowel_found_index50=0\n\
    \    local vowel_found_index51=0\n    local vowel_found_index52=0\n    local vowel_found_index53=0\n\
    \    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local word=$1\n    local vowel_found=\"\"\n    local\
    \ vowel_position=\"\"\n    local vowel_position_count=0\n    local vowel_position_count2=0\n\
    \    local vowel_position_count3=0\n    local vowel_position_count4=0\n    local\
    \ vowel_position_count5=0\n    local vowel_position_count6=0\n    local vowel_position_count7=0\n\
    \    local vowel_position_count8=0\n    local vowel_position_count9=0\n    local\
    \ vowel_position_count10=0\n    local vowel_position_count11=0\n    local vowel_position_count12=0\n\
    \    local vowel_position_count13=0\n    local vowel_position_count14=0\n    local\
    \ vowel_position_count15=0\n    local vowel_position_count16=0\n    local vowel_position_count17=0\n\
    \    local vowel_position_count18=0\n    local vowel_position_count19=0\n    local\
    \ vowel_position_count20=0\n    local vowel_position_count21=0\n    local vowel_position_count22=0\n\
    \    local vowel_position_count23=0\n    local vowel_position_count24=0\n    local\
    \ vowel_position_count25=0\n    local vowel_position_count26=0\n    local vowel_position_count27=0\n\
    \    local vowel_position_count28=0\n    local vowel_position_count29=0\n    local\
    \ vowel_position_count30=0\n    local vowel_position_count31=0\n    local vowel_position_count32=0\n\
    \    local vowel_position_count33=0\n    local vowel_position_count34=0\n    local\
    \ vowel_position_count35=0\n    local vowel_position_count36=0\n    local vowel_position_count37=0\n\
    \    local vowel_position_count38=0\n    local vowel_position_count39=0\n    local\
    \ vowel_position_count40=0\n    local vowel_position_count41=0\n    local vowel_position_count42=0\n\
    \    local vowel_position_count43=0\n    local vowel_position_count44=0\n    local\
    \ vowel_position_count45=0\n    local vowel_position_count46=0\n    local vowel_position_count47=0\n\
    \    local vowel_position_count48=0\n    local vowel_position_count49=0\n    local\
    \ vowel_position_count50=0\n    local vowel_position_count51=0\n    local vowel_position_count52=0\n\
    \    local vowel_position_count53\n}\n\ncandidate() {\n    get_closest_vowel \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n \
    \   [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n\
    \    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_count=0;\n  local vowel_found=\"\
    \";\n  local vowel_position=0;\n  local consonant_position=0;\n  local consonant_count=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position=0;\n\
    \  local consonant_found=\"\";\n  local consonant_position=0;\n  local consonant_found=\"\
    \";\n  local consonant_position=0;\n  local consonant_found=\"\";\n  local consonant_position\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u AE II OO UU\"\n  local string=\"$1\"\n  local vowel\n  local vowel_index\n\
    \  local vowel_found\n  local vowel_found_index\n  local vowel_found_index\n \
    \ local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_found_index\n\
    \  local vowel_found_index\n  local vowel_found_index\n  local vowel_\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_found=\"\";\n  local vowel_position=\"\
    \";\n  local vowel_positions=\"\";\n  local vowel_positions_count=0;\n  local\
    \ vowel_positions_count_max=5;\n  local vowel_positions_count_min=1;\n  local\
    \ vowel_positions_count_avg=0;\n  local vowel_positions_count_sum=0;\n  local\
    \ vowel_positions_count_count_max=5;\n  local vowel_positions_count_count_min=1;\n\
    \  local vowel_positions_count_count_avg=0;\n  local vowel_positions_count_count_sum=0;\n\
    \  local vowel_positions_count_count_count_max=5;\n  local vowel_positions_count_count_count_min=1;\n\
    \  local vowel_positions_count_count_count_avg=0;\n  local vowel_positions_count_count_count_sum=0;\n\
    \  local vowel_positions_count_count_count_count_max=5;\n  local vowel_positions_count_count_count_count_min=1;\n\
    \  local vowel_positions_count_count_count_count_avg=0;\n  local vowel_positions_count_count_count_count_sum=0;\n\
    \  local vowel_positions_count_count_count_count_count_max=5;\n  local vowel_positions_count_count_count_count_count_min=1;\n\
    \  local vowel_positions_count_count_count_count_count_avg=0;\n  local vowel_positions_count_count_count_count_count_sum=0;\n\
    \  local vowel_positions_count_count_count_count_count_count_max=5;\n  local vowel_positions_count_count_count_count_count_count_min=1;\n\
    \  local vowel_positions_count_count_count_count_count_count_avg=0;\n  local vowel_positions_count_count_count_count_count_count_sum=0;\n\
    \  local vowel_positions_count_count_count_count_count_count_count_max=5;\n  local\
    \ vowel_positions_count_count_count_count_count_count_count_min=1;\n  local vowel_positions_count_count_count_count_count_count_count_avg=0;\n\
    \  local vowel_positions_count_count_count_count_count_count_sum=0;\n  local vowel_positions_count_count_count_count_count_count_count_count_max=5;\n\
    \  local vowel_positions_count_count_count_count_count_count_count_count_min=1;\n\
    \  local vowel_positions_count_count_count_count_count_count_count_count_avg=0;\n\
    \  local vowel_positions_count_count_count_count_count_count_count_count_sum=0;\n\
    \  local vowel_positions_count_count_count_count_count_count_count_count_count_max=5;\n\
    \  local vowel_positions_count_count_count_count_count_count_\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local word=\"$1\"\n    local vowel_found=\"\"\n \
    \   local vowel_position=\"\"\n    local vowel_position_count=0\n    local vowel_position_index=0\n\
    \    local vowel_position_index2=0\n    local vowel_position_index3=0\n    local\
    \ vowel_position_index4=0\n    local vowel_position_index5=0\n    local vowel_position_index6=0\n\
    \    local vowel_position_index7=0\n    local vowel_position_index8=0\n    local\
    \ vowel_position_index9=0\n    local vowel_position_index10=0\n    local vowel_position_index11=0\n\
    \    local vowel_position_index12=0\n    local vowel_position_index13=0\n    local\
    \ vowel_position_index14=0\n    local vowel_position_index15=0\n    local vowel_position_index16=0\n\
    \    local vowel_position_index17=0\n    local vowel_position_index18=0\n    local\
    \ vowel_position_index19=0\n    local vowel_position_index20=0\n    local vowel_position_index21=0\n\
    \    local vowel_position_index22=0\n    local vowel_position_index23=0\n    local\
    \ vowel_position_index24=0\n    local vowel_position_index25=0\n    local vowel_position_index26=0\n\
    \    local vowel_position_index27=0\n    local vowel_position_index28=0\n    local\
    \ vowel_position_index29=0\n    local vowel_position_index30=0\n    local vowel_position_index31=0\n\
    \    local vowel_position_index32=0\n    local vowel_position_index33=0\n    local\
    \ vowel_position_index34=0\n    local vowel_position_index35=0\n    local vowel_position_index36=0\n\
    \    local vowel_position_index37=0\n    local vowel_position_index38=0\n    local\
    \ vowel_position_index39=0\n    local vowel_position_index40=0\n    local vowel_position_index41=0\n\
    \    local vowel_position_index42=0\n    local vowel_position_index43=0\n    local\
    \ vowel_position_index44=0\n    local vowel_position_index45=0\n    local vowel_position_index46=0\n\
    \    local vowel_position_index47=0\n    local vowel_position_index48=0\n    local\
    \ vowel_position_index49=0\n    local vowel_position_index50=0\n    local vowel_position_index51=0\n\
    \    local vowel_position_index52=0\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowel_found=false\n    local vowel_found_index=-1\n\
    \    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string=\"\"\n    local vowel_found_count=0\n    local vowel_found_string=\"\
    \"\n    local vowel_found_count=0\n    local vowel_found_string=\"\"\n    local\
    \ vowel_found_count=0\n    local vowel_found_string=\"\"\n    local vowel_found_count=0\n\
    \    local vowel_found_string\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_str=\"\"\
    ;\n    local vowels_index=$((${#1} - 1));\n    local vowels_char=${1:0:1}\n  \
    \  local vowels_char_count=${#vowels_char};\n    local vowels_char_str=\"\";\n\
    \    local vowels_char_str_index=$((${#vowels_char} - 1));\n    local vowels_char_str_char=${1:1:1}\n\
    \    local vowels_char_str_char_count=${#vowels_char_str_char};\n    local vowels_char_str_char_str=\"\
    \";\n    local vowels_char_str_char_str_index=$((${#vowels_char_str_char} - 1));\n\
    \    local vowels_char_str_char_str_char=${1:2:1}\n    local vowels_char_str_char_str_char_count=${#vowels_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str=\"\";\n    local vowels_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char}\
    \ - 1));\n    local vowels_char_str_char_str_char_str_char=${1:3:1}\n    local\
    \ vowels_char_str_char_str_char_str_char_count=${#vowels_char_str_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str_char_str=\"\";\n    local vowels_char_str_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char_str_char}\
    \ - 1));\n    local vowels_char_str_char_str_char_str_char_str_char=${1:4:1}\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_count=${#vowels_char_str_char_str_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_str=\"\";\n    local\
    \ vowels_char_str_char_str_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char_str_char_str_char}\
    \ - 1));\n    local vowels_char_str_char_str_char_str_char_str_char_str_char=${1:5:1}\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_str_char_count=${#vowels_char_str_char_str_char_str_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_str_char_str=\"\";\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char_str_char_str_\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo83u1j0k.sh: line 46: unexpected EOF while looking for matching
    `)''

    /tmp/tmpo83u1j0k.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_str=\"\"\
    ;\n    local vowels_index=$((${#1} - 1));\n    local vowels_char=${1:$vowels_index};\n\
    \    local vowels_char_count=${#vowels_char};\n    local vowels_char_str=\"\"\
    ;\n    local vowels_char_str_index=$((${#vowels_char} - 1));\n    local vowels_char_str_char=${1:$vowels_char_str_index};\n\
    \    local vowels_char_str_char_count=${#vowels_char_str_char};\n    local vowels_char_str_char_str=\"\
    \";\n    local vowels_char_str_char_str_index=$((${#vowels_char_str_char} - 1));\n\
    \    local vowels_char_str_char_str_char=${1:$vowels_char_str_char_str_index};\n\
    \    local vowels_char_str_char_str_char_count=${#vowels_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str=\"\";\n    local vowels_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char}\
    \ - 1));\n    local vowels_char_str_char_str_char_str_char=${1:$vowels_char_str_char_str_char_str_index};\n\
    \    local vowels_char_str_char_str_char_str_char_count=${#vowels_char_str_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str_char_str=\"\";\n    local vowels_char_str_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char_str_char}\
    \ - 1));\n    local vowels_char_str_char_str_char_str_char_str_char=${1:$vowels_char_str_char_str_char_str_char_str_index};\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_count=${#vowels_char_str_char_str_char_str_char_str_char};\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_str=\"\";\n    local\
    \ vowels_char_str_char_str_char_str_char_str_char_str_index=$((${#vowels_char_str_char_str_char_str_char_str_char}\
    \ - 1));\n    local vowels_char_str_char_str_char_str_char_str_char_str_char=${1:$vowels_char_str_char_str_char_str_char_str_char_str_index};\n\
    \    local vowels_char_str_char_str_char_str_char_str_char_str_char_count=${#vowels_char_str_char_str_char_str_char_str_char_str_char};\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local word=$1\n  local vowel_found=\"\"\n  local vowel_index=0\n\
    \  local vowel_length=$((${#word} - 1))\n  local vowel_found_index=0\n  local\
    \ vowel_found_index2=0\n  local vowel_found_index3=0\n  local vowel_found_index4=0\n\
    \  local vowel_found_index5=0\n  local vowel_found_index6=0\n  local vowel_found_index7=0\n\
    \  local vowel_found_index8=0\n  local vowel_found_index9=0\n  local vowel_found_index10=0\n\
    \  local vowel_found_index11=0\n  local vowel_found_index12=0\n  local vowel_found_index13=0\n\
    \  local vowel_found_index14=0\n  local vowel_found_index15=0\n  local vowel_found_index16=0\n\
    \  local vowel_found_index17=0\n  local vowel_found_index18=0\n  local vowel_found_index19=0\n\
    \  local vowel_found_index20=0\n  local vowel_found_index21=0\n  local vowel_found_index22=0\n\
    \  local vowel_found_index23=0\n  local vowel_found_index24=0\n  local vowel_found_index25=0\n\
    \  local vowel_found_index26=0\n  local vowel_found_index27=0\n  local vowel_found_index28=0\n\
    \  local vowel_found_index29=0\n  local vowel_found_index30=0\n  local vowel_found_index31=0\n\
    \  local vowel_found_index32=0\n  local vowel_found_index33=0\n  local vowel_found_index34=0\n\
    \  local vowel_found_index35=0\n  local vowel_found_index36=0\n  local vowel_found_index37=0\n\
    \  local vowel_found_index38=0\n  local vowel_found_index39=0\n  local vowel_found_index40=0\n\
    \  local vowel_found_index41=0\n  local vowel_found_index42=0\n  local vowel_found_index43=0\n\
    \  local vowel_found_index44=0\n  local vowel_found_index45=0\n  local vowel_found_index46=0\n\
    \  local vowel_found_index47=0\n  local vowel_found_index48=0\n  local vowel_found_index49=0\n\
    \  local vowel_found_index50=0\n  local vowel_found_index51=0\n  local vowel_found_index52=0\n\
    \  local vowel\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u AE II OO UU\"\n  local vowels_count=$(echo $vowels | wc -w)\n  local\
    \ vowels_array=($vowels)\n  local vowels_array_count=${#vowels_array[@]}\n  local\
    \ vowels_array_index=0\n  local vowels_array_element\n  local vowels_array_element_count\n\
    \  local vowels_array_element_index\n  local vowels_array_element_value\n  local\
    \ vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowels_array_element_value_count\n  local vowels_array_element_value_count\n\
    \  local vowel\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_count_2=${#vowels};\n\
    \    local vowels_count_3=${#vowels};\n    local vowels_count_4=${#vowels};\n\
    \    local vowels_count_5=${#vowels};\n    local vowels_count_6=${#vowels};\n\
    \    local vowels_count_7=${#vowels};\n    local vowels_count_8=${#vowels};\n\
    \    local vowels_count_9=${#vowels};\n    local vowels_count_10=${#vowels};\n\
    \    local vowels_count_11=${#vowels};\n    local vowels_count_12=${#vowels};\n\
    \    local vowels_count_13=${#vowels};\n    local vowels_count_14=${#vowels};\n\
    \    local vowels_count_15=${#vowels};\n    local vowels_count_16=${#vowels};\n\
    \    local vowels_count_17=${#vowels};\n    local vowels_count_18=${#vowels};\n\
    \    local vowels_count_19=${#vowels};\n    local vowels_count_20=${#vowels};\n\
    \    local vowels_count_21=${#vowels};\n    local vowels_count_22=${#vowels};\n\
    \    local vowels_count_23=${#vowels};\n    local vowels_count_24=${#vowels};\n\
    \    local vowels_count_25=${#vowels};\n    local vowels_count_26=${#vowels};\n\
    \    local vowels_count_27=${#vowels};\n    local vowels_count_28=${#vowels};\n\
    \    local vowels_count_29=${#vowels};\n    local vowels_count_30=${#vowels};\n\
    \    local vowels_count_31=${#vowels};\n    local vowels_count_32=${#vowels};\n\
    \    local vowels_count_33=${#vowels};\n    local vowels_count_34=${#vowels};\n\
    \    local vowels_count_35=${#vowels};\n    local vowels_count_36=${#vowels};\n\
    \    local vowels_count_37=${#vowels};\n    local vowels_count_38=${#vowels};\n\
    \    local vowels_count_39=${#vowels};\n    local vowels_count_40=${#vowels};\n\
    \    local vowels_count_41=${#vowels};\n    local vowels_count_42=${#\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxguwc226.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_index=$((${#1}\
    \ - 1));\n    local vowels_string_index=$((${vowels_string_index} - 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jr3ophc.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5jr3ophc.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_index;\n    local vowel_found;\n\
    \    local vowel_position;\n    local vowel_positions;\n    local vowel_positions_count;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    \    local vowel_positions_count_max;\n    local vowel_positions_count_min;\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowel_count=0\n    local vowel_found=\"\"\n    local\
    \ vowel_position=0\n    local vowel_position2=0\n    local vowel_position3=0\n\
    \    local vowel_position4=0\n    local vowel_position5=0\n    local vowel_position6=0\n\
    \    local vowel_position7=0\n    local vowel_position8=0\n    local vowel_position9=0\n\
    \    local vowel_position10=0\n    local vowel_position11=0\n    local vowel_position12=0\n\
    \    local vowel_position13=0\n    local vowel_position14=0\n    local vowel_position15=0\n\
    \    local vowel_position16=0\n    local vowel_position17=0\n    local vowel_position18=0\n\
    \    local vowel_position19=0\n    local vowel_position20=0\n    local vowel_position21=0\n\
    \    local vowel_position22=0\n    local vowel_position23=0\n    local vowel_position24=0\n\
    \    local vowel_position25=0\n    local vowel_position26=0\n    local vowel_position27=0\n\
    \    local vowel_position28=0\n    local vowel_position29=0\n    local vowel_position30=0\n\
    \    local vowel_position31=0\n    local vowel_position32=0\n    local vowel_position33=0\n\
    \    local vowel_position34=0\n    local vowel_position35=0\n    local vowel_position36=0\n\
    \    local vowel_position37=0\n    local vowel_position38=0\n    local vowel_position39=0\n\
    \    local vowel_position40=0\n    local vowel_position41=0\n    local vowel_position42=0\n\
    \    local vowel_position43=0\n    local vowel_position44=0\n    local vowel_position45=0\n\
    \    local vowel_position46=0\n    local vowel_position47=0\n    local vowel_position48=0\n\
    \    local vowel_position49=0\n    local vowel_position50=0\n    local vowel_position51=0\n\
    \    local vowel_position52=0\n    local vowel_position53=0\n    local vowel_position54=0\n\
    \    local vowel_position55=0\n    local vowel_position56=0\n    local vowel_position57=0\n\
    \    local vowel_position58=0\n    local vowel_position59=0\n    local vowel_position60=0\n\
    \    local vowel_position61=0\n    \n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local string=\"$1\"\n  local vowel_count=0\n  local vowel_index=0\n\
    \  local vowel_found=\"\"\n  local vowel_found_index=0\n  local vowel_found_index2=0\n\
    \  local vowel_found_index3=0\n  local vowel_found_index4=0\n  local vowel_found_index5=0\n\
    \  local vowel_found_index6=0\n  local vowel_found_index7=0\n  local vowel_found_index8=0\n\
    \  local vowel_found_index9=0\n  local vowel_found_index10=0\n  local vowel_found_index11=0\n\
    \  local vowel_found_index12=0\n  local vowel_found_index13=0\n  local vowel_found_index14=0\n\
    \  local vowel_found_index15=0\n  local vowel_found_index16=0\n  local vowel_found_index17=0\n\
    \  local vowel_found_index18=0\n  local vowel_found_index19=0\n  local vowel_found_index20=0\n\
    \  local vowel_found_index21=0\n  local vowel_found_index22=0\n  local vowel_found_index23=0\n\
    \  local vowel_found_index24=0\n  local vowel_found_index25=0\n  local vowel_found_index26=0\n\
    \  local vowel_found_index27=0\n  local vowel_found_index28=0\n  local vowel_found_index29=0\n\
    \  local vowel_found_index30=0\n  local vowel_found_index31=0\n  local vowel_found_index32=0\n\
    \  local vowel_found_index33=0\n  local vowel_found_index34=0\n  local vowel_found_index35=0\n\
    \  local vowel_found_index36=0\n  local vowel_found_index37=0\n  local vowel_found_index38=0\n\
    \  local vowel_found_index39=0\n  local vowel_found_index40=0\n  local vowel_found_index41=0\n\
    \  local vowel_found_index42=0\n  local vowel_found_index43=0\n  local vowel_found_index44=0\n\
    \  local vowel_found_index45=0\n  local vowel_found_index46=0\n  local vowel_found_index47=0\n\
    \  local vowel_found_index48=0\n  local vowel_found_index49=0\n  local vowel_found_index50=0\n\
    \  local vowel_found_index51=0\n  local vowel_found_index52=0\n  local vowel_found_index53=0\n\
    \  \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u AE II OO UU\"\n  local word=$1\n  local vowel_found=\"\"\n  local vowel_position=\"\
    \"\n  local vowel_position_count=0\n  local vowel_position_count2=0\n  local vowel_position_count3=0\n\
    \  local vowel_position_count4=0\n  local vowel_position_count5=0\n  local vowel_position_count6=0\n\
    \  local vowel_position_count7=0\n  local vowel_position_count8=0\n  local vowel_position_count9=0\n\
    \  local vowel_position_count10=0\n  local vowel_position_count11=0\n  local vowel_position_count12=0\n\
    \  local vowel_position_count13=0\n  local vowel_position_count14=0\n  local vowel_position_count15=0\n\
    \  local vowel_position_count16=0\n  local vowel_position_count17=0\n  local vowel_position_count18=0\n\
    \  local vowel_position_count19=0\n  local vowel_position_count20=0\n  local vowel_position_count21=0\n\
    \  local vowel_position_count22=0\n  local vowel_position_count23=0\n  local vowel_position_count24=0\n\
    \  local vowel_position_count25=0\n  local vowel_position_count26=0\n  local vowel_position_count27=0\n\
    \  local vowel_position_count28=0\n  local vowel_position_count29=0\n  local vowel_position_count30=0\n\
    \  local vowel_position_count31=0\n  local vowel_position_count32=0\n  local vowel_position_count33=0\n\
    \  local vowel_position_count34=0\n  local vowel_position_count35=0\n  local vowel_position_count36=0\n\
    \  local vowel_position_count37=0\n  local vowel_position_count38=0\n  local vowel_position_count39=0\n\
    \  local vowel_position_count40=0\n  local vowel_position_count41=0\n  local vowel_position_count42=0\n\
    \  local vowel_position_count43=0\n  local vowel_position_count44=0\n  local vowel_position_count45=0\n\
    \  local vowel_position_count46=0\n  local vowel_position_count47=0\n  local vowel_position_count48=0\n\
    \  local vowel_position_count49=0\n  local vowel_position_count50=0\n  local vowel_position_count51=0\n\
    \  local vowel_position_count52=0\n  local vowel_position_count53\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels:0:1}\n\
    \    local vowels_string_count=${#vowels_string}\n    local vowels_string_index=0\n\
    \    local vowels_string_index_count=0\n    local vowels_string_index_count2=0\n\
    \    local vowels_string_index_count3=0\n    local vowels_string_index_count4=0\n\
    \    local vowels_string_index_count5=0\n    local vowels_string_index_count6=0\n\
    \    local vowels_string_index_count7=0\n    local vowels_string_index_count8=0\n\
    \    local vowels_string_index_count9=0\n    local vowels_string_index_count10=0\n\
    \    local vowels_string_index_count11=0\n    local vowels_string_index_count12=0\n\
    \    local vowels_string_index_count13=0\n    local vowels_string_index_count14=0\n\
    \    local vowels_string_index_count15=0\n    local vowels_string_index_count16=0\n\
    \    local vowels_string_index_count17=0\n    local vowels_string_index_count18=0\n\
    \    local vowels_string_index_count19=0\n    local vowels_string_index_count20=0\n\
    \    local vowels_string_index_count21=0\n    local vowels_string_index_count22=0\n\
    \    local vowels_string_index_count23=0\n    local vowels_string_index_count24=0\n\
    \    local vowels_string_index_count25=0\n    local vowels_string_index_count26=0\n\
    \    local vowels_string_index_count27=0\n    local vowels_string_index_count28=0\n\
    \    local vowels_string_index_count29=0\n    local vowels_string_index_count30=0\n\
    \    local vowels_string_index_count31=0\n    local vowels_string_index_count32=0\n\
    \    local vowels_string_index_count33=0\n    local vowels_string_index_count34=0\n\
    \    local vowels_string_index_count35=0\n    local vowels_string_index_count36=0\n\
    \    local vowels_string_index_count37=0\n    local vowels_string_index_count38=0\n\
    \    local vowels_string_index_count39=0\n    local vowels_string_index_count40=0\n\
    \    local vowels_string_index_count41=0\n    local vowels_string_index_count42=0\n\
    \    local vowels_string_index_count43=0\n    local vowels_string_index_count44=0\n\
    \    local vowels_string_index_count45=0\n    local vowels_string_index_count46=0\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_current=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local vowel_positions_count_current_min=0;\n    local vowel_positions_count_current_max=0;\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_index=$((${#1}\
    \ - 1));\n    local vowels_string_length=$((${#1} - 1));\n    local vowels_string_last_index=${#1}\
    \ - 1;\n    local vowels_string_last_char=${1:$vowels_string_last_index};\n  \
    \  local vowels_string_last_char_length=${#vowels_string_last_char};\n    local\
    \ vowels_string_last_char_length_index=$((${vowels_string_last_char_length} -\
    \ 1));\n    local vowels_string_last_char_length_index_count=${#vowels_string_last_char_length};\n\
    \    local vowels_string_last_char_length_index_count_index=$((${vowels_string_last_char_length_index_count}\
    \ - 1));\n    local vowels_string_last_char_length_index_count_index_count=${#vowels_string_last_char_length_index_count};\n\
    \    local vowels_string_last_char_length_index_count_index_count_index=$((${vowels_string_last_char_length_index_count_index}\
    \ - 1));\n    local vowels_string_last_char_length_index_count_index_count_index_count=${#vowels_string_last_char_length_index_count_index_count};\n\
    \    local vowels_string_last_char_length_index_count_index_count_index_count_index=$((${vowels_string_last_char_length_index_count_index_count_index}\
    \ - 1));\n    local vowels_string_last_char_length_index_count_index_count_index_count_index_count=${#vowels_string_last_char_length_index_count_index_count_index_count};\n\
    \    local vowels_string_last_char_length_index_count_index_count_index_count_index_count_index=$((${vowels_string_last_char_length_index_count_index_count_index_count_index}\
    \ - 1));\n    local vowels_string_last_char_length_index_count_index_count_index_count_index_count_index_count=${#vowels_string_last_char_length_index_count_index_count_index_count_index_count};\n\
    \    local vowels_string_last_char_length_index_count_index_count_index_count_index_count_index_count_index=$((${vowels_string_last_char_length_index_count_index_count_index_count_index_count_index}\
    \ - 1));\n    local vowels_string_last_char_length_index_count_index_count_index_count_index_count_index_count_index_count=${#vowels_string_last_char_length_index_count_index_count_index_count_index_count_index_count};\n\
    \    local vowels_string_last_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index=$((${vowels_\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdpkug8b2.sh: line 40: unexpected EOF while looking for matching
    `)''

    /tmp/tmpdpkug8b2.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local str=\"$1\"\n    local vowel\n    local vowel_index\n  \
    \  local vowel_length\n    local vowel_found\n    local vowel_found_index\n  \
    \  local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_index\n    local vowel_found_length\n\
    \    local vowel_found_index\n    local vowel_found_length\n    local vowel_found_index\n\
    \    local vowel_found_length\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_char=${vowels:0:1};\n\
    \    local vowels_char_right=${vowels:${vowels_count}-1:1};\n    local vowels_char_right_count=${#vowels_char_right};\n\
    \    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local\
    \ vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count}\
    \ - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n\
    \    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local\
    \ vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count}\
    \ - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n\
    \    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local\
    \ vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count}\
    \ - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n\
    \    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local\
    \ vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count}\
    \ - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n\
    \    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local\
    \ vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count}\
    \ - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n\
    \    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local\
    \ vowels_char_right_count=$((${vowels_char_right_count} - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count}\
    \ - 1));\n    local vowels_char_right_count=$((${vowels_char_right_count} - 1));\n\
    \    local vowels_char_right_count=$((${vowels_char_\n}\n\ncandidate() {\n   \
    \ get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\"\
    ) = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\"\
    ) = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\"\
    ) = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\"\
    ) = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\"\
    ) = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpig1rz3ai.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmpig1rz3ai.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel=\"\";\n    local vowel_index=0;\n\
    \    local consonant_index=$((${#word} - 1));\n    local consonant=\"\";\n   \
    \ local consonant_count=$((${#vowels} - 1));\n    while [[ ${consonant_index}\
    \ -gt 0 ]]; do\n        consonant=${word:${consonant_index}:1}\n        if [[\
    \ ${consonant} == ${vowels} ]]; then\n            consonant_index=$((${consonant_index}\
    \ - 1));\n            vowel=${vowels:${vowel_index}:1}\n            vowel_index=$((${vowel_index}\
    \ - 1));\n        fi\n        consonant_index=$((${consonant_index} - 1));\n \
    \   done\n    echo \"${vowel}\"\n}\n\ncandidate() {\n    get_closest_vowel \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n \
    \   [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n\
    \    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel;\n    local vowel_position;\n\
    \    local vowel_position_count;\n    local vowel_positions;\n    local vowel_positions_count;\n\
    \    local vowel_positions_sum;\n    local vowel_positions_sum_count;\n    local\
    \ vowel_positions_sum_sum;\n    local vowel_positions_sum_sum_count;\n    local\
    \ vowel_positions_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n    local\
    \ vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count;\n    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count;\n\
    \    local vowel_positions_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    local vowel_positions_sum_sum_sum_sum_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local word=$1\n    local vowel\n    local vowel_found\n\
    \    local vowel_index\n    local vowel_length\n    local vowel_length_index\n\
    \    local vowel_length_count\n    local vowel_length_count2\n    local vowel_length_count3\n\
    \    local vowel_length_count4\n    local vowel_length_count5\n    local vowel_length_count6\n\
    \    local vowel_length_count7\n    local vowel_length_count8\n    local vowel_length_count9\n\
    \    local vowel_length_count10\n    local vowel_length_count11\n    local vowel_length_count12\n\
    \    local vowel_length_count13\n    local vowel_length_count14\n    local vowel_length_count15\n\
    \    local vowel_length_count16\n    local vowel_length_count17\n    local vowel_length_count18\n\
    \    local vowel_length_count19\n    local vowel_length_count20\n    local vowel_length_count21\n\
    \    local vowel_length_count22\n    local vowel_length_count23\n    local vowel_length_count24\n\
    \    local vowel_length_count25\n    local vowel_length_count26\n    local vowel_length_count27\n\
    \    local vowel_length_count28\n    local vowel_length_count29\n    local vowel_length_count30\n\
    \    local vowel_length_count31\n    local vowel_length_count32\n    local vowel_length_count33\n\
    \    local vowel_length_count34\n    local vowel_length_count35\n    local vowel_length_count36\n\
    \    local vowel_length_count37\n    local vowel_length_count38\n    local vowel_length_count39\n\
    \    local vowel_length_count40\n    local vowel_length_count41\n    local vowel_length_count42\n\
    \    local vowel_length_count43\n    local vowel_length_count44\n    local vowel_length_count45\n\
    \    local vowel_length_count46\n    local vowel_length_count47\n    local vowel_length_count48\n\
    \    local vowel_length_count49\n    local vowel_length_count50\n    local vowel_length_count51\n\
    \    local vowel_length_count52\n    local vowel_length_count53\n    local vowel_length_count54\n\
    \    local vowel_length_count55\n    local vowel_length_count56\n    local vowel_length_count57\n\
    \    local vowel_length\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_position_count=0;\n    local vowel_position_count2=0;\n \
    \   local vowel_position_count3=0;\n    local vowel_position_count4=0;\n    local\
    \ vowel_position_count5=0;\n    local vowel_position_count6=0;\n    local vowel_position_count7=0;\n\
    \    local vowel_position_count8=0;\n    local vowel_position_count9=0;\n    local\
    \ vowel_position_count10=0;\n    local vowel_position_count11=0;\n    local vowel_position_count12=0;\n\
    \    local vowel_position_count13=0;\n    local vowel_position_count14=0;\n  \
    \  local vowel_position_count15=0;\n    local vowel_position_count16=0;\n    local\
    \ vowel_position_count17=0;\n    local vowel_position_count18=0;\n    local vowel_position_count19=0;\n\
    \    local vowel_position_count20=0;\n    local vowel_position_count21=0;\n  \
    \  local vowel_position_count22=0;\n    local vowel_position_count23=0;\n    local\
    \ vowel_position_count24=0;\n    local vowel_position_count25=0;\n    local vowel_position_count26=0;\n\
    \    local vowel_position_count27=0;\n    local vowel_position_count28=0;\n  \
    \  local vowel_position_count29=0;\n    local vowel_position_count30=0;\n    local\
    \ vowel_position_count31=0;\n    local vowel_position_count32=0;\n    local vowel_position_count33=0;\n\
    \    local vowel_position_count34=0;\n    local vowel_position_count35=0;\n  \
    \  local vowel_position_count36=0;\n    local vowel_position_count37=0;\n    local\
    \ vowel_position_count38=0;\n    local vowel_position_count39=0;\n    local vowel_position_count40=0;\n\
    \    local vowel_position_count41=0;\n    local vowel_position_count42=0;\n  \
    \  local vowel_position_count43=0;\n    local vowel_position_count44=0;\n    local\
    \ vowel_position_count45=0;\n    local vowel_position_count46=0;\n    local vowel_position_count47=0;\n\
    \    local vowel_position_count48=0;\n    local vowel_position_count49=0;\n  \
    \  local vowel_position_count50=0;\n    local vowel_position_count51=0;\n    local\
    \ vowel_position_count52=0;\n    local vowel_position_count53=0;\n\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_found=\"\";\n  local vowel_position=\"\
    \";\n  local vowel_positions=\"\";\n  local vowel_positions_count=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  local\
    \ vowel_positions_count_max=0;\n  local vowel_positions_count_min=0;\n  \n}\n\n\
    candidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n\
    \    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n\
    \    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n\
    \    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n\
    \    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n\
    \    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\"\
    \ ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=\"$1\"\n    local vowel_found=\"\"\n    local vowel_index=0\n\
    \    local consonant_index=0\n    local consonant_found=\"\"\n    local consonant_count=0\n\
    \    local consonant_count2=0\n    local consonant_count3=0\n    local consonant_count4=0\n\
    \    local consonant_count5=0\n    local consonant_count6=0\n    local consonant_count7=0\n\
    \    local consonant_count8=0\n    local consonant_count9=0\n    local consonant_count10=0\n\
    \    local consonant_count11=0\n    local consonant_count12=0\n    local consonant_count13=0\n\
    \    local consonant_count14=0\n    local consonant_count15=0\n    local consonant_count16=0\n\
    \    local consonant_count17=0\n    local consonant_count18=0\n    local consonant_count19=0\n\
    \    local consonant_count20=0\n    local consonant_count21=0\n    local consonant_count22=0\n\
    \    local consonant_count23=0\n    local consonant_count24=0\n    local consonant_count25=0\n\
    \    local consonant_count26=0\n    local consonant_count27=0\n    local consonant_count28=0\n\
    \    local consonant_count29=0\n    local consonant_count30=0\n    local consonant_count31=0\n\
    \    local consonant_count32=0\n    local consonant_count33=0\n    local consonant_count34=0\n\
    \    local consonant_count35=0\n    local consonant_count36=0\n    local consonant_count37=0\n\
    \    local consonant_count38=0\n    local consonant_count39=0\n    local consonant_count40=0\n\
    \    local consonant_count41=0\n    local consonant_count42=0\n    local consonant_count43=0\n\
    \    local consonant_count44=0\n    local consonant_count45=0\n    local consonant_count46=0\n\
    \    local consonant_count47=0\n    local consonant_count48=0\n    local consonant_count49=0\n\
    \    local consonant_count50=0\n    local consonant_count51=0\n    local consonant_count52\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_position=0\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_index=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_index=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_index=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_count=0\n    local consonant_index=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_index=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_index=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_count=0\n    local consonant_index=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_index=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_index=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_count=0\n    local consonant_index=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_index=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_index=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_count=0\n    local consonant_index=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_index=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_count\n    local\
    \ vowel_index\n    local vowel_found\n    local vowel_found_index\n    local vowel_found_index2\n\
    \    local vowel_found_index3\n    local vowel_found_index4\n    local vowel_found_index5\n\
    \    local vowel_found_index6\n    local vowel_found_index7\n    local vowel_found_index8\n\
    \    local vowel_found_index9\n    local vowel_found_index10\n    local vowel_found_index11\n\
    \    local vowel_found_index12\n    local vowel_found_index13\n    local vowel_found_index14\n\
    \    local vowel_found_index15\n    local vowel_found_index16\n    local vowel_found_index17\n\
    \    local vowel_found_index18\n    local vowel_found_index19\n    local vowel_found_index20\n\
    \    local vowel_found_index21\n    local vowel_found_index22\n    local vowel_found_index23\n\
    \    local vowel_found_index24\n    local vowel_found_index25\n    local vowel_found_index26\n\
    \    local vowel_found_index27\n    local vowel_found_index28\n    local vowel_found_index29\n\
    \    local vowel_found_index30\n    local vowel_found_index31\n    local vowel_found_index32\n\
    \    local vowel_found_index33\n    local vowel_found_index34\n    local vowel_found_index35\n\
    \    local vowel_found_index36\n    local vowel_found_index37\n    local vowel_found_index38\n\
    \    local vowel_found_index39\n    local vowel_found_index40\n    local vowel_found_index41\n\
    \    local vowel_found_index42\n    local vowel_found_index43\n    local vowel_found_index44\n\
    \    local vowel_found_index45\n    local vowel_found_index46\n    local vowel_found_index47\n\
    \    local vowel_found_index48\n    local vowel_found_index49\n    local vowel_found_index50\n\
    \    local vowel_found_index51\n    local vowel_found_index52\n    local vowel_found_index53\n\
    \    local vowel_found_index54\n    local vowel_found_index55\n    local vowel_found_index56\n\
    \    local vowel_found_index57\n    local vowel_found_index58\n    local vowel_found_index59\n\
    \    local vowel_found\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_array=($vowels)\n\
    \    local vowels_array_count=${#vowels_array[@]}\n    local vowels_array_element=${1}\n\
    \    local vowels_array_element_count=$(echo $vowels_array_element | wc -w)\n\
    \    local vowels_array_element_index=$(echo $vowels_array_element | awk '{print\
    \ index($0, $1)}')\n    local vowels_array_element_index_count=$(echo $vowels_array_element\
    \ | awk '{print index($0, $1)}')\n    local vowels_array_element_index_count_minus_1=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count_minus_1=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count_minus_1_count=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count_minus_1_count_minus_1=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count_minus_1_count_minus_1_count=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count_minus_1_count_minus_1_count_minus_1=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1}')\n    local vowels_array_element_index_count_minus_1_count_minus_1_count_minus_1_count_minus_1_count_minus_1_count=$(echo\
    \ $vowels_array_element | awk '{print index($0, $1)-1\n}\n\ncandidate() {\n  \
    \  get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu272re4p.sh: line 36: unexpected EOF while looking for matching
    `''''

    /tmp/tmpu272re4p.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_length=$((vowels_string_length-1))\n\
    \    local vowels_string=${vowels_string#?}\n    local vowels_string=${vowels_string%?}\n\
    \    local vowels_string_length=${#vowels_string}\n    local \n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_index=\"\
    \";\n    local vowel_length=\"\";\n    local vowel_start=\"\";\n    local vowel_end=\"\
    \";\n    local vowel_middle=\"\";\n    local vowel_middle_index=\"\";\n    local\
    \ vowel_middle_length=\"\";\n    local vowel_middle_start=\"\";\n    local vowel_middle_end=\"\
    \";\n    local vowel_middle_middle=\"\";\n    local vowel_middle_middle_index=\"\
    \";\n    local vowel_middle_middle_length=\"\";\n    local vowel_middle_middle_start=\"\
    \";\n    local vowel_middle_middle_end=\"\";\n    local vowel_middle_middle_middle=\"\
    \";\n    local vowel_middle_middle_middle_index=\"\";\n    local vowel_middle_middle_middle_length=\"\
    \";\n    local vowel_middle_middle_middle_start=\"\";\n    local vowel_middle_middle_middle_end=\"\
    \";\n    local vowel_middle_middle_middle_middle=\"\";\n    local vowel_middle_middle_middle_middle_index=\"\
    \";\n    local vowel_middle_middle_middle_middle_length=\"\";\n    local vowel_middle_middle_middle_middle_start=\"\
    \";\n    local vowel_middle_middle_middle_middle_end=\"\";\n    local vowel_middle_middle_middle_middle_middle=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_index=\"\";\n    local\
    \ vowel_middle_middle_middle_middle_middle_length=\"\";\n    local vowel_middle_middle_middle_middle_middle_start=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_end=\"\";\n    local vowel_middle_middle_middle_middle_middle_middle=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_middle_index=\"\";\n \
    \   local vowel_middle_middle_middle_middle_middle_middle_length=\"\";\n    local\
    \ vowel_middle_middle_middle_middle_middle_middle_start=\"\";\n    local vowel_middle_middle_middle_middle_middle_middle_end=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_middle_middle=\"\";\n\
    \    local vowel_middle_middle_middle_middle_middle_middle_middle_index=\"\";\n\
    \    local vowel_middle_middle_middle_middle_middle_middle_middle_length=\"\"\
    ;\n    local vowel_middle_middle_middle_middle_middle_middle_middle_middle_start=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_middle_middle_middle_end=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_middle_middle_middle_middle=\"\
    \";\n    local vowel_middle_middle_middle_middle_middle_middle_middle_middle_middle_index=\"\
    \";\n    local vowel_middle_middle_middle_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=\"\
    $1\"\n    local vowels=\"a e i o u\"\n    local vowels_count=${#vowels[@]}\n \
    \   local vowel_index=0\n    local vowel_found=\"\"\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count2=0\n\
    \    local vowel_found_index2=0\n    local vowel_found_count3=0\n    local vowel_found_index3=0\n\
    \    local vowel_found_count4=0\n    local vowel_found_index4=0\n    local vowel_found_count5=0\n\
    \    local vowel_found_index5=0\n    local vowel_found_count6=0\n    local vowel_found_index6=0\n\
    \    local vowel_found_count7=0\n    local vowel_found_index7=0\n    local vowel_found_count8=0\n\
    \    local vowel_found_index8=0\n    local vowel_found_count9=0\n    local vowel_found_index9=0\n\
    \    local vowel_found_count10=0\n    local vowel_found_index10=0\n    local vowel_found_count11=0\n\
    \    local vowel_found_index11=0\n    local vowel_found_count12=0\n    local vowel_found_index12=0\n\
    \    local vowel_found_count13=0\n    local vowel_found_index13=0\n    local vowel_found_count14=0\n\
    \    local vowel_found_index14=0\n    local vowel_found_count15=0\n    local vowel_found_index15=0\n\
    \    local vowel_found_count16=0\n    local vowel_found_index16=0\n    local vowel_found_count17=0\n\
    \    local vowel_found_index17=0\n    local vowel_found_count18=0\n    local vowel_found_index18=0\n\
    \    local vowel_found_count19=0\n    local vowel_found_index19=0\n    local vowel_found_count20=0\n\
    \    local vowel_found_index20=0\n    local vowel_found_count21=0\n    local vowel_found_index21=0\n\
    \    local vowel_found_count22=0\n    local vowel_found_index22=0\n    local vowel_found_count23=0\n\
    \    local vowel_found_index23=0\n    local vowel_found_count24=0\n    local vowel_found_index24=0\n\
    \    local vowel_found_count25=0\n    local vowel_found_index25=0\n    local vowel_found_count26=0\n\
    \    local vowel_found_index\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowels_count=${#vowels}\n    local vowels_str=\"\"\n\
    \    local vowels_str_len=0\n    local vowels_str_len2=0\n    local vowels_str_len3=0\n\
    \    local vowels_str_len4=0\n    local vowels_str_len5=0\n    local vowels_str_len6=0\n\
    \    local vowels_str_len7=0\n    local vowels_str_len8=0\n    local vowels_str_len9=0\n\
    \    local vowels_str_len10=0\n    local vowels_str_len11=0\n    local vowels_str_len12=0\n\
    \    local vowels_str_len13=0\n    local vowels_str_len14=0\n    local vowels_str_len15=0\n\
    \    local vowels_str_len16=0\n    local vowels_str_len17=0\n    local vowels_str_len18=0\n\
    \    local vowels_str_len19=0\n    local vowels_str_len20=0\n    local vowels_str_len21=0\n\
    \    local vowels_str_len22=0\n    local vowels_str_len23=0\n    local vowels_str_len24=0\n\
    \    local vowels_str_len25=0\n    local vowels_str_len26=0\n    local vowels_str_len27=0\n\
    \    local vowels_str_len28=0\n    local vowels_str_len29=0\n    local vowels_str_len30=0\n\
    \    local vowels_str_len31=0\n    local vowels_str_len32=0\n    local vowels_str_len33=0\n\
    \    local vowels_str_len34=0\n    local vowels_str_len35=0\n    local vowels_str_len36=0\n\
    \    local vowels_str_len37=0\n    local vowels_str_len38=0\n    local vowels_str_len39=0\n\
    \    local vowels_str_len40=0\n    local vowels_str_len41=0\n    local vowels_str_len42=0\n\
    \    local vowels_str_len43=0\n    local vowels_str_len44=0\n    local vowels_str_len45=0\n\
    \    local vowels_str_len46=0\n    local vowels_str_len47=0\n    local vowels_str_len48=0\n\
    \    local vowels_str_len49=0\n    local vowels_str_len50=0\n    local vowels_str_len51=0\n\
    \    local vowels_str_len52=0\n    local vowels_str_len53=0\n    local vowels_str_len54=0\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels[@]}\n    local vowel_found=\"\"\n\
    \    local vowel_position=0\n    local vowel_position_count=0\n    local vowel_position_index=0\n\
    \    local vowel_position_index2=0\n    local vowel_position_index3=0\n    local\
    \ vowel_position_index4=0\n    local vowel_position_index5=0\n    local vowel_position_index6=0\n\
    \    local vowel_position_index7=0\n    local vowel_position_index8=0\n    local\
    \ vowel_position_index9=0\n    local vowel_position_index10=0\n    local vowel_position_index11=0\n\
    \    local vowel_position_index12=0\n    local vowel_position_index13=0\n    local\
    \ vowel_position_index14=0\n    local vowel_position_index15=0\n    local vowel_position_index16=0\n\
    \    local vowel_position_index17=0\n    local vowel_position_index18=0\n    local\
    \ vowel_position_index19=0\n    local vowel_position_index20=0\n    local vowel_position_index21=0\n\
    \    local vowel_position_index22=0\n    local vowel_position_index23=0\n    local\
    \ vowel_position_index24=0\n    local vowel_position_index25=0\n    local vowel_position_index26=0\n\
    \    local vowel_position_index27=0\n    local vowel_position_index28=0\n    local\
    \ vowel_position_index29=0\n    local vowel_position_index30=0\n    local vowel_position_index31=0\n\
    \    local vowel_position_index32=0\n    local vowel_position_index33=0\n    local\
    \ vowel_position_index34=0\n    local vowel_position_index35=0\n    local vowel_position_index36=0\n\
    \    local vowel_position_index37=0\n    local vowel_position_index38=0\n    local\
    \ vowel_position_index39=0\n    local vowel_position_index40=0\n    local vowel_position_index41=0\n\
    \    local vowel_position_index42=0\n    local vowel_position_index43=0\n    local\
    \ vowel_position_index44=0\n    local vowel_position_index45=0\n    local vowel_position_index46=0\n\
    \    local vowel_position_index47=0\n    local vowel_position_index48=0\n    local\
    \ vowel_position_index49=0\n    local vowel_position_index50=0\n    local vowel_position_index51=0\n\
    \    local vowel_position_index52=0\n    \n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_count\n    local\
    \ vowel_index\n    local vowel_found\n    local vowel_found_index\n    local vowel_found_index2\n\
    \    local vowel_found_index3\n    local vowel_found_index4\n    local vowel_found_index5\n\
    \    local vowel_found_index6\n    local vowel_found_index7\n    local vowel_found_index8\n\
    \    local vowel_found_index9\n    local vowel_found_index10\n    local vowel_found_index11\n\
    \    local vowel_found_index12\n    local vowel_found_index13\n    local vowel_found_index14\n\
    \    local vowel_found_index15\n    local vowel_found_index16\n    local vowel_found_index17\n\
    \    local vowel_found_index18\n    local vowel_found_index19\n    local vowel_found_index20\n\
    \    local vowel_found_index21\n    local vowel_found_index22\n    local vowel_found_index23\n\
    \    local vowel_found_index24\n    local vowel_found_index25\n    local vowel_found_index26\n\
    \    local vowel_found_index27\n    local vowel_found_index28\n    local vowel_found_index29\n\
    \    local vowel_found_index30\n    local vowel_found_index31\n    local vowel_found_index32\n\
    \    local vowel_found_index33\n    local vowel_found_index34\n    local vowel_found_index35\n\
    \    local vowel_found_index36\n    local vowel_found_index37\n    local vowel_found_index38\n\
    \    local vowel_found_index39\n    local vowel_found_index40\n    local vowel_found_index41\n\
    \    local vowel_found_index42\n    local vowel_found_index43\n    local vowel_found_index44\n\
    \    local vowel_found_index45\n    local vowel_found_index46\n    local vowel_found_index47\n\
    \    local vowel_found_index48\n    local vowel_found_index49\n    local vowel_found_index50\n\
    \    local vowel_found_index51\n    local vowel_found_index52\n    local vowel_found_index53\n\
    \    local vowel_found_index54\n    local vowel_found_index55\n    local vowel_found_index56\n\
    \    local vowel_found_index57\n    local vowel_found_index58\n    local vowel_found_index59\n\
    \    local vowel_found\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_index=$((${#1}\
    \ - 1));\n    local vowels_string_index=$((${vowels_string_index} - 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jr3ophc.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5jr3ophc.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_found=\"\"\n    local vowel_position=0\n\
    \    local vowel_position_count=0\n    local vowel_position_count2=0\n    local\
    \ vowel_position_count3=0\n    local vowel_position_count4=0\n    local vowel_position_count5=0\n\
    \    local vowel_position_count6=0\n    local vowel_position_count7=0\n    local\
    \ vowel_position_count8=0\n    local vowel_position_count9=0\n    local vowel_position_count10=0\n\
    \    local vowel_position_count11=0\n    local vowel_position_count12=0\n    local\
    \ vowel_position_count13=0\n    local vowel_position_count14=0\n    local vowel_position_count15=0\n\
    \    local vowel_position_count16=0\n    local vowel_position_count17=0\n    local\
    \ vowel_position_count18=0\n    local vowel_position_count19=0\n    local vowel_position_count20=0\n\
    \    local vowel_position_count21=0\n    local vowel_position_count22=0\n    local\
    \ vowel_position_count23=0\n    local vowel_position_count24=0\n    local vowel_position_count25=0\n\
    \    local vowel_position_count26=0\n    local vowel_position_count27=0\n    local\
    \ vowel_position_count28=0\n    local vowel_position_count29=0\n    local vowel_position_count30=0\n\
    \    local vowel_position_count31=0\n    local vowel_position_count32=0\n    local\
    \ vowel_position_count33=0\n    local vowel_position_count34=0\n    local vowel_position_count35=0\n\
    \    local vowel_position_count36=0\n    local vowel_position_count37=0\n    local\
    \ vowel_position_count38=0\n    local vowel_position_count39=0\n    local vowel_position_count40=0\n\
    \    local vowel_position_count41=0\n    local vowel_position_count42=0\n    local\
    \ vowel_position_count43=0\n    local vowel_position_count44=0\n    local vowel_position_count45=0\n\
    \    local vowel_position_count46=0\n    local vowel_position_count47=0\n    local\
    \ vowel_position_count48=0\n    local vowel_position_count49=0\n    local vowel_position_count50=0\n\
    \    local vowel_position_count51=0\n    local vowel_position_count52=0\n    local\
    \ vowel_position_count53=0\n    local vowel_position_count\n}\n\ncandidate() {\n\
    \    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowel_found=\"\
    \";\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local\
    \ vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index=0;\n    local vowel_found_index=0;\n\
    \    local vowel_found_index=\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_found=\"\";\n  local vowel_position=\"\
    \";\n  local vowel_position_count=0;\n  local vowel_position_count2=0;\n  local\
    \ vowel_position_count3=0;\n  local vowel_position_count4=0;\n  local vowel_position_count5=0;\n\
    \  local vowel_position_count6=0;\n  local vowel_position_count7=0;\n  local vowel_position_count8=0;\n\
    \  local vowel_position_count9=0;\n  local vowel_position_count10=0;\n  local\
    \ vowel_position_count11=0;\n  local vowel_position_count12=0;\n  local vowel_position_count13=0;\n\
    \  local vowel_position_count14=0;\n  local vowel_position_count15=0;\n  local\
    \ vowel_position_count16=0;\n  local vowel_position_count17=0;\n  local vowel_position_count18=0;\n\
    \  local vowel_position_count19=0;\n  local vowel_position_count20=0;\n  local\
    \ vowel_position_count21=0;\n  local vowel_position_count22=0;\n  local vowel_position_count23=0;\n\
    \  local vowel_position_count24=0;\n  local vowel_position_count25=0;\n  local\
    \ vowel_position_count26=0;\n  local vowel_position_count27=0;\n  local vowel_position_count28=0;\n\
    \  local vowel_position_count29=0;\n  local vowel_position_count30=0;\n  local\
    \ vowel_position_count31=0;\n  local vowel_position_count32=0;\n  local vowel_position_count33=0;\n\
    \  local vowel_position_count34=0;\n  local vowel_position_count35=0;\n  local\
    \ vowel_position_count36=0;\n  local vowel_position_count37=0;\n  local vowel_position_count38=0;\n\
    \  local vowel_position_count39=0;\n  local vowel_position_count40=0;\n  local\
    \ vowel_position_count41=0;\n  local vowel_position_count42=0;\n  local vowel_position_count43=0;\n\
    \  local vowel_position_count44=0;\n  local vowel_position_count45=0;\n  local\
    \ vowel_position_count46=0;\n  local vowel_position_count47=0;\n  local vowel_position_count48=0;\n\
    \  local vowel_position_count49=0;\n  local vowel_position_count50=0;\n  local\
    \ vowel_position_count51=0;\n  local vowel_position_count52=0;\n  local vowel_position_count53=0;\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowel_found=\"\"\n    local vowel_position=\"\
    \"\n    local vowel_position_count=0\n    local vowel_position_count2=0\n    local\
    \ vowel_position_count3=0\n    local vowel_position_count4=0\n    local vowel_position_count5=0\n\
    \    local vowel_position_count6=0\n    local vowel_position_count7=0\n    local\
    \ vowel_position_count8=0\n    local vowel_position_count9=0\n    local vowel_position_count10=0\n\
    \    local vowel_position_count11=0\n    local vowel_position_count12=0\n    local\
    \ vowel_position_count13=0\n    local vowel_position_count14=0\n    local vowel_position_count15=0\n\
    \    local vowel_position_count16=0\n    local vowel_position_count17=0\n    local\
    \ vowel_position_count18=0\n    local vowel_position_count19=0\n    local vowel_position_count20=0\n\
    \    local vowel_position_count21=0\n    local vowel_position_count22=0\n    local\
    \ vowel_position_count23=0\n    local vowel_position_count24=0\n    local vowel_position_count25=0\n\
    \    local vowel_position_count26=0\n    local vowel_position_count27=0\n    local\
    \ vowel_position_count28=0\n    local vowel_position_count29=0\n    local vowel_position_count30=0\n\
    \    local vowel_position_count31=0\n    local vowel_position_count32=0\n    local\
    \ vowel_position_count33=0\n    local vowel_position_count34=0\n    local vowel_position_count35=0\n\
    \    local vowel_position_count36=0\n    local vowel_position_count37=0\n    local\
    \ vowel_position_count38=0\n    local vowel_position_count39=0\n    local vowel_position_count40=0\n\
    \    local vowel_position_count41=0\n    local vowel_position_count42=0\n    local\
    \ vowel_position_count43=0\n    local vowel_position_count44=0\n    local vowel_position_count45=0\n\
    \    local vowel_position_count46=0\n    local vowel_position_count47=0\n    local\
    \ vowel_position_count48=0\n    local vowel_position_count49=0\n    local vowel_position_count50=0\n\
    \    local vowel_position_count51=0\n    local vowel_position_count52=0\n    local\
    \ vowel_position_count53=0\n    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_index\n    local\
    \ vowel_found\n    local vowel_found_index\n    local vowel_found_index\n    local\
    \ vowel_found\n    local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n    local vowel_found\n \
    \   local vowel_found_index\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found\n    local vowel_found_index\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_found=\"\";\n  local vowel_index=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_position=\"\";\n  local vowel_length=\"\";\n  local vowel_found=\"\
    \";\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels[@]}\n    local vowel_found=\"\"\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel_found_index=0\n    local vowel_found_count=0\n    local vowel_found_index=0\n\
    \    local vowel_found_count=0\n    local vowel_found_index=0\n    local vowel_found_count=0\n\
    \    local vowel\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=$1\n\
    \    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_found_index=0\n    local vowel_found_index2=0\n\
    \    local vowel_found_index3=0\n    local vowel_found_index4=0\n    local vowel_found_index5=0\n\
    \    local vowel_found_index6=0\n    local vowel_found_index7=0\n    local vowel_found_index8=0\n\
    \    local vowel_found_index9=0\n    local vowel_found_index10=0\n    local vowel_found_index11=0\n\
    \    local vowel_found_index12=0\n    local vowel_found_index13=0\n    local vowel_found_index14=0\n\
    \    local vowel_found_index15=0\n    local vowel_found_index16=0\n    local vowel_found_index17=0\n\
    \    local vowel_found_index18=0\n    local vowel_found_index19=0\n    local vowel_found_index20=0\n\
    \    local vowel_found_index21=0\n    local vowel_found_index22=0\n    local vowel_found_index23=0\n\
    \    local vowel_found_index24=0\n    local vowel_found_index25=0\n    local vowel_found_index26=0\n\
    \    local vowel_found_index27=0\n    local vowel_found_index28=0\n    local vowel_found_index29=0\n\
    \    local vowel_found_index30=0\n    local vowel_found_index31=0\n    local vowel_found_index32=0\n\
    \    local vowel_found_index33=0\n    local vowel_found_index34=0\n    local vowel_found_index35=0\n\
    \    local vowel_found_index36=0\n    local vowel_found_index37=0\n    local vowel_found_index38=0\n\
    \    local vowel_found_index39=0\n    local vowel_found_index40=0\n    local vowel_found_index41=0\n\
    \    local vowel_found_index42=0\n    local vowel_found_index43=0\n    local vowel_found_index44=0\n\
    \    local vowel_found_index45=0\n    local vowel_found_index46=0\n    local vowel_found_index47=0\n\
    \    local vowel_found_index48=0\n    local vowel_found_index49=0\n    local vowel_found_index50=0\n\
    \    local vowel_found_index51=0\n    local vowel_found_index52=0\n    local vowel_found_index53=0\n\
    \    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local conson\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_index=$((${#1}\
    \ - 1));\n    local vowels_string_index=$((${vowels_string_index} - 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jr3ophc.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5jr3ophc.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=$1\n\
    \    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=0\n    local vowel_found_index=0\n    local vowel_found_index2=0\n\
    \    local vowel_found2=0\n    local vowel_found3=0\n    local vowel_found4=0\n\
    \    local vowel_found5=0\n    local vowel_found6=0\n    local vowel_found7=0\n\
    \    local vowel_found8=0\n    local vowel_found9=0\n    local vowel_found10=0\n\
    \    local vowel_found11=0\n    local vowel_found12=0\n    local vowel_found13=0\n\
    \    local vowel_found14=0\n    local vowel_found15=0\n    local vowel_found16=0\n\
    \    local vowel_found17=0\n    local vowel_found18=0\n    local vowel_found19=0\n\
    \    local vowel_found20=0\n    local vowel_found21=0\n    local vowel_found22=0\n\
    \    local vowel_found23=0\n    local vowel_found24=0\n    local vowel_found25=0\n\
    \    local vowel_found26=0\n    local vowel_found27=0\n    local vowel_found28=0\n\
    \    local vowel_found29=0\n    local vowel_found30=0\n    local vowel_found31=0\n\
    \    local vowel_found32=0\n    local vowel_found33=0\n    local vowel_found34=0\n\
    \    local vowel_found35=0\n    local vowel_found36=0\n    local vowel_found37=0\n\
    \    local vowel_found38=0\n    local vowel_found39=0\n    local vowel_found40=0\n\
    \    local vowel_found41=0\n    local vowel_found42=0\n    local vowel_found43=0\n\
    \    local vowel_found44=0\n    local vowel_found45=0\n    local vowel_found46=0\n\
    \    local vowel_found47=0\n    local vowel_found48=0\n    local vowel_found49=0\n\
    \    local vowel_found50=0\n    local vowel_found51=0\n    local vowel_found52=0\n\
    \    local vowel_found53=0\n    local vowel_found54=0\n    local vowel_found55=0\n\
    \    local vowel_found56=0\n    local vowel_found57=0\n    local vowel_found58=0\n\
    \    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_found_index=0;\n\
    \    local vowel_found_index2=0;\n    local vowel_found_index3=0;\n    local vowel_found_index4=0;\n\
    \    local vowel_found_index5=0;\n    local vowel_found_index6=0;\n    local vowel_found_index7=0;\n\
    \    local vowel_found_index8=0;\n    local vowel_found_index9=0;\n    local vowel_found_index10=0;\n\
    \    local vowel_found_index11=0;\n    local vowel_found_index12=0;\n    local\
    \ vowel_found_index13=0;\n    local vowel_found_index14=0;\n    local vowel_found_index15=0;\n\
    \    local vowel_found_index16=0;\n    local vowel_found_index17=0;\n    local\
    \ vowel_found_index18=0;\n    local vowel_found_index19=0;\n    local vowel_found_index20=0;\n\
    \    local vowel_found_index21=0;\n    local vowel_found_index22=0;\n    local\
    \ vowel_found_index23=0;\n    local vowel_found_index24=0;\n    local vowel_found_index25=0;\n\
    \    local vowel_found_index26=0;\n    local vowel_found_index27=0;\n    local\
    \ vowel_found_index28=0;\n    local vowel_found_index29=0;\n    local vowel_found_index30=0;\n\
    \    local vowel_found_index31=0;\n    local vowel_found_index32=0;\n    local\
    \ vowel_found_index33=0;\n    local vowel_found_index34=0;\n    local vowel_found_index35=0;\n\
    \    local vowel_found_index36=0;\n    local vowel_found_index37=0;\n    local\
    \ vowel_found_index38=0;\n    local vowel_found_index39=0;\n    local vowel_found_index40=0;\n\
    \    local vowel_found_index41=0;\n    local vowel_found_index42=0;\n    local\
    \ vowel_found_index43=0;\n    local vowel_found_index44=0;\n    local vowel_found_index45=0;\n\
    \    local vowel_found_index46=0;\n    local vowel_found_index47=0;\n    local\
    \ vowel_found_index48=0;\n    local vowel_found_index49=0;\n    local vowel_found_index50=0;\n\
    \    local vowel_found_index51=0;\n    local vowel_found_index52=0;\n    local\
    \ vowel_found_index53=0;\n    local vowel_found_index54=0;\n}\n\ncandidate() {\n\
    \    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowel_count=0\n    local vowel_found=\"\"\n    local\
    \ word=$1\n    local vowel_position=0\n    local vowel_position_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n    local vowel_position_string_count=0\n    local\
    \ vowel_position_string=\"\"\n\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_count=0;\n    local vowel_index=0;\n\
    \    local vowel_found=0;\n    local vowel_found_index=0;\n    local vowel_found_index2=0;\n\
    \    local vowel_found_index3=1;\n    local vowel_found_index4=2;\n    local vowel_found_index5=3;\n\
    \    local vowel_found_index6=4;\n    local vowel_found_index7=5;\n    local vowel_found_index8=6;\n\
    \    local vowel_found_index9=7;\n    local vowel_found_index10=8;\n    local\
    \ vowel_found_index11=9;\n    local vowel_found_index12=10;\n    local vowel_found_index13=11;\n\
    \    local vowel_found_index14=12;\n    local vowel_found_index15=13;\n    local\
    \ vowel_found_index16=14;\n    local vowel_found_index17=15;\n    local vowel_found_index18=16;\n\
    \    local vowel_found_index19=17;\n    local vowel_found_index20=18;\n    local\
    \ vowel_found_index21=19;\n    local vowel_found_index22=20;\n    local vowel_found_index23=21;\n\
    \    local vowel_found_index24=22;\n    local vowel_found_index25=23;\n    local\
    \ vowel_found_index26=24;\n    local vowel_found_index27=25;\n    local vowel_found_index28=26;\n\
    \    local vowel_found_index29=27;\n    local vowel_found_index30=28;\n    local\
    \ vowel_found_index31=29;\n    local vowel_found_index32=30;\n    local vowel_found_index33=31;\n\
    \    local vowel_found_index34=32;\n    local vowel_found_index35=33;\n    local\
    \ vowel_found_index36=34;\n    local vowel_found_index37=35;\n    local vowel_found_index38=36;\n\
    \    local vowel_found_index39=37;\n    local vowel_found_index40=38;\n    local\
    \ vowel_found_index41=39;\n    local vowel_found_index42=40;\n    local vowel_found_index43=41;\n\
    \    local vowel_found_index44=42;\n    local vowel_found_index45=43;\n    local\
    \ vowel_found_index46\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel=\"\";\n    local vowel_index=0;\n\
    \    local consonant=\"\";\n    local consonant_index=0;\n    local consonant_count=$((${#word}\
    \ - 1));\n    local consonant_count2=0;\n    local consonant_count3=0;\n    local\
    \ consonant_count4=0;\n    local consonant_count5=0;\n    local consonant_count6=0;\n\
    \    local consonant_count7=0;\n    local consonant_count8=0;\n    local consonant_count9=0;\n\
    \    local consonant_count10=0;\n    local consonant_count11=0;\n    local consonant_count12=0;\n\
    \    local consonant_count13=0;\n    local consonant_count14=0;\n    local consonant_count15=0;\n\
    \    local consonant_count16=0;\n    local consonant_count17=0;\n    local consonant_count18=0;\n\
    \    local consonant_count19=0;\n    local consonant_count20=0;\n    local consonant_count21=0;\n\
    \    local consonant_count22=0;\n    local consonant_count23=0;\n    local consonant_count24=0;\n\
    \    local consonant_count25=0;\n    local consonant_count26=0;\n    local consonant_count27=0;\n\
    \    local consonant_count28=0;\n    local consonant_count29=0;\n    local consonant_count30=0;\n\
    \    local consonant_count31=0;\n    local consonant_count32=0;\n    local consonant_count33=0;\n\
    \    local consonant_count34=0;\n    local consonant_count35=0;\n    local consonant_count36=0;\n\
    \    local consonant_count37=0;\n    local consonant_count38=0;\n    local consonant_count39=0;\n\
    \    local consonant_count40=0;\n    local consonant_count41=0;\n    local consonant_count42=0;\n\
    \    local consonant_count43=0;\n    local consonant_count44=0;\n    local consonant_count45=0;\n\
    \    local consonant_count46=0;\n    local consonant_count47=0;\n    local consonant_count48=0;\n\
    \    local consonant_count49=0;\n    local consonant_count50=0;\n    local consonant_count51=0;\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local consonant_count=0\n    local consonant_index=0\n\
    \    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_found=\"\"\n    local consonant_left=\"\"\n    local consonant_right=\"\
    \"\n    local consonant_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=\"\
    $1\"\n    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_left=\"\"\n    local vowel_right=\"\
    \"\n    local vowel_left_count=0\n    local vowel_right_count=0\n    local vowel_left_index=0\n\
    \    local vowel_right_index=0\n    local vowel_left_count2=0\n    local vowel_right_count2=0\n\
    \    local vowel_left_index2=0\n    local vowel_right_index2=0\n    local vowel_left_count3=0\n\
    \    local vowel_right_count3=0\n    local vowel_left_index3=0\n    local vowel_right_index3=0\n\
    \    local vowel_left_count4=0\n    local vowel_right_count4=0\n    local vowel_left_index4=0\n\
    \    local vowel_right_index4=0\n    local vowel_left_count5=0\n    local vowel_right_count5=0\n\
    \    local vowel_left_index5=0\n    local vowel_right_index5=0\n    local vowel_left_count6=0\n\
    \    local vowel_right_count6=0\n    local vowel_left_index6=0\n    local vowel_right_index6=0\n\
    \    local vowel_left_count7=0\n    local vowel_right_count7=0\n    local vowel_left_index7=0\n\
    \    local vowel_right_index7=0\n    local vowel_left_count8=0\n    local vowel_right_count8=0\n\
    \    local vowel_left_index8=0\n    local vowel_right_index8=0\n    local vowel_left_count9=0\n\
    \    local vowel_right_count9=0\n    local vowel_left_index9=0\n    local vowel_right_index9=0\n\
    \    local vowel_left_count10=0\n    local vowel_right_count10=0\n    local vowel_left_index10=0\n\
    \    local vowel_right_index10=0\n    local vowel_left_count11=0\n    local vowel_right_count11=0\n\
    \    local vowel_left_index11=0\n    local vowel_right_index11=0\n    local vowel_left_count12=0\n\
    \    local vowel_right_count12=0\n    local vowel_left_index12=0\n    local vowel_right_index12=0\n\
    \    local vowel_left_count13=0\n    local vowel_right_count13=0\n    local vowel_left_index13=0\n\
    \    local vowel_right_index13=0\n}\n\ncandidate() {\n    get_closest_vowel \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n \
    \   [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n\
    \    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -w)\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo $vowels\
    \ | wc -w)\n    local vowels_count=$(echo $vowels | w\n}\n\ncandidate() {\n  \
    \  get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6w8wmj0.sh: line 55: unexpected EOF while looking for matching
    `)''

    /tmp/tmpb6w8wmj0.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_found=\"\";\n  local vowel_position=\"\
    \";\n  local vowel_position_count=0;\n  local vowel_position_count2=0;\n  local\
    \ vowel_position_count3=0;\n  local vowel_position_count4=0;\n  local vowel_position_count5=0;\n\
    \  local vowel_position_count6=0;\n  local vowel_position_count7=0;\n  local vowel_position_count8=0;\n\
    \  local vowel_position_count9=0;\n  local vowel_position_count10=0;\n  local\
    \ vowel_position_count11=0;\n  local vowel_position_count12=0;\n  local vowel_position_count13=0;\n\
    \  local vowel_position_count14=0;\n  local vowel_position_count15=0;\n  local\
    \ vowel_position_count16=0;\n  local vowel_position_count17=0;\n  local vowel_position_count18=0;\n\
    \  local vowel_position_count19=0;\n  local vowel_position_count20=0;\n  local\
    \ vowel_position_count21=0;\n  local vowel_position_count22=0;\n  local vowel_position_count23=0;\n\
    \  local vowel_position_count24=0;\n  local vowel_position_count25=0;\n  local\
    \ vowel_position_count26=0;\n  local vowel_position_count27=0;\n  local vowel_position_count28=0;\n\
    \  local vowel_position_count29=0;\n  local vowel_position_count30=0;\n  local\
    \ vowel_position_count31=0;\n  local vowel_position_count32=0;\n  local vowel_position_count33=0;\n\
    \  local vowel_position_count34=0;\n  local vowel_position_count35=0;\n  local\
    \ vowel_position_count36=0;\n  local vowel_position_count37=0;\n  local vowel_position_count38=0;\n\
    \  local vowel_position_count39=0;\n  local vowel_position_count40=0;\n  local\
    \ vowel_position_count41=0;\n  local vowel_position_count42=0;\n  local vowel_position_count43=0;\n\
    \  local vowel_position_count44=0;\n  local vowel_position_count45=0;\n  local\
    \ vowel_position_count46=0;\n  local vowel_position_count47=0;\n  local vowel_position_count48=0;\n\
    \  local vowel_position_count49=0;\n  local vowel_position_count50=0;\n  local\
    \ vowel_position_count51=0;\n  local vowel_position_count52=0;\n  local vowel_position_count53=0;\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local string=\"$1\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_count=0\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local \n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels:0:1}\n\
    \    local vowels_string_count=${#vowels_string}\n    local vowels_string_end=${vowels_string:$vowels_string_count-1}\n\
    \    local vowels_string_end_count=${#vowels_string_end}\n    local vowels_string_start=${vowels_string:$vowels_string_count-2}\n\
    \    local vowels_string_start_count=${#vowels_string_start}\n    local vowels_string_middle=${vowels_string:$vowels_string_count-3}\n\
    \    local vowels_string_middle_count=${#vowels_string_middle}\n    local vowels_string_middle_end=${vowels_string:$vowels_string_count-4}\n\
    \    local vowels_string_middle_end_count=${#vowels_string_middle_end}\n    local\
    \ vowels_string_middle_start=${vowels_string:$vowels_string_count-5}\n    local\
    \ vowels_string_middle_start_count=${#vowels_string_middle_start}\n    local vowels_string_middle_middle=${vowels_string:$vowels_string_count-6}\n\
    \    local vowels_string_middle_middle_count=${#vowels_string_middle_middle}\n\
    \    local vowels_string_middle_middle_end=${vowels_string:$vowels_string_count-7}\n\
    \    local vowels_string_middle_middle_end_count=${#vowels_string_middle_middle_end}\n\
    \    local vowels_string_middle_middle_start=${vowels_string:$vowels_string_count-8}\n\
    \    local vowels_string_middle_middle_start_count=${#vowels_string_middle_middle_start}\n\
    \    local vowels_string_middle_middle_middle=${vowels_string:$vowels_string_count-9}\n\
    \    local vowels_string_middle_middle_middle_count=${#vowels_string_middle_middle_middle}\n\
    \    local vowels_string_middle_middle_middle_end=${vowels_string:$vowels_string_count-10}\n\
    \    local vowels_string_middle_middle_middle_end_count=${#vowels_string_middle_middle_middle_end}\n\
    \    local vowels_string_middle_middle_middle_start=${vowels_string:$vowels_string_count-11}\n\
    \    local vowels_string_middle_middle_middle_start_count=${#vowels_string_middle_middle_middle_start}\n\
    \    local vowels_string_middle_middle_middle_middle=${vowels_string:$vowels_string_count-12}\n\
    \    local vowels_string_middle_middle_middle_middle_count=${#vowels_string_middle_middle_middle_middle}\n\
    \    local vowels_string_middle_middle_middle_middle_end=${vowels_string:$vowels_string\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx_skmms4.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local string=\"$1\"\n  local vowel_count=$(echo \"$string\"\
    \ | grep -o \"$vowels\" | wc -l)\n  local vowel_found=\"\"\n  local vowel_position=0\n\
    \  local vowel_position_count=0\n  local vowel_position_index=0\n  local vowel_position_index2=0\n\
    \  local vowel_position_index3=0\n  local vowel_position_index4=0\n  local vowel_position_index5=0\n\
    \  local vowel_position_index6=0\n  local vowel_position_index7=0\n  local vowel_position_index8=0\n\
    \  local vowel_position_index9=0\n  local vowel_position_index10=0\n  local vowel_position_index11=0\n\
    \  local vowel_position_index12=0\n  local vowel_position_index13=0\n  local vowel_position_index14=0\n\
    \  local vowel_position_index15=0\n  local vowel_position_index16=0\n  local vowel_position_index17=0\n\
    \  local vowel_position_index18=0\n  local vowel_position_index19=0\n  local vowel_position_index20=0\n\
    \  local vowel_position_index21=0\n  local vowel_position_index22=0\n  local vowel_position_index23=0\n\
    \  local vowel_position_index24=0\n  local vowel_position_index25=0\n  local vowel_position_index26=0\n\
    \  local vowel_position_index27=0\n  local vowel_position_index28=0\n  local vowel_position_index29=0\n\
    \  local vowel_position_index30=0\n  local vowel_position_index31=0\n  local vowel_position_index32=0\n\
    \  local vowel_position_index33=0\n  local vowel_position_index34=0\n  local vowel_position_index35=0\n\
    \  local vowel_position_index36=0\n  local vowel_position_index37=0\n  local vowel_position_index38=0\n\
    \  local vowel_position_index39=0\n  local vowel_position_index40=0\n  local vowel_position_index41=0\n\
    \  local vowel_position_index42=0\n  local vowel_position_index43=0\n  local vowel_position_index44=0\n\
    \  local vowel_position_index45=0\n  local vowel_position_index46=0\n  local vowel_position_index47=0\n\
    \  local vowel_position_index48=0\n  local vowel_position_index49=0\n  local vowel_position_index50=0\n\
    \  local vowel\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowel_found=\"\
    \"\n    local vowel_found_index=0\n    local vowel_found_index2=0\n    local vowel_found_index3=0\n\
    \    local vowel_found_index4=0\n    local vowel_found_index5=0\n    local vowel_found_index6=0\n\
    \    local vowel_found_index7=0\n    local vowel_found_index8=0\n    local vowel_found_index9=0\n\
    \    local vowel_found_index10=0\n    local vowel_found_index11=0\n    local vowel_found_index12=0\n\
    \    local vowel_found_index13=0\n    local vowel_found_index14=0\n    local vowel_found_index15=0\n\
    \    local vowel_found_index16=0\n    local vowel_found_index17=0\n    local vowel_found_index18=0\n\
    \    local vowel_found_index19=0\n    local vowel_found_index20=0\n    local vowel_found_index21=0\n\
    \    local vowel_found_index22=0\n    local vowel_found_index23=0\n    local vowel_found_index24=0\n\
    \    local vowel_found_index25=0\n    local vowel_found_index26=0\n    local vowel_found_index27=0\n\
    \    local vowel_found_index28=0\n    local vowel_found_index29=0\n    local vowel_found_index30=0\n\
    \    local vowel_found_index31=0\n    local vowel_found_index32=0\n    local vowel_found_index33=0\n\
    \    local vowel_found_index34=0\n    local vowel_found_index35=0\n    local vowel_found_index36=0\n\
    \    local vowel_found_index37=0\n    local vowel_found_index38=0\n    local vowel_found_index39=0\n\
    \    local vowel_found_index40=0\n    local vowel_found_index41=0\n    local vowel_found_index42=0\n\
    \    local vowel_found_index43=0\n    local vowel_found_index44=0\n    local vowel_found_index45=0\n\
    \    local vowel_found_index46=0\n    local vowel_found_index47=0\n    local vowel_found_index48=0\n\
    \    local vowel_found_index49=0\n    local vowel_found_index50=0\n    local vowel_found_index51=0\n\
    \    local vowel_found_index52=0\n    local vowel_found_index53=0\n    local vowel\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels[@]}\n    local vowel_found=\"\"\n\
    \    local vowel_found_index=0\n    local vowel_found_index2=0\n    local vowel_found_index3=0\n\
    \    local vowel_found_index4=0\n    local vowel_found_index5=0\n    local vowel_found_index6=0\n\
    \    local vowel_found_index7=0\n    local vowel_found_index8=0\n    local vowel_found_index9=0\n\
    \    local vowel_found_index10=0\n    local vowel_found_index11=0\n    local vowel_found_index12=0\n\
    \    local vowel_found_index13=0\n    local vowel_found_index14=0\n    local vowel_found_index15=0\n\
    \    local vowel_found_index16=0\n    local vowel_found_index17=0\n    local vowel_found_index18=0\n\
    \    local vowel_found_index19=0\n    local vowel_found_index20=0\n    local vowel_found_index21=0\n\
    \    local vowel_found_index22=0\n    local vowel_found_index23=0\n    local vowel_found_index24=0\n\
    \    local vowel_found_index25=0\n    local vowel_found_index26=0\n    local vowel_found_index27=0\n\
    \    local vowel_found_index28=0\n    local vowel_found_index29=0\n    local vowel_found_index30=0\n\
    \    local vowel_found_index31=0\n    local vowel_found_index32=0\n    local vowel_found_index33=0\n\
    \    local vowel_found_index34=0\n    local vowel_found_index35=0\n    local vowel_found_index36=0\n\
    \    local vowel_found_index37=0\n    local vowel_found_index38=0\n    local vowel_found_index39=0\n\
    \    local vowel_found_index40=0\n    local vowel_found_index41=0\n    local vowel_found_index42=0\n\
    \    local vowel_found_index43=0\n    local vowel_found_index44=0\n    local vowel_found_index45=0\n\
    \    local vowel_found_index46=0\n    local vowel_found_index47=0\n    local vowel_found_index48=0\n\
    \    local vowel_found_index49=0\n    local vowel_found_index50=0\n    local vowel_found_index51=0\n\
    \    local vowel_found_index52=0\n    local vowel_found_index53=0\n    local vowel_found_index54\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_count\n    local\
    \ vowel_index\n    local vowel_found\n    local vowel_found_index\n    local vowel_found_index2\n\
    \    local vowel_found_index3\n    local vowel_found_index4\n    local vowel_found_index5\n\
    \    local vowel_found_index6\n    local vowel_found_index7\n    local vowel_found_index8\n\
    \    local vowel_found_index9\n    local vowel_found_index10\n    local vowel_found_index11\n\
    \    local vowel_found_index12\n    local vowel_found_index13\n    local vowel_found_index14\n\
    \    local vowel_found_index15\n    local vowel_found_index16\n    local vowel_found_index17\n\
    \    local vowel_found_index18\n    local vowel_found_index19\n    local vowel_found_index20\n\
    \    local vowel_found_index21\n    local vowel_found_index22\n    local vowel_found_index23\n\
    \    local vowel_found_index24\n    local vowel_found_index25\n    local vowel_found_index26\n\
    \    local vowel_found_index27\n    local vowel_found_index28\n    local vowel_found_index29\n\
    \    local vowel_found_index30\n    local vowel_found_index31\n    local vowel_found_index32\n\
    \    local vowel_found_index33\n    local vowel_found_index34\n    local vowel_found_index35\n\
    \    local vowel_found_index36\n    local vowel_found_index37\n    local vowel_found_index38\n\
    \    local vowel_found_index39\n    local vowel_found_index40\n    local vowel_found_index41\n\
    \    local vowel_found_index42\n    local vowel_found_index43\n    local vowel_found_index44\n\
    \    local vowel_found_index45\n    local vowel_found_index46\n    local vowel_found_index47\n\
    \    local vowel_found_index48\n    local vowel_found_index49\n    local vowel_found_index50\n\
    \    local vowel_found_index51\n    local vowel_found_index52\n    local vowel_found_index53\n\
    \    local vowel_found_index54\n    local vowel_found_index55\n    local vowel_found_index56\n\
    \    local vowel_found_index57\n    local vowel_found_index58\n    local vowel_found_index59\n\
    \    local vowel_found\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_array=($vowels);\n\
    \    local vowels_array_count=${#vowels_array[@]};\n    local vowels_array_index=0;\n\
    \    local vowels_array_element=${vowels_array[$vowels_array_index]};\n    local\
    \ vowels_array_element_count=${#vowels_array_element};\n    local vowels_array_element_index=0;\n\
    \    local vowels_array_element_value=${vowels_array_element[$vowels_array_element_index]};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_array_element_value_count=${#vowels_array_element_value};\n\
    \    local vowels_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_count\n    local\
    \ vowel_index\n    local vowel_found\n    local vowel_found_index\n    local vowel_found_index2\n\
    \    local vowel_found_index3\n    local vowel_found_index4\n    local vowel_found_index5\n\
    \    local vowel_found_index6\n    local vowel_found_index7\n    local vowel_found_index8\n\
    \    local vowel_found_index9\n    local vowel_found_index10\n    local vowel_found_index11\n\
    \    local vowel_found_index12\n    local vowel_found_index13\n    local vowel_found_index14\n\
    \    local vowel_found_index15\n    local vowel_found_index16\n    local vowel_found_index17\n\
    \    local vowel_found_index18\n    local vowel_found_index19\n    local vowel_found_index20\n\
    \    local vowel_found_index21\n    local vowel_found_index22\n    local vowel_found_index23\n\
    \    local vowel_found_index24\n    local vowel_found_index25\n    local vowel_found_index26\n\
    \    local vowel_found_index27\n    local vowel_found_index28\n    local vowel_found_index29\n\
    \    local vowel_found_index30\n    local vowel_found_index31\n    local vowel_found_index32\n\
    \    local vowel_found_index33\n    local vowel_found_index34\n    local vowel_found_index35\n\
    \    local vowel_found_index36\n    local vowel_found_index37\n    local vowel_found_index38\n\
    \    local vowel_found_index39\n    local vowel_found_index40\n    local vowel_found_index41\n\
    \    local vowel_found_index42\n    local vowel_found_index43\n    local vowel_found_index44\n\
    \    local vowel_found_index45\n    local vowel_found_index46\n    local vowel_found_index47\n\
    \    local vowel_found_index48\n    local vowel_found_index49\n    local vowel_found_index50\n\
    \    local vowel_found_index51\n    local vowel_found_index52\n    local vowel_found_index53\n\
    \    local vowel_found_index54\n    local vowel_found_index55\n    local vowel_found_index56\n\
    \    local vowel_found_index57\n    local vowel_found_index58\n    local vowel_found_index59\n\
    \    local vowel_found\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_found_index=\"\
    \";\n    local vowel_index=\"\";\n    local vowel_start_index=\"\";\n    local\
    \ vowel_end_index=\"\";\n    local vowel_start_char=\"\";\n    local vowel_end_char=\"\
    \";\n    local vowel_start_index=$((${#word} - 1));\n    local vowel_end_index=$((${#word}\
    \ - 1));\n    local vowel_start_char=${word:$vowel_start_index:1}\n    local vowel_end_char=${word:$vowel_end_index:1}\n\
    \    local vowel_found=${word:$vowel_start_index:$((${#word} - 1))}\n    local\
    \ vowel_found_index=$((${#word} - 1))\n    while [[ ${vowel_found_index} -gt 0\
    \ ]]; do\n        local vowel=${word:$vowel_found_index:1}\n        if [[ ${vowel}\
    \ == ${vowel_found} ]]; then\n            vowel_found_index=$((${#word} - 1))\n\
    \            vowel_found=${word:$vowel_found_index:1}\n        else\n        \
    \    local vowel_found_index=$((${#word} - 1))\n            local vowel_found=${word:$vowel_found_index:1}\n\
    \        fi\n    done\n    local vowel_start_index=$((${#word} - 1))\n    local\
    \ vowel_end_index=$((${#word} - 1))\n    local vowel_start_char=${word:$vowel_start_index:1}\n\
    \    local vowel_end_char=${word:$vowel_end_index:1}\n    while [[ ${vowel_start_index}\
    \ -gt 0 ]]; do\n        local vowel=${word:$vowel_start_index:1}\n        if [[\
    \ ${vowel} == ${vowel_start_char} ]]; then\n            vowel_start_index=$((${#word}\
    \ - 1))\n            vowel_start_char=${word:$vowel_start_index:1}\n        else\n\
    \            local vowel_start_index=$((${#word} - 1))\n            local vowel_start_char=${word:$vowel_start_index:1}\n\
    \        fi\n    done\n    while [[ ${vowel_end_index} -gt 0 ]]; do\n        local\
    \ vowel=${word:$vowel_end_index:1}\n        if [[ ${vowel} == ${vowel_end_char}\
    \ ]]; then\n            vowel_end_index=$((${#word} - 1))\n            \n}\n\n\
    candidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n\
    \    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n\
    \    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n\
    \    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n\
    \    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n\
    \    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\"\
    \ ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1gfc8uu7.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmp1gfc8uu7.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_1=$(echo\
    \ $vowels | sed 's/ //g' | wc -w)\n    local vowels_count_2=$(echo $vowels | sed\
    \ 's/ //g' | sed 's/^[^aeiouy]*//g' | wc -w)\n    local vowels_count_3=$(echo\
    \ $vowels | sed 's/ //g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' | wc\
    \ -w)\n    local vowels_count_4=$(echo $vowels | sed 's/ //g' | sed 's/^[^aeiouy]*//g'\
    \ | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' |\
    \ wc -w)\n    local vowels_count_5=$(echo $vowels | sed 's/ //g' | sed 's/^[^aeiouy]*//g'\
    \ | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' |\
    \ sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed\
    \ 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g'\
    \ | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' |\
    \ sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed\
    \ 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g'\
    \ | sed 's/[^aeiouy]*$//g' | sed 's/^[^aeiouy]*//g' | sed 's/[^aeiouy]*$//g' |\
    \ sed 's/^[^aeiouy]*\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_2h0n1m4.sh: line 25: unexpected EOF while looking for matching
    `''''

    /tmp/tmp_2h0n1m4.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count_2=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f1);\n    local vowels_count_3=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f2);\n    local vowels_count_4=$(echo $vowels | wc -l\
    \ | cut -d \" \" -f3);\n    local vowels_count_5=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f4);\n    local vowels_count_6=$(echo $vowels | wc -l | cut -d \"\
    \ \" -f5);\n    local vowels_count_7=$(echo $vowels | wc -l | cut -d \" \" -f6);\n\
    \    local vowels_count_8=$(echo $vowels | wc -l | cut -d \" \" -f7);\n    local\
    \ vowels_count_9=$(echo $vowels | wc -l | cut -d \" \" -f8);\n    local vowels_count_10=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f9);\n    local vowels_count_11=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f10);\n    local vowels_count_12=$(echo $vowels | wc\
    \ -l | cut -d \" \" -f11);\n    local vowels_count_13=$(echo $vowels | wc -l |\
    \ cut -d \" \" -f12);\n    local vowels_count_14=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f13);\n    local vowels_count_15=$(echo $vowels | wc -l | cut -d \"\
    \ \" -f14);\n    local vowels_count_16=$(echo $vowels | wc -l | cut -d \" \" -f15);\n\
    \    local vowels_count_17=$(echo $vowels | wc -l | cut -d \" \" -f16);\n    local\
    \ vowels_count_18=$(echo $vowels | wc -l | cut -d \" \" -f17);\n    local vowels_count_19=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f18);\n    local vowels_count_20=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f19);\n    local vowels_count_21=$(echo $vowels | wc\
    \ -l | cut -d \" \" -f20);\n    local vowels_count_22=$(echo $vowels | wc -l |\
    \ cut -d \" \" -f21);\n    local vowels_count_23=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f22\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp25_jtxs7.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmp25_jtxs7.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowels_count=${#vowels}\n    local vowels_str=\"\"\n\
    \    local vowels_str_len=0\n    local vowels_str_len2=0\n    local vowels_str_len3=0\n\
    \    local vowels_str_len4=0\n    local vowels_str_len5=0\n    local vowels_str_len6=0\n\
    \    local vowels_str_len7=0\n    local vowels_str_len8=0\n    local vowels_str_len9=0\n\
    \    local vowels_str_len10=0\n    local vowels_str_len11=0\n    local vowels_str_len12=0\n\
    \    local vowels_str_len13=0\n    local vowels_str_len14=0\n    local vowels_str_len15=0\n\
    \    local vowels_str_len16=0\n    local vowels_str_len17=0\n    local vowels_str_len18=0\n\
    \    local vowels_str_len19=0\n    local vowels_str_len20=0\n    local vowels_str_len21=0\n\
    \    local vowels_str_len22=0\n    local vowels_str_len23=0\n    local vowels_str_len24=0\n\
    \    local vowels_str_len25=0\n    local vowels_str_len26=0\n    local vowels_str_len27=0\n\
    \    local vowels_str_len28=0\n    local vowels_str_len29=0\n    local vowels_str_len30=0\n\
    \    local vowels_str_len31=0\n    local vowels_str_len32=0\n    local vowels_str_len33=0\n\
    \    local vowels_str_len34=0\n    local vowels_str_len35=0\n    local vowels_str_len36=0\n\
    \    local vowels_str_len37=0\n    local vowels_str_len38=0\n    local vowels_str_len39=0\n\
    \    local vowels_str_len40=0\n    local vowels_str_len41=0\n    local vowels_str_len42=0\n\
    \    local vowels_str_len43=0\n    local vowels_str_len44=0\n    local vowels_str_len45=0\n\
    \    local vowels_str_len46=0\n    local vowels_str_len47=0\n    local vowels_str_len48=0\n\
    \    local vowels_str_len49=0\n    local vowels_str_len50=0\n    local vowels_str_len51=0\n\
    \    local vowels_str_len52=0\n    local vowels_str_len53=0\n    local vowels_str_len54=0\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=$(echo $vowels | wc -w)\n  local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_3=$(echo $vowels | wc -w)\n  local vowels_count_4=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_5=$(echo $vowels | wc -w)\n  local vowels_count_6=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_7=$(echo $vowels | wc -w)\n  local vowels_count_8=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_9=$(echo $vowels | wc -w)\n  local vowels_count_10=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_11=$(echo $vowels | wc -w)\n  local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_13=$(echo $vowels | wc -w)\n  local vowels_count_14=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_15=$(echo $vowels | wc -w)\n  local vowels_count_16=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_17=$(echo $vowels | wc -w)\n  local vowels_count_18=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_19=$(echo $vowels | wc -w)\n  local vowels_count_20=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_21=$(echo $vowels | wc -w)\n  local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_23=$(echo $vowels | wc -w)\n  local vowels_count_24=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_25=$(echo $vowels | wc -w)\n  local vowels_count_26=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_27=$(echo $vowels | wc -w)\n  local vowels_count_28=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_29=$(echo $vowels | wc -w)\n  local vowels_count_30=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_31=$(echo $vowels | wc -w)\n  local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_33=$(echo $vowels | wc -w)\n  local vowels_count_34\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1\n    local vowel_found=\"\"\n    local vowel_position=\"\
    \"\n    local vowel_position_count=0\n    local vowel_position_count1=0\n    local\
    \ vowel_position_count2=0\n    local vowel_position_count3=0\n    local vowel_position_count4=0\n\
    \    local vowel_position_count5=0\n    local vowel_position_count6=0\n    local\
    \ vowel_position_count7=0\n    local vowel_position_count8=0\n    local vowel_position_count9=0\n\
    \    local vowel_position_count10=0\n    local vowel_position_count11=0\n    local\
    \ vowel_position_count12=0\n    local vowel_position_count13=0\n    local vowel_position_count14=0\n\
    \    local vowel_position_count15=0\n    local vowel_position_count16=0\n    local\
    \ vowel_position_count17=0\n    local vowel_position_count18=0\n    local vowel_position_count19=0\n\
    \    local vowel_position_count20=0\n    local vowel_position_count21=0\n    local\
    \ vowel_position_count22=0\n    local vowel_position_count23=0\n    local vowel_position_count24=0\n\
    \    local vowel_position_count25=0\n    local vowel_position_count26=0\n    local\
    \ vowel_position_count27=0\n    local vowel_position_count28=0\n    local vowel_position_count29=0\n\
    \    local vowel_position_count30=0\n    local vowel_position_count31=0\n    local\
    \ vowel_position_count32=0\n    local vowel_position_count33=0\n    local vowel_position_count34=0\n\
    \    local vowel_position_count35=0\n    local vowel_position_count36=0\n    local\
    \ vowel_position_count37=0\n    local vowel_position_count38=0\n    local vowel_position_count39=0\n\
    \    local vowel_position_count40=0\n    local vowel_position_count41=0\n    local\
    \ vowel_position_count42=0\n    local vowel_position_count43=0\n    local vowel_position_count44=0\n\
    \    local vowel_position_count45=0\n    local vowel_position_count46=0\n    local\
    \ vowel_position_count47=0\n    local vowel_position_count48=0\n    local vowel_position_count49=0\n\
    \    local vowel_position_count50=0\n    local vowel_position_count51=0\n    local\
    \ vowel_position_count52=0\n    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=\"$1\"\n    local vowel_found=\"\"\n    local vowel_position=\"\
    \"\n    local vowel_position_count=0\n    local vowel_position_count1=0\n    local\
    \ vowel_position_count2=0\n    local vowel_position_count3=0\n    local vowel_position_count4=0\n\
    \    local vowel_position_count5=0\n    local vowel_position_count6=0\n    local\
    \ vowel_position_count7=0\n    local vowel_position_count8=0\n    local vowel_position_count9=0\n\
    \    local vowel_position_count10=0\n    local vowel_position_count11=0\n    local\
    \ vowel_position_count12=0\n    local vowel_position_count13=0\n    local vowel_position_count14=0\n\
    \    local vowel_position_count15=0\n    local vowel_position_count16=0\n    local\
    \ vowel_position_count17=0\n    local vowel_position_count18=0\n    local vowel_position_count19=0\n\
    \    local vowel_position_count20=0\n    local vowel_position_count21=0\n    local\
    \ vowel_position_count22=0\n    local vowel_position_count23=0\n    local vowel_position_count24=0\n\
    \    local vowel_position_count25=0\n    local vowel_position_count26=0\n    local\
    \ vowel_position_count27=0\n    local vowel_position_count28=0\n    local vowel_position_count29=0\n\
    \    local vowel_position_count30=0\n    local vowel_position_count31=0\n    local\
    \ vowel_position_count32=0\n    local vowel_position_count33=0\n    local vowel_position_count34=0\n\
    \    local vowel_position_count35=0\n    local vowel_position_count36=0\n    local\
    \ vowel_position_count37=0\n    local vowel_position_count38=0\n    local vowel_position_count39=0\n\
    \    local vowel_position_count40=0\n    local vowel_position_count41=0\n    local\
    \ vowel_position_count42=0\n    local vowel_position_count43=0\n    local vowel_position_count44=0\n\
    \    local vowel_position_count45=0\n    local vowel_position_count46=0\n    local\
    \ vowel_position_count47=0\n    local vowel_position_count48=0\n    local vowel_position_count49=0\n\
    \    local vowel_position_count50=0\n    local vowel_position_count51=0\n    local\
    \ vowel_position_count52=0\n    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_temp=0;\n    local vowel_positions_count_temp2=0;\n\
    \    local vowel_positions_count_temp3=0;\n    local vowel_positions_count_temp4=0;\n\
    \    local vowel_positions_count_temp5=0;\n    local vowel_positions_count_temp6=0;\n\
    \    local vowel_positions_count_temp7=0;\n    local vowel_positions_count_temp8=0;\n\
    \    local vowel_positions_count_temp9=0;\n    local vowel_positions_count_temp10=0;\n\
    \    local vowel_positions_count_temp11=0;\n    local vowel_positions_count_temp12=0;\n\
    \    local vowel_positions_count_temp13=0;\n    local vowel_positions_count_temp14=0;\n\
    \    local vowel_positions_count_temp15=0;\n    local vowel_positions_count_temp16=0;\n\
    \    local vowel_positions_count_temp17=0;\n    local vowel_positions_count_temp18=0;\n\
    \    local vowel_positions_count_temp19=0;\n    local vowel_positions_count_temp20=0;\n\
    \    local vowel_positions_count_temp21=0;\n    local vowel_positions_count_temp22=0;\n\
    \    local vowel_positions_count_temp23=0;\n    local vowel_positions_count_temp24=0;\n\
    \    local vowel_positions_count_temp25=0;\n    local vowel_positions_count_temp26=0;\n\
    \    local vowel_positions_count_temp27=0;\n    local vowel_positions_count_temp28=0;\n\
    \    local vowel_positions_count_temp29=0;\n    local vowel_positions_count_temp30=0;\n\
    \    local vowel_positions_count_temp31=0;\n    local vowel_positions_count_temp32=0;\n\
    \    local vowel_positions_count_temp33=0;\n    local vowel_positions_count_temp34=0;\n\
    \    local vowel_positions_count_temp35=0;\n    local vowel_positions_count_temp36=0;\n\
    \    local vowel_positions_count_temp37=0;\n    local vowel_positions_count_temp38=0;\n\
    \    local vowel_positions_count_temp39=0;\n    local vowel_positions_count_temp40=0;\n\
    \    local vowel_positions_count_temp41=0;\n    local vowel_positions_count_temp42=0;\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels[@]}\n    local vowels_string=${vowels[$((${#1}-1))]}\n\
    \    local vowels_string_count=${#vowels_string}\n    local vowels_string_index=0\n\
    \    local vowels_string_index2=0\n    local vowels_string_index3=0\n    local\
    \ vowels_string_index4=0\n    local vowels_string_index5=0\n    local vowels_string_index6=0\n\
    \    local vowels_string_index7=0\n    local vowels_string_index8=0\n    local\
    \ vowels_string_index9=0\n    local vowels_string_index10=0\n    local vowels_string_index11=0\n\
    \    local vowels_string_index12=0\n    local vowels_string_index13=0\n    local\
    \ vowels_string_index14=0\n    local vowels_string_index15=0\n    local vowels_string_index16=0\n\
    \    local vowels_string_index17=0\n    local vowels_string_index18=0\n    local\
    \ vowels_string_index19=0\n    local vowels_string_index20=0\n    local vowels_string_index21=0\n\
    \    local vowels_string_index22=0\n    local vowels_string_index23=0\n    local\
    \ vowels_string_index24=0\n    local vowels_string_index25=0\n    local vowels_string_index26=0\n\
    \    local vowels_string_index27=0\n    local vowels_string_index28=0\n    local\
    \ vowels_string_index29=0\n    local vowels_string_index30=0\n    local vowels_string_index31=0\n\
    \    local vowels_string_index32=0\n    local vowels_string_index33=0\n    local\
    \ vowels_string_index34=0\n    local vowels_string_index35=0\n    local vowels_string_index36=0\n\
    \    local vowels_string_index37=0\n    local vowels_string_index38=0\n    local\
    \ vowels_string_index39=0\n    local vowels_string_index40=0\n    local vowels_string_index41=0\n\
    \    local vowels_string_index42=0\n    local vowels_string_index43=0\n    local\
    \ vowels_string_index44=0\n    local vowels_string_index45=0\n    local vowels_string_index46=0\n\
    \    local vowels_string_index47=0\n    local vowels_string_index48=0\n    local\
    \ vowels_string_index49=0\n    local vowels_string_index50=0\n    local vowels_string_index51=0\n\
    \    local vowels_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local string=\"$1\"\n  local vowels_count=$(echo \"$string\"\
    \ | grep -o -E \"[aeiouy]+\" | wc -l)\n  local vowels_count_from_right=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+$\" | wc -l)\n  local vowels_count_from_left=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+^\" | wc -l)\n  local vowels_count_from_both=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\" | wc -l)\n  local vowels_count_from_both_right=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^$\" | wc -l)\n  local vowels_count_from_both_left=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^^\" | wc -l)\n  local vowels_count_from_both_both=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^\" | wc -l)\n  local vowels_count_from_both_both_right=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^$\" | wc -l)\n  local vowels_count_from_both_both_left=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^^\" | wc -l)\n  local vowels_count_from_both_both_both=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^\\^\" | wc -l)\n  local vowels_count_from_both_both_both_right=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^\\^$\" | wc -l)\n  local vowels_count_from_both_both_both_left=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^\\^^\" | wc -l)\n  local vowels_count_from_both_both_both_both=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^\\^\\^\" | wc -l)\n  local vowels_count_from_both_both_both_both_right=$(echo\
    \ \"$string\" | grep -o -E \"[aeiouy]+\\^\\^\\^\\^$\" | wc -l)\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_array=(${vowels_string//,/\
    \ });\n    local vowels_string_array_count=${#vowels_string_array[@]};\n    local\
    \ vowels_string_array_index=0;\n    local vowels_string_array_index_count=0;\n\
    \    local vowels_string_array_index_value=0;\n    local vowels_string_array_index_value_count=0;\n\
    \    local vowels_string_array_index_value_value=0;\n    local vowels_string_array_index_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_string_array_index_value_value_value_value=0;\n    local vowels_string_array_index_value_value_value_count=0;\n\
    \    local vowels_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowels_count=$(echo $vowels | wc -w)\n    local\
    \ vowels_array=($vowels)\n    local vowels_array_count=${#vowels_array[@]}\n \
    \   local vowels_array_index=$(echo $vowels_count | bc)\n    local vowels_array_index_count=$(echo\
    \ $vowels_count | bc)\n    local vowels_array_index_min=$(echo $vowels_array_index_count\
    \ | bc)\n    local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n\
    \    local vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n   \
    \ local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n    local\
    \ vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n    local vowels_array_index_max=$(echo\
    \ $vowels_array_index_count | bc)\n    local vowels_array_index_min=$(echo $vowels_array_index_count\
    \ | bc)\n    local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n\
    \    local vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n   \
    \ local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n    local\
    \ vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n    local vowels_array_index_max=$(echo\
    \ $vowels_array_index_count | bc)\n    local vowels_array_index_min=$(echo $vowels_array_index_count\
    \ | bc)\n    local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n\
    \    local vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n   \
    \ local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n    local\
    \ vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n    local vowels_array_index_max=$(echo\
    \ $vowels_array_index_count | bc)\n    local vowels_array_index_min=$(echo $vowels_array_index_count\
    \ | bc)\n    local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n\
    \    local vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n   \
    \ local vowels_array_index_max=$(echo $vowels_array_index_count | bc)\n    local\
    \ vowels_array_index_min=$(echo $vowels_array_index_count | bc)\n    local vowels_array_index_max=$(echo\
    \ $vowels_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzs5uig9n.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmpzs5uig9n.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_count=$(echo $vowels | grep -c\
    \ $word);\n  local vowel_found=\"\";\n  local vowel_position=0;\n  local vowel_positions=0;\n\
    \  local vowel_founds=0;\n  local vowel_founds_count=0;\n  local vowel_founds_position=0;\n\
    \  local vowel_founds_positions=0;\n  local vowel_founds_positions_count=0;\n\
    \  local vowel_founds_positions_count_max=0;\n  local vowel_founds_positions_count_min=0;\n\
    \  local vowel_founds_positions_count_max_index=0;\n  local vowel_founds_positions_count_min_index=0;\n\
    \  local vowel_founds_positions_count_max_index_count=0;\n  local vowel_founds_positions_count_min_index_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count=0;\n  local vowel_founds_positions_count_min_index_count_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count_count=0;\n  local\
    \ vowel_founds_positions_count_min_index_count_count_count=0;\n  local vowel_founds_positions_count_max_index_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count=0;\n \
    \ local vowel_founds_positions_count_max_index_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_max_index_count_count_count_count_count_count_count_count=0;\n\
    \  local vowel_founds_positions_count_min_index_count_count_count_count_count_count_count_count=0;\n\
    \  local vowel_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local string=\"$1\"\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_found_index=0\n    local vowel_found_index2=0\n\
    \    local vowel_found_index3=0\n    local vowel_found_index4=0\n    local vowel_found_index5=0\n\
    \    local vowel_found_index6=0\n    local vowel_found_index7=0\n    local vowel_found_index8=0\n\
    \    local vowel_found_index9=0\n    local vowel_found_index10=0\n    local vowel_found_index11=0\n\
    \    local vowel_found_index12=0\n    local vowel_found_index13=0\n    local vowel_found_index14=0\n\
    \    local vowel_found_index15=0\n    local vowel_found_index16=0\n    local vowel_found_index17=0\n\
    \    local vowel_found_index18=0\n    local vowel_found_index19=0\n    local vowel_found_index20=0\n\
    \    local vowel_found_index21=0\n    local vowel_found_index22=0\n    local vowel_found_index23=0\n\
    \    local vowel_found_index24=0\n    local vowel_found_index25=0\n    local vowel_found_index26=0\n\
    \    local vowel_found_index27=0\n    local vowel_found_index28=0\n    local vowel_found_index29=0\n\
    \    local vowel_found_index30=0\n    local vowel_found_index31=0\n    local vowel_found_index32=0\n\
    \    local vowel_found_index33=0\n    local vowel_found_index34=0\n    local vowel_found_index35=0\n\
    \    local vowel_found_index36=0\n    local vowel_found_index37=0\n    local vowel_found_index38=0\n\
    \    local vowel_found_index39=0\n    local vowel_found_index40=0\n    local vowel_found_index41=0\n\
    \    local vowel_found_index42=0\n    local vowel_found_index43=0\n    local vowel_found_index44=0\n\
    \    local vowel_found_index45=0\n    local vowel_found_index46=0\n    local vowel_found_index47=0\n\
    \    local vowel_found_index48=0\n    local vowel_found_index49=0\n    local vowel_found_index50=0\n\
    \    local vowel_found_index51=0\n    local vowel_found_index52=0\n    local vowel_found_index53=0\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local string=\"$1\"\n  local vowel\n  local vowel_count\n  local\
    \ vowel_index\n  local vowel_found\n  local vowel_found_index\n  local vowel_found_index2\n\
    \  local vowel_found_index3\n  local vowel_found_index4\n  local vowel_found_index5\n\
    \  local vowel_found_index6\n  local vowel_found_index7\n  local vowel_found_index8\n\
    \  local vowel_found_index9\n  local vowel_found_index10\n  local vowel_found_index11\n\
    \  local vowel_found_index12\n  local vowel_found_index13\n  local vowel_found_index14\n\
    \  local vowel_found_index15\n  local vowel_found_index16\n  local vowel_found_index17\n\
    \  local vowel_found_index18\n  local vowel_found_index19\n  local vowel_found_index20\n\
    \  local vowel_found_index21\n  local vowel_found_index22\n  local vowel_found_index23\n\
    \  local vowel_found_index24\n  local vowel_found_index25\n  local vowel_found_index26\n\
    \  local vowel_found_index27\n  local vowel_found_index28\n  local vowel_found_index29\n\
    \  local vowel_found_index30\n  local vowel_found_index31\n  local vowel_found_index32\n\
    \  local vowel_found_index33\n  local vowel_found_index34\n  local vowel_found_index35\n\
    \  local vowel_found_index36\n  local vowel_found_index37\n  local vowel_found_index38\n\
    \  local vowel_found_index39\n  local vowel_found_index40\n  local vowel_found_index41\n\
    \  local vowel_found_index42\n  local vowel_found_index43\n  local vowel_found_index44\n\
    \  local vowel_found_index45\n  local vowel_found_index46\n  local vowel_found_index47\n\
    \  local vowel_found_index48\n  local vowel_found_index49\n  local vowel_found_index50\n\
    \  local vowel_found_index51\n  local vowel_found_index52\n  local vowel_found_index53\n\
    \  local vowel_found_index54\n  local vowel_found_index55\n  local vowel_found_index56\n\
    \  local vowel_found_index57\n  local vowel_found_index58\n  local vowel_found_index59\n\
    \  local vowel_found\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=\"\
    $1\"\n    local vowels=\"a e i o u\"\n    local vowels_count=0\n    local vowels_count_max=${#vowels}\n\
    \    local vowels_count_min=${#vowels}\n    local vowels_count_diff=0\n    local\
    \ vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n\
    \    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local\
    \ vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n\
    \    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local\
    \ vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n\
    \    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local\
    \ vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n\
    \    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local\
    \ vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n\
    \    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local\
    \ vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n\
    \    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local\
    \ vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n\
    \    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local\
    \ vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n\
    \    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local\
    \ vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n\
    \    local vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local\
    \ vowels_count_diff_min=0\n    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n\
    \    local vowels_count_diff_max=0\n    local vowels_count_diff_min=0\n    local\
    \ vowels_count_diff_max=0\n\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local word=$1\n    local vowel_found=\"\"\n    local\
    \ vowel_position=\"\"\n    local vowel_position_count=0\n    local vowel_position_index=0\n\
    \    local vowel_position_index2=0\n    local vowel_position_index3=0\n    local\
    \ vowel_position_index4=0\n    local vowel_position_index5=0\n    local vowel_position_index6=0\n\
    \    local vowel_position_index7=0\n    local vowel_position_index8=0\n    local\
    \ vowel_position_index9=0\n    local vowel_position_index10=0\n    local vowel_position_index11=0\n\
    \    local vowel_position_index12=0\n    local vowel_position_index13=0\n    local\
    \ vowel_position_index14=0\n    local vowel_position_index15=0\n    local vowel_position_index16=0\n\
    \    local vowel_position_index17=0\n    local vowel_position_index18=0\n    local\
    \ vowel_position_index19=0\n    local vowel_position_index20=0\n    local vowel_position_index21=0\n\
    \    local vowel_position_index22=0\n    local vowel_position_index23=0\n    local\
    \ vowel_position_index24=0\n    local vowel_position_index25=0\n    local vowel_position_index26=0\n\
    \    local vowel_position_index27=0\n    local vowel_position_index28=0\n    local\
    \ vowel_position_index29=0\n    local vowel_position_index30=0\n    local vowel_position_index31=0\n\
    \    local vowel_position_index32=0\n    local vowel_position_index33=0\n    local\
    \ vowel_position_index34=0\n    local vowel_position_index35=0\n    local vowel_position_index36=0\n\
    \    local vowel_position_index37=0\n    local vowel_position_index38=0\n    local\
    \ vowel_position_index39=0\n    local vowel_position_index40=0\n    local vowel_position_index41=0\n\
    \    local vowel_position_index42=0\n    local vowel_position_index43=0\n    local\
    \ vowel_position_index44=0\n    local vowel_position_index45=0\n    local vowel_position_index46=0\n\
    \    local vowel_position_index47=0\n    local vowel_position_index48=0\n    local\
    \ vowel_position_index49=0\n    local vowel_position_index50=0\n    local vowel_position_index51=0\n\
    \    local vowel_position_index52=0\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels}\n\
    \    local vowels_string_count=${#vowels_string}\n    local vowels_string_index=0\n\
    \    local vowels_string_index_count=${#vowels_string}\n    local vowels_string_index_count2=0\n\
    \    local vowels_string_index_count3=0\n    local vowels_string_index_count4=0\n\
    \    local vowels_string_index_count5=0\n    local vowels_string_index_count6=0\n\
    \    local vowels_string_index_count7=0\n    local vowels_string_index_count8=0\n\
    \    local vowels_string_index_count9=0\n    local vowels_string_index_count10=0\n\
    \    local vowels_string_index_count11=0\n    local vowels_string_index_count12=0\n\
    \    local vowels_string_index_count13=0\n    local vowels_string_index_count14=0\n\
    \    local vowels_string_index_count15=0\n    local vowels_string_index_count16=0\n\
    \    local vowels_string_index_count17=0\n    local vowels_string_index_count18=0\n\
    \    local vowels_string_index_count19=0\n    local vowels_string_index_count20=0\n\
    \    local vowels_string_index_count21=0\n    local vowels_string_index_count22=0\n\
    \    local vowels_string_index_count23=0\n    local vowels_string_index_count24=0\n\
    \    local vowels_string_index_count25=0\n    local vowels_string_index_count26=0\n\
    \    local vowels_string_index_count27=0\n    local vowels_string_index_count28=0\n\
    \    local vowels_string_index_count29=0\n    local vowels_string_index_count30=0\n\
    \    local vowels_string_index_count31=0\n    local vowels_string_index_count32=0\n\
    \    local vowels_string_index_count33=0\n    local vowels_string_index_count34=0\n\
    \    local vowels_string_index_count35=0\n    local vowels_string_index_count36=0\n\
    \    local vowels_string_index_count37=0\n    local vowels_string_index_count38=0\n\
    \    local vowels_string_index_count39=0\n    local vowels_string_index_count40=0\n\
    \    local vowels_string_index_count41=0\n    local vowels_string_index_count42=0\n\
    \    local vowels_string_index_count43=0\n    local vowels_string_index_count44=0\n\
    \    local vowels_string_index_count45=0\n    local vowels_string_index_count46=0\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=$1\n\
    \    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local conson\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_array=($vowels);\n\
    \    local vowels_array_count=${#vowels_array[@]};\n    local vowels_array_element=0;\n\
    \    local vowels_array_element2=0;\n    local vowels_array_element3=0;\n    local\
    \ vowels_array_element4=0;\n    local vowels_array_element5=0;\n    local vowels_array_element6=0;\n\
    \    local vowels_array_element7=0;\n    local vowels_array_element8=0;\n    local\
    \ vowels_array_element9=0;\n    local vowels_array_element10=0;\n    local vowels_array_element11=0;\n\
    \    local vowels_array_element12=0;\n    local vowels_array_element13=0;\n  \
    \  local vowels_array_element14=0;\n    local vowels_array_element15=0;\n    local\
    \ vowels_array_element16=0;\n    local vowels_array_element17=0;\n    local vowels_array_element18=0;\n\
    \    local vowels_array_element19=0;\n    local vowels_array_element20=0;\n  \
    \  local vowels_array_element21=0;\n    local vowels_array_element22=0;\n    local\
    \ vowels_array_element23=0;\n    local vowels_array_element24=0;\n    local vowels_array_element25=0;\n\
    \    local vowels_array_element26=0;\n    local vowels_array_element27=0;\n  \
    \  local vowels_array_element28=0;\n    local vowels_array_element29=0;\n    local\
    \ vowels_array_element30=0;\n    local vowels_array_element31=0;\n    local vowels_array_element32=0;\n\
    \    local vowels_array_element33=0;\n    local vowels_array_element34=0;\n  \
    \  local vowels_array_element35=0;\n    local vowels_array_element36=0;\n    local\
    \ vowels_array_element37=0;\n    local vowels_array_element38=0;\n    local vowels_array_element39=0;\n\
    \    local vowels_array_element40=0;\n    local vowels_array_element41=0;\n  \
    \  local vowels_array_element42=0;\n    local vowels_array_element43=0;\n    local\
    \ vowels_array_element44=0;\n    local vowels_array_element45=0;\n    local vowels_array_element46=0;\n\
    \    local vowels_array_element47=0;\n    local vowels_array_element48=0;\n  \
    \  local vowels_array_element49=0;\n    local vowels_array_element50=0;\n    local\
    \ vowels_array_element51=0;\n    \n}\n\ncandidate() {\n    get_closest_vowel \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n \
    \   [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n\
    \    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local string=\"$1\"\n  local vowel_count=0\n  local vowel_index=0\n\
    \  local vowel_found=\"\"\n  local vowel_found_index=0\n  local vowel_found_index2=0\n\
    \  local vowel_found_index3=0\n  local vowel_found_index4=0\n  local vowel_found_index5=0\n\
    \  local vowel_found_index6=0\n  local vowel_found_index7=0\n  local vowel_found_index8=0\n\
    \  local vowel_found_index9=0\n  local vowel_found_index10=0\n  local vowel_found_index11=0\n\
    \  local vowel_found_index12=0\n  local vowel_found_index13=0\n  local vowel_found_index14=0\n\
    \  local vowel_found_index15=0\n  local vowel_found_index16=0\n  local vowel_found_index17=0\n\
    \  local vowel_found_index18=0\n  local vowel_found_index19=0\n  local vowel_found_index20=0\n\
    \  local vowel_found_index21=0\n  local vowel_found_index22=0\n  local vowel_found_index23=0\n\
    \  local vowel_found_index24=0\n  local vowel_found_index25=0\n  local vowel_found_index26=0\n\
    \  local vowel_found_index27=0\n  local vowel_found_index28=0\n  local vowel_found_index29=0\n\
    \  local vowel_found_index30=0\n  local vowel_found_index31=0\n  local vowel_found_index32=0\n\
    \  local vowel_found_index33=0\n  local vowel_found_index34=0\n  local vowel_found_index35=0\n\
    \  local vowel_found_index36=0\n  local vowel_found_index37=0\n  local vowel_found_index38=0\n\
    \  local vowel_found_index39=0\n  local vowel_found_index40=0\n  local vowel_found_index41=0\n\
    \  local vowel_found_index42=0\n  local vowel_found_index43=0\n  local vowel_found_index44=0\n\
    \  local vowel_found_index45=0\n  local vowel_found_index46=0\n  local vowel_found_index47=0\n\
    \  local vowel_found_index48=0\n  local vowel_found_index49=0\n  local vowel_found_index50=0\n\
    \  local vowel_found_index51=0\n  local vowel_found_index52=0\n  local vowel_found_index53=0\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=${#vowels};\n  local vowels_string=${vowels//,/\
    \ };\n  local vowels_string_count=${#vowels_string};\n  local vowels_string_index=$((${#1}\
    \ - 1));\n  local vowels_string_index=$((${vowels_string_index} - 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n  local vowels_string_index=$((${vowels_string_index} + 1));\n  local\
    \ vowels_string_index=$((${vowels_string_index} + 1));\n  local vowels_string_index=$((\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpye50ngwd.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmpye50ngwd.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local vowels_count=${#vowels[@]}\n  local vowels_string=\"\"\n\
    \  local vowels_index=0\n  local vowels_string_index=0\n  local vowels_string_index2=0\n\
    \  local vowels_string_index3=0\n  local vowels_string_index4=0\n  local vowels_string_index5=0\n\
    \  local vowels_string_index6=0\n  local vowels_string_index7=0\n  local vowels_string_index8=0\n\
    \  local vowels_string_index9=0\n  local vowels_string_index10=0\n  local vowels_string_index11=0\n\
    \  local vowels_string_index12=0\n  local vowels_string_index13=0\n  local vowels_string_index14=0\n\
    \  local vowels_string_index15=0\n  local vowels_string_index16=0\n  local vowels_string_index17=0\n\
    \  local vowels_string_index18=0\n  local vowels_string_index19=0\n  local vowels_string_index20=0\n\
    \  local vowels_string_index21=0\n  local vowels_string_index22=0\n  local vowels_string_index23=0\n\
    \  local vowels_string_index24=0\n  local vowels_string_index25=0\n  local vowels_string_index26=0\n\
    \  local vowels_string_index27=0\n  local vowels_string_index28=0\n  local vowels_string_index29=0\n\
    \  local vowels_string_index30=0\n  local vowels_string_index31=0\n  local vowels_string_index32=0\n\
    \  local vowels_string_index33=0\n  local vowels_string_index34=0\n  local vowels_string_index35=0\n\
    \  local vowels_string_index36=0\n  local vowels_string_index37=0\n  local vowels_string_index38=0\n\
    \  local vowels_string_index39=0\n  local vowels_string_index40=0\n  local vowels_string_index41=0\n\
    \  local vowels_string_index42=0\n  local vowels_string_index43=0\n  local vowels_string_index44=0\n\
    \  local vowels_string_index45=0\n  local vowels_string_index46=0\n  local vowels_string_index47=0\n\
    \  local vowels_string_index48=0\n  local vowels_string_index49=0\n  local vowels_string_index50=0\n\
    \  local vowels_string_index51=0\n  local vowels_string_index52=0\n  local vowels_string_index53=0\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local vowels_count=${#vowels[@]}\n  local vowels_string=${vowels[$((\
    \ ${#1} > ${#vowels[@]} ? ${#1} : ${#vowels[@]} ))]}\n  local vowels_string_count=${#vowels_string}\n\
    \  local vowels_string_length=$(( ${#1} > ${#vowels_string} ? ${#1} : ${#vowels_string}\
    \ ))\n  local vowels_string_length_count=$(( ${#1} > ${#vowels_string_count} ?\
    \ ${#1} : ${#vowels_string_count} ))\n  local vowels_string_length=$(( ${#1} >\
    \ ${#vowels_string} ? ${#1} : ${#vowels_string} ))\n  local vowels_string_length_count=$((\
    \ ${#1} > ${#vowels_string_count} ? ${#1} : ${#vowels_string_count} ))\n  local\
    \ vowels_string_length=$(( ${#1} > ${#vowels_string} ? ${#1} : ${#vowels_string}\
    \ ))\n  local vowels_string_length_count=$(( ${#1} > ${#vowels_string_count} ?\
    \ ${#1} : ${#vowels_string_count} ))\n  local vowels_string_length=$(( ${#1} >\
    \ ${#vowels_string} ? ${#1} : ${#vowels_string} ))\n  local vowels_string_length_count=$((\
    \ ${#1} > ${#vowels_string_count} ? ${#1} : ${#vowels_string_count} ))\n  local\
    \ vowels_string_length=$(( ${#1} > ${#vowels_string} ? ${#1} : ${#vowels_string}\
    \ ))\n  local vowels_string_length_count=$(( ${#1} > ${#vowels_string_count} ?\
    \ ${#1} : ${#vowels_string_count} ))\n  local vowels_string_length=$(( ${#1} >\
    \ ${#vowels_string} ? ${#1} : ${#vowels_string} ))\n  local vowels_string_length_count=$((\
    \ ${#1} > ${#vowels_string_count} ? ${#1} : ${#vowels_string_count} ))\n  local\
    \ vowels_string_length=$(( ${#1} > ${#vowels_string} ? ${#1} : ${#vowels_string}\
    \ ))\n  local vowels_string_length_count=$(( ${#1} > ${#vowels_string_count} \n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo2h0exep.sh: line 36: unexpected EOF while looking for matching
    `)''

    /tmp/tmpo2h0exep.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_position_count=0;\n    local vowel_position_counts=\"\";\n\
    \    local vowel_position_counts_count=0;\n    local vowel_position_counts_count_count=0;\n\
    \    local vowel_position_counts_count_count_count=0;\n    local vowel_position_counts_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count=0;\n    local vowel_position_counts_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local vowel_position_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0;\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_index=$((${#word}-1));\n \
    \   local vowel_found=\"\";\n    local vowel_found_index=0;\n    local vowel_found_index2=0;\n\
    \    local vowel_found_index3=0;\n    local vowel_found_index4=0;\n    local vowel_found_index5=0;\n\
    \    local vowel_found_index6=0;\n    local vowel_found_index7=0;\n    local vowel_found_index8=0;\n\
    \    local vowel_found_index9=0;\n    local vowel_found_index10=0;\n    local\
    \ vowel_found_index11=0;\n    local vowel_found_index12=0;\n    local vowel_found_index13=0;\n\
    \    local vowel_found_index14=0;\n    local vowel_found_index15=0;\n    local\
    \ vowel_found_index16=0;\n    local vowel_found_index17=0;\n    local vowel_found_index18=0;\n\
    \    local vowel_found_index19=0;\n    local vowel_found_index20=0;\n    local\
    \ vowel_found_index21=0;\n    local vowel_found_index22=0;\n    local vowel_found_index23=0;\n\
    \    local vowel_found_index24=0;\n    local vowel_found_index25=0;\n    local\
    \ vowel_found_index26=0;\n    local vowel_found_index27=0;\n    local vowel_found_index28=0;\n\
    \    local vowel_found_index29=0;\n    local vowel_found_index30=0;\n    local\
    \ vowel_found_index31=0;\n    local vowel_found_index32=0;\n    local vowel_found_index33=0;\n\
    \    local vowel_found_index34=0;\n    local vowel_found_index35=0;\n    local\
    \ vowel_found_index36=0;\n    local vowel_found_index37=0;\n    local vowel_found_index38=0;\n\
    \    local vowel_found_index39=0;\n    local vowel_found_index40=0;\n    local\
    \ vowel_found_index41=0;\n    local vowel_found_index42=0;\n    local vowel_found_index43=0;\n\
    \    local vowel_found_index44=0;\n    local vowel_found_index45=0;\n    local\
    \ vowel_found_index46=0;\n    local vowel_found_index47=0;\n    local vowel_found_index48=0;\n\
    \    local vowel_found_index49=0;\n    local vowel_found_index50=0;\n    local\
    \ vowel_found_index51=0;\n    local vowel_found_index52=0;\n    local vowel_\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1\n    local vowel_found=\"\"\n    local vowel_position=\"\
    \"\n    local vowel_position_count=0\n    local vowel_position_index=0\n    local\
    \ vowel_position_index2=0\n    local vowel_position_index3=0\n    local vowel_position_index4=0\n\
    \    local vowel_position_index5=0\n    local vowel_position_index6=0\n    local\
    \ vowel_position_index7=0\n    local vowel_position_index8=0\n    local vowel_position_index9=0\n\
    \    local vowel_position_index10=0\n    local vowel_position_index11=0\n    local\
    \ vowel_position_index12=0\n    local vowel_position_index13=0\n    local vowel_position_index14=0\n\
    \    local vowel_position_index15=0\n    local vowel_position_index16=0\n    local\
    \ vowel_position_index17=0\n    local vowel_position_index18=0\n    local vowel_position_index19=0\n\
    \    local vowel_position_index20=0\n    local vowel_position_index21=0\n    local\
    \ vowel_position_index22=0\n    local vowel_position_index23=0\n    local vowel_position_index24=0\n\
    \    local vowel_position_index25=0\n    local vowel_position_index26=0\n    local\
    \ vowel_position_index27=0\n    local vowel_position_index28=0\n    local vowel_position_index29=0\n\
    \    local vowel_position_index30=0\n    local vowel_position_index31=0\n    local\
    \ vowel_position_index32=0\n    local vowel_position_index33=0\n    local vowel_position_index34=0\n\
    \    local vowel_position_index35=0\n    local vowel_position_index36=0\n    local\
    \ vowel_position_index37=0\n    local vowel_position_index38=0\n    local vowel_position_index39=0\n\
    \    local vowel_position_index40=0\n    local vowel_position_index41=0\n    local\
    \ vowel_position_index42=0\n    local vowel_position_index43=0\n    local vowel_position_index44=0\n\
    \    local vowel_position_index45=0\n    local vowel_position_index46=0\n    local\
    \ vowel_position_index47=0\n    local vowel_position_index48=0\n    local vowel_position_index49=0\n\
    \    local vowel_position_index50=0\n    local vowel_position_index51=0\n    local\
    \ vowel_position_index52=0\n    local vowel_position\n}\n\ncandidate() {\n   \
    \ get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\"\
    ) = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\"\
    ) = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\"\
    ) = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\"\
    ) = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\"\
    ) = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OE UE ae ie oe ue\"\n    local string=\"$1\"\n    local vowel\n\
    \    local vowel_count\n    local vowel_index\n    local vowel_found\n    local\
    \ vowel_found_index\n    local vowel_found_index2\n    local vowel_found_index3\n\
    \    local vowel_found_index4\n    local vowel_found_index5\n    local vowel_found_index6\n\
    \    local vowel_found_index7\n    local vowel_found_index8\n    local vowel_found_index9\n\
    \    local vowel_found_index10\n    local vowel_found_index11\n    local vowel_found_index12\n\
    \    local vowel_found_index13\n    local vowel_found_index14\n    local vowel_found_index15\n\
    \    local vowel_found_index16\n    local vowel_found_index17\n    local vowel_found_index18\n\
    \    local vowel_found_index19\n    local vowel_found_index20\n    local vowel_found_index21\n\
    \    local vowel_found_index22\n    local vowel_found_index23\n    local vowel_found_index24\n\
    \    local vowel_found_index25\n    local vowel_found_index26\n    local vowel_found_index27\n\
    \    local vowel_found_index28\n    local vowel_found_index29\n    local vowel_found_index30\n\
    \    local vowel_found_index31\n    local vowel_found_index32\n    local vowel_found_index33\n\
    \    local vowel_found_index34\n    local vowel_found_index35\n    local vowel_found_index36\n\
    \    local vowel_found_index37\n    local vowel_found_index38\n    local vowel_found_index39\n\
    \    local vowel_found_index40\n    local vowel_found_index41\n    local vowel_found_index42\n\
    \    local vowel_found_index43\n    local vowel_found_index44\n    local vowel_found_index45\n\
    \    local vowel_found_index46\n    local vowel_found_index47\n    local vowel_found_index48\n\
    \    local vowel_found_index49\n    local vowel_found_index50\n    local vowel_found_index51\n\
    \    local vowel_found_index52\n    local vowel_found_index53\n    local vowel_found_index54\n\
    \    local vowel_found_index55\n    local vowel_found_index56\n    local vowel_found_index57\n\
    \    local vowel_found_index\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=$(echo $vowels | wc -w)\n  local vowels_count_1=$(echo\
    \ $vowels | sed -e 's/ //g')\n  local vowels_count_2=$(echo $vowels | sed -e 's/^//g'\
    \ -e 's/$//g')\n  local vowels_count_3=$(echo $vowels | sed -e 's/^//g' -e 's/$//g'\
    \ -e 's/ //g')\n  local vowels_count_4=$(echo $vowels | sed -e 's/^//g' -e 's/$//g'\
    \ -e 's/ //g' -e 's/^//g' -e 's/$//g')\n  local vowels_count_5=$(echo $vowels\
    \ | sed -e 's/^//g' -e 's/$//g' -e 's/ //g' -e 's/^//g' -e 's/$//g' -e 's/ //g')\n\
    \  local vowels_count_6=$(echo $vowels | sed -e 's/^//g' -e 's/$//g' -e 's/ //g'\
    \ -e 's/^//g' -e 's/$//g' -e 's/ //g' -e 's/^//g' -e 's/$//g')\n  local vowels_count_7=$(echo\
    \ $vowels | sed -e 's/^//g' -e 's/$//g' -e 's/ //g' -e 's/^//g' -e 's/$//g' -e\
    \ 's/ //g' -e 's/^//g' -e 's/$//g' -e 's/ //g')\n  local vowels_count_8=$(echo\
    \ $vowels | sed -e 's/^//g' -e 's/$//g' -e 's/ //g' -e 's/^//g' -e 's/$//g' -e\
    \ 's/ //g' -e 's/^//g' -e 's/$//g' -e 's/ //g' -e 's/^//g' -e 's/$//g')\n  local\
    \ vowels_count_9=$(echo $vowels | sed -e 's/^//g' -e 's/$//g' -e 's/ //g' -e 's/^//g'\
    \ -e 's/$//g' -e 's/ //g' -e 's/^//g' -e 's/$//g' -e 's/ //g' -e \n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjpt_1mtz.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmpjpt_1mtz.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u AE II OO UU\"\n  local word=$1\n  local vowel_count=0\n  local vowel_found=\"\
    \"\n  local vowel_position=0\n  local vowel_found_index=0\n  local vowel_position_index=0\n\
    \  local vowel_position_index2=0\n  local vowel_position_index3=0\n  local vowel_position_index4=0\n\
    \  local vowel_position_index5=0\n  local vowel_position_index6=0\n  local vowel_position_index7=0\n\
    \  local vowel_position_index8=0\n  local vowel_position_index9=0\n  local vowel_position_index10=0\n\
    \  local vowel_position_index11=0\n  local vowel_position_index12=0\n  local vowel_position_index13=0\n\
    \  local vowel_position_index14=0\n  local vowel_position_index15=0\n  local vowel_position_index16=0\n\
    \  local vowel_position_index17=0\n  local vowel_position_index18=0\n  local vowel_position_index19=0\n\
    \  local vowel_position_index20=0\n  local vowel_position_index21=0\n  local vowel_position_index22=0\n\
    \  local vowel_position_index23=0\n  local vowel_position_index24=0\n  local vowel_position_index25=0\n\
    \  local vowel_position_index26=0\n  local vowel_position_index27=0\n  local vowel_position_index28=0\n\
    \  local vowel_position_index29=0\n  local vowel_position_index30=0\n  local vowel_position_index31=0\n\
    \  local vowel_position_index32=0\n  local vowel_position_index33=0\n  local vowel_position_index34=0\n\
    \  local vowel_position_index35=0\n  local vowel_position_index36=0\n  local vowel_position_index37=0\n\
    \  local vowel_position_index38=0\n  local vowel_position_index39=0\n  local vowel_position_index40=0\n\
    \  local vowel_position_index41=0\n  local vowel_position_index42=0\n  local vowel_position_index43=0\n\
    \  local vowel_position_index44=0\n  local vowel_position_index45=0\n  local vowel_position_index46=0\n\
    \  local vowel_position_index47=0\n  local vowel_position_index48=0\n  local vowel_position_index49=0\n\
    \  local vowel_position_index50=0\n  local vowel_position_index51=0\n  local \n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_founds=\"\";\n    local\
    \ vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_founds=\"\";\n    local vowel_positions=\"\";\n    local\
    \ vowel_found=\"\";\n    local vowel_position=\"\";\n    local vowel_founds=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_found=\"\"\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${vowels_count:-0};\n\
    \    local vowels_count=${vowels_count:-0};\n    local vowels_count=${\n}\n\n\
    candidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n\
    \    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n\
    \    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n\
    \    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n\
    \    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n\
    \    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\"\
    \ ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu7n0a968.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels}\n\
    \    local vowels_string_count=${#vowels_string}\n    local vowels_string_index=0\n\
    \    local vowels_string_index2=0\n    local vowels_string_index3=0\n    local\
    \ vowels_string_index4=0\n    local vowels_string_index5=0\n    local vowels_string_index6=0\n\
    \    local vowels_string_index7=0\n    local vowels_string_index8=0\n    local\
    \ vowels_string_index9=0\n    local vowels_string_index10=0\n    local vowels_string_index11=0\n\
    \    local vowels_string_index12=0\n    local vowels_string_index13=0\n    local\
    \ vowels_string_index14=0\n    local vowels_string_index15=0\n    local vowels_string_index16=0\n\
    \    local vowels_string_index17=0\n    local vowels_string_index18=0\n    local\
    \ vowels_string_index19=0\n    local vowels_string_index20=0\n    local vowels_string_index21=0\n\
    \    local vowels_string_index22=0\n    local vowels_string_index23=0\n    local\
    \ vowels_string_index24=0\n    local vowels_string_index25=0\n    local vowels_string_index26=0\n\
    \    local vowels_string_index27=0\n    local vowels_string_index28=0\n    local\
    \ vowels_string_index29=0\n    local vowels_string_index30=0\n    local vowels_string_index31=0\n\
    \    local vowels_string_index32=0\n    local vowels_string_index33=0\n    local\
    \ vowels_string_index34=0\n    local vowels_string_index35=0\n    local vowels_string_index36=0\n\
    \    local vowels_string_index37=0\n    local vowels_string_index38=0\n    local\
    \ vowels_string_index39=0\n    local vowels_string_index40=0\n    local vowels_string_index41=0\n\
    \    local vowels_string_index42=0\n    local vowels_string_index43=0\n    local\
    \ vowels_string_index44=0\n    local vowels_string_index45=0\n    local vowels_string_index46=0\n\
    \    local vowels_string_index47=0\n    local vowels_string_index48=0\n    local\
    \ vowels_string_index49=0\n    local vowels_string_index50=0\n    local vowels_string_index51=0\n\
    \    local vowels_string_index52=0\n    local vowels_\n}\n\ncandidate() {\n  \
    \  get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=$1\n\
    \    local vowels=\"a e i o u y\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local consonant_position=0\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_position=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local con\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels | wc -l)\n    local vowels_count=$(echo $vowels | wc -c)\n    local\
    \ vowels_count=$(echo $vowels | wc -s)\n    local vowels_count=$(echo $vowels\
    \ | wc -q)\n    local vowels_count=$(echo $vowels | wc -u)\n    local vowels_count=$(echo\
    \ $vowels | wc -x)\n    local vowels_count=$(echo $vowels | wc -y)\n    local\
    \ vowels_count=$(echo $vowels | wc -z)\n    local vowels_count=$(echo $vowels\
    \ | wc -A)\n    local vowels_count=$(echo $vowels | wc -E)\n    local vowels_count=$(echo\
    \ $vowels | wc -I)\n    local vowels_count=$(echo $vowels | wc -O)\n    local\
    \ vowels_count=$(echo $vowels | wc -U)\n    local vowels_count=$(echo $vowels\
    \ | wc -Y)\n    local vowels_count=$(echo $vowels | wc -Z)\n    local vowels_count=$(echo\
    \ $vowels | wc -0)\n    local vowels_count=$(echo $vowels | wc -4)\n    local\
    \ vowels_count=$(echo $vowels | wc -6)\n    local vowels_count=$(echo $vowels\
    \ | wc -8)\n    local vowels_count=$(echo $vowels | wc -10)\n    local vowels_count=$(echo\
    \ $vowels | wc -12)\n    local vowels_count=$(echo $vowels | wc -14)\n    local\
    \ vowels_count=$(echo $vowels | wc -16)\n    local vowels_count=$(echo $vowels\
    \ | wc -18)\n    local vowels_count=$(echo $vowels | wc -20)\n    local vowels_count=$(echo\
    \ $vowels | wc -22)\n    local vowels_count=$(echo $vowels | wc -24)\n    local\
    \ vowels_count=$(echo $vowels | wc -26)\n    local vowels_count=$(echo $vowels\
    \ | wc -28)\n    local vowels_count=$(echo $vowels | wc -30)\n    local vowels_count=$(echo\
    \ $vowels | wc -32)\n    local vowels_count=$(echo $vowels | wc -34)\n    local\
    \ vowels_count=$(echo $vowels | wc -36)\n    local vowels_count=$(echo $vowels\
    \ | wc -38)\n    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'wc: invalid option -- ''s''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''q''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''u''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''x''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''y''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''z''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''A''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''E''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''I''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''O''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''U''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''Y''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''Z''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''0''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''4''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''6''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''8''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''1''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''1''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''1''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''1''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''1''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''2''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''2''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''2''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''2''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''2''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''3''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''3''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''3''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''3''

    Try ''wc --help'' for more information.

    wc: invalid option -- ''3''

    Try ''wc --help'' for more information.

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=${#vowels};\n  local vowels_string=${vowels//,/\
    \ };\n  local vowels_string_count=${#vowels_string};\n  local vowels_string_index=$((${#1}\
    \ - 1));\n  local vowels_string_index_count=${#vowels_string_index};\n  local\
    \ vowels_string_index_string=${vowels_string_index//,/ };\n  local vowels_string_index_string_count=${#vowels_string_index_string};\n\
    \  local vowels_string_index_string_index=$((${#vowels_string_index_string} -\
    \ 1));\n  local vowels_string_index_string_index_count=${#vowels_string_index_string_index};\n\
    \  local vowels_string_index_string_index_string=${vowels_string_index_string_index//,/\
    \ };\n  local vowels_string_index_string_index_string_count=${#vowels_string_index_string_index_string};\n\
    \  local vowels_string_index_string_index_string_index=$((${#vowels_string_index_string_index_string}\
    \ - 1));\n  local vowels_string_index_string_index_string_index_count=${#vowels_string_index_string_index_string_index};\n\
    \  local vowels_string_index_string_index_string_index_string=${vowels_string_index_string_index_string_index_string//,/\
    \ };\n  local vowels_string_index_string_index_string_index_string_count=${#vowels_string_index_string_index_string_index_string};\n\
    \  local vowels_string_index_string_index_string_index_string_index=$((${#vowels_string_index_string_index_string_index_string}\
    \ - 1));\n  local vowels_string_index_string_index_string_index_string_index_count=${#vowels_string_index_string_index_string_index_string_index};\n\
    \  local vowels_string_index_string_index_string_index_string_index_string=${vowels_string_index_string_index_string_index_string_index_string//,/\
    \ };\n  local vowels_string_index_string_index_string_index_string_index_string_count=${#vowels_string_index_string_index_string_index_string_index_string};\n\
    \  local vowels_string_index_string_index_string_index_string_index_string_index=$((${#vowels_string_index_string_index_string_index_string_index_string}\
    \ - 1));\n  local vowels_string_index_string_index_string_index_string_index_string_index_count=${#vowels_string_index_string_index_string_index_string_index_string_index};\n\
    \  local vowels_string_index_string_index_string_index_string_index_string_index_string=${vowels_string_index_string_index_string_index_string_index_string_index_string//,/\
    \ };\n  local vowels_string_index_string_index_string_index_\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_index=$((${#1}\
    \ - 1));\n    local vowels_string_index=$((${vowels_string_index} - 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jr3ophc.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5jr3ophc.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=0;\n\
    \    local consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ consonant_position=0;\n    local consonant_found=\"\";\n    local consonant_position=0;\n\
    \    local consonant_found=\"\";\n    local consonant_position=0;\n    local consonant_found=\"\
    \";\n    local consonant_position=0;\n    local consonant_found=\"\";\n    local\
    \ con\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowel_count=0\n    local vowel_found=\"\"\n\
    \    local vowel_position=0\n    local vowel_position_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n    local vowel_position_string_count=0\n    local vowel_position_string=\"\
    \"\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_index=\"\
    \";\n    local vowel_start_index=\"\";\n    local vowel_end_index=\"\";\n    local\
    \ vowel_start_index=$(echo $word | awk '{print index($1,$2)}')\n    local vowel_end_index=$(echo\
    \ $word | awk '{print index($1,$3)}')\n    local vowel_start_index=$(echo $word\
    \ | awk '{print index($1,$4)}')\n    local vowel_end_index=$(echo $word | awk\
    \ '{print index($1,$5)}')\n    local vowel_start_index=$(echo $word | awk '{print\
    \ index($1,$6)}')\n    local vowel_end_index=$(echo $word | awk '{print index($1,$7)}')\n\
    \    local vowel_start_index=$(echo $word | awk '{print index($1,$8)}')\n    local\
    \ vowel_end_index=$(echo $word | awk '{print index($1,$9)}')\n    local vowel_start_index=$(echo\
    \ $word | awk '{print index($1,$10)}')\n    local vowel_end_index=$(echo $word\
    \ | awk '{print index($1,$11)}')\n    local vowel_start_index=$(echo $word | awk\
    \ '{print index($1,$12)}')\n    local vowel_end_index=$(echo $word | awk '{print\
    \ index($1,$13)}')\n    local vowel_start_index=$(echo $word | awk '{print index($1,$14)}')\n\
    \    local vowel_end_index=$(echo $word | awk '{print index($1,$15)}')\n    local\
    \ vowel_start_index=$(echo $word | awk '{print index($1,$16)}')\n    local vowel_end_index=$(echo\
    \ $word | awk '{print index($1,$17)}')\n    local vowel_start_index=$(echo $word\
    \ | awk '{print index($1,$18)}')\n    local vowel_end_index=$(echo $word | awk\
    \ '{print index($1,$19)}')\n    local vowel_start_index=$(echo $word | awk '{print\
    \ index($1,$20)}')\n    local vowel_end_index=$(echo $word | awk '{print index($1,$21)}')\n\
    \    local vowel_start_index=$(echo $word | awk '{print index($1,$22)}')\n   \
    \ local vowel_end_index=$(echo $word | awk '{print index($1,$\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr7x8dewr.sh: line 46: unexpected EOF while looking for matching
    `''''

    /tmp/tmpr7x8dewr.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo \"$vowels\" | wc -l);\n    local\
    \ vowels_count_1=$(echo \"$1\" | wc -l);\n    local vowels_count_2=$(echo \"$1\"\
    \ | sed 's/^[^aeiouy]*//' | wc -l);\n    local vowels_count_3=$(echo \"$1\" |\
    \ sed 's/[^aeiouy]*$//' | wc -l);\n    local vowels_count_4=$(echo \"$1\" | sed\
    \ 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | wc -l);\n    local vowels_count_5=$(echo\
    \ \"$1\" | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//'\
    \ | sed 's/[^aeiouy]*$//' | wc -l);\n    local vowels_count_6=$(echo \"$1\" |\
    \ sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed\
    \ 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//'\
    \ | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed\
    \ 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//'\
    \ | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed\
    \ 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//'\
    \ | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed\
    \ 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*$//' | sed 's/^[^aeiouy]*//' | sed 's/[^aeiouy]*\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi89va6__.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpi89va6__.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_count=$(echo $vowels | wc -l);\n\
    \  local vowel_index=$((${#word} - 1));\n  local vowel_found=\"\";\n  local vowel_position=0;\n\
    \  local vowel_found_index=0;\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_found_index=0;\n  local vowel_found=\"\";\n  local vowel_found_indexes=\"\
    \";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n  local vowel_found=\"\
    \";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n\
    \  local vowel_found=\"\";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_found_index=0;\n  local vowel_found=\"\";\n  local vowel_found_indexes=\"\
    \";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n  local vowel_found=\"\
    \";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n\
    \  local vowel_found=\"\";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_found_index=0;\n  local vowel_found=\"\";\n  local vowel_found_indexes=\"\
    \";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n  local vowel_found=\"\
    \";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n\
    \  local vowel_found=\"\";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_found_index=0;\n  local vowel_found=\"\";\n  local vowel_found_indexes=\"\
    \";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n  local vowel_found=\"\
    \";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\";\n  local vowel_found_index=0;\n\
    \  local vowel_found=\"\";\n  local vowel_found_indexes=\"\";\n  local vowel_found=\"\
    \";\n  local vowel_found_index=0;\n  local vowel_found=\"\";\n  local vowel_\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=$1\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_found_index=0\n    local vowel_found_index2=0\n\
    \    local vowel_found_index3=0\n    local vowel_found_index4=0\n    local vowel_found_index5=0\n\
    \    local vowel_found_index6=0\n    local vowel_found_index7=0\n    local vowel_found_index8=0\n\
    \    local vowel_found_index9=0\n    local vowel_found_index10=0\n    local vowel_found_index11=0\n\
    \    local vowel_found_index12=0\n    local vowel_found_index13=0\n    local vowel_found_index14=0\n\
    \    local vowel_found_index15=0\n    local vowel_found_index16=0\n    local vowel_found_index17=0\n\
    \    local vowel_found_index18=0\n    local vowel_found_index19=0\n    local vowel_found_index20=0\n\
    \    local vowel_found_index21=0\n    local vowel_found_index22=0\n    local vowel_found_index23=0\n\
    \    local vowel_found_index24=0\n    local vowel_found_index25=0\n    local vowel_found_index26=0\n\
    \    local vowel_found_index27=0\n    local vowel_found_index28=0\n    local vowel_found_index29=0\n\
    \    local vowel_found_index30=0\n    local vowel_found_index31=0\n    local vowel_found_index32=0\n\
    \    local vowel_found_index33=0\n    local vowel_found_index34=0\n    local vowel_found_index35=0\n\
    \    local vowel_found_index36=0\n    local vowel_found_index37=0\n    local vowel_found_index38=0\n\
    \    local vowel_found_index39=0\n    local vowel_found_index40=0\n    local vowel_found_index41=0\n\
    \    local vowel_found_index42=0\n    local vowel_found_index43=0\n    local vowel_found_index44=0\n\
    \    local vowel_found_index45=0\n    local vowel_found_index46=0\n    local vowel_found_index47=0\n\
    \    local vowel_found_index48=0\n    local vowel_found_index49=0\n    local vowel_found_index50=0\n\
    \    local vowel_found_index51=0\n    local vowel_found_index52=0\n    local vowel_found_index53=0\n\
    \    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_string=${vowels//,/\
    \ };\n    local vowels_string_count=${#vowels_string};\n    local vowels_string_index=$((${#1}\
    \ - 1));\n    local vowels_string_index=$((${vowels_string_index} - 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((${vowels_string_index}\
    \ + 1));\n    local vowels_string_index=$((${vowels_string_index} + 1));\n   \
    \ local vowels_string_index=$((${vowels_string_index} + 1));\n    local vowels_string_index=$((\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jr3ophc.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5jr3ophc.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u AE II OE UE ae ie oe ue\"\n  local word=$1\n  local vowel_found=\"\"\
    \n  local vowel_position=\"\"\n  local vowel_position_count=0\n  local vowel_position_count2=0\n\
    \  local vowel_position_count3=0\n  local vowel_position_count4=0\n  local vowel_position_count5=0\n\
    \  local vowel_position_count6=0\n  local vowel_position_count7=0\n  local vowel_position_count8=0\n\
    \  local vowel_position_count9=0\n  local vowel_position_count10=0\n  local vowel_position_count11=0\n\
    \  local vowel_position_count12=0\n  local vowel_position_count13=0\n  local vowel_position_count14=0\n\
    \  local vowel_position_count15=0\n  local vowel_position_count16=0\n  local vowel_position_count17=0\n\
    \  local vowel_position_count18=0\n  local vowel_position_count19=0\n  local vowel_position_count20=0\n\
    \  local vowel_position_count21=0\n  local vowel_position_count22=0\n  local vowel_position_count23=0\n\
    \  local vowel_position_count24=0\n  local vowel_position_count25=0\n  local vowel_position_count26=0\n\
    \  local vowel_position_count27=0\n  local vowel_position_count28=0\n  local vowel_position_count29=0\n\
    \  local vowel_position_count30=0\n  local vowel_position_count31=0\n  local vowel_position_count32=0\n\
    \  local vowel_position_count33=0\n  local vowel_position_count34=0\n  local vowel_position_count35=0\n\
    \  local vowel_position_count36=0\n  local vowel_position_count37=0\n  local vowel_position_count38=0\n\
    \  local vowel_position_count39=0\n  local vowel_position_count40=0\n  local vowel_position_count41=0\n\
    \  local vowel_position_count42=0\n  local vowel_position_count43=0\n  local vowel_position_count44=0\n\
    \  local vowel_position_count45=0\n  local vowel_position_count46=0\n  local vowel_position_count47=0\n\
    \  local vowel_position_count48=0\n  local vowel_position_count49=0\n  local vowel_position_count50=0\n\
    \  local vowel_position_count51=0\n  local vowel_position_count52=0\n\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count_2=$(echo\
    \ $vowels | wc -l | awk '{print $1}');\n    local vowels_count_3=$(echo $vowels\
    \ | wc -l | awk '{print $2}');\n    local vowels_count_4=$(echo $vowels | wc -l\
    \ | awk '{print $3}');\n    local vowels_count_5=$(echo $vowels | wc -l | awk\
    \ '{print $4}');\n    local vowels_count_6=$(echo $vowels | wc -l | awk '{print\
    \ $5}');\n    local vowels_count_7=$(echo $vowels | wc -l | awk '{print $6}');\n\
    \    local vowels_count_8=$(echo $vowels | wc -l | awk '{print $7}');\n    local\
    \ vowels_count_9=$(echo $vowels | wc -l | awk '{print $8}');\n    local vowels_count_10=$(echo\
    \ $vowels | wc -l | awk '{print $9}');\n    local vowels_count_11=$(echo $vowels\
    \ | wc -l | awk '{print $10}');\n    local vowels_count_12=$(echo $vowels | wc\
    \ -l | awk '{print $11}');\n    local vowels_count_13=$(echo $vowels | wc -l |\
    \ awk '{print $12}');\n    local vowels_count_14=$(echo $vowels | wc -l | awk\
    \ '{print $13}');\n    local vowels_count_15=$(echo $vowels | wc -l | awk '{print\
    \ $14}');\n    local vowels_count_16=$(echo $vowels | wc -l | awk '{print $15}');\n\
    \    local vowels_count_17=$(echo $vowels | wc -l | awk '{print $16}');\n    local\
    \ vowels_count_18=$(echo $vowels | wc -l | awk '{print $17}');\n    local vowels_count_19=$(echo\
    \ $vowels | wc -l | awk '{print $18}');\n    local vowels_count_20=$(echo $vowels\
    \ | wc -l | awk '{print $19}');\n    local vowels_count_21=$(echo $vowels | wc\
    \ -l | awk '{print $20}');\n    local vowels_count_22=$(echo $vowels | wc -l |\
    \ awk '{print $21}');\n    local vowels_count_23=$(\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpubx7xzv_.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmpubx7xzv_.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_found\n    local\
    \ vowel_found_index\n    local vowel_index\n    local vowel_length\n    local\
    \ vowel_length_index\n    local vowel_length_count\n    local vowel_length_count2\n\
    \    local vowel_length_count3\n    local vowel_length_count4\n    local vowel_length_count5\n\
    \    local vowel_length_count6\n    local vowel_length_count7\n    local vowel_length_count8\n\
    \    local vowel_length_count9\n    local vowel_length_count10\n    local vowel_length_count11\n\
    \    local vowel_length_count12\n    local vowel_length_count13\n    local vowel_length_count14\n\
    \    local vowel_length_count15\n    local vowel_length_count16\n    local vowel_length_count17\n\
    \    local vowel_length_count18\n    local vowel_length_count19\n    local vowel_length_count20\n\
    \    local vowel_length_count21\n    local vowel_length_count22\n    local vowel_length_count23\n\
    \    local vowel_length_count24\n    local vowel_length_count25\n    local vowel_length_count26\n\
    \    local vowel_length_count27\n    local vowel_length_count28\n    local vowel_length_count29\n\
    \    local vowel_length_count30\n    local vowel_length_count31\n    local vowel_length_count32\n\
    \    local vowel_length_count33\n    local vowel_length_count34\n    local vowel_length_count35\n\
    \    local vowel_length_count36\n    local vowel_length_count37\n    local vowel_length_count38\n\
    \    local vowel_length_count39\n    local vowel_length_count40\n    local vowel_length_count41\n\
    \    local vowel_length_count42\n    local vowel_length_count43\n    local vowel_length_count44\n\
    \    local vowel_length_count45\n    local vowel_length_count46\n    local vowel_length_count47\n\
    \    local vowel_length_count48\n    local vowel_length_count49\n    local vowel_length_count50\n\
    \    local vowel_length_count51\n    local vowel_length_count52\n    local vowel_length_count53\n\
    \    local vowel_length_count54\n    local vowel_length_count55\n    local vowel_length_count56\n\
    \    local vowel_length_count57\n    local vowel_length_count\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local str=\"$1\"\n    local vowel\n    local vowel_pos\n  \
    \  local vowel_pos2\n    local vowel_pos3\n    local vowel_pos4\n    local vowel_pos5\n\
    \    local vowel_pos6\n    local vowel_pos7\n    local vowel_pos8\n    local vowel_pos9\n\
    \    local vowel_pos10\n    local vowel_pos11\n    local vowel_pos12\n    local\
    \ vowel_pos13\n    local vowel_pos14\n    local vowel_pos15\n    local vowel_pos16\n\
    \    local vowel_pos17\n    local vowel_pos18\n    local vowel_pos19\n    local\
    \ vowel_pos20\n    local vowel_pos21\n    local vowel_pos22\n    local vowel_pos23\n\
    \    local vowel_pos24\n    local vowel_pos25\n    local vowel_pos26\n    local\
    \ vowel_pos27\n    local vowel_pos28\n    local vowel_pos29\n    local vowel_pos30\n\
    \    local vowel_pos31\n    local vowel_pos32\n    local vowel_pos33\n    local\
    \ vowel_pos34\n    local vowel_pos35\n    local vowel_pos36\n    local vowel_pos37\n\
    \    local vowel_pos38\n    local vowel_pos39\n    local vowel_pos40\n    local\
    \ vowel_pos41\n    local vowel_pos42\n    local vowel_pos43\n    local vowel_pos44\n\
    \    local vowel_pos45\n    local vowel_pos46\n    local vowel_pos47\n    local\
    \ vowel_pos48\n    local vowel_pos49\n    local vowel_pos50\n    local vowel_pos51\n\
    \    local vowel_pos52\n    local vowel_pos53\n    local vowel_pos54\n    local\
    \ vowel_pos55\n    local vowel_pos56\n    local vowel_pos57\n    local vowel_pos58\n\
    \    local vowel_pos59\n    local vowel_pos60\n    local vowel_pos61\n    local\
    \ vowel_pos62\n    local vowel_pos63\n    local vowel_pos64\n    local vowel_pos65\n\
    \    local vowel_pos66\n    local vowel_pos67\n    local vowel_pos68\n    local\
    \ vowel_pos69\n    local vowel_pos70\n    local \n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count=$(echo\
    \ $vowels_count | bc)\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print $1}')\n   \
    \ local vowels_count=$(echo $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo\
    \ $vowels_count | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count\
    \ | awk '{print $1}')\n    local vowels_count=$(echo $vowels_count | awk '{print\
    \ $1}')\n    local vowels_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowel_count=0\n    local vowel_position=0\n\
    \    local vowel_found=\"\"\n    local word=$1\n    local word_length=${#word}\n\
    \    local consonant_position=0\n    local consonant_found=\"\"\n    local consonant_count=0\n\
    \    local consonant_found=\"\"\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_found=\"\"\n    local consonant_count=0\n    local consonant_found=\"\
    \"\n    local consonant_position=0\n    local consonant_found=\"\"\n    local\
    \ consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local con\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local string=$1\n\
    \  local vowels=\"a e i o u y\"\n  local vowel_count=0\n  local vowel_index=0\n\
    \  local vowel_found=\"\"\n  local vowel_found_index=0\n  local vowel_found_index2=0\n\
    \  local vowel_found_index3=0\n  local vowel_found_index4=0\n  local vowel_found_index5=0\n\
    \  local vowel_found_index6=0\n  local vowel_found_index7=0\n  local vowel_found_index8=0\n\
    \  local vowel_found_index9=0\n  local vowel_found_index10=0\n  local vowel_found_index11=0\n\
    \  local vowel_found_index12=0\n  local vowel_found_index13=0\n  local vowel_found_index14=0\n\
    \  local vowel_found_index15=0\n  local vowel_found_index16=0\n  local vowel_found_index17=0\n\
    \  local vowel_found_index18=0\n  local vowel_found_index19=0\n  local vowel_found_index20=0\n\
    \  local vowel_found_index21=0\n  local vowel_found_index22=0\n  local vowel_found_index23=0\n\
    \  local vowel_found_index24=0\n  local vowel_found_index25=0\n  local vowel_found_index26=0\n\
    \  local vowel_found_index27=0\n  local vowel_found_index28=0\n  local vowel_found_index29=0\n\
    \  local vowel_found_index30=0\n  local vowel_found_index31=0\n  local vowel_found_index32=0\n\
    \  local vowel_found_index33=0\n  local vowel_found_index34=0\n  local vowel_found_index35=0\n\
    \  local vowel_found_index36=0\n  local vowel_found_index37=0\n  local vowel_found_index38=0\n\
    \  local vowel_found_index39=0\n  local vowel_found_index40=0\n  local vowel_found_index41=0\n\
    \  local vowel_found_index42=0\n  local vowel_found_index43=0\n  local vowel_found_index44=0\n\
    \  local vowel_found_index45=0\n  local vowel_found_index46=0\n  local vowel_found_index47=0\n\
    \  local vowel_found_index48=0\n  local vowel_found_index49=0\n  local vowel_found_index50=0\n\
    \  local vowel_found_index51=0\n  local vowel_found_index52=0\n  local vowel_found_index53=0\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local word=$1;\n  local vowel_index=$((${#word} - 1));\n  local\
    \ vowel_found=false;\n  local vowel_found_index=0;\n  local vowel_found_indexes=\"\
    \";\n  local vowel_found_indexes_count=0;\n  local vowel_found_indexes_counts=0;\n\
    \  local vowel_found_indexes_counts_count=0;\n  local vowel_found_indexes_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_count=0;\n  local vowel_found_indexes_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_count=0;\n  local vowel_found_indexes_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_count=0;\n  local vowel_found_indexes_counts_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_count=0;\n  local\
    \ vowel_found_indexes_counts_counts_counts_counts_counts_counts=0;\n  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_count=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_count=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts_count=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts_count=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts_count=0;\n\
    \  local vowel_found_indexes_counts_counts_counts_counts_counts_counts_counts_counts_counts_counts_counts=0;\n\
    \  local vowel_found_indexes_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[\
    \ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n \
    \   [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_found=\"\"\n    local vowel_index=0\n\
    \    local vowel_left=0\n    local vowel_right=0\n    local vowel_length=0\n \
    \   local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n    local vowel_found=\"\"\n    local vowel_found=\"\"\n    local vowel_found=\"\
    \"\n\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_array=($vowels);\n\
    \    local vowels_array_count=${#vowels_array[@]};\n    local vowels_array_index=0;\n\
    \    local vowels_array_element=${vowels_array[$vowels_array_index]};\n    local\
    \ vowels_array_elements_count=${#vowels_array_element};\n    local vowels_array_elements_index=0;\n\
    \    local vowels_array_elements_element=${vowels_array_element[$vowels_array_elements_index]};\n\
    \    local vowels_array_elements_elements_count=${#vowels_array_elements_element};\n\
    \    local vowels_array_elements_elements_index=0;\n    local vowels_array_elements_elements_element=${vowels_array_elements_element[$vowels_array_elements_elements_index]};\n\
    \    local vowels_array_elements_elements_elements_count=${#vowels_array_elements_elements_element};\n\
    \    local vowels_array_elements_elements_elements_index=0;\n    local vowels_array_elements_elements_elements_element=${vowels_array_elements_elements_element[$vowels_array_elements_elements_elements_index]};\n\
    \    local vowels_array_elements_elements_elements_elements_count=${#vowels_array_elements_elements_elements_element};\n\
    \    local vowels_array_elements_elements_elements_elements_index=0;\n    local\
    \ vowels_array_elements_elements_elements_elements_element=${vowels_array_elements_elements_elements_element[$vowels_array_elements_elements_elements_elements_index]};\n\
    \    local vowels_array_elements_elements_elements_elements_elements_count=${#vowels_array_elements_elements_elements_elements_element};\n\
    \    local vowels_array_elements_elements_elements_elements_elements_index=0;\n\
    \    local vowels_array_elements_elements_elements_elements_elements_element=${vowels_array_elements_elements_elements_elements_element[$vowels_array_elements_elements_elements_elements_elements_index]};\n\
    \    local vowels_array_elements_elements_elements_elements_elements_elements_count=${#vowels_array_elements_elements_elements_elements_elements_element};\n\
    \    local vowels_array_elements_elements_elements_elements_elements_elements_index=0;\n\
    \    local vowels_array_elements_elements_elements_elements_elements_elements_element=${vowels_array_elements_elements_elements_element\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl2mixyys.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels}\n\
    \    local vowels_string_length=${#vowels_string}\n    local vowels_string_index=0\n\
    \    local vowels_string_last_index=${vowels_string_length}\n    local vowels_string_last_char=${vowels_string[${vowels_string_last_index}]}\n\
    \    local vowels_string_first_index=${vowels_string_length}\n    local vowels_string_first_char=${vowels_string[${vowels_string_first_index}]}\n\
    \    local vowels_string_middle_index=$((vowels_string_last_index - vowels_string_first_index))\n\
    \    local vowels_string_middle_char=${vowels_string[${vowels_string_middle_index}]}\n\
    \    local vowels_string_first_vowel_index=$((vowels_string_first_index - 1))\n\
    \    local vowels_string_first_vowel_char=${vowels_string[${vowels_string_first_vowel_index}]}\n\
    \    local vowels_string_last_vowel_index=$((vowels_string_last_index - 1))\n\
    \    local vowels_string_last_vowel_char=${vowels_string[${vowels_string_last_vowel_index}]}\n\
    \    local vowels_string_first_vowel_last_index=$((vowels_string_first_vowel_index\
    \ - 1))\n    local vowels_string_first_vowel_last_char=${vowels_string[${vowels_string_first_vowel_last_index}]}\n\
    \    local vowels_string_last_vowel_first_index=$((vowels_string_last_vowel_index\
    \ - 1))\n    local vowels_string_last_vowel_first_char=${vowels_string[${vowels_string_last_vowel_first_index}]}\n\
    \    local vowels_string_first_vowel_middle_last_index=$((vowels_string_first_vowel_last_index\
    \ - 1))\n    local vowels_string_first_vowel_middle_last_char=${vowels_string[${vowels_string_first_vowel_middle_last_index}]}\n\
    \    local vowels_string_last_vowel_middle_first_index=$((vowels_string_last_vowel_first_index\
    \ - 1))\n    local vowels_string_last_vowel_middle_first_char=${vowels_string[${vowels_string_last_vowel_middle_first_index}]}\n\
    \    local vowels_string_middle_vowel_index=$((vowels_string_middle_index - 1))\n\
    \    local vowels_string_middle_vowel_char=${vowels_string[${vowels_string_middle_vowel_index}]}\n\
    \    local vowels_string_middle_vowel_last_index=$((vowels_string_middle_vowel_index\
    \ - 1))\n    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa9nt03ha.sh: line 43: vowels_string: bad array subscript

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local word=$1\n    local vowel\n    local vowel_found\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_position_count\n    local vowel_position\n\
    \    local vowel_position_count\n    local vowel_position\n    local vowel_position_count\n\
    \    local vowel_position\n    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_1=$(echo\
    \ $vowels | sed 's/ //g' | wc -w)\n    local vowels_count_2=$(echo $vowels | sed\
    \ 's/ //g' | sed 's/^/1/g' | wc -w)\n    local vowels_count_3=$(echo $vowels |\
    \ sed 's/ //g' | sed 's/^/2/g' | wc -w)\n    local vowels_count_4=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/3/g' | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/4/g' | wc -w)\n    local vowels_count_6=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/5/g' | wc -w)\n    local vowels_count_7=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/6/g' | wc -w)\n    local vowels_count_8=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/7/g' | wc -w)\n    local vowels_count_9=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/8/g' | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/9/g' | wc -w)\n    local vowels_count_11=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/10/g' | wc -w)\n    local vowels_count_12=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/11/g' | wc -w)\n    local vowels_count_13=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/12/g' | wc -w)\n    local vowels_count_14=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/13/g' | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/14/g' | wc -w)\n    local vowels_count_16=$(echo $vowels\
    \ | sed 's/ //g' | sed 's/^/15/g' | wc -w)\n    local vowels_count_17=$(echo $vowels\
    \ | sed 's/ //g' | \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj87o_min.sh: line 37: unexpected EOF while looking for matching
    `)''

    /tmp/tmpj87o_min.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel\n    local vowel_found\n    local\
    \ vowel_found_index\n    local vowel_found_index2\n    local vowel_index\n   \
    \ local vowel_index2\n    local vowel_index3\n    local vowel_index4\n    local\
    \ vowel_index5\n    local vowel_index6\n    local vowel_index7\n    local vowel_index8\n\
    \    local vowel_index9\n    local vowel_index10\n    local vowel_index11\n  \
    \  local vowel_index12\n    local vowel_index13\n    local vowel_index14\n   \
    \ local vowel_index15\n    local vowel_index16\n    local vowel_index17\n    local\
    \ vowel_index18\n    local vowel_index19\n    local vowel_index20\n    local vowel_index21\n\
    \    local vowel_index22\n    local vowel_index23\n    local vowel_index24\n \
    \   local vowel_index25\n    local vowel_index26\n    local vowel_index27\n  \
    \  local vowel_index28\n    local vowel_index29\n    local vowel_index30\n   \
    \ local vowel_index31\n    local vowel_index32\n    local vowel_index33\n    local\
    \ vowel_index34\n    local vowel_index35\n    local vowel_index36\n    local vowel_index37\n\
    \    local vowel_index38\n    local vowel_index39\n    local vowel_index40\n \
    \   local vowel_index41\n    local vowel_index42\n    local vowel_index43\n  \
    \  local vowel_index44\n    local vowel_index45\n    local vowel_index46\n   \
    \ local vowel_index47\n    local vowel_index48\n    local vowel_index49\n    local\
    \ vowel_index50\n    local vowel_index51\n    local vowel_index52\n    local vowel_index53\n\
    \    local vowel_index54\n    local vowel_index55\n    local vowel_index56\n \
    \   local vowel_index57\n    local vowel_index58\n    local vowel_index59\n  \
    \  local vowel_index60\n    local vowel_index61\n    local vowel_index62\n   \
    \ local vowel_index63\n    local vowel_index64\n    local vowel_index65\n    local\
    \ vowel_index66\n    local vowel_index67\n    local vowel_index68\n    local vowel_index69\n\
    \    local vowel_index70\n    local vowel_index71\n    local vowel_index72\n \
    \   local vowel_index73\n    local vowel_index74\n    local vowel_index75\n  \
    \  local vowel_index76\n    local vowel_index77\n    local vowel_index78\n   \
    \ local vowel_index\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local word=$1\n  local vowel\n  local vowel_count\n  local vowel_index\n\
    \  local vowel_found\n  local vowel_position\n  local vowel_length\n  local vowel_position_index\n\
    \  local vowel_position_length\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local vowel_position_length_index\n\
    \  local vowel_position_length_index\n  local vowel_position_length_index\n  local\
    \ vowel_position_length_index\n  local vowel_position_length_index\n  local \n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OE UE ae ie oe ue\"\n    local vowels_count=$(echo $vowels | wc\
    \ -w)\n    local vowels_array=($vowels)\n    local vowels_array_count=${#vowels_array[@]}\n\
    \    local vowels_array_index=0\n    local vowels_array_element\n    local vowels_array_element_count\n\
    \    local vowels_array_element_index\n    local vowels_array_element_value\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_element_value_count\n\
    \    local vowels_array_element_value_count\n    local vowels_array_\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=\"$1\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local consonant_position=0\n    local consonant_found=\"\
    \"\n    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count_2=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f1);\n    local vowels_count_3=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f2);\n    local vowels_count_4=$(echo $vowels | wc -l\
    \ | cut -d \" \" -f3);\n    local vowels_count_5=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f4);\n    local vowels_count_6=$(echo $vowels | wc -l | cut -d \"\
    \ \" -f5);\n    local vowels_count_7=$(echo $vowels | wc -l | cut -d \" \" -f6);\n\
    \    local vowels_count_8=$(echo $vowels | wc -l | cut -d \" \" -f7);\n    local\
    \ vowels_count_9=$(echo $vowels | wc -l | cut -d \" \" -f8);\n    local vowels_count_10=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f9);\n    local vowels_count_11=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f10);\n    local vowels_count_12=$(echo $vowels | wc\
    \ -l | cut -d \" \" -f11);\n    local vowels_count_13=$(echo $vowels | wc -l |\
    \ cut -d \" \" -f12);\n    local vowels_count_14=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f13);\n    local vowels_count_15=$(echo $vowels | wc -l | cut -d \"\
    \ \" -f14);\n    local vowels_count_16=$(echo $vowels | wc -l | cut -d \" \" -f15);\n\
    \    local vowels_count_17=$(echo $vowels | wc -l | cut -d \" \" -f16);\n    local\
    \ vowels_count_18=$(echo $vowels | wc -l | cut -d \" \" -f17);\n    local vowels_count_19=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f18);\n    local vowels_count_20=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f19);\n    local vowels_count_21=$(echo $vowels | wc\
    \ -l | cut -d \" \" -f20);\n    local vowels_count_22=$(echo $vowels | wc -l |\
    \ cut -d \" \" -f21);\n    local vowels_count_23=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f22\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp25_jtxs7.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmp25_jtxs7.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local string=\"$1\"\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_found_index=0\n    local vowel_found_index2=0\n\
    \    local vowel_found_index3=0\n    local vowel_found_index4=0\n    local vowel_found_index5=0\n\
    \    local vowel_found_index6=0\n    local vowel_found_index7=0\n    local vowel_found_index8=0\n\
    \    local vowel_found_index9=0\n    local vowel_found_index10=0\n    local vowel_found_index11=0\n\
    \    local vowel_found_index12=0\n    local vowel_found_index13=0\n    local vowel_found_index14=0\n\
    \    local vowel_found_index15=0\n    local vowel_found_index16=0\n    local vowel_found_index17=0\n\
    \    local vowel_found_index18=0\n    local vowel_found_index19=0\n    local vowel_found_index20=0\n\
    \    local vowel_found_index21=0\n    local vowel_found_index22=0\n    local vowel_found_index23=0\n\
    \    local vowel_found_index24=0\n    local vowel_found_index25=0\n    local vowel_found_index26=0\n\
    \    local vowel_found_index27=0\n    local vowel_found_index28=0\n    local vowel_found_index29=0\n\
    \    local vowel_found_index30=0\n    local vowel_found_index31=0\n    local vowel_found_index32=0\n\
    \    local vowel_found_index33=0\n    local vowel_found_index34=0\n    local vowel_found_index35=0\n\
    \    local vowel_found_index36=0\n    local vowel_found_index37=0\n    local vowel_found_index38=0\n\
    \    local vowel_found_index39=0\n    local vowel_found_index40=0\n    local vowel_found_index41=0\n\
    \    local vowel_found_index42=0\n    local vowel_found_index43=0\n    local vowel_found_index44=0\n\
    \    local vowel_found_index45=0\n    local vowel_found_index46=0\n    local vowel_found_index47=0\n\
    \    local vowel_found_index48=0\n    local vowel_found_index49=0\n    local vowel_found_index50=0\n\
    \    local vowel_found_index51=0\n    local vowel_found_index52=0\n    local vowel_found_index53=0\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel\n    local vowel_index\n\
    \    local vowel_length\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found_length\n    local vowel_found_count\n    local vowel_found_count2\n\
    \    local vowel_found_count3\n    local vowel_found_count4\n    local vowel_found_count5\n\
    \    local vowel_found_count6\n    local vowel_found_count7\n    local vowel_found_count8\n\
    \    local vowel_found_count9\n    local vowel_found_count10\n    local vowel_found_count11\n\
    \    local vowel_found_count12\n    local vowel_found_count13\n    local vowel_found_count14\n\
    \    local vowel_found_count15\n    local vowel_found_count16\n    local vowel_found_count17\n\
    \    local vowel_found_count18\n    local vowel_found_count19\n    local vowel_found_count20\n\
    \    local vowel_found_count21\n    local vowel_found_count22\n    local vowel_found_count23\n\
    \    local vowel_found_count24\n    local vowel_found_count25\n    local vowel_found_count26\n\
    \    local vowel_found_count27\n    local vowel_found_count28\n    local vowel_found_count29\n\
    \    local vowel_found_count30\n    local vowel_found_count31\n    local vowel_found_count32\n\
    \    local vowel_found_count33\n    local vowel_found_count34\n    local vowel_found_count35\n\
    \    local vowel_found_count36\n    local vowel_found_count37\n    local vowel_found_count38\n\
    \    local vowel_found_count39\n    local vowel_found_count40\n    local vowel_found_count41\n\
    \    local vowel_found_count42\n    local vowel_found_count43\n    local vowel_found_count44\n\
    \    local vowel_found_count45\n    local vowel_found_count46\n    local vowel_found_count47\n\
    \    local vowel_found_count48\n    local vowel_found_count49\n    local vowel_found_count50\n\
    \    local vowel_found_count51\n    local vowel_found_count52\n    local vowel_found_count53\n\
    \    local vowel_found_count54\n    local vowel_found_count55\n    local vowel_found_count56\n\
    \    local vowel_found_count57\n    local vowel_found_count\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\"\n    local vowels_count=${#vowels}\n    local vowel_found=\"\"\n\
    \    local vowel_found_index=0\n    local vowel_found_index2=0\n    local vowel_found_index3=0\n\
    \    local vowel_found_index4=0\n    local vowel_found_index5=0\n    local vowel_found_index6=0\n\
    \    local vowel_found_index7=0\n    local vowel_found_index8=0\n    local vowel_found_index9=0\n\
    \    local vowel_found_index10=0\n    local vowel_found_index11=0\n    local vowel_found_index12=0\n\
    \    local vowel_found_index13=0\n    local vowel_found_index14=0\n    local vowel_found_index15=0\n\
    \    local vowel_found_index16=0\n    local vowel_found_index17=0\n    local vowel_found_index18=0\n\
    \    local vowel_found_index19=0\n    local vowel_found_index20=0\n    local vowel_found_index21=0\n\
    \    local vowel_found_index22=0\n    local vowel_found_index23=0\n    local vowel_found_index24=0\n\
    \    local vowel_found_index25=0\n    local vowel_found_index26=0\n    local vowel_found_index27=0\n\
    \    local vowel_found_index28=0\n    local vowel_found_index29=0\n    local vowel_found_index30=0\n\
    \    local vowel_found_index31=0\n    local vowel_found_index32=0\n    local vowel_found_index33=0\n\
    \    local vowel_found_index34=0\n    local vowel_found_index35=0\n    local vowel_found_index36=0\n\
    \    local vowel_found_index37=0\n    local vowel_found_index38=0\n    local vowel_found_index39=0\n\
    \    local vowel_found_index40=0\n    local vowel_found_index41=0\n    local vowel_found_index42=0\n\
    \    local vowel_found_index43=0\n    local vowel_found_index44=0\n    local vowel_found_index45=0\n\
    \    local vowel_found_index46=0\n    local vowel_found_index47=0\n    local vowel_found_index48=0\n\
    \    local vowel_found_index49=0\n    local vowel_found_index50=0\n    local vowel_found_index51=0\n\
    \    local vowel_found_index52=0\n    local vowel_found_index53=0\n    local vowel_found_index54=0\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel\n    local vowel_count\n\
    \    local vowel_index\n    local vowel_found\n    local vowel_position\n    local\
    \ vowel_position_index\n    local vowel_position_index2\n    local vowel_position_index3\n\
    \    local vowel_position_index4\n    local vowel_position_index5\n    local vowel_position_index6\n\
    \    local vowel_position_index7\n    local vowel_position_index8\n    local vowel_position_index9\n\
    \    local vowel_position_index10\n    local vowel_position_index11\n    local\
    \ vowel_position_index12\n    local vowel_position_index13\n    local vowel_position_index14\n\
    \    local vowel_position_index15\n    local vowel_position_index16\n    local\
    \ vowel_position_index17\n    local vowel_position_index18\n    local vowel_position_index19\n\
    \    local vowel_position_index20\n    local vowel_position_index21\n    local\
    \ vowel_position_index22\n    local vowel_position_index23\n    local vowel_position_index24\n\
    \    local vowel_position_index25\n    local vowel_position_index26\n    local\
    \ vowel_position_index27\n    local vowel_position_index28\n    local vowel_position_index29\n\
    \    local vowel_position_index30\n    local vowel_position_index31\n    local\
    \ vowel_position_index32\n    local vowel_position_index33\n    local vowel_position_index34\n\
    \    local vowel_position_index35\n    local vowel_position_index36\n    local\
    \ vowel_position_index37\n    local vowel_position_index38\n    local vowel_position_index39\n\
    \    local vowel_position_index40\n    local vowel_position_index41\n    local\
    \ vowel_position_index42\n    local vowel_position_index43\n    local vowel_position_index44\n\
    \    local vowel_position_index45\n    local vowel_position_index46\n    local\
    \ vowel_position_index47\n    local vowel_position_index48\n    local vowel_position_index49\n\
    \    local vowel_position_index50\n    local vowel_position_index51\n    local\
    \ vowel_position_index52\n    local vowel_position_index53\n    local vowel_position_index54\n\
    \    local vowel_position_index55\n    local vowel_position_index56\n    local\
    \ vowel_position_index57\n    local vowel_position_index58\n    local vowel_position_index59\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_count_2=${#vowels};\n\
    \    local vowels_count_3=${#vowels};\n    local vowels_count_4=${#vowels};\n\
    \    local vowels_count_5=${#vowels};\n    local vowels_count_6=${#vowels};\n\
    \    local vowels_count_7=${#vowels};\n    local vowels_count_8=${#vowels};\n\
    \    local vowels_count_9=${#vowels};\n    local vowels_count_10=${#vowels};\n\
    \    local vowels_count_11=${#vowels};\n    local vowels_count_12=${#vowels};\n\
    \    local vowels_count_13=${#vowels};\n    local vowels_count_14=${#vowels};\n\
    \    local vowels_count_15=${#vowels};\n    local vowels_count_16=${#vowels};\n\
    \    local vowels_count_17=${#vowels};\n    local vowels_count_18=${#vowels};\n\
    \    local vowels_count_19=${#vowels};\n    local vowels_count_20=${#vowels};\n\
    \    local vowels_count_21=${#vowels};\n    local vowels_count_22=${#vowels};\n\
    \    local vowels_count_23=${#vowels};\n    local vowels_count_24=${#vowels};\n\
    \    local vowels_count_25=${#vowels};\n    local vowels_count_26=${#vowels};\n\
    \    local vowels_count_27=${#vowels};\n    local vowels_count_28=${#vowels};\n\
    \    local vowels_count_29=${#vowels};\n    local vowels_count_30=${#vowels};\n\
    \    local vowels_count_31=${#vowels};\n    local vowels_count_32=${#vowels};\n\
    \    local vowels_count_33=${#vowels};\n    local vowels_count_34=${#vowels};\n\
    \    local vowels_count_35=${#vowels};\n    local vowels_count_36=${#vowels};\n\
    \    local vowels_count_37=${#vowels};\n    local vowels_count_38=${#vowels};\n\
    \    local vowels_count_39=${#vowels};\n    local vowels_count_40=${#vowels};\n\
    \    local vowels_count_41=${#vowels};\n    local vowels_count_42=${#\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxguwc226.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local string=\"\
    $1\"\n  local vowels=\"a e i o u\"\n  local vowels_count=${#vowels[@]}\n  local\
    \ vowels_count_2=${#vowels[@]}\n  local vowels_count_3=${#vowels[@]}\n  local\
    \ vowels_count_4=${#vowels[@]}\n  local vowels_count_5=${#vowels[@]}\n  local\
    \ vowels_count_6=${#vowels[@]}\n  local vowels_count_7=${#vowels[@]}\n  local\
    \ vowels_count_8=${#vowels[@]}\n  local vowels_count_9=${#vowels[@]}\n  local\
    \ vowels_count_10=${#vowels[@]}\n  local vowels_count_11=${#vowels[@]}\n  local\
    \ vowels_count_12=${#vowels[@]}\n  local vowels_count_13=${#vowels[@]}\n  local\
    \ vowels_count_14=${#vowels[@]}\n  local vowels_count_15=${#vowels[@]}\n  local\
    \ vowels_count_16=${#vowels[@]}\n  local vowels_count_17=${#vowels[@]}\n  local\
    \ vowels_count_18=${#vowels[@]}\n  local vowels_count_19=${#vowels[@]}\n  local\
    \ vowels_count_20=${#vowels[@]}\n  local vowels_count_21=${#vowels[@]}\n  local\
    \ vowels_count_22=${#vowels[@]}\n  local vowels_count_23=${#vowels[@]}\n  local\
    \ vowels_count_24=${#vowels[@]}\n  local vowels_count_25=${#vowels[@]}\n  local\
    \ vowels_count_26=${#vowels[@]}\n  local vowels_count_27=${#vowels[@]}\n  local\
    \ vowels_count_28=${#vowels[@]}\n  local vowels_count_29=${#vowels[@]}\n  local\
    \ vowels_count_30=${#vowels[@]}\n  local vowels_count_31=${#vowels[@]}\n  local\
    \ vowels_count_32=${#vowels[@]}\n  local vowels_count_33=${#vowels[@]}\n  local\
    \ vowels_count_34=${#vowels[@]}\n  local vowels_count_35=${#vowels[@]}\n  local\
    \ vowels_count_36=${#vowels[@]}\n  local vowels_count_37=${#vowels[@]}\n  local\
    \ vowels_count_38=${#vowels[@]}\n  local vowel\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=1;\n\
    \    local vowel_position_count=0;\n    local vowel_position_to_check=0;\n   \
    \ local vowel_position_to_check_count=0;\n    local vowel_position_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_count=0;\n    local vowel_position_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_count=0;\n    local vowel_position_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_count=0;\n    local\
    \ vowel_position_to_check_to_check_to_check_to_check_to_check=0;\n    local vowel_position_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_count=0;\n\
    \    local vowel_position_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check=0;\n\
    \    local vowel_position_to_check_to_check_to_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u AE II OO UU\"\n  local word=$1\n  local vowel\n  local vowel_found\n\
    \  local vowel_position\n  local vowel_position_count\n  local vowel_position_count_2\n\
    \  local vowel_position_count_3\n  local vowel_position_count_4\n  local vowel_position_count_5\n\
    \  local vowel_position_count_6\n  local vowel_position_count_7\n  local vowel_position_count_8\n\
    \  local vowel_position_count_9\n  local vowel_position_count_10\n  local vowel_position_count_11\n\
    \  local vowel_position_count_12\n  local vowel_position_count_13\n  local vowel_position_count_14\n\
    \  local vowel_position_count_15\n  local vowel_position_count_16\n  local vowel_position_count_17\n\
    \  local vowel_position_count_18\n  local vowel_position_count_19\n  local vowel_position_count_20\n\
    \  local vowel_position_count_21\n  local vowel_position_count_22\n  local vowel_position_count_23\n\
    \  local vowel_position_count_24\n  local vowel_position_count_25\n  local vowel_position_count_26\n\
    \  local vowel_position_count_27\n  local vowel_position_count_28\n  local vowel_position_count_29\n\
    \  local vowel_position_count_30\n  local vowel_position_count_31\n  local vowel_position_count_32\n\
    \  local vowel_position_count_33\n  local vowel_position_count_34\n  local vowel_position_count_35\n\
    \  local vowel_position_count_36\n  local vowel_position_count_37\n  local vowel_position_count_38\n\
    \  local vowel_position_count_39\n  local vowel_position_count_40\n  local vowel_position_count_41\n\
    \  local vowel_position_count_42\n  local vowel_position_count_43\n  local vowel_position_count_44\n\
    \  local vowel_position_count_45\n  local vowel_position_count_46\n  local vowel_position_count_47\n\
    \  local vowel_position_count_48\n  local vowel_position_count_49\n  local vowel_position_count_50\n\
    \  local vowel_position_count_51\n  local vowel_position_count_52\n  local vowel_position_count_53\n\
    \  local vowel_position_count_54\n  local vowel_position_count_55\n  local vowel_position_count_56\n\
    \  local vowel_position_count_57\n  local vowel_position_count_58\n  local vowel_position_count_59\n\
    \  \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=$1\n\
    \    local vowels=\"a e i o u\"\n    local vowels_count=${#vowels[@]}\n    local\
    \ vowels_count_from_right=${#string[@]}\n    local vowels_count_from_left=${#string[@]}\
    \ - ${#vowels[@]}\n    local vowels_count_from_left2=$((${#string[@]} - ${#vowels[@]}))\n\
    \    local vowels_count_from_right2=$((${#string[@]} - ${#vowels[@]} - ${#vowels[@]}))\n\
    \    local vowels_count_from_left3=$((${#string[@]} - ${#vowels[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]}))\n    local vowels_count_from_right3=$((${#string[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]}))\n    local vowels_count_from_left4=$((${#string[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]}))\n    local vowels_count_from_right4=$((${#string[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]}))\n    local vowels_count_from_left5=$((${#string[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]}))\n\
    \    local vowels_count_from_right5=$((${#string[@]} - ${#vowels[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]}\
    \ - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${#vowels[@]} - ${\n}\n\n\
    candidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n\
    \    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n\
    \    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n\
    \    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n\
    \    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n\
    \    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\"\
    \ ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn2mti064.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn2mti064.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=$1\n    local vowel\n    local vowel_index\n   \
    \ local vowel_found\n    local vowel_found_index\n    local vowel_found_index2\n\
    \    local vowel_found_index3\n    local vowel_found_index4\n    local vowel_found_index5\n\
    \    local vowel_found_index6\n    local vowel_found_index7\n    local vowel_found_index8\n\
    \    local vowel_found_index9\n    local vowel_found_index10\n    local vowel_found_index11\n\
    \    local vowel_found_index12\n    local vowel_found_index13\n    local vowel_found_index14\n\
    \    local vowel_found_index15\n    local vowel_found_index16\n    local vowel_found_index17\n\
    \    local vowel_found_index18\n    local vowel_found_index19\n    local vowel_found_index20\n\
    \    local vowel_found_index21\n    local vowel_found_index22\n    local vowel_found_index23\n\
    \    local vowel_found_index24\n    local vowel_found_index25\n    local vowel_found_index26\n\
    \    local vowel_found_index27\n    local vowel_found_index28\n    local vowel_found_index29\n\
    \    local vowel_found_index30\n    local vowel_found_index31\n    local vowel_found_index32\n\
    \    local vowel_found_index33\n    local vowel_found_index34\n    local vowel_found_index35\n\
    \    local vowel_found_index36\n    local vowel_found_index37\n    local vowel_found_index38\n\
    \    local vowel_found_index39\n    local vowel_found_index40\n    local vowel_found_index41\n\
    \    local vowel_found_index42\n    local vowel_found_index43\n    local vowel_found_index44\n\
    \    local vowel_found_index45\n    local vowel_found_index46\n    local vowel_found_index47\n\
    \    local vowel_found_index48\n    local vowel_found_index49\n    local vowel_found_index50\n\
    \    local vowel_found_index51\n    local vowel_found_index52\n    local vowel_found_index53\n\
    \    local vowel_found_index54\n    local vowel_found_index55\n    local vowel_found_index56\n\
    \    local vowel_found_index57\n    local vowel_found_index58\n    local vowel_found_index59\n\
    \    local vowel_found_index60\n    local \n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index2=0;\n    local vowel_found_index3=1;\n\
    \    local vowel_found_index4=2;\n    local vowel_found_index5=3;\n    local vowel_found_index6=4;\n\
    \    local vowel_found_index7=5;\n    local vowel_found_index8=6;\n    local vowel_found_index9=7;\n\
    \    local vowel_found_index10=8;\n    local vowel_found_index11=9;\n    local\
    \ vowel_found_index12=10;\n    local vowel_found_index13=11;\n    local vowel_found_index14=12;\n\
    \    local vowel_found_index15=13;\n    local vowel_found_index16=14;\n    local\
    \ vowel_found_index17=15;\n    local vowel_found_index18=16;\n    local vowel_found_index19=17;\n\
    \    local vowel_found_index20=18;\n    local vowel_found_index21=19;\n    local\
    \ vowel_found_index22=20;\n    local vowel_found_index23=21;\n    local vowel_found_index24=22;\n\
    \    local vowel_found_index25=23;\n    local vowel_found_index26=24;\n    local\
    \ vowel_found_index27=25;\n    local vowel_found_index28=26;\n    local vowel_found_index29=27;\n\
    \    local vowel_found_index30=28;\n    local vowel_found_index31=29;\n    local\
    \ vowel_found_index32=30;\n    local vowel_found_index33=31;\n    local vowel_found_index34=32;\n\
    \    local vowel_found_index35=33;\n    local vowel_found_index36=34;\n    local\
    \ vowel_found_index37=35;\n    local vowel_found_index38=36;\n    local vowel_found_index39=37;\n\
    \    local vowel_found_index40=38;\n    local vowel_found_index41=39;\n    local\
    \ vowel_found_index42=40;\n    local vowel_found_index43=41;\n    local vowel_found_index44=42;\n\
    \    local vowel_found_index45=43;\n    local vowel_found_index46=44;\n\n}\n\n\
    candidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n\
    \    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n\
    \    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n\
    \    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n\
    \    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n\
    \    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\"\
    \ ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_found_index=0;\n\
    \    local vowel_found_index2=0;\n    local vowel_found_index3=0;\n    local vowel_found_index4=0;\n\
    \    local vowel_found_index5=0;\n    local vowel_found_index6=0;\n    local vowel_found_index7=0;\n\
    \    local vowel_found_index8=0;\n    local vowel_found_index9=0;\n    local vowel_found_index10=0;\n\
    \    local vowel_found_index11=0;\n    local vowel_found_index12=0;\n    local\
    \ vowel_found_index13=0;\n    local vowel_found_index14=0;\n    local vowel_found_index15=0;\n\
    \    local vowel_found_index16=0;\n    local vowel_found_index17=0;\n    local\
    \ vowel_found_index18=0;\n    local vowel_found_index19=0;\n    local vowel_found_index20=0;\n\
    \    local vowel_found_index21=0;\n    local vowel_found_index22=0;\n    local\
    \ vowel_found_index23=0;\n    local vowel_found_index24=0;\n    local vowel_found_index25=0;\n\
    \    local vowel_found_index26=0;\n    local vowel_found_index27=0;\n    local\
    \ vowel_found_index28=0;\n    local vowel_found_index29=0;\n    local vowel_found_index30=0;\n\
    \    local vowel_found_index31=0;\n    local vowel_found_index32=0;\n    local\
    \ vowel_found_index33=0;\n    local vowel_found_index34=0;\n    local vowel_found_index35=0;\n\
    \    local vowel_found_index36=0;\n    local vowel_found_index37=0;\n    local\
    \ vowel_found_index38=0;\n    local vowel_found_index39=0;\n    local vowel_found_index40=0;\n\
    \    local vowel_found_index41=0;\n    local vowel_found_index42=0;\n    local\
    \ vowel_found_index43=0;\n    local vowel_found_index44=0;\n    local vowel_found_index45=0;\n\
    \    local vowel_found_index46=0;\n    local vowel_found_index47=0;\n    local\
    \ vowel_found_index48=0;\n    local vowel_found_index49=0;\n    local vowel_found_index50=0;\n\
    \    local vowel_found_index51=0;\n    local vowel_found_index52=0;\n    local\
    \ vowel_found_index53=0;\n    local vowel_found_index54=0;\n}\n\ncandidate() {\n\
    \    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=\"\
    $1\"\n    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_found=\"\
    \"\n    local vowel_position=0\n    local vowel_position_count=0\n    local vowel_position_found=\"\
    \"\n    local vowel_position_position=0\n    local vowel_position_position_count=0\n\
    \    local vowel_position_position_found=\"\"\n    local vowel_position_position_position=0\n\
    \    local vowel_position_position_position_count=0\n    local vowel_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position=0\n    local vowel_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_found=\"\"\n    local vowel_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_count=0\n    local\
    \ vowel_position_position_position_position_position_found=\"\"\n    local vowel_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_count=0\n\
    \    local vowel_position_position_position_position_position_position_position_position_position_found=\"\
    \"\n    local vowel_position_position_position_position_position_position_position_position_position_position=0\n\
    \    local vowel_position_position_position_position_position_position_position_\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowel_count=0\n    local vowel_found=\"\"\n\
    \    local vowel_position=0\n    local vowel_position2=0\n    local vowel_position3=0\n\
    \    local vowel_position4=0\n    local vowel_position5=0\n    local vowel_position6=0\n\
    \    local vowel_position7=0\n    local vowel_position8=0\n    local vowel_position9=0\n\
    \    local vowel_position10=0\n    local vowel_position11=0\n    local vowel_position12=0\n\
    \    local vowel_position13=0\n    local vowel_position14=0\n    local vowel_position15=0\n\
    \    local vowel_position16=0\n    local vowel_position17=0\n    local vowel_position18=0\n\
    \    local vowel_position19=0\n    local vowel_position20=0\n    local vowel_position21=0\n\
    \    local vowel_position22=0\n    local vowel_position23=0\n    local vowel_position24=0\n\
    \    local vowel_position25=0\n    local vowel_position26=0\n    local vowel_position27=0\n\
    \    local vowel_position28=0\n    local vowel_position29=0\n    local vowel_position30=0\n\
    \    local vowel_position31=0\n    local vowel_position32=0\n    local vowel_position33=0\n\
    \    local vowel_position34=0\n    local vowel_position35=0\n    local vowel_position36=0\n\
    \    local vowel_position37=0\n    local vowel_position38=0\n    local vowel_position39=0\n\
    \    local vowel_position40=0\n    local vowel_position41=0\n    local vowel_position42=0\n\
    \    local vowel_position43=0\n    local vowel_position44=0\n    local vowel_position45=0\n\
    \    local vowel_position46=0\n    local vowel_position47=0\n    local vowel_position48=0\n\
    \    local vowel_position49=0\n    local vowel_position50=0\n    local vowel_position51=0\n\
    \    local vowel_position52=0\n    local vowel_position53=0\n    local vowel_position54=0\n\
    \    local vowel_position55=0\n    local vowel_position56=0\n    local vowel_position57=0\n\
    \    local vowel_position58=0\n    local vowel_position59=0\n    local vowel_position60=0\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local word=$1\n    local vowel\n    local vowel_count\n\
    \    local vowel_index\n    local vowel_found\n    local vowel_found_index\n \
    \   local vowel_found_index2\n    local vowel_found_index3\n    local vowel_found_index4\n\
    \    local vowel_found_index5\n    local vowel_found_index6\n    local vowel_found_index7\n\
    \    local vowel_found_index8\n    local vowel_found_index9\n    local vowel_found_index10\n\
    \    local vowel_found_index11\n    local vowel_found_index12\n    local vowel_found_index13\n\
    \    local vowel_found_index14\n    local vowel_found_index15\n    local vowel_found_index16\n\
    \    local vowel_found_index17\n    local vowel_found_index18\n    local vowel_found_index19\n\
    \    local vowel_found_index20\n    local vowel_found_index21\n    local vowel_found_index22\n\
    \    local vowel_found_index23\n    local vowel_found_index24\n    local vowel_found_index25\n\
    \    local vowel_found_index26\n    local vowel_found_index27\n    local vowel_found_index28\n\
    \    local vowel_found_index29\n    local vowel_found_index30\n    local vowel_found_index31\n\
    \    local vowel_found_index32\n    local vowel_found_index33\n    local vowel_found_index34\n\
    \    local vowel_found_index35\n    local vowel_found_index36\n    local vowel_found_index37\n\
    \    local vowel_found_index38\n    local vowel_found_index39\n    local vowel_found_index40\n\
    \    local vowel_found_index41\n    local vowel_found_index42\n    local vowel_found_index43\n\
    \    local vowel_found_index44\n    local vowel_found_index45\n    local vowel_found_index46\n\
    \    local vowel_found_index47\n    local vowel_found_index48\n    local vowel_found_index49\n\
    \    local vowel_found_index50\n    local vowel_found_index51\n    local vowel_found_index52\n\
    \    local vowel_found_index53\n    local vowel_found_index54\n    local vowel_found_index55\n\
    \    local vowel_found_index56\n    local vowel_found_index57\n    local vowel_found_index58\n\
    \    local vowel_found\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_position_count=0;\n    local vowel_position_index=0;\n  \
    \  local vowel_position_index_count=0;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n    local vowel_position_index_count_step=0;\n\
    \    local vowel_position_index_count_step_max=1;\n    local vowel_position_index_count_step_min=1;\n\
    \    local vowel_position_index_count_step=1;\n    local vowel_position_index_count_max=3;\n\
    \    local vowel_position_index_count_min=1;\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043323
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count_2=$(echo\
    \ $vowels | wc -l | awk '{print $1}');\n    local vowels_count_3=$(echo $vowels\
    \ | wc -l | awk '{print $2}');\n    local vowels_count_4=$(echo $vowels | wc -l\
    \ | awk '{print $3}');\n    local vowels_count_5=$(echo $vowels | wc -l | awk\
    \ '{print $4}');\n    local vowels_count_6=$(echo $vowels | wc -l | awk '{print\
    \ $5}');\n    local vowels_count_7=$(echo $vowels | wc -l | awk '{print $6}');\n\
    \    local vowels_count_8=$(echo $vowels | wc -l | awk '{print $7}');\n    local\
    \ vowels_count_9=$(echo $vowels | wc -l | awk '{print $8}');\n    local vowels_count_10=$(echo\
    \ $vowels | wc -l | awk '{print $9}');\n    local vowels_count_11=$(echo $vowels\
    \ | wc -l | awk '{print $10}');\n    local vowels_count_12=$(echo $vowels | wc\
    \ -l | awk '{print $11}');\n    local vowels_count_13=$(echo $vowels | wc -l |\
    \ awk '{print $12}');\n    local vowels_count_14=$(echo $vowels | wc -l | awk\
    \ '{print $13}');\n    local vowels_count_15=$(echo $vowels | wc -l | awk '{print\
    \ $14}');\n    local vowels_count_16=$(echo $vowels | wc -l | awk '{print $15}');\n\
    \    local vowels_count_17=$(echo $vowels | wc -l | awk '{print $16}');\n    local\
    \ vowels_count_18=$(echo $vowels | wc -l | awk '{print $17}');\n    local vowels_count_19=$(echo\
    \ $vowels | wc -l | awk '{print $18}');\n    local vowels_count_20=$(echo $vowels\
    \ | wc -l | awk '{print $19}');\n    local vowels_count_21=$(echo $vowels | wc\
    \ -l | awk '{print $20}');\n    local vowels_count_22=$(echo $vowels | wc -l |\
    \ awk '{print $21}');\n    local vowels_count_23=$(\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpubx7xzv_.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmpubx7xzv_.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_count_tmp=$((${#1}\
    \ - 1));\n    local vowels_count_tmp2=$((${#1} - 2));\n    local vowels_count_tmp3=$((${#1}\
    \ - 3));\n    local vowels_count_tmp4=$((${#1} - 4));\n    local vowels_count_tmp5=$((${#1}\
    \ - 5));\n    local vowels_count_tmp6=$((${#1} - 6));\n    local vowels_count_tmp7=$((${#1}\
    \ - 7));\n    local vowels_count_tmp8=$((${#1} - 8));\n    local vowels_count_tmp9=$((${#1}\
    \ - 9));\n    local vowels_count_tmp10=$((${#1} - 10));\n    local vowels_count_tmp11=$((${#1}\
    \ - 11));\n    local vowels_count_tmp12=$((${#1} - 12));\n    local vowels_count_tmp13=$((${#1}\
    \ - 13));\n    local vowels_count_tmp14=$((${#1} - 14));\n    local vowels_count_tmp15=$((${#1}\
    \ - 15));\n    local vowels_count_tmp16=$((${#1} - 16));\n    local vowels_count_tmp17=$((${#1}\
    \ - 17));\n    local vowels_count_tmp18=$((${#1} - 18));\n    local vowels_count_tmp19=$((${#1}\
    \ - 19));\n    local vowels_count_tmp20=$((${#1} - 20));\n    local vowels_count_tmp21=$((${#1}\
    \ - 21));\n    local vowels_count_tmp22=$((${#1} - 22));\n    local vowels_count_tmp23=$((${#1}\
    \ - 23));\n    local vowels_count_tmp24=$((${#1} - 24));\n    local vowels_count_tmp25=$((${#1}\
    \ - 25));\n    local vowels_count_tmp26=$((${#1} - 26));\n    local vowels_count_tmp27=$((${#1}\
    \ - 27));\n    local vowels_count_tmp28=$((${#1} - 28));\n    local vowels_count_tmp29=$((${#1}\
    \ - 29));\n    local vowels_count_tmp30=$((${#1} - 30));\n    local vowels_count_tmp31=$((${#1}\
    \ \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr1u7wqef.sh: line 51: unexpected EOF while looking for matching
    `)''

    /tmp/tmpr1u7wqef.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local string=\"\
    $1\"\n    local vowels=\"a e i o u\"\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_found=\"\"\n    local vowel_position=0\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count=0\n    local consonant_found=\"\"\n    local consonant_position=0\n\
    \    local consonant_count\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count_2=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f1);\n    local vowels_count_3=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f2);\n    local vowels_count_4=$(echo $vowels | wc -l\
    \ | cut -d \" \" -f3);\n    local vowels_count_5=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f4);\n    local vowels_count_6=$(echo $vowels | wc -l | cut -d \"\
    \ \" -f5);\n    local vowels_count_7=$(echo $vowels | wc -l | cut -d \" \" -f6);\n\
    \    local vowels_count_8=$(echo $vowels | wc -l | cut -d \" \" -f7);\n    local\
    \ vowels_count_9=$(echo $vowels | wc -l | cut -d \" \" -f8);\n    local vowels_count_10=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f9);\n    local vowels_count_11=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f10);\n    local vowels_count_12=$(echo $vowels | wc\
    \ -l | cut -d \" \" -f11);\n    local vowels_count_13=$(echo $vowels | wc -l |\
    \ cut -d \" \" -f12);\n    local vowels_count_14=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f13);\n    local vowels_count_15=$(echo $vowels | wc -l | cut -d \"\
    \ \" -f14);\n    local vowels_count_16=$(echo $vowels | wc -l | cut -d \" \" -f15);\n\
    \    local vowels_count_17=$(echo $vowels | wc -l | cut -d \" \" -f16);\n    local\
    \ vowels_count_18=$(echo $vowels | wc -l | cut -d \" \" -f17);\n    local vowels_count_19=$(echo\
    \ $vowels | wc -l | cut -d \" \" -f18);\n    local vowels_count_20=$(echo $vowels\
    \ | wc -l | cut -d \" \" -f19);\n    local vowels_count_21=$(echo $vowels | wc\
    \ -l | cut -d \" \" -f20);\n    local vowels_count_22=$(echo $vowels | wc -l |\
    \ cut -d \" \" -f21);\n    local vowels_count_23=$(echo $vowels | wc -l | cut\
    \ -d \" \" -f22\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp25_jtxs7.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmp25_jtxs7.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=$(echo $vowels | wc -w)\n  local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_3=$(echo $vowels | wc -w)\n  local vowels_count_4=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_5=$(echo $vowels | wc -w)\n  local vowels_count_6=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_7=$(echo $vowels | wc -w)\n  local vowels_count_8=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_9=$(echo $vowels | wc -w)\n  local vowels_count_10=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_11=$(echo $vowels | wc -w)\n  local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_13=$(echo $vowels | wc -w)\n  local vowels_count_14=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_15=$(echo $vowels | wc -w)\n  local vowels_count_16=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_17=$(echo $vowels | wc -w)\n  local vowels_count_18=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_19=$(echo $vowels | wc -w)\n  local vowels_count_20=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_21=$(echo $vowels | wc -w)\n  local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_23=$(echo $vowels | wc -w)\n  local vowels_count_24=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_25=$(echo $vowels | wc -w)\n  local vowels_count_26=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_27=$(echo $vowels | wc -w)\n  local vowels_count_28=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_29=$(echo $vowels | wc -w)\n  local vowels_count_30=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_31=$(echo $vowels | wc -w)\n  local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_33=$(echo $vowels | wc -w)\n  local vowels_count_34\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel\n    local vowel_index\n\
    \    local vowel_length\n    local vowel_found\n    local vowel_found_index\n\
    \    local vowel_found_index2\n    local vowel_found_index3\n    local vowel_found_index4\n\
    \    local vowel_found_index5\n    local vowel_found_index6\n    local vowel_found_index7\n\
    \    local vowel_found_index8\n    local vowel_found_index9\n    local vowel_found_index10\n\
    \    local vowel_found_index11\n    local vowel_found_index12\n    local vowel_found_index13\n\
    \    local vowel_found_index14\n    local vowel_found_index15\n    local vowel_found_index16\n\
    \    local vowel_found_index17\n    local vowel_found_index18\n    local vowel_found_index19\n\
    \    local vowel_found_index20\n    local vowel_found_index21\n    local vowel_found_index22\n\
    \    local vowel_found_index23\n    local vowel_found_index24\n    local vowel_found_index25\n\
    \    local vowel_found_index26\n    local vowel_found_index27\n    local vowel_found_index28\n\
    \    local vowel_found_index29\n    local vowel_found_index30\n    local vowel_found_index31\n\
    \    local vowel_found_index32\n    local vowel_found_index33\n    local vowel_found_index34\n\
    \    local vowel_found_index35\n    local vowel_found_index36\n    local vowel_found_index37\n\
    \    local vowel_found_index38\n    local vowel_found_index39\n    local vowel_found_index40\n\
    \    local vowel_found_index41\n    local vowel_found_index42\n    local vowel_found_index43\n\
    \    local vowel_found_index44\n    local vowel_found_index45\n    local vowel_found_index46\n\
    \    local vowel_found_index47\n    local vowel_found_index48\n    local vowel_found_index49\n\
    \    local vowel_found_index50\n    local vowel_found_index51\n    local vowel_found_index52\n\
    \    local vowel_found_index53\n    local vowel_found_index54\n    local vowel_found_index55\n\
    \    local vowel_found_index56\n    local vowel_found_index57\n    local vowel_found_index58\n\
    \    local vowel_found_index59\n    local vowel_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local string=\"$1\"\n  local vowel_found=\"\"\n  local vowel_position=\"\
    \"\n  local vowel_position_count=0\n  local vowel_position_count2=0\n  local vowel_position_count3=0\n\
    \  local vowel_position_count4=0\n  local vowel_position_count5=0\n  local vowel_position_count6=0\n\
    \  local vowel_position_count7=0\n  local vowel_position_count8=0\n  local vowel_position_count9=0\n\
    \  local vowel_position_count10=0\n  local vowel_position_count11=0\n  local vowel_position_count12=0\n\
    \  local vowel_position_count13=0\n  local vowel_position_count14=0\n  local vowel_position_count15=0\n\
    \  local vowel_position_count16=0\n  local vowel_position_count17=0\n  local vowel_position_count18=0\n\
    \  local vowel_position_count19=0\n  local vowel_position_count20=0\n  local vowel_position_count21=0\n\
    \  local vowel_position_count22=0\n  local vowel_position_count23=0\n  local vowel_position_count24=0\n\
    \  local vowel_position_count25=0\n  local vowel_position_count26=0\n  local vowel_position_count27=0\n\
    \  local vowel_position_count28=0\n  local vowel_position_count29=0\n  local vowel_position_count30=0\n\
    \  local vowel_position_count31=0\n  local vowel_position_count32=0\n  local vowel_position_count33=0\n\
    \  local vowel_position_count34=0\n  local vowel_position_count35=0\n  local vowel_position_count36=0\n\
    \  local vowel_position_count37=0\n  local vowel_position_count38=0\n  local vowel_position_count39=0\n\
    \  local vowel_position_count40=0\n  local vowel_position_count41=0\n  local vowel_position_count42=0\n\
    \  local vowel_position_count43=0\n  local vowel_position_count44=0\n  local vowel_position_count45=0\n\
    \  local vowel_position_count46=0\n  local vowel_position_count47=0\n  local vowel_position_count48=0\n\
    \  local vowel_position_count49=0\n  local vowel_position_count50=0\n  local vowel_position_count51=0\n\
    \  local vowel_position_count52=0\n  local vowel_position_count53=0\n  local vowel_\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_count=$(echo $word | tr -cd\
    \ \"$vowels\" | wc -c);\n    local vowel_found=\"\";\n    local vowel_position=0;\n\
    \    local vowel_found_index=0;\n    local vowel_found_index2=0;\n    local vowel_found_index3=1;\n\
    \    local vowel_found_index4=2;\n    local vowel_found_index5=3;\n    local vowel_found_index6=4;\n\
    \    local vowel_found_index7=5;\n    local vowel_found_index8=6;\n    local vowel_found_index9=7;\n\
    \    local vowel_found_index10=8;\n    local vowel_found_index11=9;\n    local\
    \ vowel_found_index12=10;\n    local vowel_found_index13=11;\n    local vowel_found_index14=12;\n\
    \    local vowel_found_index15=13;\n    local vowel_found_index16=14;\n    local\
    \ vowel_found_index17=15;\n    local vowel_found_index18=16;\n    local vowel_found_index19=17;\n\
    \    local vowel_found_index20=18;\n    local vowel_found_index21=19;\n    local\
    \ vowel_found_index22=20;\n    local vowel_found_index23=21;\n    local vowel_found_index24=22;\n\
    \    local vowel_found_index25=23;\n    local vowel_found_index26=24;\n    local\
    \ vowel_found_index27=25;\n    local vowel_found_index28=26;\n    local vowel_found_index29=27;\n\
    \    local vowel_found_index30=28;\n    local vowel_found_index31=29;\n    local\
    \ vowel_found_index32=30;\n    local vowel_found_index33=31;\n    local vowel_found_index34=32;\n\
    \    local vowel_found_index35=33;\n    local vowel_found_index36=34;\n    local\
    \ vowel_found_index37=35;\n    local vowel_found_index38=36;\n    local vowel_found_index39=37;\n\
    \    local vowel_found_index40=38;\n    local vowel_found_index41=39;\n    local\
    \ vowel_found_index42=40;\n    local vowel_found_index43=41;\n    local vowel_found_index44=42;\n\
    \    local \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo \"$vowels\" | wc -w)\n    local\
    \ vowels_count_2=$(echo \"$vowels\" | wc -w)\n    local vowels_count_3=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_4=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_5=$(echo \"$vowels\" | wc -w)\n    local vowels_count_6=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_7=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_8=$(echo \"$vowels\" | wc -w)\n    local vowels_count_9=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_10=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_11=$(echo \"$vowels\" | wc -w)\n    local vowels_count_12=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_13=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_14=$(echo \"$vowels\" | wc -w)\n    local vowels_count_15=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_16=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_17=$(echo \"$vowels\" | wc -w)\n    local vowels_count_18=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_19=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_20=$(echo \"$vowels\" | wc -w)\n    local vowels_count_21=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_22=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_23=$(echo \"$vowels\" | wc -w)\n    local vowels_count_24=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_25=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_26=$(echo \"$vowels\" | wc -w)\n    local vowels_count_27=$(echo\
    \ \"$vowels\" | wc -w)\n    local vowels_count_28=$(echo \"$vowels\" | wc -w)\n\
    \    local vowels_count_29=$(echo \"$vowels\" | wc -w)\n    local vowels_count_30=$(echo\
    \ \"\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") =\
    \ \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\"\
    ) = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\"\
    ) = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpviq_kw99.sh: line 70: unexpected EOF while looking for matching
    `"''

    /tmp/tmpviq_kw99.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_count=$(echo $word | tr '\
    \ ' '\\n' | grep -o \"[aeiouy]*\" | wc -l);\n    local vowel_position=$(echo $word\
    \ | tr ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\n');\n\
    \    local vowel_found=$(echo $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\" | sort\
    \ -n | tail -1 | tr -d '\\n');\n    local vowel_found=$(echo $word | tr ' ' '\\\
    n' | grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\n');\n    local vowel_found=$(echo\
    \ $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\\
    n');\n    local vowel_found=$(echo $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\"\
    \ | sort -n | tail -1 | tr -d '\\n');\n    local vowel_found=$(echo $word | tr\
    \ ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\n');\n    local\
    \ vowel_found=$(echo $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n |\
    \ tail -1 | tr -d '\\n');\n    local vowel_found=$(echo $word | tr ' ' '\\n' |\
    \ grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\n');\n    local vowel_found=$(echo\
    \ $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\\
    n');\n    local vowel_found=$(echo $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\"\
    \ | sort -n | tail -1 | tr -d '\\n');\n    local vowel_found=$(echo $word | tr\
    \ ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n | tail -1 | tr -d '\\n');\n    local\
    \ vowel_found=$(echo $word | tr ' ' '\\n' | grep -o \"[aeiouy]*\" | sort -n |\
    \ tail -1 | tr -d '\\n');\n    local vowel_found=$(echo $word | tr ' ' '\\n' |\
    \ grep -o \"[aeiouy]*\" | \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwec38fkz.sh: line 34: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwec38fkz.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u AE II OO UU\"\n    local vowels_count=${#vowels}\n    local vowels_string=${vowels:0:1}\n\
    \    local vowels_string_count=${#vowels_string}\n    local vowels_string_index=0\n\
    \    local vowels_string_index2=0\n    local vowels_string_index3=0\n    local\
    \ vowels_string_index4=0\n    local vowels_string_index5=0\n    local vowels_string_index6=0\n\
    \    local vowels_string_index7=0\n    local vowels_string_index8=0\n    local\
    \ vowels_string_index9=0\n    local vowels_string_index10=0\n    local vowels_string_index11=0\n\
    \    local vowels_string_index12=0\n    local vowels_string_index13=0\n    local\
    \ vowels_string_index14=0\n    local vowels_string_index15=0\n    local vowels_string_index16=0\n\
    \    local vowels_string_index17=0\n    local vowels_string_index18=0\n    local\
    \ vowels_string_index19=0\n    local vowels_string_index20=0\n    local vowels_string_index21=0\n\
    \    local vowels_string_index22=0\n    local vowels_string_index23=0\n    local\
    \ vowels_string_index24=0\n    local vowels_string_index25=0\n    local vowels_string_index26=0\n\
    \    local vowels_string_index27=0\n    local vowels_string_index28=0\n    local\
    \ vowels_string_index29=0\n    local vowels_string_index30=0\n    local vowels_string_index31=0\n\
    \    local vowels_string_index32=0\n    local vowels_string_index33=0\n    local\
    \ vowels_string_index34=0\n    local vowels_string_index35=0\n    local vowels_string_index36=0\n\
    \    local vowels_string_index37=0\n    local vowels_string_index38=0\n    local\
    \ vowels_string_index39=0\n    local vowels_string_index40=0\n    local vowels_string_index41=0\n\
    \    local vowels_string_index42=0\n    local vowels_string_index43=0\n    local\
    \ vowels_string_index44=0\n    local vowels_string_index45=0\n    local vowels_string_index46=0\n\
    \    local vowels_string_index47=0\n    local vowels_string_index48=0\n    local\
    \ vowels_string_index49=0\n    local vowels_string_index50=0\n    local vowels_string_index51=0\n\
    \    local vowel\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"\
    full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u\"\n  local string=\"$1\"\n  local vowel\n  local vowel_index\n  local\
    \ vowel_length\n  local vowel_found\n  local vowel_found_index\n  local vowel_found_length\n\
    \  local vowel_found_index\n  local vowel_found_count\n  local vowel_found_count_index\n\
    \  local vowel_found_count_length\n  local vowel_found_count_index\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n  local vowel_found_count_length\n  local vowel_found_count_length\n\
    \  local vowel_found_count_length\n}\n\ncandidate() {\n    get_closest_vowel \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n \
    \   [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n\
    \    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo \"$vowels\" | wc -l);\n    local\
    \ vowels_count_2=$(echo \"$vowels\" | wc -l | awk '{print $1}');\n    local vowels_count_3=$(echo\
    \ \"$vowels\" | wc -l | awk '{print $2}');\n    local vowels_count_4=$(echo \"\
    $vowels\" | wc -l | awk '{print $3}');\n    local vowels_count_5=$(echo \"$vowels\"\
    \ | wc -l | awk '{print $4}');\n    local vowels_count_6=$(echo \"$vowels\" |\
    \ wc -l | awk '{print $5}');\n    local vowels_count_7=$(echo \"$vowels\" | wc\
    \ -l | awk '{print $6}');\n    local vowels_count_8=$(echo \"$vowels\" | wc -l\
    \ | awk '{print $7}');\n    local vowels_count_9=$(echo \"$vowels\" | wc -l |\
    \ awk '{print $8}');\n    local vowels_count_10=$(echo \"$vowels\" | wc -l | awk\
    \ '{print $9}');\n    local vowels_count_11=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $10}');\n    local vowels_count_12=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $11}');\n    local vowels_count_13=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $12}');\n    local vowels_count_14=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $13}');\n    local vowels_count_15=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $14}');\n    local vowels_count_16=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $15}');\n    local vowels_count_17=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $16}');\n    local vowels_count_18=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $17}');\n    local vowels_count_19=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $18}');\n    local vowels_count_20=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $19}');\n    local vowels_count_21=$(echo \"$vowels\" | w\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn7p3p7co.sh: line 40: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn7p3p7co.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=${#vowels};\n    local vowels_str=\"\"\
    ;\n    local vowels_str_count=0\n    local vowels_str_len=0\n    local vowels_str_len_count=0\n\
    \    local vowels_str_len_index=0\n    local vowels_str_len_index_count=0\n  \
    \  local vowels_str_len_index_count2=0\n    local vowels_str_len_index_count3=0\n\
    \    local vowels_str_len_index_count4=0\n    local vowels_str_len_index_count5=0\n\
    \    local vowels_str_len_index_count6=0\n    local vowels_str_len_index_count7=0\n\
    \    local vowels_str_len_index_count8=0\n    local vowels_str_len_index_count9=0\n\
    \    local vowels_str_len_index_count10=0\n    local vowels_str_len_index_count11=0\n\
    \    local vowels_str_len_index_count12=0\n    local vowels_str_len_index_count13=0\n\
    \    local vowels_str_len_index_count14=0\n    local vowels_str_len_index_count15=0\n\
    \    local vowels_str_len_index_count16=0\n    local vowels_str_len_index_count17=0\n\
    \    local vowels_str_len_index_count18=0\n    local vowels_str_len_index_count19=0\n\
    \    local vowels_str_len_index_count20=0\n    local vowels_str_len_index_count21=0\n\
    \    local vowels_str_len_index_count22=0\n    local vowels_str_len_index_count23=0\n\
    \    local vowels_str_len_index_count24=0\n    local vowels_str_len_index_count25=0\n\
    \    local vowels_str_len_index_count26=0\n    local vowels_str_len_index_count27=0\n\
    \    local vowels_str_len_index_count28=0\n    local vowels_str_len_index_count29=0\n\
    \    local vowels_str_len_index_count30=0\n    local vowels_str_len_index_count31=0\n\
    \    local vowels_str_len_index_count32=0\n    local vowels_str_len_index_count33=0\n\
    \    local vowels_str_len_index_count34=0\n    local vowels_str_len_index_count35=0\n\
    \    local vowels_str_len_index_count36=0\n    local vowels_str_len_index_count37=0\n\
    \    local vowels_str_len_index_count38=0\n    local vowels_str_len_index_count39=0\n\
    \    local vowels_str_len_index_count40=0\n    local vowels_str_len_index_count\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_index=\"\
    \";\n    local vowel_start_index=\"\";\n    local vowel_end_index=\"\";\n    local\
    \ vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_index=0;\n    local vowel_start_index=0;\n    local vowel_end_index=0;\n\
    \    local vowel_start_index=0;\n    local vowel_end_index=0;\n    local vowel_start_index=0;\n\
    \    local vowel_end_\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_temp=0;\n    local vowel_positions_count_temp2=0;\n\
    \    local vowel_positions_count_temp3=0;\n    local vowel_positions_count_temp4=0;\n\
    \    local vowel_positions_count_temp5=0;\n    local vowel_positions_count_temp6=0;\n\
    \    local vowel_positions_count_temp7=0;\n    local vowel_positions_count_temp8=0;\n\
    \    local vowel_positions_count_temp9=0;\n    local vowel_positions_count_temp10=0;\n\
    \    local vowel_positions_count_temp11=0;\n    local vowel_positions_count_temp12=0;\n\
    \    local vowel_positions_count_temp13=0;\n    local vowel_positions_count_temp14=0;\n\
    \    local vowel_positions_count_temp15=0;\n    local vowel_positions_count_temp16=0;\n\
    \    local vowel_positions_count_temp17=0;\n    local vowel_positions_count_temp18=0;\n\
    \    local vowel_positions_count_temp19=0;\n    local vowel_positions_count_temp20=0;\n\
    \    local vowel_positions_count_temp21=0;\n    local vowel_positions_count_temp22=0;\n\
    \    local vowel_positions_count_temp23=0;\n    local vowel_positions_count_temp24=0;\n\
    \    local vowel_positions_count_temp25=0;\n    local vowel_positions_count_temp26=0;\n\
    \    local vowel_positions_count_temp27=0;\n    local vowel_positions_count_temp28=0;\n\
    \    local vowel_positions_count_temp29=0;\n    local vowel_positions_count_temp30=0;\n\
    \    local vowel_positions_count_temp31=0;\n    local vowel_positions_count_temp32=0;\n\
    \    local vowel_positions_count_temp33=0;\n    local vowel_positions_count_temp34=0;\n\
    \    local vowel_positions_count_temp35=0;\n    local vowel_positions_count_temp36=0;\n\
    \    local vowel_positions_count_temp37=0;\n    local vowel_positions_count_temp38=0;\n\
    \    local vowel_positions_count_temp39=0;\n    local vowel_positions_count_temp40=0;\n\
    \    local vowel_positions_count_temp41=0;\n    local vowel_positions_count_temp42=0;\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -l);\n    local vowels_count_2=$(echo\
    \ $vowels | wc -l | awk '{print $1}');\n    local vowels_count_3=$(echo $vowels\
    \ | wc -l | awk '{print $2}');\n    local vowels_count_4=$(echo $vowels | wc -l\
    \ | awk '{print $3}');\n    local vowels_count_5=$(echo $vowels | wc -l | awk\
    \ '{print $4}');\n    local vowels_count_6=$(echo $vowels | wc -l | awk '{print\
    \ $5}');\n    local vowels_count_7=$(echo $vowels | wc -l | awk '{print $6}');\n\
    \    local vowels_count_8=$(echo $vowels | wc -l | awk '{print $7}');\n    local\
    \ vowels_count_9=$(echo $vowels | wc -l | awk '{print $8}');\n    local vowels_count_10=$(echo\
    \ $vowels | wc -l | awk '{print $9}');\n    local vowels_count_11=$(echo $vowels\
    \ | wc -l | awk '{print $10}');\n    local vowels_count_12=$(echo $vowels | wc\
    \ -l | awk '{print $11}');\n    local vowels_count_13=$(echo $vowels | wc -l |\
    \ awk '{print $12}');\n    local vowels_count_14=$(echo $vowels | wc -l | awk\
    \ '{print $13}');\n    local vowels_count_15=$(echo $vowels | wc -l | awk '{print\
    \ $14}');\n    local vowels_count_16=$(echo $vowels | wc -l | awk '{print $15}');\n\
    \    local vowels_count_17=$(echo $vowels | wc -l | awk '{print $16}');\n    local\
    \ vowels_count_18=$(echo $vowels | wc -l | awk '{print $17}');\n    local vowels_count_19=$(echo\
    \ $vowels | wc -l | awk '{print $18}');\n    local vowels_count_20=$(echo $vowels\
    \ | wc -l | awk '{print $19}');\n    local vowels_count_21=$(echo $vowels | wc\
    \ -l | awk '{print $20}');\n    local vowels_count_22=$(echo $vowels | wc -l |\
    \ awk '{print $21}');\n    local vowels_count_23=$(\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpubx7xzv_.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmpubx7xzv_.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local vowels=\"\
    a e i o u y\";\n  local vowels_count=$(echo $vowels | wc -w)\n  local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_3=$(echo $vowels | wc -w)\n  local vowels_count_4=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_5=$(echo $vowels | wc -w)\n  local vowels_count_6=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_7=$(echo $vowels | wc -w)\n  local vowels_count_8=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_9=$(echo $vowels | wc -w)\n  local vowels_count_10=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_11=$(echo $vowels | wc -w)\n  local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_13=$(echo $vowels | wc -w)\n  local vowels_count_14=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_15=$(echo $vowels | wc -w)\n  local vowels_count_16=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_17=$(echo $vowels | wc -w)\n  local vowels_count_18=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_19=$(echo $vowels | wc -w)\n  local vowels_count_20=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_21=$(echo $vowels | wc -w)\n  local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_23=$(echo $vowels | wc -w)\n  local vowels_count_24=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_25=$(echo $vowels | wc -w)\n  local vowels_count_26=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_27=$(echo $vowels | wc -w)\n  local vowels_count_28=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_29=$(echo $vowels | wc -w)\n  local vowels_count_30=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_31=$(echo $vowels | wc -w)\n  local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n  local vowels_count_33=$(echo $vowels | wc -w)\n  local vowels_count_34\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo \"$vowels\" | wc -l);\n    local\
    \ vowels_count_2=$(echo \"$vowels\" | wc -l | awk '{print $1}');\n    local vowels_count_3=$(echo\
    \ \"$vowels\" | wc -l | awk '{print $2}');\n    local vowels_count_4=$(echo \"\
    $vowels\" | wc -l | awk '{print $3}')\n    local vowels_count_5=$(echo \"$vowels\"\
    \ | wc -l | awk '{print $4}')\n    local vowels_count_6=$(echo \"$vowels\" | wc\
    \ -l | awk '{print $5}')\n    local vowels_count_7=$(echo \"$vowels\" | wc -l\
    \ | awk '{print $6}')\n    local vowels_count_8=$(echo \"$vowels\" | wc -l | awk\
    \ '{print $7}')\n    local vowels_count_9=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $8}')\n    local vowels_count_10=$(echo \"$vowels\" | wc -l | awk '{print $9}')\n\
    \    local vowels_count_11=$(echo \"$vowels\" | wc -l | awk '{print $10}')\n \
    \   local vowels_count_12=$(echo \"$vowels\" | wc -l | awk '{print $11}')\n  \
    \  local vowels_count_13=$(echo \"$vowels\" | wc -l | awk '{print $12}')\n   \
    \ local vowels_count_14=$(echo \"$vowels\" | wc -l | awk '{print $13}')\n    local\
    \ vowels_count_15=$(echo \"$vowels\" | wc -l | awk '{print $14}')\n    local vowels_count_16=$(echo\
    \ \"$vowels\" | wc -l | awk '{print $15}')\n    local vowels_count_17=$(echo \"\
    $vowels\" | wc -l | awk '{print $16}')\n    local vowels_count_18=$(echo \"$vowels\"\
    \ | wc -l | awk '{print $17}')\n    local vowels_count_19=$(echo \"$vowels\" |\
    \ wc -l | awk '{print $18}')\n    local vowels_count_20=$(echo \"$vowels\" | wc\
    \ -l | awk '{print $19}')\n    local vowels_count_21=$(echo \"$vowels\" | wc -l\
    \ | awk '{print $20}')\n    local vowels_\n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043323
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_count=$(echo $vowels | wc\
    \ -l);\n    local vowel_found=\"\";\n    local vowel_position=\"\";\n    local\
    \ vowel_position_count=0;\n    local vowel_position_index=0;\n    local vowel_position_index2=0;\n\
    \    local vowel_position_index3=1;\n    local vowel_position_index4=2;\n    local\
    \ vowel_position_index5=3;\n    local vowel_position_index6=4;\n    local vowel_position_index7=5;\n\
    \    local vowel_position_index8=6;\n    local vowel_position_index9=7;\n    local\
    \ vowel_position_index10=8;\n    local vowel_position_index11=9;\n    local vowel_position_index12=10;\n\
    \    local vowel_position_index13=11;\n    local vowel_position_index14=12;\n\
    \    local vowel_position_index15=13;\n    local vowel_position_index16=14;\n\
    \    local vowel_position_index17=15;\n    local vowel_position_index18=16;\n\
    \    local vowel_position_index19=17;\n    local vowel_position_index20=18;\n\
    \    local vowel_position_index21=19;\n    local vowel_position_index22=20;\n\
    \    local vowel_position_index23=21;\n    local vowel_position_index24=22;\n\
    \    local vowel_position_index25=23;\n    local vowel_position_index26=24;\n\
    \    local vowel_position_index27=25;\n    local vowel_position_index28=26;\n\
    \    local vowel_position_index29=27;\n    local vowel_position_index30=28;\n\
    \    local vowel_position_index31=29;\n    local vowel_position_index32=30;\n\
    \    local vowel_position_index33=31;\n    local vowel_position_index34=32;\n\
    \    local vowel_position_index35=33;\n    local vowel_position_index36=34;\n\
    \    local vowel_position_index37=35;\n    local vowel_position_index38=36;\n\
    \    local vowel_position_index39=37;\n    local vowel_position_index40=38;\n\
    \    local vowel_position_index41=39;\n    local vowel_position_index42=40;\n\
    \    local vowel_position_index43=41;\n    local vowel_position_index44=42;\n\n\
    }\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_found_index=\"\
    \";\n    local vowel_index=\"\";\n    local vowel_found_index2=\"\";\n    local\
    \ vowel_index2=\"\";\n    local vowel_found_index3=\"\";\n    local vowel_index3=\"\
    \";\n    local vowel_found_index4=\"\";\n    local vowel_index4=\"\";\n    local\
    \ vowel_found_index5=\"\";\n    local vowel_index5=\"\";\n    local vowel_found_index6=\"\
    \";\n    local vowel_index6=\"\";\n    local vowel_found_index7=\"\";\n    local\
    \ vowel_index7=\"\";\n    local vowel_found_index8=\"\";\n    local vowel_index8=\"\
    \";\n    local vowel_found_index9=\"\";\n    local vowel_index9=\"\";\n    local\
    \ vowel_found_index10=\"\";\n    local vowel_index10=\"\";\n    local vowel_found_index11=\"\
    \";\n    local vowel_index11=\"\";\n    local vowel_found_index12=\"\";\n    local\
    \ vowel_index12=\"\";\n    local vowel_found_index13=\"\";\n    local vowel_index13=\"\
    \";\n    local vowel_found_index14=\"\";\n    local vowel_index14=\"\";\n    local\
    \ vowel_found_index15=\"\";\n    local vowel_index15=\"\";\n    local vowel_found_index16=\"\
    \";\n    local vowel_index16=\"\";\n    local vowel_found_index17=\"\";\n    local\
    \ vowel_index17=\"\";\n    local vowel_found_index18=\"\";\n    local vowel_index18=\"\
    \";\n    local vowel_found_index19=\"\";\n    local vowel_index19=\"\";\n    local\
    \ vowel_found_index20=\"\";\n    local vowel_index20=\"\";\n    local vowel_found_index21=\"\
    \";\n    local vowel_index21=\"\";\n    local vowel_found_index22=\"\";\n    local\
    \ vowel_index22=\"\";\n    local vowel_found_index23=\"\";\n    local vowel_index23=\"\
    \";\n    local vowel_found_index24=\"\";\n    local vowel_index24=\"\";\n    local\
    \ vowel_found_index25=\"\";\n    local vowel_index25=\"\";\n    local vowel_found_index26=\"\
    \";\n    local vowel_index26=\"\";\n    local vowel_found_index27=\"\";\n    local\
    \ vowel_index27=\"\";\n    local \n}\n\ncandidate() {\n    get_closest_vowel \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n \
    \   [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n\
    \    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n\
    \    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\"\
    \ ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\"\
    \ ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") =\
    \ \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043323
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_found=\"\";\n    local vowel_position=\"\
    \";\n    local vowel_positions=\"\";\n    local vowel_positions_count=0;\n   \
    \ local vowel_positions_count_max=0;\n    local vowel_positions_count_min=0;\n\
    \    local vowel_positions_count_min_index=0;\n    local vowel_positions_count_max_index=0;\n\
    \    local vowel_positions_count_min_indexes=\"\";\n    local vowel_positions_count_max_indexes=\"\
    \";\n    local vowel_positions_count_min_chars=\"\";\n    local vowel_positions_count_max_chars=\"\
    \";\n    local vowel_positions_count_min_chars_count=0;\n    local vowel_positions_count_max_chars_count=0;\n\
    \    local vowel_positions_count_min_chars_count_max=0;\n    local vowel_positions_count_min_chars_count_min=0;\n\
    \    local vowel_positions_count_min_chars_count_min_index=0;\n    local vowel_positions_count_min_chars_count_max_index=0;\n\
    \    local vowel_positions_count_min_chars_count_min_indexes=\"\";\n    local\
    \ vowel_positions_count_min_chars_count_max_indexes=\"\";\n    local vowel_positions_count_min_chars_count_min_chars=\"\
    \";\n    local vowel_positions_count_min_chars_count_max_chars=\"\";\n    local\
    \ vowel_positions_count_min_chars_count_min_chars_count=0;\n    local vowel_positions_count_min_chars_count_max_chars_count=0;\n\
    \    local vowel_positions_count_min_chars_count_min_chars_count_max=0;\n    local\
    \ vowel_positions_count_min_chars_count_min_chars_count_min=0;\n    local vowel_positions_count_min_chars_count_min_chars_count_min_index=0;\n\
    \    local vowel_positions_count_min_chars_count_min_chars_count_max_index=0;\n\
    \    local vowel_positions_count_min_chars_count_min_chars_count_min_indexes=\"\
    \";\n    local vowel_positions_count_min_chars_count_min_chars_count_max_indexes=\"\
    \";\n    local vowel_positions_count_min_chars_count_min_chars_count_min_chars=\"\
    \";\n    local vowel_positions_count_min_chars_count_min_chars_count_max_chars=\"\
    \";\n    local vowel_positions_count_min_chars_count_min_chars_count_min_chars_count=0;\n\
    \    local vowel_positions_count_min_chars_count_min_chars_\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043323
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local str=\"$1\"\n    local vowel\n    local vowel_count\n  \
    \  local vowel_index\n    local vowel_found\n    local vowel_found_index\n   \
    \ local vowel_found_index2\n    local vowel_found_index3\n    local vowel_found_index4\n\
    \    local vowel_found_index5\n    local vowel_found_index6\n    local vowel_found_index7\n\
    \    local vowel_found_index8\n    local vowel_found_index9\n    local vowel_found_index10\n\
    \    local vowel_found_index11\n    local vowel_found_index12\n    local vowel_found_index13\n\
    \    local vowel_found_index14\n    local vowel_found_index15\n    local vowel_found_index16\n\
    \    local vowel_found_index17\n    local vowel_found_index18\n    local vowel_found_index19\n\
    \    local vowel_found_index20\n    local vowel_found_index21\n    local vowel_found_index22\n\
    \    local vowel_found_index23\n    local vowel_found_index24\n    local vowel_found_index25\n\
    \    local vowel_found_index26\n    local vowel_found_index27\n    local vowel_found_index28\n\
    \    local vowel_found_index29\n    local vowel_found_index30\n    local vowel_found_index31\n\
    \    local vowel_found_index32\n    local vowel_found_index33\n    local vowel_found_index34\n\
    \    local vowel_found_index35\n    local vowel_found_index36\n    local vowel_found_index37\n\
    \    local vowel_found_index38\n    local vowel_found_index39\n    local vowel_found_index40\n\
    \    local vowel_found_index41\n    local vowel_found_index42\n    local vowel_found_index43\n\
    \    local vowel_found_index44\n    local vowel_found_index45\n    local vowel_found_index46\n\
    \    local vowel_found_index47\n    local vowel_found_index48\n    local vowel_found_index49\n\
    \    local vowel_found_index50\n    local vowel_found_index51\n    local vowel_found_index52\n\
    \    local vowel_found_index53\n    local vowel_found_index54\n    local vowel_found_index55\n\
    \    local vowel_found_index56\n    local vowel_found_index57\n    local vowel_found_index58\n\
    \    local vowel_found_index59\n    local vowel_found\n}\n\ncandidate() {\n  \
    \  get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo \"$vowels\" | wc -l);\n    local\
    \ vowels_count_2=$(echo \"$vowels\" | wc -l | awk '{print $1}');\n    local vowels_count_3=$(echo\
    \ \"$vowels\" | wc -l | awk '{print $2}');\n    local vowels_count_4=$(echo \"\
    $vowels\" | wc -l | awk '{print $3}');\n    local vowels_count_5=$(echo \"$vowels\"\
    \ | wc -l | awk '{print $4}');\n    local vowels_count_6=$(echo \"$vowels\" |\
    \ wc -l | awk '{print $5}');\n    local vowels_count_7=$(echo \"$vowels\" | wc\
    \ -l | awk '{print $6}');\n    local vowels_count_8=$(echo \"$vowels\" | wc -l\
    \ | awk '{print $7}');\n    local vowels_count_9=$(echo \"$vowels\" | wc -l |\
    \ awk '{print $8}');\n    local vowels_count_10=$(echo \"$vowels\" | wc -l | awk\
    \ '{print $9}');\n    local vowels_count_11=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $10}');\n    local vowels_count_12=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $11}');\n    local vowels_count_13=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $12}');\n    local vowels_count_14=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $13}');\n    local vowels_count_15=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $14}');\n    local vowels_count_16=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $15}');\n    local vowels_count_17=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $16}');\n    local vowels_count_18=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $17}');\n    local vowels_count_19=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $18}');\n    local vowels_count_20=$(echo \"$vowels\" | wc -l | awk '{print\
    \ $19}');\n    local vowels_count_21=$(echo \"$vowels\" | w\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn7p3p7co.sh: line 40: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn7p3p7co.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 2
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local word=$1;\n    local vowel_count=$(echo $word | tr -cd\
    \ \"$vowels\" | wc -c);\n    local vowel_position=$(echo $word | tr -cd \"$vowels\"\
    \ | sed -n 's/^[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\\
    ([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\\
    )[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\\
    ([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\\
    )[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\\
    ([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\\
    )[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\\
    ([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\\
    )[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\\
    ([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\)[^aeiouy]*\\([aeiouy]*\\\
    )[^aeiouy]*\\([aeiouy\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfpdf9ku1.sh: line 22: unexpected EOF while looking for matching
    `''''

    /tmp/tmpfpdf9ku1.sh: line 47: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel\n    local vowel_count\n\
    \    local vowel_index\n    local vowel_found\n    local vowel_position\n    local\
    \ vowel_position_index\n    local vowel_position_count\n    local vowel_position_count2\n\
    \    local vowel_position_count3\n    local vowel_position_count4\n    local vowel_position_count5\n\
    \    local vowel_position_count6\n    local vowel_position_count7\n    local vowel_position_count8\n\
    \    local vowel_position_count9\n    local vowel_position_count10\n    local\
    \ vowel_position_count11\n    local vowel_position_count12\n    local vowel_position_count13\n\
    \    local vowel_position_count14\n    local vowel_position_count15\n    local\
    \ vowel_position_count16\n    local vowel_position_count17\n    local vowel_position_count18\n\
    \    local vowel_position_count19\n    local vowel_position_count20\n    local\
    \ vowel_position_count21\n    local vowel_position_count22\n    local vowel_position_count23\n\
    \    local vowel_position_count24\n    local vowel_position_count25\n    local\
    \ vowel_position_count26\n    local vowel_position_count27\n    local vowel_position_count28\n\
    \    local vowel_position_count29\n    local vowel_position_count30\n    local\
    \ vowel_position_count31\n    local vowel_position_count32\n    local vowel_position_count33\n\
    \    local vowel_position_count34\n    local vowel_position_count35\n    local\
    \ vowel_position_count36\n    local vowel_position_count37\n    local vowel_position_count38\n\
    \    local vowel_position_count39\n    local vowel_position_count40\n    local\
    \ vowel_position_count41\n    local vowel_position_count42\n    local vowel_position_count43\n\
    \    local vowel_position_count44\n    local vowel_position_count45\n    local\
    \ vowel_position_count46\n    local vowel_position_count47\n    local vowel_position_count48\n\
    \    local vowel_position_count49\n    local vowel_position_count50\n    local\
    \ vowel_position_count51\n    local vowel_position_count52\n    local vowel_position_count53\n\
    \    local vowel_position_count54\n    local vowel_position_count55\n    local\
    \ vowel_position_count56\n    local vowel_position_count57\n    local vowel_position_count58\n\
    \n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
    u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") =\
    \ \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\")\
    \ = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\"\
    ) = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\"\
    ) = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\"\
    ) = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u y\";\n    local vowels_count=$(echo $vowels | wc -w)\n    local vowels_count_2=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_3=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_4=$(echo $vowels | wc -w)\n    local vowels_count_5=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_6=$(echo $vowels | wc -w)\n    local vowels_count_7=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_8=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_9=$(echo $vowels | wc -w)\n    local vowels_count_10=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_11=$(echo $vowels | wc -w)\n    local vowels_count_12=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_13=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_14=$(echo $vowels | wc -w)\n    local vowels_count_15=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_16=$(echo $vowels | wc -w)\n    local vowels_count_17=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_18=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_19=$(echo $vowels | wc -w)\n    local vowels_count_20=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_21=$(echo $vowels | wc -w)\n    local vowels_count_22=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_23=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_24=$(echo $vowels | wc -w)\n    local vowels_count_25=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_26=$(echo $vowels | wc -w)\n    local vowels_count_27=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_28=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_29=$(echo $vowels | wc -w)\n    local vowels_count_30=$(echo $vowels\
    \ | wc -w)\n    local vowels_count_31=$(echo $vowels | wc -w)\n    local vowels_count_32=$(echo\
    \ $vowels | wc -w)\n    local vowels_count_33=$(echo $vowels | wc -w)\n    local\
    \ vowels_count_34\n}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate\
    \ \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate\
    \ \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate\
    \ \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate\
    \ \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate\
    \ \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate\
    \ \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043322
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local word=$1\n    local vowel_found=\"\"\n    local vowel_found_index=0\n\
    \    local vowel_index=0\n    local consonant_index=0\n    local consonant_found=\"\
    \"\n    local consonant_found_index=0\n    local consonant_count=0\n    local\
    \ consonant_count2=0\n    local consonant_count3=0\n    local consonant_count4=0\n\
    \    local consonant_count5=0\n    local consonant_count6=0\n    local consonant_count7=0\n\
    \    local consonant_count8=0\n    local consonant_count9=0\n    local consonant_count10=0\n\
    \    local consonant_count11=0\n    local consonant_count12=0\n    local consonant_count13=0\n\
    \    local consonant_count14=0\n    local consonant_count15=0\n    local consonant_count16=0\n\
    \    local consonant_count17=0\n    local consonant_count18=0\n    local consonant_count19=0\n\
    \    local consonant_count20=0\n    local consonant_count21=0\n    local consonant_count22=0\n\
    \    local consonant_count23=0\n    local consonant_count24=0\n    local consonant_count25=0\n\
    \    local consonant_count26=0\n    local consonant_count27=0\n    local consonant_count28=0\n\
    \    local consonant_count29=0\n    local consonant_count30=0\n    local consonant_count31=0\n\
    \    local consonant_count32=0\n    local consonant_count33=0\n    local consonant_count34=0\n\
    \    local consonant_count35=0\n    local consonant_count36=0\n    local consonant_count37=0\n\
    \    local consonant_count38=0\n    local consonant_count39=0\n    local consonant_count40=0\n\
    \    local consonant_count41=0\n    local consonant_count42=0\n    local consonant_count43=0\n\
    \    local consonant_count44=0\n    local consonant_count45=0\n    local consonant_count46=0\n\
    \    local consonant_count47=0\n    local consonant_count48=0\n    local consonant_count49=0\n\
    \    local consonant_count50=0\n    \n}\n\ncandidate() {\n    get_closest_vowel\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n\
    \    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\"\
    \ ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\
    \" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") =\
    \ \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") =\
    \ \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\"\
    ) = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\"\
    ) = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043323
- exit_code: 1
  program: "#!/bin/bash\n# You are given a word. Your task is to find the closest\
    \ vowel that stands between \n# two consonants from the right side of the word\
    \ (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n# find any vowel met the above condition. \n# You\
    \ may assume that the given string contains English letter only.\n# Example:\n\
    # >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\"\
    )\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel\
    \ \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel_found=\"\"\n    local vowel_position=\"\
    \"\n    local vowel_position_count=0\n    local vowel_position_index=0\n    local\
    \ vowel_position_index2=0\n    local vowel_position_index3=0\n    local vowel_position_index4=0\n\
    \    local vowel_position_index5=0\n    local vowel_position_index6=0\n    local\
    \ vowel_position_index7=0\n    local vowel_position_index8=0\n    local vowel_position_index9=0\n\
    \    local vowel_position_index10=0\n    local vowel_position_index11=0\n    local\
    \ vowel_position_index12=0\n    local vowel_position_index13=0\n    local vowel_position_index14=0\n\
    \    local vowel_position_index15=0\n    local vowel_position_index16=0\n    local\
    \ vowel_position_index17=0\n    local vowel_position_index18=0\n    local vowel_position_index19=0\n\
    \    local vowel_position_index20=0\n    local vowel_position_index21=0\n    local\
    \ vowel_position_index22=0\n    local vowel_position_index23=0\n    local vowel_position_index24=0\n\
    \    local vowel_position_index25=0\n    local vowel_position_index26=0\n    local\
    \ vowel_position_index27=0\n    local vowel_position_index28=0\n    local vowel_position_index29=0\n\
    \    local vowel_position_index30=0\n    local vowel_position_index31=0\n    local\
    \ vowel_position_index32=0\n    local vowel_position_index33=0\n    local vowel_position_index34=0\n\
    \    local vowel_position_index35=0\n    local vowel_position_index36=0\n    local\
    \ vowel_position_index37=0\n    local vowel_position_index38=0\n    local vowel_position_index39=0\n\
    \    local vowel_position_index40=0\n    local vowel_position_index41=0\n    local\
    \ vowel_position_index42=0\n    local vowel_position_index43=0\n    local vowel_position_index44=0\n\
    \    local vowel_position_index45=0\n    local vowel_position_index46=0\n    local\
    \ vowel_position_index47=0\n    local vowel_position_index48=0\n    local vowel_position_index49=0\n\
    \    local vowel_position_index50=0\n    local vowel_position_index51=0\n    local\
    \ vowel_position_index52=0\n    local vowel_position_index53\n}\n\ncandidate()\
    \ {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate\
    \ \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate\
    \ \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate\
    \ \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate\
    \ \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate\
    \ \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate\
    \ \"Above\") = \"o\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660043323
