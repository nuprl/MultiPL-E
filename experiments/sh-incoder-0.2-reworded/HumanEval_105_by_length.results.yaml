language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local arr=($1)\n    local result=()\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n   \
    \ local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local\
    \ K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n\
    \    local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n \
    \   local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n  \
    \  local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n   \
    \ local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n   \
    \ local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local\
    \ K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n\
    \    local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n \
    \   local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n  \
    \  local a=0\n    local b=0\n    local c\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local j\n    local output\n    local name\n\
    \    local num\n    local nums\n    local nums_str\n    local nums_strs\n    local\
    \ nums_strs_str\n    local nums_strs_strs\n    local nums_strs_strs_str\n    local\
    \ nums_strs_strs_strs\n    local nums_strs_strs_strs_str\n    local nums_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_str\n    local nums_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_str\n    local nums_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_str\n    local nums_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_str\n    local nums_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_strs_str\n    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n    local\
    \ nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local nums_strs_strs_strs_strs_strs_strs_strs_strs_str\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr=( $1 )\n    local -a result=( )\n    local i\n    local j\n    local\
    \ length\n    local name\n    local num\n    local tmp\n    local tmp2\n    local\
    \ tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local\
    \ tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n  \
    \  local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    \n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -a digits_reversed=()\n    local -a digits_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplynnf876.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        j=$((${#arr[@]} - i - 1))\n        result+=(\"${arr[j]}\"\
    )\n    done\n    local -n tmp=${result[@]}\n    for ((i=0; i<${#tmp[@]}; i++));\
    \ do\n        tmp[i]=$(printf \"\\\"%s\\\"\" ${tmp[i]})\n    done\n    IFS=' '\
    \ read -ra arr <<< \"${tmp[*]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpeo4qd1r6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpeo4qd1r6.sh: line 25: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -n digits=${arr[@]}\n    local -i j=0\n    local\
    \ -i k=0\n    local -i len=${#digits[@]}\n    local -i i\n    local -i j\n   \
    \ local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n\
    \    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i\
    \ len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i i\n   \
    \ local -i j\n    local -i k\n    local -i len\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i\
    \ k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n \
    \   local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i len\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i len\n    local -i i\n    local -i j\n   \
    \ local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n\
    \    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i\
    \ len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i i\n   \
    \ local -i j\n    local -i k\n    local -i len\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i\
    \ k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n \
    \   local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaviodo50.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpaviodo50.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -i i\n    local\
    \ j\n    for (( i = 0; i < ${#arr[@]}; i++ )); do\n        local -a tmp\n    \
    \    for (( j = (${#arr[@]} - 1) - i; j >= 0; j-- )); do\n            tmp=(\"\
    ${arr[j]}\")\n            if [[ ${tmp[0]} -ge 1 ]] && [[ ${tmp[0]} -le 9 ]]; then\n\
    \                tmp[0]=\"${names[${tmp[0]}]}\"\n            fi\n            result+=(\"\
    ${tmp[@]}\")\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp925ro199.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i = 0; i < ${#arr[@]}; i++ ));\
    \ do\n        local -n num=${arr[i]}\n        if (( num > 9 )); then\n       \
    \     local -n num=${num/9/10}\n            local -n num=${num/10}\n         \
    \   local -n num=${num/10/10}\n            local -n num=${num/10/10}\n       \
    \     local -n num=${num/10/10}\n            local -n num=${num/10/10}\n     \
    \       local -n num=${num/10/10}\n            local -n num=${num/10/10}\n   \
    \         local -n num=${num/10/10}\n            local -n num=${num/10/10}\n \
    \           local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            local -n num=${num/10/10}\n            local -n num=${num/10/10}\n\
    \            \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphfvbooyg.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmphfvbooyg.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | cut -d ' ' -f $((${#array[@]}-1)) |\n        sed 's/^/\"/; s/$/\"\
    /; s/^/\"/; s/$/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppluesuyo.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmppluesuyo.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ name\n    local number\n    local lengths\n    local length\n    local length_index\n\
    \    local length_index2\n    local length_index3\n    local length_index4\n \
    \   local length_index5\n    local length_index6\n    local length_index7\n  \
    \  local length_index8\n    local length_index9\n    local length_index10\n  \
    \  local length_index11\n    local length_index12\n    local length_index13\n\
    \    local length_index14\n    local length_index15\n    local length_index16\n\
    \    local length_index17\n    local length_index18\n    local length_index19\n\
    \    local length_index20\n    local length_index21\n    local length_index22\n\
    \    local length_index23\n    local length_index24\n    local length_index25\n\
    \    local length_index26\n    local length_index27\n    local length_index28\n\
    \    local length_index29\n    local length_index30\n    local length_index31\n\
    \    local length_index32\n    local length_index33\n    local length_index34\n\
    \    local length_index35\n    local length_index36\n    local length_index37\n\
    \    local length_index38\n    local length_index39\n    local length_index40\n\
    \    local length_index41\n    local length_index42\n    local length_index43\n\
    \    local length_index44\n    local length_index45\n    local length_index46\n\
    \    local length_index47\n    local length_index48\n    local length_index49\n\
    \    local length_index50\n    local length_index51\n    local length_index52\n\
    \    local length_index53\n    local length_index54\n    local length_index55\n\
    \    local length_index56\n    local length_index57\n    local length_index58\n\
    \    local length_index59\n    local length_index60\n    local length_index61\n\
    \    local length_index62\n    local length_index63\n    local length_index64\n\
    \    local length_index65\n    local length_index66\n    local length_index67\n\
    \    local length_index68\n    local length_index69\n    local length_index70\n\
    \    local length_index71\n    local length_index72\n    local length_index73\n\
    \    local length_index74\n    local length_index75\n    local length_index76\n\
    \    local length_index77\n    local length_index78\n    local length_index\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | awk -F'[ ]' '{ print $2 }' |\n    awk -v l=\"$length\" '{ print\
    \ $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\"\
    \ '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"\
    $length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk\
    \ -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n\
    \    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print\
    \ $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\"\
    \ '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"\
    $length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk\
    \ -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n\
    \    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print\
    \ $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\"\
    \ '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"\
    $length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk\
    \ -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n\
    \    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\" '{ print\
    \ $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n    awk -v l=\"$length\"\
    \ '{ print $1 }' |\n    awk -v l=\"$length\" '{ print $1 }' |\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpihxfv_08.sh: line 20: unexpected EOF while looking for matching
    `)''

    /tmp/tmpihxfv_08.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a\
    \ digits=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    for\
    \ ((i=0; i < ${#arr[@]}; i++)); do\n        local j\n        for ((j=0; j < ${#digits[@]};\
    \ j++)); do\n            if [[ ${arr[$i]} -ge ${digits[$j]} && ${arr[$i]} -le\
    \ ${digits[$j+1]} ]]; then\n                result+=(\"\\\"${names[${arr[$i]}]}\\\
    \"\")\n                break\n            fi\n        done\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyfdc9trd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ lengths=$(echo \"$numbers\" | tr ' ' '\\n' | sort -n | uniq -c | sort -n | awk\
    \ '{print $2}')\n  local result=()\n  for length in $lengths; do\n    local numbers=$(echo\
    \ \"$numbers\" | sed \"s/^.\\{${length}\\}\\([0-9]\\)/\\\"\\1\\\"/\" | tr '\\\
    n' ' ')\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=(\"${1//[[:space:]]/}\"\
    )\n    local -a result=()\n    local -i i\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        local -a arr2=(\"${arr[i]//[[:digit:]]/}\")\n        if (( ${#arr2[@]}\
    \ > 0 )); then\n            local -a arr3=(\"${arr2[@]:0:9}\")\n            local\
    \ -a arr4=(\"${arr2[@]:9}\")\n            arr3=(${arr3[@]} \"${arr4[@]}\")\n \
    \           arr3=(${arr3[@]:0:9} \"${arr3[@]:9}\")\n            arr3=(${arr3[@]:0:1}\
    \ \"${arr3[@]:1}\")\n            result+=(\"${arr3[@]}\")\n        fi\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local digit\n    local length\n    local\
    \ name\n    local tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n\
    \    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n\
    \    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n\
    \    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n\
    \    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n\
    \    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n\
    \    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n\
    \    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n\
    \    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n\
    \    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n\
    \    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n\
    \    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n\
    \    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n\
    \    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n\
    \    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n\
    \    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n\
    \    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n\
    \    local -a tmp69\n    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfxvg_yn5.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph747qrqs.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -a lengths\n    local -a nums\n\
    \    local -a num\n    local -a numlen\n    local -a numlens\n    local -a numlenlen\n\
    \    local -a numlenlens\n    local -a numlenlenlen\n    local -a numlenlenlens\n\
    \    local -a numlenlenlenlen\n    local -a numlenlenlenlens\n    local -a numlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlens\n    local -a numlenlenlenlenlenlen\n    local\
    \ -a numlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlen\n    local\
    \ -a numlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlenlens\n    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local -a numlenlenlenlenlenlenlenlenlenlenlenlenlenlenlens\n    local -a\
    \ numlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmqyqghzx.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -i i\n  local -a names\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n  local -a length\n  local -a lengths\n  local -a length\n\
    \  local -a lengths\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4074ywb6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ names=()\n  local lengths=()\n  local result=()\n  local i\n  local j\n  local\
    \ length\n  local number\n  local name\n  local length\n  local lengths\n  local\
    \ numbers\n  local names\n  local result\n  local i\n  local j\n  local length\n\
    \  local number\n  local name\n  local length\n  local lengths\n  local numbers\n\
    \  local names\n  local result\n  local i\n  local j\n  local length\n  local\
    \ number\n  local name\n  local length\n  local lengths\n  local numbers\n  local\
    \ names\n  local result\n  local i\n  local j\n  local length\n  local number\n\
    \  local name\n  local length\n  local lengths\n  local numbers\n  local names\n\
    \  local result\n  local i\n  local j\n  local length\n  local number\n  local\
    \ name\n  local length\n  local lengths\n  local numbers\n  local names\n  local\
    \ result\n  local i\n  local j\n  local length\n  local number\n  local name\n\
    \  local length\n  local lengths\n  local numbers\n  local names\n  local result\n\
    \  local i\n  local j\n  local length\n  local number\n  local name\n  local length\n\
    \  local lengths\n  local numbers\n  local names\n  local result\n  local i\n\
    \  local j\n  local length\n  local number\n  local name\n  local length\n  local\
    \ lengths\n  local numbers\n  local names\n  local result\n  local i\n  local\
    \ j\n  local length\n  local number\n  local name\n  local length\n  local lengths\n\
    \  local numbers\n  local names\n  local result\n  local i\n  local j\n  local\
    \ length\n  local number\n  local name\n  local length\n  local lengths\n  local\
    \ numbers\n  local names\n  local result\n  local i\n  local j\n  local length\n\
    \  local number\n  local name\n  local length\n  local lengths\n  local numbers\n\
    \  local names\n  local result\n  local i\n  local j\n  local length\n  local\
    \ number\n  local name\n  local length\n  local lengths\n  local numbers\n  local\
    \ names\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | cut -d ' ' -f \"$length\")\n    IFS=$' \\t\\n'\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -n i=0 j=0\n    for\
    \ (( i=0; i<${#arr[@]}; i++ )); do\n        if (( ${arr[i]} >= 1 && ${arr[i]}\
    \ <= 9 )); then\n            result[j]=${names[${arr[i]}]}\n            j=$((\
    \ j + 1 ))\n        fi\n    done\n    IFS=$'\\n' echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjr_z_2ac.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpjr_z_2ac.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmpjr_z_2ac.sh: line 20: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local length\n    local digit\n    local name\n\
    \    local number\n    local j\n    local lengths\n    local length\n    local\
    \ number\n    local numbers=${numbers//[[:space:]]/}\n    local lengths=${#numbers}\n\
    \    local length\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    local number\n    local number\n    local\
    \ number\n    local number\n    local number\n    local number\n    local number\n\
    \    local number\n    local number\n    \n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ names=()\n    local i\n    local j\n    local len\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n\
    \    local tmp98\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a res=()\n    local -i i\n    for (( i=1; i<${#arr[@]}; i++ )); do\n\
    \        local j\n        for (( j=1; j<=9; j++ )); do\n            local k\n\
    \            for (( k=0; k<10; k++ )); do\n                local -n num=${arr[$((i*10+j+k))]}\n\
    \                if [[ ${num:0:1} == ${num:0:1} && ${num:0:1} == ${num:0:1} ]];\
    \ then\n                    res+=(\"\\\"${num:1}\\\"\")\n                    break\n\
    \                fi\n            done\n        done\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1pspvg1k.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -a result\n    local -a tmp\n    local -i len\n    local\
    \ -i i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n    local C\n    local D\n    local E\n    local F\n    local\
    \ G\n    local H\n    local I\n    local J\n    local K\n    local L\n    local\
    \ M\n    local N\n    local O\n    local P\n    local Q\n    local R\n    local\
    \ S\n    local T\n    local U\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        if (( ${arr[i]} >= 1 && ${arr[i]} <= 9 ));\
    \ then\n            result+=(\"\\\"${names[${arr[i]}]}\\\"\") # add quotes around\
    \ the name\n        fi\n    done\n    if (( ${#result[@]} > 0 )); then\n     \
    \   echo \"${result[@]}\"\n    else\n        echo \"\"\n    fi\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpehdlj4vg.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -a lengths=()\n    local -a length\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjtixrgd2.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -n digits=$2\n  local -i i\n  local digit\n  local length\n\
    \  local name\n  local -n digits_array=()\n  local -n digits_array2=()\n  local\
    \ -n digits_array3=()\n  local -n digits_array4=()\n  local -n digits_array5=()\n\
    \  local -n digits_array6=()\n  local -n digits_array7=()\n  local -n digits_array8=()\n\
    \  local -n digits_array9=()\n  local -n digits_array10=()\n  local -n digits_array11=()\n\
    \  local -n digits_array12=()\n  local -n digits_array13=()\n  local -n digits_array14=()\n\
    \  local -n digits_array15=()\n  local -n digits_array16=()\n  local -n digits_array17=()\n\
    \  local -n digits_array18=()\n  local -n digits_array19=()\n  local -n digits_array20=()\n\
    \  local -n digits_array21=()\n  local -n digits_array22=()\n  local -n digits_array23=()\n\
    \  local -n digits_array24=()\n  local -n digits_array25=()\n  local -n digits_array26=()\n\
    \  local -n digits_array27=()\n  local -n digits_array28=()\n  local -n digits_array29=()\n\
    \  local -n digits_array30=()\n  local -n digits_array31=()\n  local -n digits_array32=()\n\
    \  local -n digits_array33=()\n  local -n digits_array34=()\n  local -n digits_array35=()\n\
    \  local -n digits_array36=()\n  local -n digits_array37=()\n  local -n digits_array38=()\n\
    \  local -n digits_array39=()\n  local -n digits_array40=()\n  local -n digits_array41=()\n\
    \  local -n digits_array42=()\n  local -n digits_array43=()\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkp4fez2w.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpkp4fez2w.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpkp4fez2w.sh: line 24: local: digits_array: reference variable cannot be
    an array

    /tmp/tmpkp4fez2w.sh: line 25: local: digits_array2: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 26: local: digits_array3: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 27: local: digits_array4: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 28: local: digits_array5: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 29: local: digits_array6: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 30: local: digits_array7: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 31: local: digits_array8: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 32: local: digits_array9: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 33: local: digits_array10: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 34: local: digits_array11: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 35: local: digits_array12: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 36: local: digits_array13: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 37: local: digits_array14: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 38: local: digits_array15: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 39: local: digits_array16: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 40: local: digits_array17: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 41: local: digits_array18: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 42: local: digits_array19: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 43: local: digits_array20: reference variable cannot
    be an array

    /tmp/tmpkp4fez2w.sh: line 44: local: digits_array21: reference variable canno'
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr\n    local -a names\n    local -a tmp\n    local -a result\n    local\
    \ -i i\n    local j\n    local len\n    local name\n    local num\n    local str\n\
    \    local t\n\n    arr=( $1 )\n    len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n\
    \        arr=()\n    fi\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n\
    \    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ }\
    \ )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/ } )\n    arr=( ${arr[@]/%/\
    \ } )\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ result=()\n  local digits=${#arr[@]}\n  local digit\n  local i\n  local j\n\
    \  local k\n  local length\n  local name\n  local tmp\n  local tmp2\n  local tmp3\n\
    \  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local\
    \ tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n\
    \  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n \
    \ local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local\
    \ tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n\
    \  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n \
    \ local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local\
    \ tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n\
    \  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n \
    \ local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local\
    \ tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n\
    \  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n \
    \ local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local\
    \ tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n\
    \  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n \
    \ local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local\
    \ tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local j\n    local length\n    local number\n\
    \    local name\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a tmp=()\n    local i j k l m\n\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        tmp=()\n        for ((j=0; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[j]} -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n  \
    \              tmp+=(\"${arr[j]}\")\n            fi\n        done\n        k=${#tmp[@]}\n\
    \        for ((j=0; j<${#tmp[@]}; j++)); do\n            if [[ ${tmp[j]} -ge 1\
    \ ]] && [[ ${tmp[j]} -le 9 ]]; then\n                tmp[j]=${tmp[j]}-${k}\n \
    \           fi\n        done\n        l=${#tmp[@]}\n        for ((j=0; j<${#tmp[@]};\
    \ j++)); do\n            if [[ ${tmp[j]} -ge 1 ]] && [[ ${tmp[j]} -le 9 ]]; then\n\
    \                tmp[j]=${tmp[j]}-${l}\n            fi\n        done\n       \
    \ m=${#tmp[@]}\n        for ((j=0; j<${#tmp[@]}; j++)); do\n            if [[\
    \ ${tmp[j]} -ge 1 ]] && [[ ${tmp[j]} -le 9 ]]; then\n                tmp[j]=${tmp[j]}-${m}\n\
    \            fi\n        done\n        result+=(\"${tmp[@]}\")\n    done\n   \
    \ echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1lc60g60.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local j\n    local length\n    local name\n\
    \    local num\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a digits=()\n    local -a names=()\n    local -a\
    \ lengths=()\n    local -a length\n    local -a name\n    local -a length\n  \
    \  local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcy87_e0u.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -i i\n  local -a names\n  local -a tmp\n  local -a tmp2\n\
    \  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a\
    \ tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n\
    \  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local\
    \ -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n\
    \  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local\
    \ -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n\
    \  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local\
    \ -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n\
    \  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local\
    \ -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n\
    \  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local\
    \ -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n\
    \  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local\
    \ -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n\
    \  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n  local\
    \ -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc3x12lqh.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    for (( i=0; i < ${#arr[@]};\
    \ i++ )); do\n        local -n num=${arr[i]}\n        if (( num > 9 )); then\n\
    \            local -n digit=${num/0/}\n            result+=(\"${names[digit]}\"\
    )\n            result+=(\"${num%$digit}\")\n        else\n            result+=(\"\
    ${names[num]}\")\n        fi\n    done\n    IFS=$'\\n'\n    echo \"${result[*]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp15w8klb6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j k l m n o p q r s t u v w x y z\n    local -a\
    \ names\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a\
    \ tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a\
    \ tmp8\n    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a\
    \ tmp12\n    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local\
    \ -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local\
    \ -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local\
    \ -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local\
    \ -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local\
    \ -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local\
    \ -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local\
    \ -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local\
    \ -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local\
    \ -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local\
    \ -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local\
    \ -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local\
    \ -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local\
    \ -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local\
    \ -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprhyb_j2o.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local names=()\n    local lengths=()\n    local length\n    local number\n\
    \    local name\n    local length\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local o\n    local p\n    local q\n \
    \   local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names\n  local -a tmp\n  local -a tmp2\n  local -a tmp3\n\
    \  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a tmp7\n  local -a\
    \ tmp8\n  local -a tmp9\n  local -i len\n  local -i i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpohi_irmy.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a names\n    local -i i\n    local -a output\n\n    arr=( $1 )\n    names=(\
    \ One Two Three Four Five Six Seven Eight Nine )\n\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        if (( ${arr[i]} >= 1 && ${arr[i]} <= 9 )); then\n      \
    \      arr[i]=${names[${arr[i]}]}\n        fi\n    done\n\n    output=( ${arr[@]}\
    \ )\n    for (( i=0; i<${#output[@]}; i++ )); do\n        output[i]=\"${output[i]//\\\
    \"/}\"\n    done\n\n    printf '%s\\n' \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local -a names\n    local\
    \ -a lengths\n    local -a length\n    local -a name\n    local -a digit\n   \
    \ local -a digit2\n    local -a digit3\n    local -a digit4\n    local -a digit5\n\
    \    local -a digit6\n    local -a digit7\n    local -a digit8\n    local -a digit9\n\
    \    local -a digit10\n    local -a digit11\n    local -a digit12\n    local -a\
    \ digit13\n    local -a digit14\n    local -a digit15\n    local -a digit16\n\
    \    local -a digit17\n    local -a digit18\n    local -a digit19\n    local -a\
    \ digit20\n    local -a digit21\n    local -a digit22\n    local -a digit23\n\
    \    local -a digit24\n    local -a digit25\n    local -a digit26\n    local -a\
    \ digit27\n    local -a digit28\n    local -a digit29\n    local -a digit30\n\
    \    local -a digit31\n    local -a digit32\n    local -a digit33\n    local -a\
    \ digit34\n    local -a digit35\n    local -a digit36\n    local -a digit37\n\
    \    local -a digit38\n    local -a digit39\n    local -a digit40\n    local -a\
    \ digit41\n    local -a digit42\n    local -a digit43\n    local -a digit44\n\
    \    local -a digit45\n    local -a digit46\n    local -a digit47\n    local -a\
    \ digit48\n    local -a digit49\n    local -a digit50\n    local -a digit51\n\
    \    local -a digit52\n    local -a digit53\n    local -a digit54\n    local -a\
    \ digit55\n    local -a digit56\n    local -a digit57\n    local -a digit58\n\
    \    local -a digit59\n    local -a digit60\n    local -a digit61\n    local -a\
    \ digit62\n    local -a digit63\n    local -a digit64\n    local -a digit65\n\
    \    local -a digit66\n    local -\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpbnzrn188.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=()\n    local -a lengths=()\n    local\
    \ -a digits=()\n    local -a digits_length=()\n    local -a digits_length_count=()\n\
    \    local -a digits_length_reversed=()\n    local -a digits_length_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed=()\n    local -a digits_length_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_count=()\n    local -a\
    \ digits_length_reversed_reversed_reversed_reversed_count=()\n    local -a digits_length_reversed_reversed_reversed_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_reversed_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_count=()\n\
    \    local -a digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyy9ystuq.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local -a names\n    local\
    \ -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a\
    \ tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a\
    \ tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local\
    \ -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local\
    \ -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local\
    \ -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local\
    \ -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local\
    \ -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local\
    \ -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local\
    \ -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local\
    \ -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local\
    \ -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local\
    \ -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local\
    \ -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local\
    \ -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local\
    \ -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local\
    \ -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local\
    \ -a tmp69\n    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppec9w4q6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local result\n    local j\n    local name\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=\"$1\"\n \
    \   local -a arr2\n    local -a arr3\n    local -a arr4\n    local -a arr5\n \
    \   local -a arr6\n    local -a arr7\n    local -a arr8\n    local -a arr9\n \
    \   local -a arr10\n    local -a arr11\n    local -a arr12\n    local -a arr13\n\
    \    local -a arr14\n    local -a arr15\n    local -a arr16\n    local -a arr17\n\
    \    local -a arr18\n    local -a arr19\n    local -a arr20\n    local -a arr21\n\
    \    local -a arr22\n    local -a arr23\n    local -a arr24\n    local -a arr25\n\
    \    local -a arr26\n    local -a arr27\n    local -a arr28\n    local -a arr29\n\
    \    local -a arr30\n    local -a arr31\n    local -a arr32\n    local -a arr33\n\
    \    local -a arr34\n    local -a arr35\n    local -a arr36\n    local -a arr37\n\
    \    local -a arr38\n    local -a arr39\n    local -a arr40\n    local -a arr41\n\
    \    local -a arr42\n    local -a arr43\n    local -a arr44\n    local -a arr45\n\
    \    local -a arr46\n    local -a arr47\n    local -a arr48\n    local -a arr49\n\
    \    local -a arr50\n    local -a arr51\n    local -a arr52\n    local -a arr53\n\
    \    local -a arr54\n    local -a arr55\n    local -a arr56\n    local -a arr57\n\
    \    local -a arr58\n    local -a arr59\n    local -a arr60\n    local -a arr61\n\
    \    local -a arr62\n    local -a arr63\n    local -a arr64\n    local -a arr65\n\
    \    local -a arr66\n    local -a arr67\n    local -a arr68\n    local -a arr69\n\
    \    local -a arr70\n    local -a arr71\n    local -a arr72\n    local -a arr73\n\
    \    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local names=()\n    local number\n    local name\n    local length\n    local\
    \ i\n    local j\n    local lengths\n    local length\n    local lengths\n   \
    \ local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local length\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length\n  local name\n  local i\n  local j\n  local output\n  local lengths\n\
    \  local lengths_sorted\n  local lengths_sorted_reversed\n  local lengths_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed\n  local lengths_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed\n  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \  local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local -a arr\n    local -a arr_reversed\n    local -a arr_sorted\n    local\
    \ -a arr_sorted2\n    local -a arr_sorted3\n    local -a arr_sorted4\n    local\
    \ -a arr_sorted5\n    local -a arr_sorted6\n    local -a arr_sorted7\n    local\
    \ -a arr_sorted8\n    local -a arr_sorted9\n    local -a arr_sorted10\n    local\
    \ -a arr_sorted11\n    local -a arr_sorted12\n    local -a arr_sorted13\n    local\
    \ -a arr_sorted14\n    local -a arr_sorted15\n    local -a arr_sorted16\n    local\
    \ -a arr_sorted17\n    local -a arr_sorted18\n    local -a arr_sorted19\n    local\
    \ -a arr_sorted20\n    local -a arr_sorted21\n    local -a arr_sorted22\n    local\
    \ -a arr_sorted23\n    local -a arr_sorted24\n    local -a arr_sorted25\n    local\
    \ -a arr_sorted26\n    local -a arr_sorted27\n    local -a arr_sorted28\n    local\
    \ -a arr_sorted29\n    local -a arr_sorted30\n    local -a arr_sorted31\n    local\
    \ -a arr_sorted32\n    local -a arr_sorted33\n    local -a arr_sorted34\n    local\
    \ -a arr_sorted35\n    local -a arr_sorted36\n    local -a arr_sorted37\n    local\
    \ -a arr_sorted38\n    local -a arr_sorted39\n    local -a arr_sorted40\n    local\
    \ -a arr_sorted41\n    local -a arr_sorted42\n    local -a arr_sorted43\n    local\
    \ -a arr_sorted44\n    local -a arr_sorted45\n    local -a arr_sorted46\n    local\
    \ -a arr_sorted47\n    local -a arr_sorted48\n    local -a arr_sorted49\n    local\
    \ -a arr_sorted50\n    local -a arr_sorted51\n    local -a arr_sorted52\n    local\
    \ -a arr_sorted53\n    local -a arr_sorted54\n    local -a arr_sorted55\n    local\
    \ -a arr_sorted56\n    local -a arr_sorted57\n    local -a arr_sorted58\n    local\
    \ -a arr_sorted59\n    local -a arr_sorted60\n    local -a arr_sorted61\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result=()\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a tmp=()\n\
    \  local -a tmp2=()\n  local -i len=0\n  local -i i\n  local -i j\n  local -i\
    \ k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local\
    \ -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n\
    \  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local\
    \ -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n\
    \  local -i h\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local\
    \ -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n\
    \  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local\
    \ -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n\
    \  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local\
    \ -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n\
    \  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local\
    \ -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n\
    \  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local\
    \ -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n\
    \  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local\
    \ -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n\
    \  local -i \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmsyt9kkc.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -a lengths=()\n    local -i i\n    local j\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local -a arr2=()\n        local -a arr3=()\n        local\
    \ -a arr4=()\n        local -a arr5=()\n        local -a arr6=()\n        local\
    \ -a arr7=()\n        local -a arr8=()\n        local -a arr9=()\n        local\
    \ -a arr10=()\n        local -a arr11=()\n        local -a arr12=()\n        local\
    \ -a arr13=()\n        local -a arr14=()\n        local -a arr15=()\n        local\
    \ -a arr16=()\n        local -a arr17=()\n        local -a arr18=()\n        local\
    \ -a arr19=()\n        local -a arr20=()\n        local -a arr21=()\n        local\
    \ -a arr22=()\n        local -a arr23=()\n        local -a arr24=()\n        local\
    \ -a arr25=()\n        local -a arr26=()\n        local -a arr27=()\n        local\
    \ -a arr28=()\n        local -a arr29=()\n        local -a arr30=()\n        local\
    \ -a arr31=()\n        local -a arr32=()\n        local -a arr33=()\n        local\
    \ -a arr34=()\n        local -a arr35=()\n        local -a arr36=()\n        local\
    \ -a arr37=()\n        local -a arr38=()\n        local -a arr39=()\n        local\
    \ -a arr40=()\n        local -a arr41=()\n        local -a arr42=()\n        local\
    \ -a arr43=()\n        local -a arr44=()\n        local -a arr45=()\n        local\
    \ -a arr46=()\n        local -a arr47=()\n        local -a arr48=()\n        local\
    \ -a arr49=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprrv04z6l.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmprrv04z6l.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local -a arr\n    local -a result\n    local -a names\n    local -i i\n  \
    \  local j\n    local len\n    local num\n    local str\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -n digits=$2\n    local -n digits_map=()\n    local\
    \ -n digits_reversed=()\n    local -n digits_reversed_map=()\n    local -n digits_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_map=()\n    local -n digits_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_map=()\n    local -n digits_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_map=()\n    local -n\
    \ digits_reversed_reversed_reversed_reversed_reversed=()\n    local -n digits_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -n digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpufff9uwz.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpufff9uwz.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpufff9uwz.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmpufff9uwz.sh: line 21: local: digits_reversed: reference variable cannot
    be an array

    /tmp/tmpufff9uwz.sh: line 22: local: digits_reversed_map: reference variable cannot
    be an array

    /tmp/tmpufff9uwz.sh: line 23: local: digits_reversed_reversed: reference variable
    cannot be an array

    /tmp/tmpufff9uwz.sh: line 24: local: digits_reversed_reversed_map: reference variable
    cannot be an array

    /tmp/tmpufff9uwz.sh: line 25: local: digits_reversed_reversed_reversed: reference
    variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 26: local: digits_reversed_reversed_reversed_map: reference
    variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 27: local: digits_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 28: local: digits_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 29: local: digits_reversed_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 30: local: digits_reversed_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 31: local: digits_reversed_reversed_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 32: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 33: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 34: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_map:
    reference variable cannot be an array

    /tmp/tmpufff9uwz.sh: line 35: local: digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed'
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local i j\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local j=0\n    while ((j<${#names[@]})); do\n      if [[ ${arr[i]} -ge\
    \ 1 ]] && [[ ${arr[i]} -le 9 ]]; then\n        result+=(\"${names[j]}\")\n   \
    \     ((j++))\n      fi\n    done\n  done\n  printf \"%s\\n\" \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe9obuaj_.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local k\n    local l\n  \
    \  local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpubnozg4b.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ result=()\n  local i\n  local j\n  local length\n  local name\n  local tmp\n\
    \  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local\
    \ tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n\
    \  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n \
    \ local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n  local\
    \ tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n\
    \  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n \
    \ local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n  local\
    \ tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n\
    \  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n \
    \ local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n  local\
    \ tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n\
    \  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n \
    \ local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n  local\
    \ tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n\
    \  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n \
    \ local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n  local\
    \ tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n\
    \  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n  local \n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local k\n    local l\n  \
    \  local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdiqmu089.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -n digits=$2\n    local -n digits_map=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdelbjvc5.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpdelbjvc5.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpdelbjvc5.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmpdelbjvc5.sh: line 21: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 22: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 23: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 24: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 25: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 26: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 27: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 28: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 29: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 30: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 31: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 32: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 33: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 34: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 35: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 36: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 37: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 38: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 39: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpdelbjvc5.sh: line 40: loc'
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length\n    local i\n    local j\n    local output\n    local name\n\
    \    local number\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n\
    \    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n\
    \    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local\
    \ tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n\
    \    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local\
    \ tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n\
    \    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local\
    \ tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n\
    \    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local\
    \ tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n\
    \    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local\
    \ tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n\
    \    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local\
    \ tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n\
    \    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local\
    \ tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n\
    \    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local\
    \ tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n\
    \    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local\
    \ tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n\
    \    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local\
    \ tmp95\n    local tmp96\n    local tmp\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a tmp=()\n    local -i len=0\n    local -i i\n    local j\n    local k\n  \
    \  local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    \n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp458x5rxb.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local \n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a result\n  local -i i\n  local j\n  local -a names\n  local -a tmp\n  local\
    \ -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n\
    \  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local\
    \ -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n\
    \  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local\
    \ -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n\
    \  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local\
    \ -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n\
    \  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local\
    \ -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n\
    \  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local\
    \ -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n\
    \  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local\
    \ -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n\
    \  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local\
    \ -a tmp65\n  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n\
    \  local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' ' arr=(\
    \ $1 )\n    local output\n    local i\n    local j\n    local length\n    local\
    \ name\n    local lengths\n    local lengths_sorted\n    local lengths_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted\n    local lengths_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted\n    local lengths_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n  \
    \  local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=\"$1\"\n \
    \   local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ output\n  output=$(IFS=' '; echo \"${numbers[*]}\" | sort -n | rev | sed 's/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"/; s/$/\"/; s/ /\"/; s/^/\"\
    /; s/$/\"/; s/ /\"/; s/^\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6dhcb7g0.sh: line 19: unexpected EOF while looking for matching
    `''''

    /tmp/tmp6dhcb7g0.sh: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a digits\n    local -i i\n    local j\n    local\
    \ k\n    local length\n    local name\n    local num\n\n    # Convert each number\
    \ in the list to an integer\n    IFS=' ' read -r -a digits <<< \"${arr[@]}\"\n\
    \n    # Sort the integers\n    sort -n <<< \"${digits[@]}\"\n\n    # Reverse the\
    \ sorted integers\n    arr=(\"${digits[@]}\")\n\n    # Replace each digit by its\
    \ corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"\n    for (( i = 0; i < ${#arr[@]}; i++ ));\
    \ do\n        num=${arr[i]}\n        name=${num}\n        if [[ $num -gt 0 &&\
    \ $num -lt 9 ]]; then\n            (( num -= 10 ))\n            (( num *= 10 ))\n\
    \            (( num += 9 ))\n            (( name += ${num} ))\n        fi\n  \
    \      arr[i]=$name\n    done\n\n    # Convert each number in the list to an integer\n\
    \    IFS=' ' read -r -a digits <<< \"${arr[@]}\"\n\n    # Sort the integers\n\
    \    sort -n <<< \"${digits[@]}\"\n\n    # Replace each digit by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    for (( i = 0; i < ${#arr[@]}; i++ )); do\n        num=${arr[i]}\n\
    \        name=${num}\n        if [[ $num -gt 0 && $num -lt 9 ]]; then\n      \
    \      (( num -= 10 ))\n            (( num *= 10 ))\n            (( num += 9 ))\n\
    \            (( name += ${num} ))\n        fi\n        arr[i]=$name\n    done\n\
    \n    # Convert each number in the list to an integer\n    IFS=' ' read -r -a\
    \ digits <<< \"${arr[@]}\"\n\n    # Sort the integers\n    sort -n <<< \"${digits[@]}\"\
    \n\n    # Replace each digit by its corresponding name from \"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n   \
    \ for (( i = 0; i < ${#arr[@]}; i++ )); do\n        num=${arr[i]}\n        name=${num}\n\
    \        if [[ $num -gt 0 && \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfq0arieb.sh: line 79: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpfq0arieb.sh: line 79: syntax error near `}''

    /tmp/tmpfq0arieb.sh: line 79: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local k\n    local l\n  \
    \  local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpubnozg4b.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=()\n\
    \    local -a digits_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reverse\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwu_moe9t.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local j\n    local length\n    local lengths\n\
    \    local lengths_sorted\n    local lengths_sorted_reversed\n    local lengths_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed\n    local lengths_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed\n    local\
    \ lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\n\
    \    local lengths_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \    local lengths_sorted_reverse\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a map=()\n    local -a tmp=()\n    local -i\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj7v6cmpx.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ output\n  local i\n  local length\n  local number\n  local digit\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | cut -d ' ' -f $((${#array[@]} - $length))); IFS=$' ';)\n  if [ -z\
    \ \"$output\" ]; then\n    return 0\n  else\n    echo \"$output\"\n  fi\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe9ja_eur.sh: line 20: syntax error near unexpected token `)''

    /tmp/tmpe9ja_eur.sh: line 20: `  output=$(IFS='' ''; echo "${array[@]}" | sort
    -n | cut -d '' '' -f $((${#array[@]} - $length))); IFS=$'' '';)''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        j=$(( ${#arr[@]} - 1 - i ))\n        result+=(\"${arr[i]}\")\n      \
    \  result+=(\"${arr[j]}\")\n    done\n    IFS=$'\\n' echo \"${result[*]}\"\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw8y_qdxm.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ length\n  local i\n  local j\n  local name\n  local tmp\n  local result\n\n\
    \  length=${#arr[@]}\n  if [[ $length == 0 ]]; then\n    return 0\n  fi\n\n  result=()\n\
    \  for (( i=0; i<$length; i++ )); do\n    name=${arr[$i]}\n    if [[ $name =~\
    \ ^[[:digit:]]+$ ]]; then\n      tmp=${name//[[:digit:]]/}\n      if [[ $tmp -ge\
    \ 1 ]] && [[ $tmp -le 9 ]]; then\n        name=$(( 10#$tmp ))\n      fi\n    fi\n\
    \    if [[ $name =~ ^[[:alpha:]]+$ ]]; then\n      name=$(( ${#name} + 1 ))\n\
    \    fi\n    if [[ $name -ge 10 ]]; then\n      name=$(( ${#name} + 1 ))\n   \
    \ fi\n    if [[ $name -le 1 ]]; then\n      name=$(( ${#name} + 1 ))\n    fi\n\
    \    arr[$i]=$name\n  done\n\n  for (( j=$length; j>0; j-- )); do\n    tmp=${arr[$j]}\n\
    \    arr[$j]=${arr[$j-1]}\n    arr[$j-1]=$tmp\n  done\n\n  for (( i=0; i<$length;\
    \ i++ )); do\n    result+=( ${arr[$i]} )\n  done\n\n  printf '%s\\n' \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph747qrqs.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=(\"0\" \"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -a digits_length=${#digits[@]}\n\
    \  local -a digits_reversed=()\n  local -a digits_reversed_length=${#digits_reversed[@]}\n\
    \  local -a digits_reversed_reversed=()\n  local -a digits_reversed_reversed_length=${#digits_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed=()\n  local -a\
    \ digits_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=${#digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[@]}\n\
    \  local -a digit\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg07vkf67.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a tmp=()\n\
    \  local -a tmp2=()\n  local -i len=0\n  local -i i\n  local -i j\n  local -i\
    \ k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local\
    \ -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n\
    \  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local\
    \ -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n\
    \  local -i h\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local\
    \ -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n\
    \  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local\
    \ -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n\
    \  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local\
    \ -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n\
    \  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local\
    \ -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n\
    \  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local\
    \ -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n\
    \  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local\
    \ -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n\
    \  local -i \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmsyt9kkc.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n\n    if [ -z \"$array\" ]; then\n\
    \        array=()\n    fi\n\n    if [ -z \"$length\" ]; then\n        length=10\n\
    \    fi\n\n    local digits=()\n    local digit\n    local index\n    local name\n\
    \n    for index in \"${!array[@]}\"; do\n        digit=\"${array[$index]}\"\n\
    \        if [ \"${digit}\" -ge 1 ] && [ \"${digit}\" -le 9 ]; then\n         \
    \   digits+=(\"${digit}\")\n        fi\n    done\n\n    local length_index\n \
    \   local length_name\n\n    for length_index in $(seq 0 $((${#digits[@]} - 1)));\
    \ do\n        length_name=\"${digits[$length_index]}${length_index}\"\n      \
    \  if [ -n \"${length_name}\" ]; then\n            length=\"${length_name}\"\n\
    \            break\n        fi\n    done\n\n    if [ -z \"$length\" ]; then\n\
    \        length=10\n    fi\n\n    local output\n    for index in \"${!array[@]}\"\
    ; do\n        digit=\"${array[$index]}\"\n        if [ \"${digit}\" -ge 1 ] &&\
    \ [ \"${digit}\" -le 9 ]; then\n            name=\"${digit}${index}\"\n      \
    \      output+=(\"\\\"$name\\\"\")\n        fi\n    done\n\n    IFS=' ' read -r\
    \ -a output <<< \"${output[*]}\"\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt4sqqxaw.sh: line 36: [: 2 1 1 4 5 8 2 3: integer expression expected

    /tmp/tmpt4sqqxaw.sh: line 59: [: 2 1 1 4 5 8 2 3: integer expression expected

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j k l m\n    local -a names\n    local -a tmp\n\
    \    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n\
    \    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n\
    \    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n\
    \    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n\
    \    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n\
    \    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n\
    \    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n\
    \    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n\
    \    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n\
    \    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n\
    \    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n\
    \    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n\
    \    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n\
    \    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n\
    \    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n\
    \    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n\
    \    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n\
    \    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwx9nq3ki.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local lengths=$2\n    local output\n    local i\n    local j\n    local length\n\
    \    local number\n    local name\n    local length_name\n    local length_names\n\
    \    local length_name\n    local length_names_sorted\n    local length_names_sorted_reversed\n\
    \    local length_names_sorted_reversed_with_quotes\n    local length_names_sorted_reversed_with_quotes_quoted\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces\n    local\
    \ length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted\n    local\
    \ length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quotes_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces_quoted_with_spaces\n\
    \    local length_names_sorted_reversed_with_quote\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -i len\n  len=${#arr[@]}\n  if [[ $len == 0 ]]; then\n    return\
    \ 0\n  fi\n  local -i i\n  local -a names\n  names=( One Two Three Four Five Six\
    \ Seven Eight Nine )\n  for (( i=0; i<len; i++ )); do\n    local j\n    for ((\
    \ j=0; j<9; j++ )); do\n      if [[ ${arr[$i]} -ge 1 ]] && [[ ${arr[$i]} -le 9\
    \ ]]; then\n        arr[$i]=${names[${arr[$i]}]}\n      fi\n    done\n  done\n\
    \  printf '%s\\n' \"${arr[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n'\n \
    \   local arr=$1\n    local output\n    local i\n    local j\n    local length\n\
    \    local lengths\n    local name\n    local names=()\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local\
    \ tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n   \
    \ local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n\
    \    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local\
    \ tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n\
    \    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local\
    \ tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n\
    \    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local\
    \ tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n\
    \    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local\
    \ tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n\
    \    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local\
    \ tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n\
    \    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local\
    \ tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n\
    \    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local\
    \ tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n\
    \    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local\
    \ tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n\
    \    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local\
    \ tmp93\n    local tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    ${array[@]}\" | sort -n | sed 's/^/\"/; s/$/\"/; s/^/\"/; s/$/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"\
    /; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\"/; s/^/\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz3g4mihw.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpz3g4mihw.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=\"$1\"\n \
    \   local length\n    local i\n    local j\n    local output\n    local name\n\
    \    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local\
    \ tmp96\n    local tmp97\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=( $1 )\n\
    \    local -a result=()\n    local -a digits=()\n    local -a names=( One Two\
    \ Three Four Five Six Seven Eight Nine )\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=0\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n \
    \   local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i len\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i len\n    local -i i\n    local -i j\n   \
    \ local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n\
    \    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i\
    \ len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i i\n   \
    \ local -i j\n    local -i k\n    local -i len\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i\
    \ k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n \
    \   local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i len\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i len\n    local -i i\n    local -i j\n   \
    \ local -i k\n    local -i len\n    local -i i\n    local -i j\n    local -i k\n\
    \    local -i len\n    local -i i\n    local -i j\n    local -i k\n    local -i\
    \ len\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwratldxu.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local lengths=$(echo \"$numbers\" | tr \" \" \"\\n\" | sort -n | uniq -c |\
    \ sort -n | awk '{print $2}')\n    local result=()\n    for length in $lengths;\
    \ do\n        local numbers_length=$(echo \"$numbers\" | tr \" \" \"\\n\" | sort\
    \ -n | uniq -c | sort -n | awk '{print $1}' | grep -E \"^$length\")\n        local\
    \ numbers_length_sorted=$(echo \"$numbers_length\" | sort -n | uniq)\n       \
    \ local numbers_length_sorted_reversed=$(echo \"$numbers_length_sorted\" | rev\
    \ | uniq)\n        local numbers_length_sorted_reversed_length=$(echo \"$numbers_length_sorted_reversed\"\
    \ | wc -l)\n        local numbers_length_sorted_reversed_length_minus_1=$(echo\
    \ \"$numbers_length_sorted_reversed_length\" | bc)\n        local numbers_length_sorted_reversed_length_minus_1_minus_1=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1\" | bc)\n        local numbers_length_sorted_reversed_length_minus_1_minus_1_length=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1_minus_1\" | bc)\n        local\
    \ numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1_minus_1_length\" | bc)\n  \
    \      local numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1\" |\
    \ bc)\n        local numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1_length=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1\"\
    \ | bc)\n        local numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1_minus_1_length=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1_minus_1_length\"\
    \ | bc)\n        local numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1_minus_1_minus_1_length=$(echo\
    \ \"$numbers_length_sorted_reversed_length_minus_1_minus_1_length_minus_1_minus_1_minus_1_minus_1_length\"\
    \ | bc)\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp03mfy2l6.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmp03mfy2l6.sh: line 34: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local length\n    local name\n\
    \n    length=${#arr[@]}\n    if [ $length -eq 0 ]; then\n        result=()\n \
    \   else\n        result=( )\n        for (( i=0; i<length; i++ )); do\n     \
    \       j=$(( length - i - 1 ))\n            length=${#arr[j]}\n            name=${arr[j]}\n\
    \            arr[j]=$name\n            result+=( \"$name\" )\n        done\n \
    \   fi\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpv4vjqtt_.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\" \"2\"\
    \ \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -i i\n    local len\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp93umstnt.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -n digits=$2\n    local -n digits_map=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_reversed=()\n    local -n digits_map_reversed_index=()\n\
    \    local -n digits_map_reversed_name=()\n    local -n digits_map_reversed_name_index=()\n\
    \    local -n digits_map_reversed_name_map=()\n    local -n digits_map_reversed_name_map_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed=()\n    local -n digits_map_reversed_name_map_reversed_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name=()\n    local -n digits_map_reversed_name_map_reversed_name_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map=()\n    local -n\
    \ digits_map_reversed_name_map_reversed_name_map_index=()\n    local -n digits_map_reversed_name_map_reversed_name_map_reversed=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed_name=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed_name_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed_name_map=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed_name_map_index=()\n\
    \    local -n digits_map_reversed_name_map_reversed_name_map_reversed_name_map_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw3y5v08w.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpw3y5v08w.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpw3y5v08w.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmpw3y5v08w.sh: line 21: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmpw3y5v08w.sh: line 22: local: digits_map_reversed: reference variable cannot
    be an array

    /tmp/tmpw3y5v08w.sh: line 23: local: digits_map_reversed_index: reference variable
    cannot be an array

    /tmp/tmpw3y5v08w.sh: line 24: local: digits_map_reversed_name: reference variable
    cannot be an array

    /tmp/tmpw3y5v08w.sh: line 25: local: digits_map_reversed_name_index: reference
    variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 26: local: digits_map_reversed_name_map: reference variable
    cannot be an array

    /tmp/tmpw3y5v08w.sh: line 27: local: digits_map_reversed_name_map_index: reference
    variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 28: local: digits_map_reversed_name_map_reversed: reference
    variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 29: local: digits_map_reversed_name_map_reversed_index:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 30: local: digits_map_reversed_name_map_reversed_name:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 31: local: digits_map_reversed_name_map_reversed_name_index:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 32: local: digits_map_reversed_name_map_reversed_name_map:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 33: local: digits_map_reversed_name_map_reversed_name_map_index:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 34: local: digits_map_reversed_name_map_reversed_name_map_reversed:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 35: local: digits_map_reversed_name_map_reversed_name_map_reversed_index:
    reference variable cannot be an array

    /tmp/tmpw3y5v08w.sh: line 36: local: digits_map_reversed_name_map_reversed_name_map_r'
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -i i\n    local -a names=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n    local -a lengths=(\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\
    )\n    for ((i=0; i < ${#arr[@]}; i++)); do\n        local -n num=${arr[$i]}\n\
    \        if (( ${#num} > 0 )); then\n            local -n digit=${num}\n     \
    \       local -n length=${lengths[$((${#num}-1))]}\n            local -n name=${names[$((${#num}-1))]}\n\
    \            local -n digit=${num}\n            local -n length=${lengths[$((${#num}-1))]}\n\
    \            local -n name=${names[$((${#num}-1))]}\n            local -n digit=${num}\n\
    \            local -n length=${lengths[$((${#num}-1))]}\n            local -n\
    \ name=${names[$((${#num}-1))]}\n            local -n digit=${num}\n         \
    \   local -n length=${lengths[$((${#num}-1))]}\n            local -n name=${names[$((${#num}-1))]}\n\
    \            local -n digit=${num}\n            local -n length=${lengths[$((${#num}-1))]}\n\
    \            local -n name=${names[$((${#num}-1))]}\n            local -n digit=${num}\n\
    \            local -n length=${lengths[$((${#num}-1))]}\n            local -n\
    \ name=${names[$((${#num}-1))]}\n            local -n digit=${num}\n         \
    \   local -n length=${lengths[$((${#num}-1))]}\n            local -n name=${names[$((${#num}-1))]}\n\
    \            local -n digit=${num}\n            local -n length=${lengths[$((${#num}-1))]}\n\
    \            local -n name=${names[$((${#num}-1))]}\n            local -n digit=${num}\n\
    \            local -n length=${lengths[$((${#num}-1))]}\n            local -n\
    \ name=${names[$((${#num}-1))]}\n            local -n digit=${num}\n         \
    \   local -n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8k9kqahs.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmp8k9kqahs.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=(\"${@}\"\
    )\n    local length=\"${arr[0]}\"\n    local result=()\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local k\n    local length\n\
    \    local name\n    local num\n    local str\n    local tmp\n    local -a tmp2\n\
    \    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n\
    \    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n\
    \    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n\
    \    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n\
    \    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n\
    \    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n\
    \    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n\
    \    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n\
    \    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n\
    \    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n\
    \    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n\
    \    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n\
    \    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n\
    \    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n\
    \    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n\
    \    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n\
    \    local -a tmp67\n    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyiczgh4l.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a names_reversed=()\n    local -a names_reversed_with_quotes=()\n    local\
    \ -a names_reversed_with_quotes_reversed=()\n    local -a names_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed=()\n  \
    \  local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_reversed=()\n\
    \    local -a names_reversed_with_quotes_reversed_with_quotes_reversed_with_quotes_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg6k5xktb.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -a names\n  names=( One Two Three Four Five Six Seven Eight Nine\
    \ )\n  local -a result\n  result=()\n  for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \    local j\n    for (( j=0; j<${#names[@]}; j++ )); do\n      local k\n    \
    \  for (( k=0; k<${#arr[@]}; k++ )); do\n        [[ \"${arr[k]}\" -ge 1 ]] &&\
    \ [[ \"${arr[k]}\" -le 9 ]] && result+=( \"${names[j]}\" )\n      done\n    done\n\
    \  done\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -i i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpewqiii0c.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits=()\n \
    \   local -a digits_reversed=()\n    local -a digits_reversed_length=()\n    local\
    \ -a digits_reversed_length_reversed=()\n    local -a digits_reversed_length_reversed_length=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed=()\n    local -a\
    \ digits_reversed_length_reversed_length_reversed_length=()\n    local -a digits_reversed_length_reversed_length_reversed_length_reversed=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length=()\n\
    \    local -a digits_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reversed_length_reverse\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4tvev6kl.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local lengths\n\
    \  local length\n  local name\n  local name\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n  local length\n  local length\n  local length\n  local length\n\
    \  local length\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i=0; i < ${#arr[@]}; i++ ));\
    \ do\n        if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]]; then\n      \
    \      for (( j=i; j > 0; j-- )); do\n                if [[ ${arr[j]} -ge 1 ]]\
    \ && [[ ${arr[j]} -le 9 ]]; then\n                    result+=(\"${arr[j]}\")\n\
    \                    arr[j]=\"${arr[j-1]}\"\n                fi\n            done\n\
    \        fi\n    done\n    arr=(\"${result[@]}\")\n    for (( i=0; i < ${#arr[@]};\
    \ i++ )); do\n        arr[i]=\"${arr[i]//[0-9]/One}\"\n        arr[i]=\"${arr[i]//[0-9]/Two}\"\
    \n        arr[i]=\"${arr[i]//[0-9]/Three}\"\n        arr[i]=\"${arr[i]//[0-9]/Four}\"\
    \n        arr[i]=\"${arr[i]//[0-9]/Five}\"\n        arr[i]=\"${arr[i]//[0-9]/Six}\"\
    \n        arr[i]=\"${arr[i]//[0-9]/Seven}\"\n        arr[i]=\"${arr[i]//[0-9]/Eight}\"\
    \n        arr[i]=\"${arr[i]//[0-9]/Nine}\"\n    done\n    echo \"${arr[@]}\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4jqggnqo.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        local -n num=${arr[$i]}\n        if (( num > 9 )); then\n\
    \            local -n digit=${num}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[$digit]}\n\
    \            local -n digit=${digits[$digit]}\n            local -n digit=${digits[\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpux9rbpcb.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=(\"\
    9\" \"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\" \"0\")\n    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwratldxu.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local -a names\n    local\
    \ -a lengths\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local\
    \ -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local\
    \ -a tmp8\n    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local\
    \ -a tmp12\n    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local\
    \ -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local\
    \ -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local\
    \ -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local\
    \ -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local\
    \ -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local\
    \ -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local\
    \ -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local\
    \ -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local\
    \ -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local\
    \ -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local\
    \ -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local\
    \ -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local\
    \ -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local\
    \ -a tmp68\n    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaxxipjoa.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j k l m\n    for (( i = 0; i < ${#arr[@]};\
    \ i++ )); do\n        local -n arr2=${arr[i]}\n        for (( j = 1; j < ${#arr2[@]};\
    \ j++ )); do\n            local -n arr3=${arr2[j]}\n            for (( k = 0;\
    \ k < ${#arr3[@]}; k++ )); do\n                local -n arr4=${arr3[k]}\n    \
    \            for (( l = 0; l < ${#arr4[@]}; l++ )); do\n                    local\
    \ -n arr5=${arr4[l]}\n                    for (( m = 0; m < ${#arr5[@]}; m++ ));\
    \ do\n                        local -n arr6=${arr5[m]}\n                     \
    \   local -n arr7=${arr6}\n                        local -n arr8=${arr7}\n   \
    \                     local -n arr9=${arr8}\n                        local -n\
    \ arr10=${arr9}\n                        local -n arr11=${arr10}\n           \
    \             local -n arr12=${arr11}\n                        local -n arr13=${arr12}\n\
    \                        local -n arr14=${arr13}\n                        local\
    \ -n arr15=${arr14}\n                        local -n arr16=${arr15}\n       \
    \                 local -n arr17=${arr16}\n                        local -n arr18=${arr17}\n\
    \                        local -n arr19=${arr18}\n                        local\
    \ -n arr20=${arr19}\n                        local -n arr21=${arr20}\n       \
    \                 local -n arr22=${arr21}\n                        local -n arr23=${arr22}\n\
    \                        local -n arr24=${arr23}\n                        local\
    \ -n arr25=${arr24}\n                        local -n arr26=${arr25}\n       \
    \                 local -n arr27=${arr26}\n                        local -n arr28=${arr27}\n\
    \                        local -n arr29=${arr28}\n                        local\
    \ -n arr30=${arr29}\n                        local -n arr31=${arr30}\n       \
    \                 local -n arr32=${arr31}\n                        local -n arr33=${arr32}\n\
    \                        local -n arr34=${arr33}\n                        local\
    \ -n arr35=${arr34}\n                        local -n arr36=${arr35}\n       \
    \                 local -n arr37=${arr36\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpww4c2sod.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a names_reversed=()\n    local -a names_reversed_length=()\n    local -a names_reversed_digits=()\n\
    \    local -a names_reversed_digits_length=()\n    local -a names_reversed_digits_reversed=()\n\
    \    local -a names_reversed_digits_reversed_length=()\n    local -a names_reversed_digits_reversed_digits=()\n\
    \    local -a names_reversed_digits_reversed_digits_length=()\n    local -a names_reversed_digits_reversed_digits_reversed=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_length=()\n    local\
    \ -a names_reversed_digits_reversed_digits_reversed_digits=()\n    local -a names_reversed_digits_reversed_digits_reversed_digits_length=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_length=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_length=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_length=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_length=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_length=()\n\
    \    local -a names_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx2mx2gjp.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local lengths=$(by_length \"$numbers\")\n    local result=()\n    for number\
    \ in $lengths; do\n        local digit=${number#* }\n        result+=(\"\\\"$((10#$digit))\\\
    \"\")\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660046114
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a digits\n  local -a names\n  local -a lengths\n  local\
    \ -a length\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a\
    \ m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local\
    \ -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n\
    \  local -a y\n  local -a z\n  local -a a\n  local -a b\n  local -a c\n  local\
    \ -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n\
    \  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local\
    \ -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n\
    \  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local\
    \ -a z\n  local -a a\n  local -a b\n  local -a c\n  local -a d\n  local -a e\n\
    \  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local\
    \ -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n\
    \  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local\
    \ -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a a\n\
    \  local -a b\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local\
    \ -a g\n  local -a h\n  local -a i\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpo4x56fk6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local result=()\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a tmp=()\n    local -a tmp2=()\n    local -a tmp3=()\n    local -a tmp4=()\n\
    \    local -a tmp5=()\n    local -a tmp6=()\n    local -a tmp7=()\n    local -a\
    \ tmp8=()\n    local -a tmp9=()\n    local -a tmp10=()\n    local -a tmp11=()\n\
    \    local -a tmp12=()\n    local -a tmp13=()\n    local -a tmp14=()\n    local\
    \ -a tmp15=()\n    local -a tmp16=()\n    local -a tmp17=()\n    local -a tmp18=()\n\
    \    local -a tmp19=()\n    local -a tmp20=()\n    local -a tmp21=()\n    local\
    \ -a tmp22=()\n    local -a tmp23=()\n    local -a tmp24=()\n    local -a tmp25=()\n\
    \    local -a tmp26=()\n    local -a tmp27=()\n    local -a tmp28=()\n    local\
    \ -a tmp29=()\n    local -a tmp30=()\n    local -a tmp31=()\n    local -a tmp32=()\n\
    \    local -a tmp33=()\n    local -a tmp34=()\n    local -a tmp35=()\n    local\
    \ -a tmp36=()\n    local -a tmp37=()\n    local -a tmp38=()\n    local -a tmp39=()\n\
    \    local -a tmp40=()\n    local -a tmp41=()\n    local -a tmp42=()\n    local\
    \ -a tmp43=()\n    local -a tmp44=()\n    local -a tmp45=()\n    local -a tmp46=()\n\
    \    local -a tmp47=()\n    local -a tmp48=()\n    local -a tmp49=()\n    local\
    \ -a tmp50=()\n    local -a tmp51=()\n    local -a tmp52=()\n    local -a tmp53=()\n\
    \    local -a tmp54\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2rxnynsf.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"${#array}\"\n  local output\n  local i\n  local j\n  local name\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n  local length\n  local lengths\n  local length\n\
    \  local lengths\n  local length\n  local lengths\n  local length\n  local lengths\n\
    \  local length\n  local lengths\n\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(echo \"$array\" |\
    \ tr \" \" \"\\n\" | sort -n | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' |\
    \ sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"/' | sed 's/$/\"/' | sed 's/^/\"\
    /' | sed \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1rql5xqj.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1rql5xqj.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        local j\n        for (( j=0; j<${#names[@]};\
    \ j++ )); do\n            local k\n            for (( k=0; k<${#arr[@]}; k++ ));\
    \ do\n                if [[ ${arr[k]} -ge 1 ]] && [[ ${arr[k]} -le 9 ]]; then\n\
    \                    if [[ ${arr[k]} -eq ${arr[j]} ]]; then\n                \
    \        result+=(\"\\\"${names[j]}\\\"\")\n                    fi\n         \
    \       fi\n            done\n        done\n    done\n    if [[ ${#result[@]}\
    \ -eq 0 ]]; then\n        result=()\n    fi\n    echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0yfudr7s.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a tmp=()\n  local -a tmp2=()\n  local -i i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpibhafhcx.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ result=()\n  local i\n  local length\n  local digit\n  local name\n\n  length=${#numbers}\n\
    \  if [[ ${length} -eq 0 ]]; then\n    return 0\n  fi\n\n  for (( i=0; i<${#numbers};\
    \ i++ )); do\n    digit=${numbers:$i:1}\n    name=${digits:$i:1}\n    if [[ ${digit}\
    \ -ge 1 ]] && [[ ${digit} -le 9 ]]; then\n      result+=(\"\\\"${name}\\\"\")\n\
    \    fi\n  done\n\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i len=${#arr[@]}\n    local -i i\n    local\
    \ digit\n    local name\n\n    # Sort by length\n    for ((i=0; i<len; i++));\
    \ do\n        digit=${arr[i]}\n        name=${digit:0:1}\n        result+=(\"\
    ${name}\")\n    done\n    sort -r -n <<<\"${result[@]}\"\n    # Replace each digit\
    \ by its corresponding name\n    for ((i=0; i<len; i++)); do\n        digit=${arr[i]}\n\
    \        name=${digit:0:1}\n        result[i]=${name}\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzda0awpz.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a tmp=()\n    local -i i\n    local j\n    for\
    \ (( i = 0; i < ${#arr[@]}; i++ )); do\n        local -a tmp2=()\n        for\
    \ (( j = ( i + 1 ); j < ${#arr[@]}; j++ )); do\n            local -a tmp3=()\n\
    \            local -a tmp4=()\n            local -a tmp5=()\n            local\
    \ -a tmp6=()\n            local -a tmp7=()\n            local -a tmp8=()\n   \
    \         local -a tmp9=()\n            local -a tmp10=()\n            local -a\
    \ tmp11=()\n            local -a tmp12=()\n            local -a tmp13=()\n   \
    \         local -a tmp14=()\n            local -a tmp15=()\n            local\
    \ -a tmp16=()\n            local -a tmp17=()\n            local -a tmp18=()\n\
    \            local -a tmp19=()\n            local -a tmp20=()\n            local\
    \ -a tmp21=()\n            local -a tmp22=()\n            local -a tmp23=()\n\
    \            local -a tmp24=()\n            local -a tmp25=()\n            local\
    \ -a tmp26=()\n            local -a tmp27=()\n            local -a tmp28=()\n\
    \            local -a tmp29=()\n            local -a tmp30=()\n            local\
    \ -a tmp31=()\n            local -a tmp32=()\n            local -a tmp33=()\n\
    \            local -a tmp34=()\n            local -a tmp35=()\n            local\
    \ -a tmp36=()\n            local -a tmp37=()\n            local -a tmp38=()\n\
    \            local -a tmp39=()\n            local -a tmp40=()\n            local\
    \ -a tmp41=()\n            local -a tmp42=()\n            local -a tmp43=()\n\
    \            local -a tmp44=()\n            local -a tmp45=()\n            local\
    \ -a tmp46=()\n            local -a tmp47=()\n            local -a tmp48=()\n\
    \            local -a tmp49=()\n            local -a tmp50=()\n            local\
    \ -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7tagqier.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmp7tagqier.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -i i\n    local j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local\
    \ j=0\n        while [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]]; then\n  \
    \          ((j++))\n            arr[i]=${arr[i]}\n        done\n        if ((j\
    \ == 0)); then\n            continue\n        fi\n        local k=i\n        while\
    \ ((k > 0)); do\n            ((k--))\n            digits[${#digits[@]}]=${arr[$k]}\n\
    \        done\n        local j=0\n        for ((j=0; j<${#digits[@]}; j++)); do\n\
    \            ((j++))\n            result+=(\"${names[${digits[$j]:-0}]}\")\n \
    \       done\n    done\n    IFS=$'\\n'\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsvn030d_.sh: line 25: syntax error near unexpected token `then''

    /tmp/tmpsvn030d_.sh: line 25: `        while [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]}
    -le 9 ]]; then''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a map\n    local -a tmp\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp364zl0yg.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=$'\\n' arr=(\
    \ $1 )\n    local len=${#arr[@]}\n    local tmp\n    local i\n    local j\n  \
    \  local res\n\n    if [[ $len == 0 ]]; then\n        echo \"\"\n        return\n\
    \    fi\n\n    local names=(\n        \"One\"\n        \"Two\"\n        \"Three\"\
    \n        \"Four\"\n        \"Five\"\n        \"Six\"\n        \"Seven\"\n   \
    \     \"Eight\"\n        \"Nine\"\n    )\n\n    local tmp\n    local i\n    local\
    \ j\n    local res\n\n    for (( i = 0; i < len; i++ )); do\n        tmp=${arr[i]}\n\
    \        arr[i]=${names[$i]}\n    done\n\n    res=( ${arr[@]} )\n\n    for ((\
    \ i = 0; i < len; i++ )); do\n        tmp=${res[i]}\n        res[i]=${names[$i]}\n\
    \    done\n\n    echo ${res[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local names=()\n    local lengths=()\n    local i=0\n    while read -r number;\
    \ do\n        (( i++ ))\n        lengths[$i]=$(( ${#number} ))\n    done <<< \"\
    $numbers\"\n    local j=0\n    while (( j<${#lengths[@]} )) ; do\n        local\
    \ length=${lengths[$j]}\n        local j=$(( j+1 ))\n        local k=0\n     \
    \   while (( k<${#names[@]} )) ; do\n            local name=${names[$k]}\n   \
    \         local k=$(( k+1 ))\n            if (( ${length} <= ${#name} )) ; then\n\
    \                local j=$(( j-1 ))\n                local k=$(( k-1 ))\n    \
    \            local length=$(( ${length} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${number} % 10 ))\n    \
    \            local number=$(( ${number} + 1 ))\n                local number=$((\
    \ ${number} / 10 ))\n                local number=$(( ${\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpik3nqgjz.sh: line 62: unexpected EOF while looking for matching
    `)''

    /tmp/tmpik3nqgjz.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"\
    Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -i j=0\n  local -i k\n  local -i\
    \ len\n  local -i i\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n\
    \  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local\
    \ -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local\
    \ -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i\
    \ len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i\
    \ j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n\
    \  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local\
    \ -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local\
    \ -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i\
    \ len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i\
    \ j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n\
    \  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local\
    \ -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local\
    \ -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i\
    \ len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i\
    \ j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local -i len\n\
    \  local -i j\n  local -i len\n  local -i j\n  local -i len\n  local -i j\n  local\
    \ -i len\n  local -i j\n  \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1_gg12pd.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -i i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpealhjysx.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local name\n  local i\n  local j\n  local output\n  local\
    \ lengths\n  local lengths_sorted\n  local lengths_reversed\n  local lengths_reversed_sorted\n\
    \  local lengths_reversed_sorted_index\n  local lengths_reversed_sorted_length\n\
    \  local lengths_reversed_sorted_length_index\n  local lengths_reversed_sorted_length_index2\n\
    \  local lengths_reversed_sorted_length_index3\n  local lengths_reversed_sorted_length_index4\n\
    \  local lengths_reversed_sorted_length_index5\n  local lengths_reversed_sorted_length_index6\n\
    \  local lengths_reversed_sorted_length_index7\n  local lengths_reversed_sorted_length_index8\n\
    \  local lengths_reversed_sorted_length_index9\n  local lengths_reversed_sorted_length_index10\n\
    \  local lengths_reversed_sorted_length_index11\n  local lengths_reversed_sorted_length_index12\n\
    \  local lengths_reversed_sorted_length_index13\n  local lengths_reversed_sorted_length_index14\n\
    \  local lengths_reversed_sorted_length_index15\n  local lengths_reversed_sorted_length_index16\n\
    \  local lengths_reversed_sorted_length_index17\n  local lengths_reversed_sorted_length_index18\n\
    \  local lengths_reversed_sorted_length_index19\n  local lengths_reversed_sorted_length_index20\n\
    \  local lengths_reversed_sorted_length_index21\n  local lengths_reversed_sorted_length_index22\n\
    \  local lengths_reversed_sorted_length_index23\n  local lengths_reversed_sorted_length_index24\n\
    \  local lengths_reversed_sorted_length_index25\n  local lengths_reversed_sorted_length_index26\n\
    \  local lengths_reversed_sorted_length_index27\n  local lengths_reversed_sorted_length_index28\n\
    \  local lengths_reversed_sorted_length_index29\n  local lengths_reversed_sorted_length_index30\n\
    \  local lengths_reversed_sorted_length_index31\n  local lengths_reversed_sorted_length_index32\n\
    \  local lengths_reversed_sorted_length_index33\n  local lengths_reversed_sorted_length_index34\n\
    \  local lengths_reversed_sorted_length_index35\n  local lengths_reversed_sorted_length_index36\n\
    \  local lengths_reversed_sorted_length_index37\n  local lengths_reversed_sorted_length_index38\n\
    \  local lengths_reversed_sorted_length_index39\n  local lengths_reversed_sorted_length_index40\n\
    \  \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -n digits=$2\n    local -n digits_map=()\n  \
    \  local -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n\
    \ digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map_index=()\n    local -n digits_map_index=()\n    local -n digits_map_index=()\n\
    \    local -n digits_map_index=()\n    local -n digits_map_index=()\n    local\
    \ -n digits_map\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphz3gq7rb.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmphz3gq7rb.sh: line 19: local: `'': not a valid identifier

    /tmp/tmphz3gq7rb.sh: line 20: local: digits_map: reference variable cannot be
    an array

    /tmp/tmphz3gq7rb.sh: line 21: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 22: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 23: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 24: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 25: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 26: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 27: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 28: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 29: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 30: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 31: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 32: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 33: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 34: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 35: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 36: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 37: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 38: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 39: local: digits_map_index: reference variable cannot
    be an array

    /tmp/tmphz3gq7rb.sh: line 40: loc'
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -i i\n    local j\n    local length\n    local name\n\
    \    local num\n    local nums\n    local nums_str\n    local nums_strs\n    local\
    \ nums_strs_len\n    local nums_strs_lens\n    local nums_strs_lens_len\n    local\
    \ nums_strs_lens_lens\n    local nums_strs_lens_lens_len\n    local nums_strs_lens_lens_lens\n\
    \    local nums_strs_lens_lens_lens_len\n    local nums_strs_lens_lens_lens_lens\n\
    \    local nums_strs_lens_lens_lens_lens_len\n    local nums_strs_lens_lens_lens_lens_lens\n\
    \    local nums_strs_lens_lens_lens_lens_lens_len\n    local nums_strs_lens_lens_lens_lens_lens_lens\n\
    \    local nums_strs_lens_lens_lens_lens_lens_lens_len\n    local nums_strs_lens_lens_lens_lens_lens_lens_len\n\
    \    local nums_strs_lens_lens_lens_lens_lens_lens_lens\n    local nums_strs_lens_lens_lens_lens_lens_lens_lens_len\n\
    \    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens\n    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_lens\n    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\n    local\
    \ nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_s\n\
    \    local nums_strs_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3kdf175f.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j\n    local -a names\n    local -a lengths\n\
    \    local -a numbers\n    local -a length\n    local -a name\n    local -a number\n\
    \    local -a lengths\n    local -a length\n    local -a number\n    local -a\
    \ name\n    local -a number\n    local -a lengths\n    local -a length\n    local\
    \ -a number\n    local -a name\n    local -a number\n    local -a lengths\n  \
    \  local -a length\n    local -a number\n    local -a name\n    local -a number\n\
    \    local -a lengths\n    local -a length\n    local -a number\n    local -a\
    \ name\n    local -a number\n    local -a lengths\n    local -a length\n    local\
    \ -a number\n    local -a name\n    local -a number\n    local -a lengths\n  \
    \  local -a length\n    local -a number\n    local -a name\n    local -a number\n\
    \    local -a lengths\n    local -a length\n    local -a number\n    local -a\
    \ name\n    local -a number\n    local -a lengths\n    local -a length\n    local\
    \ -a number\n    local -a name\n    local -a number\n    local -a lengths\n  \
    \  local -a length\n    local -a number\n    local -a name\n    local -a number\n\
    \    local -a lengths\n    local -a length\n    local -a number\n    local -a\
    \ name\n    local -a number\n    local -a lengths\n    local -a length\n    local\
    \ -a number\n    local -a name\n    local -a number\n    local -a lengths\n  \
    \  local -a length\n    local -a number\n    local -a name\n    local -a number\n\
    \    local -a lengths\n    local -a length\n    local -a number\n    local -a\
    \ name\n    local -a number\n    local -a lengths\n    local -a length\n    local\
    \ -a number\n    local -a name\n    local -a number\n    local -a lengths\n  \
    \  local -a length\n    local -a number\n    local -\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxni6yvxt.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -i i\n  local -a tmp\n  local\
    \ -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n\
    \  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local\
    \ -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n\
    \  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local\
    \ -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n\
    \  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local\
    \ -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n\
    \  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local\
    \ -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n\
    \  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local\
    \ -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n\
    \  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local\
    \ -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n\
    \  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local\
    \ -a tmp65\n  local -a tmp66\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5fjair5v.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a names_reversed=()\n\
    \  local -a digits_reversed=()\n  local -a digits_reversed_str=()\n  local -a\
    \ digits_reversed_str_reversed=()\n  local -a digits_reversed_str_str=()\n  local\
    \ -a digits_reversed_str_str_reversed=()\n  local -a digits_reversed_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_reversed=()\n  local -a digits_reversed_str_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_str_reversed=()\n  local -a digits_reversed_str_str_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_str_str_reversed=()\n  local -a digits_reversed_str_str_str_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_reversed=()\n  local -a digits_reversed_str_str_str_str_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_str_reversed=()\n  local -a\
    \ digits_reversed_str_str_str_str_str_str_str_str=()\n  local -a digits_reversed_str_str_str_str_str_str_str_str_reversed=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_str_str_str=()\n  local -a\
    \ digits_reversed_str_str_str_str_str_str_str_str_str_reversed=()\n  local -a\
    \ digits_reversed_str_str_str_str_str_str_str_str_str_str=()\n  local -a digits_reversed_str_str_str_str_str_str_str_str_str_str_reversed=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_str_str_str_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_str_str_str_str_str_reversed=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_str_str_str_str_str_str_str=()\n\
    \  local -a digits_reversed_str_str_str_str_str_str_str_str_str_str_str_str_str_reversed=()\n\
    \  local -a digits_reversed_str_str_str_str_str_\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptw1blfhp.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n\n    if [ -z \"$array\" ]; then\n\
    \        array=()\n    fi\n\n    if [ -z \"$length\" ]; then\n        length=${#array[@]}\n\
    \    fi\n\n    local i\n    local j\n    local k\n    local l\n    local m\n \
    \   local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a names_reversed=()\n    local -a digits_reversed=()\n    local -a digits_reversed_length=()\n\
    \    local -a digits_reversed_length_length=()\n    local -a digits_reversed_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length=()\n    local -a digits_reversed_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length=()\n \
    \   local -a digits_reversed_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length=()\n\
    \    local -a digits_reversed_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpehfpkbva.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local length\n    local\
    \ name\n    local tmp\n\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        length=${arr[i]}\n\
    \        if (( length < 1 || length > 9 )); then\n            continue\n     \
    \   fi\n        name=${!length}\n        if (( length == 1 )); then\n        \
    \    result+=(\"\\\"${name}\\\"\")\n        else\n            tmp=()\n       \
    \     for ((j = 0; j < length; j++)); do\n                tmp+=(\"\\\"${!j}\\\"\
    \")\n            done\n            result+=(\"${tmp[@]}\")\n        fi\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplorjdby5.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -i i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx9wtd9jl.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a tmp\n    local i\n    local j\n    local length\n\
    \    local name\n\n    # Remove all empty elements\n    arr=( ${arr[@]} ); length=${#arr[@]}\n\
    \    for ((i=0; i<length; i++)); do\n        if [[ ${arr[i]} != \"\" ]]; then\n\
    \            tmp=( ${arr[i]} )\n            length=${#tmp[@]}\n            for\
    \ ((j=0; j<length; j++)); do\n                if [[ ${tmp[j]} -ge 1 ]] && [[ ${tmp[j]}\
    \ -le 9 ]]; then\n                    result+=( \"${name}\" )\n              \
    \  fi\n            done\n        fi\n    done\n\n    # Sort the array\n    sort\
    \ -n -k 2 -t ' ' <<< \"${result[@]}\"\n\n    # Replace each element by its corresponding\
    \ name\n    for ((i=0; i<length; i++)); do\n        tmp=( ${result[i]} )\n   \
    \     length=${#tmp[@]}\n        for ((j=0; j<length; j++)); do\n            if\
    \ [[ ${tmp[j]} -ge 1 ]] && [[ ${tmp[j]} -le 9 ]]; then\n                name=${!tmp[j]}\n\
    \                result[i]=\"${name}\"\n            fi\n        done\n    done\n\
    \n    # Remove all empty elements\n    arr=( ${result[@]} ); length=${#arr[@]}\n\
    \    for ((i=0; i<length; i++)); do\n        if [[ ${arr[i]} != \"\" ]]; then\n\
    \            tmp=( ${arr[i]} )\n            length=${#tmp[@]}\n            for\
    \ ((j=0; j<length; j++)); do\n                if [[ ${tmp[j]} -ge 1 ]] && [[ ${tmp[j]}\
    \ -le 9 ]]; then\n                    result+=( \"${name}\" )\n              \
    \  fi\n            done\n        fi\n    done\n\n    # Return result\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwt7l9l8v.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=( $1 )\n  local\
    \ lengths=( ${#arr[@]} )\n  local result=()\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  \n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits_tmp=()\n\
    \  local -a names_tmp=()\n  local -i len=${#arr[@]}\n  local -i i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local \n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb69coxew.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        local -n num=${arr[i]}\n        if (( num > 9 )); then\n            local\
    \ -n digit=${num/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit=${digit/./}\n            local\
    \ -n digit=${digit/./}\n            local -n digit\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj42j87ew.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpj42j87ew.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local -a names=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        local -n num=${arr[i]}\n        if (( num\
    \ > 9 )); then\n            result+=(\"\\\"${names[num]}\\\"\")\n        else\n\
    \            result+=(\"\\\"${num}\\\"\")\n        fi\n    done\n    IFS=$'\\\
    n'\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2y2mrbdq.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph747qrqs.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a digits_tmp=()\n    local -a names_tmp=()\n    local -i length=0\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i tmp\n    local -i tmp2\n\
    \    local -i tmp3\n    local -i tmp4\n    local -i tmp5\n    local -i tmp6\n\
    \    local -i tmp7\n    local -i tmp8\n    local -i tmp9\n    local -i tmp10\n\
    \    local -i tmp11\n    local -i tmp12\n    local -i tmp13\n    local -i tmp14\n\
    \    local -i tmp15\n    local -i tmp16\n    local -i tmp17\n    local -i tmp18\n\
    \    local -i tmp19\n    local -i tmp20\n    local -i tmp21\n    local -i tmp22\n\
    \    local -i tmp23\n    local -i tmp24\n    local -i tmp25\n    local -i tmp26\n\
    \    local -i tmp27\n    local -i tmp28\n    local -i tmp29\n    local -i tmp30\n\
    \    local -i tmp31\n    local -i tmp32\n    local -i tmp33\n    local -i tmp34\n\
    \    local -i tmp35\n    local -i tmp36\n    local -i tmp37\n    local -i tmp38\n\
    \    local -i tmp39\n    local -i tmp40\n    local -i tmp41\n    local -i tmp42\n\
    \    local -i tmp43\n    local -i tmp44\n    local -i tmp45\n    local -i tmp46\n\
    \    local -i tmp47\n    local -i tmp48\n    local -i tmp49\n    local -i tmp50\n\
    \    local -i tmp51\n    local -i tmp52\n    local -i tmp53\n    local -i tmp54\n\
    \    local -i tmp55\n    local -i tmp56\n    local -i tmp57\n    local -i tmp58\n\
    \    local -i tmp59\n    local -i tmp60\n    local -i tmp61\n    local -i tmp62\n\
    \    local -i tmp63\n    local -i tmp64\n    local -i tmp65\n    local -i tmp66\n\
    \    local -i tmp67\n    local -i tmp68\n    local -i tmp69\n    local -i tmp70\n\
    \    local -i tmp71\n    local -i tmp72\n    local -i tmp73\n    local \n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3cov73g8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local IFS=' '\n    local\
    \ -a arr\n    local -a result\n    local -i i\n    local j\n    local k\n    local\
    \ length\n    local name\n    local num\n    local tmp\n    local tmp2\n    local\
    \ tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local\
    \ tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n  \
    \  local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local name\n  local i\n  local result\n  local lengths\n\
    \  local lengths_sorted\n  local lengths_reversed\n  local lengths_reversed_sorted\n\
    \  local lengths_reversed_sorted\n  local lengths_reversed_sorted_name\n  local\
    \ lengths_reversed_sorted_name_length\n  local lengths_reversed_sorted_name_length_name\n\
    \  local lengths_reversed_sorted_name_length_name_length\n  local lengths_reversed_sorted_name_length_name_length_name\n\
    \  local lengths_reversed_sorted_name_length_name_length_name_length\n  local\
    \ lengths_reversed_sorted_name_length_name_length_name_length_name_length\n  local\
    \ lengths_reversed_sorted_name_length_name_length_name_length_name_length_name_length\n\
    \  local lengths_reversed_sorted_name_length_name_length_name_length_name_length_name_length_name_length\n\
    \  local lengths_reversed_sorted_name_length_name_length_name_length_name_length_name_length_name_length_name_length\n\
    \  local lengths_reversed_sorted_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length\n\
    \  local lengths_reversed_sorted_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length\n\
    \  local lengths_reversed_sorted_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local result=()\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=( $1 )\n \
    \   local output\n    local i\n    local j\n    local length\n    local name\n\
    \    local tmp\n    local count\n    local lengths\n    local length\n    local\
    \ name\n    local tmp\n    local count\n    local lengths\n    local length\n\
    \    local name\n    local tmp\n    local count\n    local lengths\n    local\
    \ length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n    local tmp\n    local count\n    local lengths\n\
    \    local length\n    local name\n\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    ${array[@]}\" | sort -n | cut -d ' ' -f $length)\n  for (( i = 0; i < ${#output};\
    \ i++ )); do\n    output[i]=\"${output[i]//[0-9]/${by_length_digits[$((i % 10))]}}\"\
    \n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'cut: option requires an argument -- ''f''

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local j\n    local length\n    local number\n\
    \    local name\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits=()\n \
    \   local -a digits_length=()\n    local -a digits_names=()\n    local -a digits_names_length=()\n\
    \    local -a digits_names_reverse=()\n    local -a digits_names_reverse_length=()\n\
    \    local -a digits_names_reverse_count=()\n    local -a digits_names_reverse_count_length=()\n\
    \    local -a digits_names_reverse_count_reverse=()\n    local -a digits_names_reverse_count_reverse_length=()\n\
    \    local -a digits_names_reverse_count_reverse_count=()\n    local -a digits_names_reverse_count_reverse_count_length=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse=()\n    local -a\
    \ digits_names_reverse_count_reverse_count_reverse_count=()\n    local -a digits_names_reverse_count_reverse_count_reverse_count_length=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_length=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_length=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_length=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse=()\n\
    \    local -a digits_names_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count_reverse_count=()\n\
    \    local -a digits_names_reverse_\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpcuqbqqw6.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=(\"${1//[[:space:]]/}\"\
    )\n    local -a result=()\n    local -i i\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        if (( ${arr[i]} >= 1 && ${arr[i]} <= 9 )); then\n            result+=(\"\
    ${arr[i]}\")\n        fi\n    done\n    IFS=' ' read -r -d '' -a result <<< \"\
    ${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n   \
    \ IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d\
    \ '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"\
    ${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n   \
    \ IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d\
    \ '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"\
    ${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n   \
    \ IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d\
    \ '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"\
    ${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n   \
    \ IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d\
    \ '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"\
    ${result[*]}\"\n    IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n   \
    \ IFS=' ' read -r -d '' -a result <<< \"${result[*]}\"\n    IFS=' ' read -r -d\
    \ '' -a result <<< \"${result\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsbvx5huk.sh: line 57: unexpected EOF while looking for matching
    `"''

    /tmp/tmpsbvx5huk.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local numbers=$1\n \
    \   local output\n    local i\n    local j\n    local length\n    local number\n\
    \    local name\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        j=$((i+1))\n        if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]];\
    \ then\n            result+=(\"\\\"${arr[i]}\\\"\")\n            arr[i]=$j\n \
    \       fi\n    done\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"))\n \
    \   IFS=$' ' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$' ' arr=($(printf '%s\\n' \"${arr[@]}\"))\n\
    \    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$' ' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"\
    ))\n    IFS=$' ' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"\
    ))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"\
    ))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"\
    ))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"\
    ))\n    IFS=$'\\n' arr=($(printf '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf\
    \ '%s\\n' \"${arr[@]}\"))\n    IFS=$'\\n' arr=($(printf '%s\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp03_ovbtp.sh: line 48: unexpected EOF while looking for matching
    `''''

    /tmp/tmp03_ovbtp.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local numbers=$1\n  local\
    \ output\n  output=$(\n    IFS=' '\n    read -a numbers <<< \"$numbers\"\n  )\n\
    \  local length\n  length=${#numbers[@]}\n  local i\n  for (( i=0; i<$length;\
    \ i++ )); do\n    local number\n    number=${numbers[i]}\n    if [[ $number -ge\
    \ 1 ]] && [[ $number -le 9 ]]; then\n      numbers[i]=$(\n        echo \"${numbers[i]}\
    \ ${numbers[$(( number+1 ))]}\"\n      )\n    fi\n  done\n  output=(${output[@]})\n\
    \  IFS=' '\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3hoowacu.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=()\n  local -a tmp=()\n\
    \  local -a tmp2=()\n  local -a tmp3=()\n  local -a tmp4=()\n  local -a tmp5=()\n\
    \  local -a tmp6=()\n  local -a tmp7=()\n  local -a tmp8=()\n  local -a tmp9=()\n\
    \  local -a tmp10=()\n  local -a tmp11=()\n  local -a tmp12=()\n  local -a tmp13=()\n\
    \  local -a tmp14=()\n  local -a tmp15=()\n  local -a tmp16=()\n  local -a tmp17=()\n\
    \  local -a tmp18=()\n  local -a tmp19=()\n  local -a tmp20=()\n  local -a tmp21=()\n\
    \  local -a tmp22=()\n  local -a tmp23=()\n  local -a tmp24=()\n  local -a tmp25=()\n\
    \  local -a tmp26=()\n  local -a tmp27=()\n  local -a tmp28=()\n  local -a tmp29=()\n\
    \  local -a tmp30=()\n  local -a tmp31=()\n  local -a tmp32=()\n  local -a tmp33=()\n\
    \  local -a tmp34=()\n  local -a tmp35=()\n  local -a tmp36=()\n  local -a tmp37=()\n\
    \  local -a tmp38=()\n  local -a tmp39=()\n  local -a tmp40=()\n  local -a tmp41=()\n\
    \  local -a tmp42=()\n  local -a tmp43=()\n  local -a tmp44=()\n  local -a tmp45=()\n\
    \  local -a tmp46=()\n  local -a tmp47=()\n  local -a tmp48=()\n  local -a tmp49=()\n\
    \  local -a tmp50=()\n  local -a tmp51=()\n  local -a tmp52=()\n  local -a tmp53=()\n\
    \  local -a tmp54\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprxchz_zy.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -i len\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpklwjkhi5.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        local -n num=${arr[$i]}\n        if (( num > 9 )); then\n\
    \            local -n digit=${num}\n            local -n digit=${digits[$(( 10#$digit\
    \ ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n            local\
    \ -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         local -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         local -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         local -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         local -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         local -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         local -n digit=${digits[$(( 10#$digit ))]}\n            local -n digit=${digits[$((\
    \ 10#$digit ))]}\n            local -n digit=${digits[$(( 10#$digit ))]}\n   \
    \         \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdgj40iz_.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpdgj40iz_.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local name\n  local\
    \ tmp\n  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n\
    \  local tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local\
    \ tmp12\n  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n\
    \  local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n \
    \ local tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local\
    \ tmp28\n  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n\
    \  local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n \
    \ local tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local\
    \ tmp44\n  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n\
    \  local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n \
    \ local tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local\
    \ tmp60\n  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n\
    \  local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n \
    \ local tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local\
    \ tmp76\n  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n\
    \  local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n \
    \ local tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local\
    \ tmp92\n  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n  local tmp97\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local i j\n  local -a names\n  local -a tmp\n  local -a tmp2\n\
    \  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a\
    \ tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n\
    \  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local\
    \ -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n\
    \  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local\
    \ -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n\
    \  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local\
    \ -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n\
    \  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local\
    \ -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n\
    \  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local\
    \ -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n\
    \  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local\
    \ -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n\
    \  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n  local\
    \ -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_ljif4rv.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a digits=()\n  local -a digits_reversed=()\n\
    \  local -a digits_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed=()\n  local -a digits_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpubh0li6i.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -i len\n    local i\n    local j\n    local k\n    local l\n    local m\n  \
    \  local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local A\n    local B\n    local C\n    local D\n    local E\n\
    \    local F\n    local G\n    local H\n    local I\n    local J\n    local K\n\
    \    local L\n    local M\n    local N\n    local O\n    local P\n    local Q\n\
    \    local R\n    local S\n    local T\n    local U\n    local V\n    local W\n\
    \    local X\n    local Y\n    local Z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n    local J\n    local K\n    local L\n    local M\n\
    \    local N\n    local O\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local U\n    local V\n    local W\n    local X\n    local Y\n\
    \    local Z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a names_reversed=()\n    local -a digits_reversed=()\n    local -a digits_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed=()\n    local -a digits_reversed_str_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed=()\n    local -a digits_reversed_str_reversed_str_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed=()\n    local\
    \ -a digits_reversed_str_reversed_str_reversed_str_reversed_str=()\n    local\
    \ -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed=()\n\
    \    local -a digits_reversed_str_reversed_str_reversed_str_reversed_str_reversed_str_reversed_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps06h_lhp.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=( $1 )\n \
    \   local result=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
    \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
    \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
    \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n \
    \   local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n  \
    \  local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
    \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
    \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
    \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n \
    \   local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n  \
    \  local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"\
    Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a lengths=(\"1\" \"2\" \"3\" \"\
    4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n  local -i i\n  local -a tmp\n  local -a tmp2\n\
    \  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a\
    \ tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n\
    \  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local\
    \ -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n\
    \  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local\
    \ -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n\
    \  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local\
    \ -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n\
    \  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local\
    \ -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n\
    \  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local\
    \ -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n\
    \  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local\
    \ -a tmp61\n  local -a tmp62\n  local -\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr74jqfh7.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  output=$(IFS=' '; echo \"\
    ${array[@]}\" | sort -n -k 2 | cut -d ' ' -f 2-)\n  if [ \"${#output}\" -eq 0\
    \ ]; then\n    return 0\n  fi\n  for (( i = 0; i < ${#output}; i++ )); do\n  \
    \  output[i]=\"${output[i]//[0-9]/${length}${i}}\"\n  done\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  output=$(IFS=' '; echo \"${array[@]}\"\
    \ | sort -n | sed -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"/' -e 's/$/\"/' -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/^/\"/' -e \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpew31fs0t.sh: line 20: unexpected EOF while looking for matching
    `)''

    /tmp/tmpew31fs0t.sh: line 37: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=(\
    \ $1 )\n  local -a result\n  result=()\n  local -i i\n  local j\n  for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n    (( ${#result[@]} > 0 )) && result+=( )\n    local\
    \ -a arr2\n    arr2=( ${arr[i]} )\n    for (( j=0; j<${#arr2[@]}; j++ )); do\n\
    \      local -a arr3\n      arr3=( ${arr2[j]} )\n      if (( ${#arr3[@]} > 0 ));\
    \ then\n        local -a arr4\n        arr4=( ${arr3[0]} )\n        for (( j=1;\
    \ j<${#arr3[@]}; j++ )); do\n          local -a arr5\n          arr5=( ${arr3[j]}\
    \ )\n          local -a arr6\n          arr6=( ${arr4[@]} )\n          for ((\
    \ k=0; k<${#arr5[@]}; k++ )); do\n            local -a arr7\n            arr7=(\
    \ ${arr5[k]} )\n            if (( ${#arr7[@]} > 0 )); then\n              result+=(\
    \ \"${arr7[0]}\" )\n            else\n              result+=( \"${arr6[0]}\" )\n\
    \            fi\n          done\n        done\n      else\n        result+=( \"\
    ${arr2[0]}\" )\n      fi\n    done\n  done\n  printf '%s\\n' \"${result[@]}\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits=()\n \
    \   local -a digits_length=()\n    local -a digits_names=()\n    local -a digits_names_length=()\n\
    \    local -a digits_names_reversed=()\n    local -a digits_names_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed=()\n    local -a digits_names_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed=()\n    local -a digits_names_reversed_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed=()\n    local -a\
    \ digits_names_reversed_reversed_reversed_reversed_length=()\n    local -a digits_names_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length=()\n\
    \    local -a digits_names_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2j2fbe30.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a digits\n    local i j\n    local -a names\n \
    \   local -a lengths\n    local -a length\n    local -a lengths\n    local -a\
    \ length\n    local -a lengths\n    local -a length\n    local -a lengths\n  \
    \  local -a length\n    local -a lengths\n    local -a length\n    local -a lengths\n\
    \    local -a length\n    local -a lengths\n    local -a length\n    local -a\
    \ lengths\n    local -a length\n    local -a lengths\n    local -a length\n  \
    \  local -a lengths\n    local -a length\n    local -a lengths\n    local -a length\n\
    \    local -a lengths\n    local -a length\n    local -a lengths\n    local -a\
    \ length\n    local -a lengths\n    local -a length\n    local -a lengths\n  \
    \  local -a length\n    local -a lengths\n    local -a length\n    local -a lengths\n\
    \    local -a length\n    local -a lengths\n    local -a length\n    local -a\
    \ lengths\n    local -a length\n    local -a lengths\n    local -a length\n  \
    \  local -a lengths\n    local -a length\n    local -a lengths\n    local -a length\n\
    \    local -a lengths\n    local -a length\n    local -a lengths\n    local -a\
    \ length\n    local -a lengths\n    local -a length\n    local -a lengths\n  \
    \  local -a length\n    local -a lengths\n    local -a length\n    local -a lengths\n\
    \    local -a length\n    local -a lengths\n    local -a length\n    local -a\
    \ lengths\n    local -a length\n    local -a lengths\n    local -a length\n  \
    \  local -a lengths\n    local -a length\n    local -a lengths\n    local -a length\n\
    \    local -a lengths\n    local -a length\n    local -a lengths\n    local -a\
    \ length\n    local -a lengths\n    local -a length\n    local -a lengths\n  \
    \  local -a length\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpeb27zj2n.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        j=$((i+1))\n        if [[ ${arr[i]} -ge 1 ]] && [[ ${arr[i]} -le 9 ]];\
    \ then\n            result+=(\"\\\"${arr[i]}\\\"\" \"\\\"${arr[j]}\\\"\")\n  \
    \      fi\n    done\n    IFS=$'\\n' echo \"${result[*]}\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprlpeb7xh.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a name\n    local -i i\n    local -a tmp\n    local\
    \ -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local\
    \ -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local\
    \ -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local\
    \ -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local\
    \ -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local\
    \ -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local\
    \ -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local\
    \ -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local\
    \ -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local\
    \ -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local\
    \ -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local\
    \ -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local\
    \ -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local\
    \ -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local\
    \ -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local\
    \ -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local\
    \ -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local\
    \ -a tmp\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxtoqr6s9.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a digits=()\n    local -a names=()\n    local\
    \ -a digits_tmp=()\n    local -a names_tmp=()\n    local -a digits_tmp2=()\n \
    \   local -a names_tmp2=()\n    local -a digits_tmp3=()\n    local -a names_tmp3=()\n\
    \    local -a digits_tmp4=()\n    local -a names_tmp4=()\n    local -a digits_tmp5=()\n\
    \    local -a names_tmp5=()\n    local -a digits_tmp6=()\n    local -a names_tmp6=()\n\
    \    local -a digits_tmp7=()\n    local -a names_tmp7=()\n    local -a digits_tmp8=()\n\
    \    local -a names_tmp8=()\n    local -a digits_tmp9=()\n    local -a names_tmp9=()\n\
    \    local -a digits_tmp10=()\n    local -a names_tmp10=()\n    local -a digits_tmp11=()\n\
    \    local -a names_tmp11=()\n    local -a digits_tmp12=()\n    local -a names_tmp12=()\n\
    \    local -a digits_tmp13=()\n    local -a names_tmp13=()\n    local -a digits_tmp14=()\n\
    \    local -a names_tmp14=()\n    local -a digits_tmp15=()\n    local -a names_tmp15=()\n\
    \    local -a digits_tmp16=()\n    local -a names_tmp16=()\n    local -a digits_tmp17=()\n\
    \    local -a names_tmp17=()\n    local -a digits_tmp18=()\n    local -a names_tmp18=()\n\
    \    local -a digits_tmp19=()\n    local -a names_tmp19=()\n    local -a digits_tmp20=()\n\
    \    local -a names_tmp20=()\n    local -a digits_tmp21=()\n    local -a names_tmp21=()\n\
    \    local -a digits_tmp22=()\n    local -a names_tmp22=()\n    local \n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaa77xfqx.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local i j k l m\n    local -a names\n    local -a tmp\n\
    \    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n\
    \    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n\
    \    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n\
    \    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n\
    \    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n\
    \    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n\
    \    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n\
    \    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n\
    \    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n\
    \    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n\
    \    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n\
    \    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n\
    \    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n\
    \    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n\
    \    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n\
    \    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n\
    \    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n\
    \    local \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwx9nq3ki.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -i i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph747qrqs.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=(\"$@\")\n\
    \  local -a result=()\n  local -i i\n  local -a names\n  local -a tmp\n  local\
    \ -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n\
    \  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local\
    \ -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n\
    \  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local\
    \ -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n\
    \  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local\
    \ -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n\
    \  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local\
    \ -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n\
    \  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local\
    \ -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n\
    \  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local\
    \ -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n\
    \  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local\
    \ -a tmp65\n  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a names\n  local -a result\n\n  arr=( $1 )\n  names=( One Two Three Four Five\
    \ Six Seven Eight Nine )\n\n  result=()\n  for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \    local j=0\n    while [[ $j<${#names[@]} && ${arr[i]} -gt ${names[j]} ]];\
    \ do\n      j=$(( j+1 ))\n    done\n    result+=( \"${names[j]}\" )\n    arr[i]=${arr[i]}\n\
    \  done\n\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j k l m n o p q r s t u v w x y z\n    for\
    \ (( i=0; i<${#arr[@]}; i++ )); do\n        local j=0\n        for (( j=0; j<${#arr[@]};\
    \ j++ )); do\n            if [[ ${arr[j]} -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n\
    \                (( k = (${arr[j]} - 1) ))\n                arr[j]=\"${arr[j]}\"\
    \n                arr[k]=\"${arr[k]}\"\n            fi\n        done\n       \
    \ local k=0\n        for (( j=0; j<${#arr[@]}; j++ )); do\n            if [[ ${arr[j]}\
    \ -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n                (( l = (${arr[j]} -\
    \ 1) ))\n                arr[j]=\"${arr[j]}\"\n                arr[l]=\"${arr[l]}\"\
    \n            fi\n        done\n        local m=0\n        for (( j=0; j<${#arr[@]};\
    \ j++ )); do\n            if [[ ${arr[j]} -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n\
    \                (( m = (${arr[j]} - 1) ))\n                arr[j]=\"${arr[j]}\"\
    \n                arr[m]=\"${arr[m]}\"\n            fi\n        done\n       \
    \ local n=0\n        for (( j=0; j<${#arr[@]}; j++ )); do\n            if [[ ${arr[j]}\
    \ -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n                (( n = (${arr[j]} -\
    \ 1) ))\n                arr[j]=\"${arr[j]}\"\n                arr[n]=\"${arr[n]}\"\
    \n            fi\n        done\n        local o=0\n        for (( j=0; j<${#arr[@]};\
    \ j++ )); do\n            if [[ ${arr[j]} -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n\
    \                (( o = (${arr[j]} - 1) ))\n                arr[j]=\"${arr[j]}\"\
    \n                arr[o]=\"${arr[o]}\"\n            fi\n        done\n       \
    \ local p=0\n        for (( j=0; j<${#arr[@]}; j++ )); do\n            if [[ ${arr[j]}\
    \ -ge 1 ]] && [[ ${arr[j]} -le 9 ]]; then\n                (( p = (${arr[j]} -\
    \ 1) ))\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpffyydae7.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpffyydae7.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a lengths=(\"1\"\
    \ \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a digits=()\n \
    \   local -a digits_reversed=()\n    local -a digits_reversed_reversed=()\n  \
    \  local -a digits_reversed_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reverse\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa4rtnixz.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=( $1 )\n\
    \  local -a result=()\n  local -i len=0\n  local -i i\n  local -i j\n  local -i\
    \ k\n  local -i tmp\n  local -i tmp2\n  local -i tmp3\n  local -i tmp4\n  local\
    \ -i tmp5\n  local -i tmp6\n  local -i tmp7\n  local -i tmp8\n  local -i tmp9\n\
    \  local -i tmp10\n  local -i tmp11\n  local -i tmp12\n  local -i tmp13\n  local\
    \ -i tmp14\n  local -i tmp15\n  local -i tmp16\n  local -i tmp17\n  local -i tmp18\n\
    \  local -i tmp19\n  local -i tmp20\n  local -i tmp21\n  local -i tmp22\n  local\
    \ -i tmp23\n  local -i tmp24\n  local -i tmp25\n  local -i tmp26\n  local -i tmp27\n\
    \  local -i tmp28\n  local -i tmp29\n  local -i tmp30\n  local -i tmp31\n  local\
    \ -i tmp32\n  local -i tmp33\n  local -i tmp34\n  local -i tmp35\n  local -i tmp36\n\
    \  local -i tmp37\n  local -i tmp38\n  local -i tmp39\n  local -i tmp40\n  local\
    \ -i tmp41\n  local -i tmp42\n  local -i tmp43\n  local -i tmp44\n  local -i tmp45\n\
    \  local -i tmp46\n  local -i tmp47\n  local -i tmp48\n  local -i tmp49\n  local\
    \ -i tmp50\n  local -i tmp51\n  local -i tmp52\n  local -i tmp53\n  local -i tmp54\n\
    \  local -i tmp55\n  local -i tmp56\n  local -i tmp57\n  local -i tmp58\n  local\
    \ -i tmp59\n  local -i tmp60\n  local -i tmp61\n  local -i tmp62\n  local -i tmp63\n\
    \  local -i tmp64\n  local -i tmp65\n  local -i tmp66\n  local -i tmp67\n  local\
    \ -i tmp68\n  local -i tmp69\n  local -i tmp70\n  local -i tmp71\n  local -i tmp72\n\
    \  local -i tmp73\n  local -i tmp74\n  local -i tmp75\n  local -i tmp76\n  local\
    \ -i tmp77\n  local -i tmp78\n  local -i tmp79\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length=\"$2\"\n  local output\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local A\n  local B\n  local C\n  local D\n  local E\n  local F\n  local\
    \ G\n  local H\n  local I\n  local J\n  local K\n  local L\n  local M\n  local\
    \ N\n  local O\n  local P\n  local Q\n  local R\n  local S\n  local T\n  local\
    \ U\n  local V\n  local W\n  local X\n  local Y\n  local Z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local\
    \ D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local\
    \ K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local\
    \ R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local\
    \ Y\n  local Z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ A\n  local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a sorted\n  local -a reversed\n  local -a output\n\n  sorted=( ${arr[@]} )\n\
    \  reversed=( ${sorted[@]:0:9} ${sorted[@]:10} )\n  output=(\n    \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\n  )\n\n  for\
    \ i in \"${!reversed[@]}\"; do\n    arr[i]=\"${output[${reversed[$i]}]}\"\n  done\n\
    \n  printf '%s\\n' \"${arr[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpx6v0waab.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local i j\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        j=$(( ${#arr[@]} - 1 - i ))\n        result+=(\"${arr[i]}\")\n      \
    \  arr[i]=${arr[j]}\n        arr[j]=${arr[i]}\n    done\n    local -n arr2=$1\n\
    \    for (( i=0; i<${#arr[@]}; i++ )); do\n        j=$(( ${#arr[@]} - 1 - i ))\n\
    \        arr2[i]=${arr2[j]}\n        arr2[j]=${arr2[i]}\n    done\n    local -n\
    \ arr3=$1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        j=$(( ${#arr[@]}\
    \ - 1 - i ))\n        arr3[i]=${arr3[j]}\n        arr3[j]=${arr3[i]}\n    done\n\
    \    local -n arr4=$1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        j=$((\
    \ ${#arr[@]} - 1 - i ))\n        arr4[i]=${arr4[j]}\n        arr4[j]=${arr4[i]}\n\
    \    done\n    local -n arr5=$1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \      j=$(( ${#arr[@]} - 1 - i ))\n        arr5[i]=${arr5[j]}\n        arr5[j]=${arr5[i]}\n\
    \    done\n    local -n arr6=$1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \      j=$(( ${#arr[@]} - 1 - i ))\n        arr6[i]=${arr6[j]}\n        arr6[j]=${arr6[i]}\n\
    \    done\n    local -n arr7=$1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \      j=$(( ${#arr[@]} - 1 - i ))\n        arr7[i]=${arr7[j]}\n        arr7[j]=${arr7[i]}\n\
    \    done\n    local -n arr8=$1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \      j=$(( ${#arr[@]} - 1 - i ))\n        arr8[i]=${arr8[j]}\n        arr8[j]=${arr8[i]}\n\
    \    done\n    local -n arr9=$1\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp9khax0zf.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmp9khax0zf.sh: line 26: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 32: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 38: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 44: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 50: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 56: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 62: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    /tmp/tmp9khax0zf.sh: line 68: local: `2 1 1 4 5 8 2 3'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local -a digits=()\n  local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a tmp=()\n\
    \  local -a tmp2=()\n  local -a tmp3=()\n  local -a tmp4=()\n  local -a tmp5=()\n\
    \  local -a tmp6=()\n  local -a tmp7=()\n  local -a tmp8=()\n  local -a tmp9=()\n\
    \  local -a tmp10=()\n  local -a tmp11=()\n  local -a tmp12=()\n  local -a tmp13=()\n\
    \  local -a tmp14=()\n  local -a tmp15=()\n  local -a tmp16=()\n  local -a tmp17=()\n\
    \  local -a tmp18=()\n  local -a tmp19=()\n  local -a tmp20=()\n  local -a tmp21=()\n\
    \  local -a tmp22=()\n  local -a tmp23=()\n  local -a tmp24=()\n  local -a tmp25=()\n\
    \  local -a tmp26=()\n  local -a tmp27=()\n  local -a tmp28=()\n  local -a tmp29=()\n\
    \  local -a tmp30=()\n  local -a tmp31=()\n  local -a tmp32=()\n  local -a tmp33=()\n\
    \  local -a tmp34=()\n  local -a tmp35=()\n  local -a tmp36=()\n  local -a tmp37=()\n\
    \  local -a tmp38=()\n  local -a tmp39=()\n  local -a tmp40=()\n  local -a tmp41=()\n\
    \  local -a tmp42=()\n  local -a tmp43=()\n  local -a tmp44=()\n  local -a tmp45=()\n\
    \  local -a tmp46=()\n  local -a tmp47=()\n  local -a tmp48=()\n  local -a tmp49=()\n\
    \  local -a tmp50=()\n  local -a tmp51=()\n  \n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu3ws1cjz.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local array=\"$1\"\n\
    \    local length=\"$2\"\n    local output\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local A\n    local B\n    local\
    \ C\n    local D\n    local E\n    local F\n    local G\n    local H\n    local\
    \ I\n    local J\n    local K\n    local L\n    local M\n    local N\n    local\
    \ O\n    local P\n    local Q\n    local R\n    local S\n    local T\n    local\
    \ U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046108
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -n arr=$1\n  local\
    \ -a result=()\n  local i j\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local\
    \ -n num=${arr[i]}\n    if [[ ${num} -ge 1 ]] && [[ ${num} -le 9 ]]; then\n  \
    \    local -n name=${!num}\n      result+=(\"\\\"${name}\\\"\")\n    fi\n  done\n\
    \  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpb35qw_31.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=\"$1\"\n \
    \ local length\n  local i\n  local j\n  local result\n  local num\n  local str\n\
    \  local name\n  local tmp\n  local tmp2\n  local tmp3\n  local tmp4\n  local\
    \ tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n\
    \  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n  local tmp15\n \
    \ local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n  local tmp20\n  local\
    \ tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n\
    \  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n  local tmp31\n \
    \ local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n  local tmp36\n  local\
    \ tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n\
    \  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n  local tmp47\n \
    \ local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n  local tmp52\n  local\
    \ tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n\
    \  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n  local tmp63\n \
    \ local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n  local tmp68\n  local\
    \ tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n\
    \  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n  local tmp79\n \
    \ local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n  local tmp84\n  local\
    \ tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n\
    \  local tmp91\n  local tmp92\n  local tmp93\n  local tmp94\n  local tmp95\n \
    \ local tmp96\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local\
    \ len=${#arr}\n    local i=0\n    local result=()\n    while [ $i -lt $len ];\
    \ do\n        if [[ $arr[$i] -ge 1 ]] && [[ $arr[$i] -le 9 ]]; then\n        \
    \    result+=(\"\\\"${arr[$i]}\\\"\" )\n        fi\n        (( i++ ))\n    done\n\
    \    if [[ $i -eq 0 ]]; then\n        echo \"[]\"\n    else\n        echo \"${result[@]}\"\
    \n    fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[0]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[0]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[1]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[1]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[2]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[2]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[3]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[3]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[4]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[4]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[5]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[5]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[6]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[6]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[7]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[7]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[8]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[8]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[9]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[9]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[10]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[10]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[11]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[11]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[12]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[12]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[13]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[13]")

    /tmp/tmp5vy3wqkk.sh: line 22: [[: 2 1 1 4 5 8 2 3[14]: syntax error in expression
    (error token is "1 1 4 5 8 2 3[14]")

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -a names\n    local -i i\n    local len\n    local\
    \ num\n    local str\n    local strlen\n    local strnum\n    local strstr\n \
    \   local strstrlen\n    local strstrnum\n    local strstrstr\n    local strstrstrlen\n\
    \    local strstrstrnum\n    local strstrstrstr\n    local strstrstrstrlen\n \
    \   local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstrstrnum\n    local strstrstrstrstr\n    local strstrstrstrlen\n\
    \    local strstrstr\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcsz00v_8.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a digits=()\n   \
    \ local -a digits_reversed=()\n    local -a digits_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed=()\n    local -a digits_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed=()\n    local\
    \ -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \    local -a digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8xppwtmh.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660046109
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -n arr=$1\n  \
    \  local -a result\n    local -n digits=$2\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i i\n    local -i len2\n    local -i len3\n    local -i len4\n   \
    \ local -i len5\n    local -i len6\n    local -i len7\n    local -i len8\n   \
    \ local -i len9\n    local -i len10\n    local -i len11\n    local -i len12\n\
    \    local -i len13\n    local -i len14\n    local -i len15\n    local -i len16\n\
    \    local -i len17\n    local -i len18\n    local -i len19\n    local -i len20\n\
    \    local -i len21\n    local -i len22\n    local -i len23\n    local -i len24\n\
    \    local -i len25\n    local -i len26\n    local -i len27\n    local -i len28\n\
    \    local -i len29\n    local -i len30\n    local -i len31\n    local -i len32\n\
    \    local -i len33\n    local -i len34\n    local -i len35\n    local -i len36\n\
    \    local -i len37\n    local -i len38\n    local -i len39\n    local -i len40\n\
    \    local -i len41\n    local -i len42\n    local -i len43\n    local -i len44\n\
    \    local -i len45\n    local -i len46\n    local -i len47\n    local -i len48\n\
    \    local -i len49\n    local -i len50\n    local -i len51\n    local -i len52\n\
    \    local -i len53\n    local -i len54\n    local -i len55\n    local -i len56\n\
    \    local -i len57\n    local -i len58\n    local -i len59\n    local -i len60\n\
    \    local -i len61\n    local -i len62\n    local -i len63\n    local -i len64\n\
    \    local -i len65\n    local -i len66\n    local -i len67\n    local -i len68\n\
    \    local -i len69\n    local -i len70\n    local -i len71\n    local -i len72\n\
    \    local -i len73\n    local -i len74\n    local -i len75\n    local -i len76\n\
    \    local -i len77\n    local -i len78\n    local -i len79\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjlvuse4f.sh: line 17: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    /tmp/tmpjlvuse4f.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660046109
