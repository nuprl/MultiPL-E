name: HumanEval_128_prod_signs
language: sh
prompt: "#!/bin/bash\n# You are given an array arr of integers and you need to return\n\
  # sum of magnitudes of integers multiplied by product of all signs\n# of each number\
  \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
  # Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\"\
  )\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\n\
  prod_signs() {\n"
tests: "}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\"\
  \ ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\
  \") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
  \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[\
  \ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
completions: ["  local arr=$1\n  local signs=$(echo $arr | sed 's/ /\\n/g' | sort\
    \ -n | uniq -u | wc -l)\n  local signs_arr=($(echo $signs))\n  local signs_arr_len=${#signs_arr[@]}\n\
    \  local signs_arr_max=${#signs_arr[@]}\n  local signs_arr_max_idx=0\n  local\
    \ signs_arr_max_val=${signs_arr[0]}\n  local signs_arr_max_val_sign=1\n  local\
    \ signs_arr_max_val_sign_idx=0\n  local signs_arr_max_val_sign_val=0\n  local\
    \ signs_arr_max_val_sign_val_sign=1\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_", " \
    \   local arr=\"$1\"\n    local sign\n    local sum\n    local product\n    local\
    \ i\n    local j\n    local signs\n    local sign\n    local signs\n    local\
    \ sign\n    local signs\n    local sign\n    local signs\n    local sign\n   \
    \ local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n",
  "  local arr=\"$1\"\n  local sum=0\n  local signs=0\n  local sign\n  local i\n \
    \ local j\n  local sign\n  local signs\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local ",
  "  local arr=$1\n  local signs=$2\n  local sum=0\n  local product=1\n  local i\n\
    \n  for ((i=0; i<${#arr[@]}; i++)); do\n    local sign=${signs:$i:1}\n    local\
    \ num=${arr[$i]}\n    local sign=${sign:0:1}\n    local sign=${sign:1}\n    local\
    \ product=$((product * sign))\n    local sum=$((sum + num * product))\n  done\n\
    \  echo \"$sum\"", "  local arr=\"$1\"\n  local signs=()\n  local sum=0\n  local\
    \ product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]}; i++)); do\n \
    \   sign=${arr[i]}\n    signs+=(\"$sign\")\n    ((sum+=sign*product))\n    ((product*=sign))\n\
    \  done\n  if [[ ${#signs[@]} -eq 0 ]]; then\n    return 0\n  fi\n  echo \"$sum\"",
  "    local arr=$1\n    local sum=0\n    local sign=1\n    local i\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        local val=${arr[i]}\n        if (( val < 0\
    \ )); then\n            sign=-1\n        fi\n        sum=$(( sum + sign * val\
    \ ))\n    done\n    echo \"$sum\"", "    local arr=$1\n    local sum=0\n    local\
    \ signs=0\n    local i\n    local sign\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        sign=${arr[i]}\n        if (( sign )); then\n            signs=$((signs+sign))\n\
    \        else\n            signs=$((signs+signs))\n        fi\n    done\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if (( sign ));\
    \ then\n            sum=$((sum+signs*sign))\n        fi\n    done\n    echo $sum",
  "  local arr=\"$1\"\n  local sum=0\n  local signs=0\n  local product=1\n  local\
    \ i\n  for i in \"${arr[@]}\"; do\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n     \
    \ signs=$((signs+1))\n      sum=$((sum+i))\n    else\n      product=$((product*$i))\n\
    \    fi\n  done\n  if (( signs > 0 )); then\n    sum=$((sum*product))\n  fi\n\
    \  echo \"$sum\"", "  local arr=$1\n  local sum=0\n  local signs=0\n  local sign\n\
    \  local i\n  local j\n  local sign\n  for ((i=0; i<${#arr[@]}; i++)); do\n  \
    \  sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i\
    \ in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs\
    \ * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n\
    \    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1)));\
    \ do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq\
    \ 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n\
    \  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n   \
    \ signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n\
    \    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i\
    \ in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs\
    \ * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n\
    \    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1)));\
    \ do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq\
    \ 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n\
    \  done\n  for i in $(", "  local arr=$1\n  local sum=0\n  local signs=0\n  local\
    \ i\n  for i in $arr; do\n    signs=$((signs * $i))\n  done\n  for i in $arr;\
    \ do\n    sum=$((sum + $i * $signs))\n  done\n  echo $sum", "    local arr=\"\
    $1\"\n    local signs=\"\"\n    local sum=0\n    local product=1\n    local i\n\
    \    local j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        signs=\"${signs}\
    \ ${arr[i]}\"\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        product=$((product*${arr[i]}))\n\
    \    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$((sum+${arr[i]}*${signs}))\n\
    \    done\n    echo \"$sum\"", "    local arr=$1\n    local signs=$2\n    local\
    \ sum=0\n    local product=1\n    local sign\n    for sign in $signs; do\n   \
    \     sum=$((sum + $sign*product))\n        product=$((product*sign))\n    done\n\
    \    if [[ $sum -eq 0 ]]; then\n        echo \"None\"\n    else\n        echo\
    \ \"$sum\"\n    fi", "  local arr=\"$1\"\n  local sign\n  local sum\n  local product\n\
    \  local i\n  local j\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n", " \
    \ local arr=$1\n  local signs=0\n  local sign\n  local i\n  local sum=0\n  local\
    \ product=1\n  local sign\n  local signs\n  local sign\n  for ((i = 0; i < ${#arr[@]};\
    \ i++)); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n    sign=$((sign\
    \ * sign))\n    sum=$((sum + sign))\n    product=$((product * sign))\n  done\n\
    \  if ((signs > 0)); then\n    sum=$((sum + signs))\n  fi\n  if ((product > 0));\
    \ then\n    product=$((product * signs))\n  fi\n  echo $((sum * product))", " \
    \ local arr=$1\n  local sum=0\n  local sign=1\n  local i\n  for i in $arr; do\n\
    \    sum=$((sum + $i * $sign))\n    sign=$((sign * -1))\n  done\n  echo $sum",
  "    local arr=$1\n    local signs=0\n    local sign\n    for sign in $arr; do\n\
    \        signs=$((signs*sign))\n    done\n    echo $signs", "  local arr=\"$1\"\
    \n  local signs=()\n  local sum=0\n  local product=1\n  local i\n  for i in \"\
    ${arr[@]}\"; do\n    signs+=(\"$i\")\n    product=$((product*$i))\n  done\n  for\
    \ i in \"${signs[@]}\"; do\n    sum=$((sum+$i))\n  done\n  if (( ${#arr[@]} >\
    \ 0 )); then\n    echo $((sum*product))\n  else\n    echo None\n  fi", "    local\
    \ arr=\"$1\"\n    local sum=0\n    local sign=1\n    local product=1\n    for\
    \ (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[i]}\n        if [[\
    \ ${elem} -eq 0 ]]; then\n            continue\n        fi\n        sign=${elem}\n\
    \        product=${product} * ${sign}\n        sum=${sum} + ${sign}\n    done\n\
    \    echo \"${sum}\"", "    local arr=$1\n    local sum=0\n    local sign=1\n\
    \    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n   \
    \     if [[ ${elem} -gt 0 ]]; then\n            sum=$((sum+elem*sign))\n     \
    \   fi\n        sign=$((sign*-1))\n    done\n    echo \"$sum\"", "  local arr=$1\n\
    \  local sum=0\n  local signs=0\n  local product=1\n  local i\n  for i in $arr;\
    \ do\n    signs=$((signs * $i))\n  done\n  for i in $arr; do\n    product=$((product\
    \ * $i))\n  done\n  sum=$((signs * product))\n  if (( ${#arr} > 0 )); then\n \
    \   echo $sum\n  else\n    echo $sum\n  fi"]
stop_tokens:
- "\n}"
