language: sh
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"${string#*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\
    \n  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff=$((max-min))\n  local\
    \ closest=$((min+diff/2))\n  local closestInt=$((closest))\n  local closestIntString=$((closestInt))\n\
    \  local closestIntStringLen=$((${#closestIntString}))\n  local closestIntStringLenMinusOne=$((${#closestIntString}-1))\n\
    \  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n \
    \ local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local\
    \ closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n\
    \  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n \
    \ local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local\
    \ closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n\
    \  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n \
    \ local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local\
    \ closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n\
    \  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n \
    \ local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local\
    \ closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n\
    \  local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n \
    \ local closestIntStringLenMinusOne=$((${closestIntStringLenMinusOne}+1))\n  local\
    \ closestIntStringLen\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff1\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local number=\"${string%.*}\"\n  local integer=\"${string#*.}\"\
    \n  local diff\n  local closest\n  local diff2\n  local closest2\n  local diff3\n\
    \  local closest3\n  local diff4\n  local closest4\n  local diff5\n  local closest5\n\
    \  local diff6\n  local closest6\n  local diff7\n  local closest7\n  local diff8\n\
    \  local closest8\n  local diff9\n  local closest9\n  local diff10\n  local closest10\n\
    \  local diff11\n  local closest11\n  local diff12\n  local closest12\n  local\
    \ diff13\n  local closest13\n  local diff14\n  local closest14\n  local diff15\n\
    \  local closest15\n  local diff16\n  local closest16\n  local diff17\n  local\
    \ closest17\n  local diff18\n  local closest18\n  local diff19\n  local closest19\n\
    \  local diff20\n  local closest20\n  local diff21\n  local closest21\n  local\
    \ diff22\n  local closest22\n  local diff23\n  local closest23\n  local diff24\n\
    \  local closest24\n  local diff25\n  local closest25\n  local diff26\n  local\
    \ closest26\n  local diff27\n  local closest27\n  local diff28\n  local closest28\n\
    \  local diff29\n  local closest29\n  local diff30\n  local closest30\n  local\
    \ diff31\n  local closest31\n  local diff32\n  local closest32\n  local diff33\n\
    \  local closest33\n  local diff34\n  local closest34\n  local diff35\n  local\
    \ closest35\n  local diff36\n  local closest36\n  local diff37\n  local closest37\n\
    \  local diff38\n  local closest38\n  local diff39\n  local closest39\n  local\
    \ diff40\n  local closest40\n  local diff41\n  local closest41\n  local diff42\n\
    \  local closest42\n  local diff43\n  local closest43\n  local diff44\n  local\
    \ closest44\n  local diff45\n  local closest45\n  local diff46\n  local closest46\n\
    \  local diff47\n  local closest47\n  local diff48\n  local closest48\n  local\
    \ diff49\n  local closest49\n\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local diff\n    local diff2\n    local diff3\n\
    \    local diff4\n    local diff5\n    local diff6\n    local diff7\n    local\
    \ diff8\n    local diff9\n    local diff10\n    local diff11\n    local diff12\n\
    \    local diff13\n    local diff14\n    local diff15\n    local diff16\n    local\
    \ diff17\n    local diff18\n    local diff19\n    local diff20\n    local diff21\n\
    \    local diff22\n    local diff23\n    local diff24\n    local diff25\n    local\
    \ diff26\n    local diff27\n    local diff28\n    local diff29\n    local diff30\n\
    \    local diff31\n    local diff32\n    local diff33\n    local diff34\n    local\
    \ diff35\n    local diff36\n    local diff37\n    local diff38\n    local diff39\n\
    \    local diff40\n    local diff41\n    local diff42\n    local diff43\n    local\
    \ diff44\n    local diff45\n    local diff46\n    local diff47\n    local diff48\n\
    \    local diff49\n    local diff50\n    local diff51\n    local diff52\n    local\
    \ diff53\n    local diff54\n    local diff55\n    local diff56\n    local diff57\n\
    \    local diff58\n    local diff59\n    local diff60\n    local diff61\n    local\
    \ diff62\n    local diff63\n    local diff64\n    local diff65\n    local diff66\n\
    \    local diff67\n    local diff68\n    local diff69\n    local diff70\n    local\
    \ diff71\n    local diff72\n    local diff73\n    local diff74\n    local diff75\n\
    \    local diff76\n    local diff77\n    local diff78\n    local diff79\n    local\
    \ diff80\n    local diff81\n    local diff82\n    local diff83\n    local diff84\n\
    \    local diff85\n    local diff86\n    local diff87\n    local diff88\n    local\
    \ diff89\n    local diff90\n    local diff91\n    local diff92\n    local diff93\n\
    \    local diff94\n    local diff95\n    local diff96\n    local diff97\n    local\
    \ diff98\n    local diff99\n    local diff100\n    local diff\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local closest\n  local diff\n \
    \ local diff1\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local\
    \ diff6\n  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local\
    \ diff11\n  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local\
    \ diff16\n  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local\
    \ diff21\n  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local\
    \ diff26\n  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local\
    \ diff31\n  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local\
    \ diff36\n  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local\
    \ diff41\n  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local\
    \ diff46\n  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local\
    \ diff51\n  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local\
    \ diff56\n  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local\
    \ diff61\n  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local\
    \ diff66\n  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local\
    \ diff71\n  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local\
    \ diff76\n  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local\
    \ diff81\n  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local\
    \ diff86\n  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local\
    \ diff91\n  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local\
    \ diff96\n  local diff97\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local closestdiffdiffabs\n\
    \  local closestdiffabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local closestdiff\n  local closestclosest\n  local closestclosestdiff\n  local\
    \ closestclosestclosest\n  local closestclosestclosestdiff\n  local closestclosestclosestclosest\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosest\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestdiff\n  local closestdiff\n  local diff\n  local diff\n\
    \  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest\n  local diff\n\n  closest=\"\
    $integer\"\n  diff=\"$integer\"\n  while [ \"$diff\" -gt 0 ]; do\n    diff=\"\
    $(( $integer - $closest ))\"\n    closest=\"$(( $closest + 1 ))\"\n  done\n  echo\
    \ \"$closest\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpamr1tpb7.sh: line 25: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ string=\"$1\"\n    local integer=\"$2\"\n    local closest=\"$3\"\n    local\
    \ diff=\"$4\"\n    local sign=\"$5\"\n    local digit=\"$6\"\n    local digits=\"\
    $7\"\n    local digits_length=\"$8\"\n    local digits_length2=\"$9\"\n    local\
    \ digits_length3=\"$10\"\n    local digits_length4=\"$11\"\n    local digits_length5=\"\
    $12\"\n    local digits_length6=\"$13\"\n    local digits_length7=\"$14\"\n  \
    \  local digits_length8=\"$15\"\n    local digits_length9=\"$16\"\n    local digits_length10=\"\
    $17\"\n    local digits_length11=\"$18\"\n    local digits_length12=\"$19\"\n\
    \    local digits_length13=\"$20\"\n    local digits_length14=\"$21\"\n    local\
    \ digits_length15=\"$22\"\n    local digits_length16=\"$23\"\n    local digits_length17=\"\
    $24\"\n    local digits_length18=\"$25\"\n    local digits_length19=\"$26\"\n\
    \    local digits_length20=\"$27\"\n    local digits_length21=\"$28\"\n    local\
    \ digits_length22=\"$29\"\n    local digits_length23=\"$30\"\n    local digits_length24=\"\
    $31\"\n    local digits_length25=\"$32\"\n    local digits_length26=\"$33\"\n\
    \    local digits_length27=\"$34\"\n    local digits_length28=\"$35\"\n    local\
    \ digits_length29=\"$36\"\n    local digits_length30=\"$37\"\n    local digits_length31=\"\
    $38\"\n    local digits_length32=\"$39\"\n    local digits_length33=\"$40\"\n\
    \    local digits_length34=\"$41\"\n    local digits_length35=\"$42\"\n    local\
    \ digits_length36=\"$43\"\n    local digits_length37=\"$44\"\n    local digits_length38=\"\
    $45\"\n    local digits_length39=\"$46\"\n    local digits_length40=\"$47\"\n\
    \    local digits_length41=\"$48\"\n    local digits_length42=\"$49\"\n    local\
    \ digits_length43=\"$50\"\n    local digits_length44=\"$51\"\n    local digits_length45=\"\
    $52\"\n    local digits_length46=\"$53\"\n    local digits_length47=\"$54\"\n\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local closest2\n  local diff3\n  local closest3\n  local diff4\n  local closest4\n\
    \  local diff5\n  local closest5\n  local diff6\n  local closest6\n  local diff7\n\
    \  local closest7\n  local diff8\n  local closest8\n  local diff9\n  local closest9\n\
    \  local diff10\n  local closest10\n  local diff11\n  local closest11\n  local\
    \ diff12\n  local closest12\n  local diff13\n  local closest13\n  local diff14\n\
    \  local closest14\n  local diff15\n  local closest15\n  local diff16\n  local\
    \ closest16\n  local diff17\n  local closest17\n  local diff18\n  local closest18\n\
    \  local diff19\n  local closest19\n  local diff20\n  local closest20\n  local\
    \ diff21\n  local closest21\n  local diff22\n  local closest22\n  local diff23\n\
    \  local closest23\n  local diff24\n  local closest24\n  local diff25\n  local\
    \ closest25\n  local diff26\n  local closest26\n  local diff27\n  local closest27\n\
    \  local diff28\n  local closest28\n  local diff29\n  local closest29\n  local\
    \ diff30\n  local closest30\n  local diff31\n  local closest31\n  local diff32\n\
    \  local closest32\n  local diff33\n  local closest33\n  local diff34\n  local\
    \ closest34\n  local diff35\n  local closest35\n  local diff36\n  local closest36\n\
    \  local diff37\n  local closest37\n  local diff38\n  local closest38\n  local\
    \ diff39\n  local closest39\n  local diff40\n  local closest40\n  local diff41\n\
    \  local closest41\n  local diff42\n  local closest42\n  local diff43\n  local\
    \ closest43\n  local diff44\n  local closest44\n  local diff45\n  local closest45\n\
    \  local diff46\n  local closest46\n  local diff47\n  local closest47\n  local\
    \ diff48\n  local closest48\n  local diff49\n  local closest49\n  local diff50\n\
    \  local closest50\n  local diff51\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=$1\n  local integer=0\n  local diff\n  local diff1\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"${string#*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\
    \n  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closest2\n  local diff\n  local diff2\n\
    \  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n \
    \ local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local closestdiff\n    local closestdiffdiffabs\n\
    \    local closestdiffabsabs\n    local closestdiffabsabsabs\n    local closestdiffabsabsabsabs\n\
    \    local closestdiffabsabsabsabs\n    local closestdiffabsabsabsabsabs\n   \
    \ local closestdiffabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabs\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"${string#*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\
    \n  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \  local integer=\"${integer##*[!0-9]}\"\n  local integer=\"${integer%%.*}\"\n\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local integer\n    local diff\n    local closest\n    local closestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestclosestdiff\n\
    \    local closestclosestdiff\n    local closestclosestdiff\n    local closestdiff\n\
    \    local closestdiff\n    local closestdiff\n    local closestdiff\n    local\
    \ closestdiff\n    local closestdiff\n    local closestdiff\n    local closestdiff\n\
    \    local closestdiff\n    local closestdiff\n    local closestdiff\n    local\
    \ closestdiff\n    local closestdiff\n    local closestdiff\n    local closestdiff\n\
    \    local closestdiff\n    local closestdiff\n    local closestdiff\n    local\
    \ closestdiff\n    local closestdiff\n    local closestdiff\n    local closestdiff\n\
    \    local closestdiff\n    local closestdiff\n    local closestdiff\n    local\
    \ closestdiff\n    local closestdiff\n    local closestdiff\n    local closestdiff\n\
    \    local closestdiff\n    local closestdiff\n    local closestdiff\n    local\
    \ closestdiff\n    local closestdiff\n    local closestdiff\n    local closestdiff\n\
    \    local closestdiff\n    local closestdiff\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local closest\n  local diff\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local diff2\n  local closest2\n\
    \  local diff3\n  local closest3\n  local diff4\n  local closest4\n  local diff5\n\
    \  local closest5\n  local diff6\n  local closest6\n  local diff7\n  local closest7\n\
    \  local diff8\n  local closest8\n  local diff9\n  local closest9\n  local diff10\n\
    \  local closest10\n  local diff11\n  local closest11\n  local diff12\n  local\
    \ closest12\n  local diff13\n  local closest13\n  local diff14\n  local closest14\n\
    \  local diff15\n  local closest15\n  local diff16\n  local closest16\n  local\
    \ diff17\n  local closest17\n  local diff18\n  local closest18\n  local diff19\n\
    \  local closest19\n  local diff20\n  local closest20\n  local diff21\n  local\
    \ closest21\n  local diff22\n  local closest22\n  local diff23\n  local closest23\n\
    \  local diff24\n  local closest24\n  local diff25\n  local closest25\n  local\
    \ diff26\n  local closest26\n  local diff27\n  local closest27\n  local diff28\n\
    \  local closest28\n  local diff29\n  local closest29\n  local diff30\n  local\
    \ closest30\n  local diff31\n  local closest31\n  local diff32\n  local closest32\n\
    \  local diff33\n  local closest33\n  local diff34\n  local closest34\n  local\
    \ diff35\n  local closest35\n  local diff36\n  local closest36\n  local diff37\n\
    \  local closest37\n  local diff38\n  local closest38\n  local diff39\n  local\
    \ closest39\n  local diff40\n  local closest40\n  local diff41\n  local closest41\n\
    \  local diff42\n  local closest42\n  local diff43\n  local closest43\n  local\
    \ diff44\n  local closest44\n  local diff45\n  local closest45\n  local diff46\n\
    \  local closest46\n  local diff47\n  local closest47\n  local diff48\n  local\
    \ closest48\n  local diff49\n  local closest49\n  local diff50\n  local closest50\n\
    \  local diff51\n  local closest\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff1\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local closestdiffabs\n\
    \  local closestdiffabsabs\n  local closestdiffdiffabsabsabs\n  local closestdiffdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabsabs\n  local closestdiffabsabsabsabsabsabs\n  \n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestNumber\n  local diff\n  local diff2\n\
    \  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n \
    \ local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local number=\"${string%.*}\"\n  local digits=${#number}\n\
    \  local closest\n  local diff\n  local diff1\n  local diff2\n  local diff3\n\
    \  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n \
    \ local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestNumber\n  local diff\n  local diffNumber\n\
    \  local diffNumberString\n  local diffNumberString2\n  local diffNumberString3\n\
    \  local diffNumberString4\n  local diffNumberString5\n  local diffNumberString6\n\
    \  local diffNumberString7\n  local diffNumberString8\n  local diffNumberString9\n\
    \  local diffNumberString10\n  local diffNumberString11\n  local diffNumberString12\n\
    \  local diffNumberString13\n  local diffNumberString14\n  local diffNumberString15\n\
    \  local diffNumberString16\n  local diffNumberString17\n  local diffNumberString18\n\
    \  local diffNumberString19\n  local diffNumberString20\n  local diffNumberString21\n\
    \  local diffNumberString22\n  local diffNumberString23\n  local diffNumberString24\n\
    \  local diffNumberString25\n  local diffNumberString26\n  local diffNumberString27\n\
    \  local diffNumberString28\n  local diffNumberString29\n  local diffNumberString30\n\
    \  local diffNumberString31\n  local diffNumberString32\n  local diffNumberString33\n\
    \  local diffNumberString34\n  local diffNumberString35\n  local diffNumberString36\n\
    \  local diffNumberString37\n  local diffNumberString38\n  local diffNumberString39\n\
    \  local diffNumberString40\n  local diffNumberString41\n  local diffNumberString42\n\
    \  local diffNumberString43\n  local diffNumberString44\n  local diffNumberString45\n\
    \  local diffNumberString46\n  local diffNumberString47\n  local diffNumberString48\n\
    \  local diffNumberString49\n  local diffNumberString50\n  local diffNumberString51\n\
    \  local diffNumberString52\n  local diffNumberString53\n  local diffNumberString54\n\
    \  local diffNumberString55\n  local diffNumberString56\n  local diffNumberString57\n\
    \  local diffNumberString58\n  local diffNumberString59\n  local diffNumberString60\n\
    \  local diffNumberString61\n  local diffNumberString62\n  local diffNumberString63\n\
    \  local diffNumberString64\n  local diffNumberString65\n  local diffNumberString66\n\
    \  local diffNumberString67\n  local diffNumberString68\n  local diffNumberString69\n\
    \  local diffNumberString70\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestdiff\n  local diff\n  local diffdiff\n\
    \  local diffdiffdiff\n  local diffdiffdiffdiff\n  local diffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local closestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestdiff\n  local\
    \ closestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n  local\
    \ closestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestdiff\n  local\
    \ diff\n  local integer\n  integer=\"$integer\"\n  diff=\"$integer\"\n  closestdiff=\"\
    $integer\"\n  closestclosestdiff=\"$integer\"\n  closestclosestclosestdiff=\"\
    $integer\"\n  closestclosestclosestdiff=\"$integer\"\n  closestclosestclosestdiff=\"\
    $integer\"\n  closestclosestclosestdiff=\"$integer\"\n  closestclosestclosestdiff=\"\
    $integer\"\n  closestclosestclosestdiff=\"$integer\"\n  closestclosestclosestdiff=\"\
    $integer\"\n  closestclosestclosestdiff=\"$integer\"\n  \n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local closest2\n  local diff3\n  local closest3\n  local diff4\n  local closest4\n\
    \  local diff5\n  local closest5\n  local diff6\n  local closest6\n  local diff7\n\
    \  local closest7\n  local diff8\n  local closest8\n  local diff9\n  local closest9\n\
    \  local diff10\n  local closest10\n  local diff11\n  local closest11\n  local\
    \ diff12\n  local closest12\n  local diff13\n  local closest13\n  local diff14\n\
    \  local closest14\n  local diff15\n  local closest15\n  local diff16\n  local\
    \ closest16\n  local diff17\n  local closest17\n  local diff18\n  local closest18\n\
    \  local diff19\n  local closest19\n  local diff20\n  local closest20\n  local\
    \ diff21\n  local closest21\n  local diff22\n  local closest22\n  local diff23\n\
    \  local closest23\n  local diff24\n  local closest24\n  local diff25\n  local\
    \ closest25\n  local diff26\n  local closest26\n  local diff27\n  local closest27\n\
    \  local diff28\n  local closest28\n  local diff29\n  local closest29\n  local\
    \ diff30\n  local closest30\n  local diff31\n  local closest31\n  local diff32\n\
    \  local closest32\n  local diff33\n  local closest33\n  local diff34\n  local\
    \ closest34\n  local diff35\n  local closest35\n  local diff36\n  local closest36\n\
    \  local diff37\n  local closest37\n  local diff38\n  local closest38\n  local\
    \ diff39\n  local closest39\n  local diff40\n  local closest40\n  local diff41\n\
    \  local closest41\n  local diff42\n  local closest42\n  local diff43\n  local\
    \ closest43\n  local diff44\n  local closest44\n  local diff45\n  local closest45\n\
    \  local diff46\n  local closest46\n  local diff47\n  local closest47\n  local\
    \ diff48\n  local closest48\n  local diff49\n  local closest49\n  local diff50\n\
    \  local closest50\n  local diff51\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local number=\"$2\"\n  local closest\n  local diff\n  local\
    \ sign\n  local diffsign\n  local diffabs\n  local diffabssign\n  local diffabssignsign\n\
    \  local diffsignsign\n  local diffsignsignsign\n  local diffabssignsign\n  local\
    \ diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsignsignsign\n  local diffabssignsignsign\n\
    \  local diffabssignsignsign\n  local diffsignsign\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo \"$number\" | sed 's/\\./,/g')\n  local closest\n\
    \  local diff\n  local diff1\n  local diff2\n  local diff3\n  local diff4\n  local\
    \ diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n  local diff10\n\
    \  local diff11\n  local diff12\n  local diff13\n  local diff14\n  local diff15\n\
    \  local diff16\n  local diff17\n  local diff18\n  local diff19\n  local diff20\n\
    \  local diff21\n  local diff22\n  local diff23\n  local diff24\n  local diff25\n\
    \  local diff26\n  local diff27\n  local diff28\n  local diff29\n  local diff30\n\
    \  local diff31\n  local diff32\n  local diff33\n  local diff34\n  local diff35\n\
    \  local diff36\n  local diff37\n  local diff38\n  local diff39\n  local diff40\n\
    \  local diff41\n  local diff42\n  local diff43\n  local diff44\n  local diff45\n\
    \  local diff46\n  local diff47\n  local diff48\n  local diff49\n  local diff50\n\
    \  local diff51\n  local diff52\n  local diff53\n  local diff54\n  local diff55\n\
    \  local diff56\n  local diff57\n  local diff58\n  local diff59\n  local diff60\n\
    \  local diff61\n  local diff62\n  local diff63\n  local diff64\n  local diff65\n\
    \  local diff66\n  local diff67\n  local diff68\n  local diff69\n  local diff70\n\
    \  local diff71\n  local diff72\n  local diff73\n  local diff74\n  local diff75\n\
    \  local diff76\n  local diff77\n  local diff78\n  local diff79\n  local diff80\n\
    \  local diff81\n  local diff82\n  local diff83\n  local diff84\n  local diff85\n\
    \  local diff86\n  local diff87\n  local diff88\n  local diff89\n  local diff90\n\
    \  local diff91\n  local diff92\n  local diff93\n  local diff94\n  local diff95\n\
    \  local diff96\n\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest\n  local diff\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff1\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ string=\"$1\"\n    local integer=\"$2\"\n    local closest=\"$integer\"\n  \
    \  local diff\n\n    if [[ \"$integer\" == \"$string\" ]]; then\n        echo\
    \ \"$integer\"\n    elif [[ \"$integer\" == \"$closest\" ]]; then\n        echo\
    \ \"$integer\"\n    elif [[ \"$integer\" == \"$(( closest - 1 ))\" ]]; then\n\
    \        echo \"$closest\"\n    elif [[ \"$integer\" == \"$(( closest + 1 ))\"\
    \ ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\" == \"$(( closest\
    \ + 2 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\" == \"\
    $(( closest + 3 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\"\
    \ == \"$(( closest + 4 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"\
    $integer\" == \"$(( closest + 5 ))\" ]]; then\n        echo \"$closest\"\n   \
    \ elif [[ \"$integer\" == \"$(( closest + 6 ))\" ]]; then\n        echo \"$closest\"\
    \n    elif [[ \"$integer\" == \"$(( closest + 7 ))\" ]]; then\n        echo \"\
    $closest\"\n    elif [[ \"$integer\" == \"$(( closest + 8 ))\" ]]; then\n    \
    \    echo \"$closest\"\n    elif [[ \"$integer\" == \"$(( closest + 9 ))\" ]];\
    \ then\n        echo \"$closest\"\n    elif [[ \"$integer\" == \"$(( closest +\
    \ 10 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\" == \"\
    $(( closest + 11 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\"\
    \ == \"$(( closest + 12 ))\" ]]; then\n        echo \"$closest\"\n    elif [[\
    \ \"$integer\" == \"$(( closest + 13 ))\" ]]; then\n        echo \"$closest\"\n\
    \    elif [[ \"$integer\" == \"$(( closest + 14 ))\" ]]; then\n        echo \"\
    $closest\"\n    elif [[ \"$integer\" == \"$(( closest + 15 ))\" ]]; then\n   \
    \     echo \"$closest\"\n    elif [[ \"$integer\" == \"$(( closest + 16 ))\" ]];\
    \ then\n        echo \"$closest\"\n    elif [[ \"$integer\" == \"$(( closest +\
    \ 17 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\" == \"\
    $(( closest + 18 ))\" ]]; then\n        echo \"$closest\"\n    elif [[ \"$integer\"\
    \ == \"$(( closest + 19 ))\" ]]; then\n        echo \"$closest\"\n    elif [[\
    \ \"$integer\" == \"$(( closest + 20 ))\" ]]; then\n\n}\n\ncandidate() {\n   \
    \ closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp01_w_8_j.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmp01_w_8_j.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local closestDiff\n  local closestDiffIndex\n\
    \  local closestDiffIndex2\n  local closestDiffIndex3\n  local closestDiffIndex4\n\
    \  local closestDiffIndex5\n  local closestDiffIndex6\n  local closestDiffIndex7\n\
    \  local closestDiffIndex8\n  local closestDiffIndex9\n  local closestDiffIndex10\n\
    \  local closestDiffIndex11\n  local closestDiffIndex12\n  local closestDiffIndex13\n\
    \  local closestDiffIndex14\n  local closestDiffIndex15\n  local closestDiffIndex16\n\
    \  local closestDiffIndex17\n  local closestDiffIndex18\n  local closestDiffIndex19\n\
    \  local closestDiffIndex20\n  local closestDiffIndex21\n  local closestDiffIndex22\n\
    \  local closestDiffIndex23\n  local closestDiffIndex24\n  local closestDiffIndex25\n\
    \  local closestDiffIndex26\n  local closestDiffIndex27\n  local closestDiffIndex28\n\
    \  local closestDiffIndex29\n  local closestDiffIndex30\n  local closestDiffIndex31\n\
    \  local closestDiffIndex32\n  local closestDiffIndex33\n  local closestDiffIndex34\n\
    \  local closestDiffIndex35\n  local closestDiffIndex36\n  local closestDiffIndex37\n\
    \  local closestDiffIndex38\n  local closestDiffIndex39\n  local closestDiffIndex40\n\
    \  local closestDiffIndex41\n  local closestDiffIndex42\n  local closestDiffIndex43\n\
    \  local closestDiffIndex44\n  local closestDiffIndex45\n  local closestDiffIndex46\n\
    \  local closestDiffIndex47\n  local closestDiffIndex48\n  local closestDiffIndex49\n\
    \  local closestDiffIndex50\n  local closestDiffIndex51\n  local closestDiffIndex52\n\
    \  local closestDiffIndex53\n  local closestDiffIndex54\n  local closestDiffIndex55\n\
    \  local closestDiffIndex56\n  local closestDiffIndex57\n  local closestDiffIndex58\n\
    \  local closestDiffIndex59\n  local closestDiffIndex60\n  local closestDiffIndex61\n\
    \  local closestDiffIndex62\n  local closestDiffIndex63\n  local closestDiffIndex64\n\
    \  local closestDiffIndex65\n  local closestDiffIndex66\n  local closestDiffIndex67\n\
    \  local closestDiffIndex68\n  local closestDiffIndex69\n  local closestDiffIndex70\n\
    \  local closestDiff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ val=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ val=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"${string%.*}\"\n  local integer=\"${integer##*.}\"\
    \n  local integer=\"${integer%.*}\"\n  local integer=\"${integer##*+}\"\n  local\
    \ integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"\
    ${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\
    \n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local\
    \ integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"\
    ${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\
    \n  local integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local\
    \ integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"\
    ${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\
    \n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local\
    \ integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"\
    ${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\
    \n  local integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local\
    \ integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"\
    ${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\
    \n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local\
    \ integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"\
    ${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\
    \n  local integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local\
    \ integer=\"${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"\
    ${integer%%-*}\"\n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\
    \n  local integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local\
    \ integer=\"${integer##*-}\"\n  local integer=\"${integer%%-*}\"\n  local integer=\"\
    ${integer##*-}\"\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestInt\n  local diff\n  local diffInt\n\
    \  local diffInt2\n  local diffInt3\n  local diffInt4\n  local diffInt5\n  local\
    \ diffInt6\n  local diffInt7\n  local diffInt8\n  local diffInt9\n  local diffInt10\n\
    \  local diffInt11\n  local diffInt12\n  local diffInt13\n  local diffInt14\n\
    \  local diffInt15\n  local diffInt16\n  local diffInt17\n  local diffInt18\n\
    \  local diffInt19\n  local diffInt20\n  local diffInt21\n  local diffInt22\n\
    \  local diffInt23\n  local diffInt24\n  local diffInt25\n  local diffInt26\n\
    \  local diffInt27\n  local diffInt28\n  local diffInt29\n  local diffInt30\n\
    \  local diffInt31\n  local diffInt32\n  local diffInt33\n  local diffInt34\n\
    \  local diffInt35\n  local diffInt36\n  local diffInt37\n  local diffInt38\n\
    \  local diffInt39\n  local diffInt40\n  local diffInt41\n  local diffInt42\n\
    \  local diffInt43\n  local diffInt44\n  local diffInt45\n  local diffInt46\n\
    \  local diffInt47\n  local diffInt48\n  local diffInt49\n  local diffInt50\n\
    \  local diffInt51\n  local diffInt52\n  local diffInt53\n  local diffInt54\n\
    \  local diffInt55\n  local diffInt56\n  local diffInt57\n  local diffInt58\n\
    \  local diffInt59\n  local diffInt60\n  local diffInt61\n  local diffInt62\n\
    \  local diffInt63\n  local diffInt64\n  local diffInt65\n  local diffInt66\n\
    \  local diffInt67\n  local diffInt68\n  local diffInt69\n  local diffInt70\n\
    \  local diffInt71\n  local diffInt72\n  local diffInt73\n  local diffInt74\n\
    \  local diffInt75\n  local diffInt76\n  local diffInt77\n  local diffInt78\n\
    \  local diffInt79\n  local diffInt80\n  local diffInt81\n  local diffInt82\n\
    \  local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest\n  local diff\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest\n  local diff\n  local\
    \ diff1\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local diff\n  local closest\n  local diff\n  local closest\n  local diff\n \
    \ local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff2\n  local closest2\n  local diff3\n  local closest3\n  local diff4\n  local\
    \ closest4\n  local diff5\n  local closest5\n  local diff6\n  local closest6\n\
    \  local diff7\n  local closest7\n  local diff8\n  local closest8\n  local diff9\n\
    \  local closest9\n  local diff10\n  local closest10\n  local diff11\n  local\
    \ closest11\n  local diff12\n  local closest12\n  local diff13\n  local closest13\n\
    \  local diff14\n  local closest14\n  local diff15\n  local closest15\n  local\
    \ diff16\n  local closest16\n  local diff17\n  local closest17\n  local diff18\n\
    \  local closest18\n  local diff19\n  local closest19\n  local diff20\n  local\
    \ closest20\n  local diff21\n  local closest21\n  local diff22\n  local closest22\n\
    \  local diff23\n  local closest23\n  local diff24\n  local closest24\n  local\
    \ diff25\n  local closest25\n  local diff26\n  local closest26\n  local diff27\n\
    \  local closest27\n  local diff28\n  local closest28\n  local diff29\n  local\
    \ closest29\n  local diff30\n  local closest30\n  local diff31\n  local closest31\n\
    \  local diff32\n  local closest32\n  local diff33\n  local closest33\n  local\
    \ diff34\n  local closest34\n  local diff35\n  local closest35\n  local diff36\n\
    \  local closest36\n  local diff37\n  local closest37\n  local diff38\n  local\
    \ closest38\n  local diff39\n  local closest39\n  local diff40\n  local closest40\n\
    \  local diff41\n  local closest41\n  local diff42\n  local closest42\n  local\
    \ diff43\n  local closest43\n  local diff44\n  local closest44\n  local diff45\n\
    \  local closest45\n  local diff46\n  local closest46\n  local diff47\n  local\
    \ closest47\n  local diff48\n  local closest48\n  local diff49\n  local closest49\n\
    \  local diff50\n  local closest50\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo \"$number\" | sed 's/\\./,/g')\n  local closest\n\
    \  local closestdiff\n  local diff\n  local diffdiff\n  local diffdiffdiff\n \
    \ local diffdiffdiffdiff\n  local diffdiffdiffdiff\n  local diffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  \n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ closestDiff\n  local closestInteger\n  local closestString\n  local diffString\n\
    \  local diffInteger\n  local diffStringInteger\n  local diffIntegerString\n \
    \ local diffIntegerStringInteger\n  local diffIntegerStringIntegerInteger\n  local\
    \ diffIntegerStringIntegerIntegerInteger\n  local diffIntegerStringIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerInteger\n  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    \  local diffIntegerStringIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerIntegerInteger\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer=0\n  local diff\n\n  integer=$(echo $number | sed\
    \ 's/\\./\\.0/')\n  diff=$(echo $number | sed 's/\\./\\.0/' | bc)\n\n  if [ $diff\
    \ -eq 0 ]; then\n    echo \"$number\"\n  else\n    echo $(( $number + 1 ))\n \
    \ fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local integer\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local closest\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local closest\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local closest\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local closest\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local closest\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local closest\n    local diff\n    local closest\n    local diff\n\
    \    local closest\n    local diff\n    local closest\n    local diff\n    local\
    \ closest\n    local diff\n    local closest\n    local diff\n    local closest\n\
    \    local diff\n    local closest\n    local diff\n    local closest\n    local\
    \ diff\n    local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest\n  local diff\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local closest2\n  local diff3\n  local closest3\n  local diff4\n  local closest4\n\
    \  local diff5\n  local closest5\n  local diff6\n  local closest6\n  local diff7\n\
    \  local closest7\n  local diff8\n  local closest8\n  local diff9\n  local closest9\n\
    \  local diff10\n  local closest10\n  local diff11\n  local closest11\n  local\
    \ diff12\n  local closest12\n  local diff13\n  local closest13\n  local diff14\n\
    \  local closest14\n  local diff15\n  local closest15\n  local diff16\n  local\
    \ closest16\n  local diff17\n  local closest17\n  local diff18\n  local closest18\n\
    \  local diff19\n  local closest19\n  local diff20\n  local closest20\n  local\
    \ diff21\n  local closest21\n  local diff22\n  local closest22\n  local diff23\n\
    \  local closest23\n  local diff24\n  local closest24\n  local diff25\n  local\
    \ closest25\n  local diff26\n  local closest26\n  local diff27\n  local closest27\n\
    \  local diff28\n  local closest28\n  local diff29\n  local closest29\n  local\
    \ diff30\n  local closest30\n  local diff31\n  local closest31\n  local diff32\n\
    \  local closest32\n  local diff33\n  local closest33\n  local diff34\n  local\
    \ closest34\n  local diff35\n  local closest35\n  local diff36\n  local closest36\n\
    \  local diff37\n  local closest37\n  local diff38\n  local closest38\n  local\
    \ diff39\n  local closest39\n  local diff40\n  local closest40\n  local diff41\n\
    \  local closest41\n  local diff42\n  local closest42\n  local diff43\n  local\
    \ closest43\n  local diff44\n  local closest44\n  local diff45\n  local closest45\n\
    \  local diff46\n  local closest46\n  local diff47\n  local closest47\n  local\
    \ diff48\n  local closest48\n  local diff49\n  local closest49\n  local diff50\n\
    \  local closest50\n  local diff51\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=$1\n  local integer=0\n  local diff\n  local closest\n  local diff1\n\
    \  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n \
    \ local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local diff\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local closest\n  local diff\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local diffdiff\n\
    \  local closestdiffdiffdiff\n  local diffdiffdiff\n  local closestdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local closestdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local closestdiffabs\n\
    \  local closestdiffabsabs\n  local closestdiffdiffabsabsabs\n  local closestdiffdiffabsabsabsabs\n\
    \  local closestdiffdiffabsabsabsabs\n  local closestdiffdiffabsabsabsabs\n  local\
    \ closestdiffdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\
    \  local closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n  local\
    \ closestdiffabsabsabsabsabs\n  local closestdiffabsabsabsabsabs\n\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local closestNumber\n    local closestDistance\n\
    \    local closestDistanceString\n    local closestDistanceStringLength\n    local\
    \ closestDistanceStringLength2\n    local closestDistanceStringLength3\n    local\
    \ closestDistanceStringLength4\n    local closestDistanceStringLength5\n    local\
    \ closestDistanceStringLength6\n    local closestDistanceStringLength7\n    local\
    \ closestDistanceStringLength8\n    local closestDistanceStringLength9\n    local\
    \ closestDistanceStringLength10\n    local closestDistanceStringLength11\n   \
    \ local closestDistanceStringLength12\n    local closestDistanceStringLength13\n\
    \    local closestDistanceStringLength14\n    local closestDistanceStringLength15\n\
    \    local closestDistanceStringLength16\n    local closestDistanceStringLength17\n\
    \    local closestDistanceStringLength18\n    local closestDistanceStringLength19\n\
    \    local closestDistanceStringLength20\n    local closestDistanceStringLength21\n\
    \    local closestDistanceStringLength22\n    local closestDistanceStringLength23\n\
    \    local closestDistanceStringLength24\n    local closestDistanceStringLength25\n\
    \    local closestDistanceStringLength26\n    local closestDistanceStringLength27\n\
    \    local closestDistanceStringLength28\n    local closestDistanceStringLength29\n\
    \    local closestDistanceStringLength30\n    local closestDistanceStringLength31\n\
    \    local closestDistanceStringLength32\n    local closestDistanceStringLength33\n\
    \    local closestDistanceStringLength34\n    local closestDistanceStringLength35\n\
    \    local closestDistanceStringLength36\n    local closestDistanceStringLength37\n\
    \    local closestDistanceStringLength38\n    local closestDistanceStringLength39\n\
    \    local closestDistanceStringLength40\n    local closestDistanceStringLength41\n\
    \    local closestDistanceStringLength42\n    local closestDistanceStringLength43\n\
    \    local closestDistanceStringLength44\n    local closestDistanceStringLength45\n\
    \    local closestDistanceStringLength46\n    local closestDistanceStringLength47\n\
    \    local closestDistanceStringLength48\n    local closestDistanceStringLength49\n\
    \    local closestDistanceStringLength50\n    local closestDistanceStringLength51\n\
    \    local closestDistanceStringLength52\n    local closestDistanceStringLength53\n\
    \    local closestDistanceStringLength54\n    local closestDistanceStringLength55\n\
    \    local closestDistanceStringLength56\n    local closestDistanceStringLength57\n\
    \    local closestDistanceStringLength58\n    local closestDistanceStringLength59\n\
    \    local closestDistanceStringLength60\n    local closestDistanceStringLength61\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ sign\n  local diffsign\n  local diffdiff\n  local diffdiffsign\n  local diffdiffdiff\n\
    \  local diffdiffdiffsign\n  local diffdiffdiffdiff\n  local diffdiffdiffdiffsign\n\
    \  local diffdiffdiffdiffdiffsign\n  local diffdiffdiffdiffdiffsign\n  local diffdiffdiffdiffdiffsign\n\
    \  local diffdiffdiffdiffdiffsign\n  local diffdiffdiffdiffdiffsign\n  local diffdiffdiffdiffsign\n\
    \  local diffdiffdiffsign\n  local diffdiffsign\n  local diffsign\n  local sign\n\
    \  local diff\n  local diffsign\n  local diffdiff\n  local diffdiffsign\n  local\
    \ diffdiff\n  local diffdiffsign\n  local diffdiff\n  local diffdiffsign\n  local\
    \ diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n\
    \  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local\
    \ diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n\
    \  local diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local\
    \ diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n\
    \  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local\
    \ diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n\
    \  local diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local\
    \ diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n\
    \  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local\
    \ diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n\
    \  local diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local\
    \ diffdiff\n  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n\
    \  local diffsign\n  local diffdiff\n  local diffsign\n  local diffdiff\n  local\
    \ diffsign\n  local diffdiff\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  \n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local closestdiff\n\
    \  local diffdiff\n  local diffdiffdiff\n  local diffdiffdiffdiff\n  local diffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestdiff\n  local closestdiffabs\n  local\
    \ closestdiffabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n  local closestdiffabsabsabsabs\n\
    \  local closestdiffabsabsabsabs\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo \"$number\" | sed 's/\\./,/g')\n  local integers_array=($integers)\n\
    \  local closest_integer\n  local closest_integer_index\n  local diff\n  local\
    \ diff_index\n  local diff_value\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff_value_index\n  local diff_value_index\n\
    \  local diff_value_index\n  local diff\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestNumber\n  local diff\n  local diff2\n\
    \  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n \
    \ local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local diff\n    local diff2\n    local diff3\n\
    \    local diff4\n    local diff5\n    local diff6\n    local diff7\n    local\
    \ diff8\n    local diff9\n    local diff10\n    local diff11\n    local diff12\n\
    \    local diff13\n    local diff14\n    local diff15\n    local diff16\n    local\
    \ diff17\n    local diff18\n    local diff19\n    local diff20\n    local diff21\n\
    \    local diff22\n    local diff23\n    local diff24\n    local diff25\n    local\
    \ diff26\n    local diff27\n    local diff28\n    local diff29\n    local diff30\n\
    \    local diff31\n    local diff32\n    local diff33\n    local diff34\n    local\
    \ diff35\n    local diff36\n    local diff37\n    local diff38\n    local diff39\n\
    \    local diff40\n    local diff41\n    local diff42\n    local diff43\n    local\
    \ diff44\n    local diff45\n    local diff46\n    local diff47\n    local diff48\n\
    \    local diff49\n    local diff50\n    local diff51\n    local diff52\n    local\
    \ diff53\n    local diff54\n    local diff55\n    local diff56\n    local diff57\n\
    \    local diff58\n    local diff59\n    local diff60\n    local diff61\n    local\
    \ diff62\n    local diff63\n    local diff64\n    local diff65\n    local diff66\n\
    \    local diff67\n    local diff68\n    local diff69\n    local diff70\n    local\
    \ diff71\n    local diff72\n    local diff73\n    local diff74\n    local diff75\n\
    \    local diff76\n    local diff77\n    local diff78\n    local diff79\n    local\
    \ diff80\n    local diff81\n    local diff82\n    local diff83\n    local diff84\n\
    \    local diff85\n    local diff86\n    local diff87\n    local diff88\n    local\
    \ diff89\n    local diff90\n    local diff91\n    local diff92\n    local diff93\n\
    \    local diff94\n    local diff95\n    local diff96\n    local diff97\n    local\
    \ diff98\n    local diff99\n    local diff100\n    local diff\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local diff\n    local closestdiff\n    local\
    \ closestdiffdiff\n    local closestdiffdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n\
    \    local closestdiff2\n    local closestdiff2\n    local closestdiff2\n    local\
    \ closestdiff2\n    local closestdiff2\n\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local closestdiff2\n\
    \  local closestdiff3\n  local closestdiff4\n  local closestdiff5\n  local closestdiff6\n\
    \  local closestdiff7\n  local closestdiff8\n  local closestdiff9\n  local closestdiff10\n\
    \  local closestdiff11\n  local closestdiff12\n  local closestdiff13\n  local\
    \ closestdiff14\n  local closestdiff15\n  local closestdiff16\n  local closestdiff17\n\
    \  local closestdiff18\n  local closestdiff19\n  local closestdiff20\n  local\
    \ closestdiff21\n  local closestdiff22\n  local closestdiff23\n  local closestdiff24\n\
    \  local closestdiff25\n  local closestdiff26\n  local closestdiff27\n  local\
    \ closestdiff28\n  local closestdiff29\n  local closestdiff30\n  local closestdiff31\n\
    \  local closestdiff32\n  local closestdiff33\n  local closestdiff34\n  local\
    \ closestdiff35\n  local closestdiff36\n  local closestdiff37\n  local closestdiff38\n\
    \  local closestdiff39\n  local closestdiff40\n  local closestdiff41\n  local\
    \ closestdiff42\n  local closestdiff43\n  local closestdiff44\n  local closestdiff45\n\
    \  local closestdiff46\n  local closestdiff47\n  local closestdiff48\n  local\
    \ closestdiff49\n  local closestdiff50\n  local closestdiff51\n  local closestdiff52\n\
    \  local closestdiff53\n  local closestdiff54\n  local closestdiff55\n  local\
    \ closestdiff56\n  local closestdiff57\n  local closestdiff58\n  local closestdiff59\n\
    \  local closestdiff60\n  local closestdiff61\n  local closestdiff62\n  local\
    \ closestdiff63\n  local closestdiff64\n  local closestdiff65\n  local closestdiff66\n\
    \  local closestdiff67\n  local closestdiff68\n  local closestdiff69\n  local\
    \ closestdiff70\n  local closestdiff71\n  local closestdiff72\n  local closestdiff73\n\
    \  local closestdiff74\n  local closestdiff75\n  local closestdiff76\n  local\
    \ closestdiff77\n  local closestdiff78\n  local closestdiff79\n  local closestdiff80\n\
    \  local closestdiff81\n  local closestdiff82\n  local closestdiff83\n  \n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff1\n \
    \ local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local\
    \ diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local\
    \ diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local\
    \ diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local\
    \ diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local\
    \ diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local\
    \ diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local\
    \ diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local\
    \ diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local\
    \ diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local\
    \ diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local\
    \ diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local\
    \ diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local\
    \ diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local\
    \ diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local\
    \ diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local\
    \ diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local\
    \ diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local\
    \ diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local\
    \ diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local diff\n    local closest\n    local closestdiff\n    local\
    \ closestclosest\n    local closestclosestdiff\n    local closestclosestclosest\n\
    \    local closestclosestclosestdiff\n    local closestclosestclosestclosest\n\
    \    local closestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosest\n\
    \    local closestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosest\n\
    \    local closestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestclosestdiff\n\
    \    local closestclosestclosestclosestclosestdiff\n    local closestclosestclosestclosestdiff\n\
    \    local closestclosestclosestdiff\n    local closestdiff\n    local diff\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n\n  # If the given number is equidistant from two integers, round it away\n\
    \  # from zero.\n  if [ \"$integer\" -gt \"$closest\" ] || [ \"$integer\" -lt\
    \ \"$closest\" ]; then\n    closest=\"$integer\"\n  fi\n\n  # If the given number\
    \ is equidistant from two integers, round it away\n  # from zero.\n  if [ \"$integer\"\
    \ -gt \"$closest\" ] || [ \"$integer\" -lt \"$closest\" ]; then\n    closest=\"\
    $integer\"\n  fi\n\n  # If the given number is equidistant from two integers,\
    \ round it away\n  # from zero.\n  if [ \"$integer\" -gt \"$closest\" ] || [ \"\
    $integer\" -lt \"$closest\" ]; then\n    closest=\"$integer\"\n  fi\n\n  # If\
    \ the given number is equidistant from two integers, round it away\n  # from zero.\n\
    \  if [ \"$integer\" -gt \"$closest\" ] || [ \"$integer\" -lt \"$closest\" ];\
    \ then\n    closest=\"$integer\"\n  fi\n\n  # If the given number is equidistant\
    \ from two integers, round it away\n  # from zero.\n  if [ \"$integer\" -gt \"\
    $closest\" ] || [ \"$integer\" -lt \"$closest\" ]; then\n    closest=\"$integer\"\
    \n  fi\n\n  # If the given number is equidistant from two integers, round it away\n\
    \  # from zero.\n  if [ \"$integer\" -gt \"$closest\" ] || [ \"$integer\" -lt\
    \ \"$closest\" ]; then\n    closest=\"$integer\"\n  fi\n\n  # If the given number\
    \ is equidistant from two integers, round it away\n  # from zero.\n  if [ \"$integer\"\
    \ -gt \"$closest\" ] || [ \"$integer\" -lt \"$closest\" ]; then\n    closest=\"\
    $integer\"\n  fi\n\n  # If the given number is equidistant from two integers,\
    \ round it away\n  # from zero.\n  if [ \"$integer\" -gt \"$closest\" ] || [ \"\
    $integer\" -lt \"$closest\" ]; then\n    closest=\"$integer\"\n  fi\n\n  # If\
    \ the given number is equidistant from two integers, round it away\n  # from zero.\n\
    \  if [ \"$integer\" -gt \"$closest\" ] || [ \"$integer\" -lt \"$closest\" ];\
    \ then\n    closest=\"$integer\"\n  fi\n\n  # If the given number is equidistant\
    \ from two integers, round it away\n  # from zero.\n  if [ \"$integer\" -gt \"\
    $closest\" ] || [ \"$integer\" -lt \"$closest\" ]; then\n    closest=\"$integer\"\
    \n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvv9fgk4e.sh: line 25: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 25: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 31: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 31: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 37: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 37: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 43: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 43: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 49: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 49: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 55: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 55: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 61: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 61: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 67: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 67: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 73: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 73: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 79: [: : integer expression expected

    /tmp/tmpvv9fgk4e.sh: line 79: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local number=\"${string#*[!0-9]}\"\n  local number=\"${number%?}\"\
    \n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local\
    \ number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local number=\"\
    ${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\
    \n  local number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local\
    \ number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local number=\"\
    ${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\
    \n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local\
    \ number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local number=\"\
    ${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\
    \n  local number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local\
    \ number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local number=\"\
    ${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\
    \n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local\
    \ number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local number=\"\
    ${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\
    \n  local number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local\
    \ number=\"${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local number=\"\
    ${number%?}\"\n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\
    \n  local number=\"${number#*[!0-9]}\"\n  local number=\"${number%?}\"\n\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local closestdiff\n    local closestdiffabs\n\
    \    local closestdiffabsabs\n    local closestdiffabsabsabs\n    local closestdiffabsabsabsabs\n\
    \    local closestdiffabsabsabsabs\n    local closestdiffabsabsabsabsabs\n   \
    \ local closestdiffabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabsabs\n    local closestdiffabsabsabsabsabsabs\n\
    \    local closestdiffabsabsabsabsabs\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local integer\n    local diff\n    local closest\n    local diff1\n\
    \    local diff2\n    local diff3\n    local diff4\n    local diff5\n    local\
    \ diff6\n    local diff7\n    local diff8\n    local diff9\n    local diff10\n\
    \    local diff11\n    local diff12\n    local diff13\n    local diff14\n    local\
    \ diff15\n    local diff16\n    local diff17\n    local diff18\n    local diff19\n\
    \    local diff20\n    local diff21\n    local diff22\n    local diff23\n    local\
    \ diff24\n    local diff25\n    local diff26\n    local diff27\n    local diff28\n\
    \    local diff29\n    local diff30\n    local diff31\n    local diff32\n    local\
    \ diff33\n    local diff34\n    local diff35\n    local diff36\n    local diff37\n\
    \    local diff38\n    local diff39\n    local diff40\n    local diff41\n    local\
    \ diff42\n    local diff43\n    local diff44\n    local diff45\n    local diff46\n\
    \    local diff47\n    local diff48\n    local diff49\n    local diff50\n    local\
    \ diff51\n    local diff52\n    local diff53\n    local diff54\n    local diff55\n\
    \    local diff56\n    local diff57\n    local diff58\n    local diff59\n    local\
    \ diff60\n    local diff61\n    local diff62\n    local diff63\n    local diff64\n\
    \    local diff65\n    local diff66\n    local diff67\n    local diff68\n    local\
    \ diff69\n    local diff70\n    local diff71\n    local diff72\n    local diff73\n\
    \    local diff74\n    local diff75\n    local diff76\n    local diff77\n    local\
    \ diff78\n    local diff79\n    local diff80\n    local diff81\n    local diff82\n\
    \    local diff83\n    local diff84\n    local diff85\n    local diff86\n    local\
    \ diff87\n    local diff88\n    local diff89\n    local diff90\n    local diff91\n\
    \    local diff92\n    local diff93\n    local diff94\n    local diff95\n    local\
    \ diff96\n    local diff97\n    local diff98\n    local diff99\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local diff\n    local diff2\n    local diff3\n\
    \    local diff4\n    local diff5\n    local diff6\n    local diff7\n    local\
    \ diff8\n    local diff9\n    local diff10\n    local diff11\n    local diff12\n\
    \    local diff13\n    local diff14\n    local diff15\n    local diff16\n    local\
    \ diff17\n    local diff18\n    local diff19\n    local diff20\n    local diff21\n\
    \    local diff22\n    local diff23\n    local diff24\n    local diff25\n    local\
    \ diff26\n    local diff27\n    local diff28\n    local diff29\n    local diff30\n\
    \    local diff31\n    local diff32\n    local diff33\n    local diff34\n    local\
    \ diff35\n    local diff36\n    local diff37\n    local diff38\n    local diff39\n\
    \    local diff40\n    local diff41\n    local diff42\n    local diff43\n    local\
    \ diff44\n    local diff45\n    local diff46\n    local diff47\n    local diff48\n\
    \    local diff49\n    local diff50\n    local diff51\n    local diff52\n    local\
    \ diff53\n    local diff54\n    local diff55\n    local diff56\n    local diff57\n\
    \    local diff58\n    local diff59\n    local diff60\n    local diff61\n    local\
    \ diff62\n    local diff63\n    local diff64\n    local diff65\n    local diff66\n\
    \    local diff67\n    local diff68\n    local diff69\n    local diff70\n    local\
    \ diff71\n    local diff72\n    local diff73\n    local diff74\n    local diff75\n\
    \    local diff76\n    local diff77\n    local diff78\n    local diff79\n    local\
    \ diff80\n    local diff81\n    local diff82\n    local diff83\n    local diff84\n\
    \    local diff85\n    local diff86\n    local diff87\n    local diff88\n    local\
    \ diff89\n    local diff90\n    local diff91\n    local diff92\n    local diff93\n\
    \    local diff94\n    local diff95\n    local diff96\n    local diff97\n    local\
    \ diff98\n    local diff99\n    local diff100\n    local diff\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local closestdiff\n  local closestclosest\n  local closestclosestdiff\n  local\
    \ closestclosestclosest\n  local closestclosestclosestdiff\n  local closestclosestclosestclosest\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestclosestdiff\n  local closestclosestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestdiff\n  local closestdiff\n\
    \  local diff\n  local diffdiff\n  local diffdiffdiff\n  local diffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiff\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local diff\n  local closest\n  local diff\n  local closest\n  local diff\n \
    \ local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local closestdiff\n  local closestdiffabs\n  local\
    \ closestdiffabsabs\n  local closestdiffdiffabsabs\n  local closestdiffdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n  local closestdiffabsabsabs\n\
    \  local closestdiffabsabsabs\n  local closest\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local diff2\n  local closest2\n\
    \  local diff3\n  local closest3\n  local diff4\n  local closest4\n  local diff5\n\
    \  local closest5\n  local diff6\n  local closest6\n  local diff7\n  local closest7\n\
    \  local diff8\n  local closest8\n  local diff9\n  local closest9\n  local diff10\n\
    \  local closest10\n  local diff11\n  local closest11\n  local diff12\n  local\
    \ closest12\n  local diff13\n  local closest13\n  local diff14\n  local closest14\n\
    \  local diff15\n  local closest15\n  local diff16\n  local closest16\n  local\
    \ diff17\n  local closest17\n  local diff18\n  local closest18\n  local diff19\n\
    \  local closest19\n  local diff20\n  local closest20\n  local diff21\n  local\
    \ closest21\n  local diff22\n  local closest22\n  local diff23\n  local closest23\n\
    \  local diff24\n  local closest24\n  local diff25\n  local closest25\n  local\
    \ diff26\n  local closest26\n  local diff27\n  local closest27\n  local diff28\n\
    \  local closest28\n  local diff29\n  local closest29\n  local diff30\n  local\
    \ closest30\n  local diff31\n  local closest31\n  local diff32\n  local closest32\n\
    \  local diff33\n  local closest33\n  local diff34\n  local closest34\n  local\
    \ diff35\n  local closest35\n  local diff36\n  local closest36\n  local diff37\n\
    \  local closest37\n  local diff38\n  local closest38\n  local diff39\n  local\
    \ closest39\n  local diff40\n  local closest40\n  local diff41\n  local closest41\n\
    \  local diff42\n  local closest42\n  local diff43\n  local closest43\n  local\
    \ diff44\n  local closest44\n  local diff45\n  local closest45\n  local diff46\n\
    \  local closest46\n  local diff47\n  local closest47\n  local diff48\n  local\
    \ closest48\n  local diff49\n  local closest49\n  local diff50\n  local closest50\n\
    \  local diff51\n  local closest\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ closestDiff\n  local closestString\n  local closestInteger\n  local closestIntegerString\n\
    \  local closestIntegerStringLength\n  local closestIntegerStringLengthDiff\n\
    \  local closestIntegerStringLengthDiff2\n  local closestIntegerStringLengthDiff3\n\
    \  local closestIntegerStringLengthDiff4\n  local closestIntegerStringLengthDiff5\n\
    \  local closestIntegerStringLengthDiff6\n  local closestIntegerStringLengthDiff7\n\
    \  local closestIntegerStringLengthDiff8\n  local closestIntegerStringLengthDiff9\n\
    \  local closestIntegerStringLengthDiff10\n  local closestIntegerStringLengthDiff11\n\
    \  local closestIntegerStringLengthDiff12\n  local closestIntegerStringLengthDiff13\n\
    \  local closestIntegerStringLengthDiff14\n  local closestIntegerStringLengthDiff15\n\
    \  local closestIntegerStringLengthDiff16\n  local closestIntegerStringLengthDiff17\n\
    \  local closestIntegerStringLengthDiff18\n  local closestIntegerStringLengthDiff19\n\
    \  local closestIntegerStringLengthDiff20\n  local closestIntegerStringLengthDiff21\n\
    \  local closestIntegerStringLengthDiff22\n  local closestIntegerStringLengthDiff23\n\
    \  local closestIntegerStringLengthDiff24\n  local closestIntegerStringLengthDiff25\n\
    \  local closestIntegerStringLengthDiff26\n  local closestIntegerStringLengthDiff27\n\
    \  local closestIntegerStringLengthDiff28\n  local closestIntegerStringLengthDiff29\n\
    \  local closestIntegerStringLengthDiff30\n  local closestIntegerStringLengthDiff31\n\
    \  local closestIntegerStringLengthDiff32\n  local closestIntegerStringLengthDiff33\n\
    \  local closestIntegerStringLengthDiff34\n  local closestIntegerStringLengthDiff35\n\
    \  local closestIntegerStringLengthDiff36\n  local closestIntegerStringLengthDiff37\n\
    \  local closestIntegerStringLengthDiff38\n  local closestIntegerStringLengthDiff39\n\
    \  local closestIntegerStringLengthDiff40\n  local closestIntegerStringLengthDiff41\n\
    \  local closestIntegerStringLengthDiff42\n  local closestIntegerStringLengthDiff43\n\
    \  local closestIntegerStringLengthDiff44\n  local closestIntegerStringLengthDiff45\n\
    \  local closestIntegerStringLengthDiff46\n  local closestIntegerStringLengthDiff47\n\
    \  local closestIntegerStringLengthDiff48\n  local closestIntegerStringLengthDiff49\n\
    \  local closestIntegerStringLengthDiff50\n  local closestIntegerStringLengthDiff51\n\
    \  local closestIntegerStringLength\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local closestdiff\n  local diffdiff\n\
    \  local diffdiffdiff\n  local diffdiffdiffdiff\n  local diffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n  local diffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local closestInteger\n    local closestIntegerString\n\
    \    local closestIntegerStringLength\n    local closestIntegerStringLength2\n\
    \    local closestIntegerStringLength3\n    local closestIntegerStringLength4\n\
    \    local closestIntegerStringLength5\n    local closestIntegerStringLength6\n\
    \    local closestIntegerStringLength7\n    local closestIntegerStringLength8\n\
    \    local closestIntegerStringLength9\n    local closestIntegerStringLength10\n\
    \    local closestIntegerStringLength11\n    local closestIntegerStringLength12\n\
    \    local closestIntegerStringLength13\n    local closestIntegerStringLength14\n\
    \    local closestIntegerStringLength15\n    local closestIntegerStringLength16\n\
    \    local closestIntegerStringLength17\n    local closestIntegerStringLength18\n\
    \    local closestIntegerStringLength19\n    local closestIntegerStringLength20\n\
    \    local closestIntegerStringLength21\n    local closestIntegerStringLength22\n\
    \    local closestIntegerStringLength23\n    local closestIntegerStringLength24\n\
    \    local closestIntegerStringLength25\n    local closestIntegerStringLength26\n\
    \    local closestIntegerStringLength27\n    local closestIntegerStringLength28\n\
    \    local closestIntegerStringLength29\n    local closestIntegerStringLength30\n\
    \    local closestIntegerStringLength31\n    local closestIntegerStringLength32\n\
    \    local closestIntegerStringLength33\n    local closestIntegerStringLength34\n\
    \    local closestIntegerStringLength35\n    local closestIntegerStringLength36\n\
    \    local closestIntegerStringLength37\n    local closestIntegerStringLength38\n\
    \    local closestIntegerStringLength39\n    local closestIntegerStringLength40\n\
    \    local closestIntegerStringLength41\n    local closestIntegerStringLength42\n\
    \    local closestIntegerStringLength43\n    local closestIntegerStringLength44\n\
    \    local closestIntegerStringLength45\n    local closestIntegerStringLength46\n\
    \    local closestIntegerStringLength47\n    local closestIntegerStringLength48\n\
    \    local closestIntegerStringLength49\n    local closestIntegerStringLength50\n\
    \    local closestIntegerStringLength51\n    local closestIntegerStringLength52\n\
    \    local closestIntegerStringLength53\n    local closestIntegerStringLength54\n\
    \    local closestIntegerStringLength55\n    local closestIntegerStringLength56\n\
    \    local closestIntegerStringLength57\n    local closestIntegerStringLength58\n\
    \    local closestIntegerStringLength59\n    local closestIntegerStringLength60\n\
    \    local closestIntegerStringLength61\n    local closestInteger\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n\n  if [[ \"$integer\" == \"$string\" ]]; then\n    return \"$integer\"\
    \n  fi\n\n  if [[ \"$integer\" == \"$closest\" ]]; then\n    return \"$integer\"\
    \n  fi\n\n  # Find the difference between the two numbers\n  diff=$(( $(echo \"\
    $integer - $closest\" | bc -l) )); \n\n  # If the difference is negative, round\
    \ up\n  if [[ \"$diff\" < 0 ]]; then\n    diff=$(( $(echo \"$diff + 1\" | bc -l)\
    \ ))\n  fi\n\n  # If the difference is positive, round down\n  if [[ \"$diff\"\
    \ > 0 ]]; then\n    diff=$(( $(echo \"$diff - 1\" | bc -l) ))\n  fi\n\n  # Return\
    \ the closest integer\n  echo \"$diff\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpff5m8ov7.sh: line 28: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local closestdiff\n  local closestclosest\n\
    \  local closestclosestdiff\n  local closestclosestclosest\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestclosest\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestdiff\n  local closestdiff\n  local diff\n  local number\n  local\
    \ closest\n  local closestdiff\n  local closestclosest\n  local closestdiff\n\
    \  local closestclosest\n  local closestdiff\n  local closestclosest\n  local\
    \ closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosest\n\
    \  local closestdiff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local diffdiff\n\
    \  local closestclosest\n  local closestclosestdiff\n  local closestclosestclosest\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestclosest\n  local\
    \ closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local closestclosestclosest\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n\
    \  local diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n\
    \  local diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n\
    \  local diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n\
    \  local diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n\
    \  local diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n\
    \  local diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n\
    \  local diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n\
    \  local diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n\
    \  local diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n\
    \  local diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n\
    \  local diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n\
    \  local diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n\
    \  local diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n\
    \  local diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n\
    \  local diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n\
    \  local diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n\
    \  local diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n\
    \  local diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n\
    \  local diff98\n  local diff99\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo \"$number\" | sed 's/\\./,/g' | sed 's/,/./g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g'\
    \ | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0*//g' | sed 's/^0\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeisrp1if.sh: line 19: unexpected EOF while looking for matching
    `''''

    /tmp/tmpeisrp1if.sh: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local diff\n    local diff1\n    local diff2\n\
    \    local diff3\n    local diff4\n    local diff5\n    local diff6\n    local\
    \ diff7\n    local diff8\n    local diff9\n    local diff10\n    local diff11\n\
    \    local diff12\n    local diff13\n    local diff14\n    local diff15\n    local\
    \ diff16\n    local diff17\n    local diff18\n    local diff19\n    local diff20\n\
    \    local diff21\n    local diff22\n    local diff23\n    local diff24\n    local\
    \ diff25\n    local diff26\n    local diff27\n    local diff28\n    local diff29\n\
    \    local diff30\n    local diff31\n    local diff32\n    local diff33\n    local\
    \ diff34\n    local diff35\n    local diff36\n    local diff37\n    local diff38\n\
    \    local diff39\n    local diff40\n    local diff41\n    local diff42\n    local\
    \ diff43\n    local diff44\n    local diff45\n    local diff46\n    local diff47\n\
    \    local diff48\n    local diff49\n    local diff50\n    local diff51\n    local\
    \ diff52\n    local diff53\n    local diff54\n    local diff55\n    local diff56\n\
    \    local diff57\n    local diff58\n    local diff59\n    local diff60\n    local\
    \ diff61\n    local diff62\n    local diff63\n    local diff64\n    local diff65\n\
    \    local diff66\n    local diff67\n    local diff68\n    local diff69\n    local\
    \ diff70\n    local diff71\n    local diff72\n    local diff73\n    local diff74\n\
    \    local diff75\n    local diff76\n    local diff77\n    local diff78\n    local\
    \ diff79\n    local diff80\n    local diff81\n    local diff82\n    local diff83\n\
    \    local diff84\n    local diff85\n    local diff86\n    local diff87\n    local\
    \ diff88\n    local diff89\n    local diff90\n    local diff91\n    local diff92\n\
    \    local diff93\n    local diff94\n    local diff95\n    local diff96\n    local\
    \ diff97\n    local diff98\n    local diff99\n    local diff\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo \"$number\" | sed -e 's/\\./\\\\./g' -e 's/\\\
    +/\\\\+/g' -e 's/\\-/\\\\-/g')\n  local closest=$(echo \"$number\" | awk '{print\
    \ int($1+0.5)}')\n  local diff=$(echo \"$closest-$integers\" | bc)\n  local diffs=$(echo\
    \ \"$diff\" | sed -e 's/\\./\\\\./g' -e 's/\\+/\\\\+/g' -e 's/\\-/\\\\-/g')\n\
    \  local diffs_length=$(echo \"$diffs\" | wc -c)\n  local diffs_lengths=$(echo\
    \ \"$diffs_length\" | sed -e 's/\\./\\\\./g' -e 's/\\+/\\\\+/g' -e 's/\\-/\\\\\
    -/g')\n  local diffs_lengths_length=$(echo \"$diffs_lengths\" | wc -c)\n  local\
    \ diffs_lengths_lengths=$(echo \"$diffs_lengths_length\" | sed -e 's/\\./\\\\\
    ./g' -e 's/\\+/\\\\+/g' -e 's/\\-/\\\\-/g')\n  local diffs_lengths_lengths_length=$(echo\
    \ \"$diffs_lengths_lengths\" | wc -c)\n  local diffs_lengths_lengths_lengths=$(echo\
    \ \"$diffs_lengths_lengths_length\" | sed -e 's/\\./\\\\./g' -e 's/\\+/\\\\+/g'\
    \ -e 's/\\-/\\\\-/g')\n  local diffs_lengths_lengths_lengths_length=$(echo \"\
    $diffs_lengths_lengths_lengths\" | wc -c)\n  local diffs_lengths_lengths_lengths_lengths=$(echo\
    \ \"$diffs_lengths_lengths_lengths_length\" | sed -e 's/\\./\\\\./g' -e 's/\\\
    +/\\\\+/g' -e 's/\\-/\\\\-/g')\n  local diffs_lengths_lengths_lengths_lengths_length=$(echo\
    \ \"$diffs_lengths_lengths_lengths_lengths\" | wc -c)\n  local diffs_lengths_lengths_lengths_lengths_lengths=$(echo\
    \ \"$diffs_lengths_lengths_lengths_lengths_length\" | sed -e 's/\\./\\\\./g' -e\
    \ 's/\\+/\\\\+/g' -e 's/\\-/\\\\-/g')\n  local diffs_lengths_lengths_lengths_lengths_lengths_length=$(echo\
    \ \"$diffs_lengths_lengths_lengths_lengths_lengths\" | wc -\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw95813ma.sh: line 33: unexpected EOF while looking for matching
    `)''

    /tmp/tmpw95813ma.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local closest\n    local closest2\n    local diff\n    local\
    \ diff2\n    local diff3\n    local diff4\n    local diff5\n    local diff6\n\
    \    local diff7\n    local diff8\n    local diff9\n    local diff10\n    local\
    \ diff11\n    local diff12\n    local diff13\n    local diff14\n    local diff15\n\
    \    local diff16\n    local diff17\n    local diff18\n    local diff19\n    local\
    \ diff20\n    local diff21\n    local diff22\n    local diff23\n    local diff24\n\
    \    local diff25\n    local diff26\n    local diff27\n    local diff28\n    local\
    \ diff29\n    local diff30\n    local diff31\n    local diff32\n    local diff33\n\
    \    local diff34\n    local diff35\n    local diff36\n    local diff37\n    local\
    \ diff38\n    local diff39\n    local diff40\n    local diff41\n    local diff42\n\
    \    local diff43\n    local diff44\n    local diff45\n    local diff46\n    local\
    \ diff47\n    local diff48\n    local diff49\n    local diff50\n    local diff51\n\
    \    local diff52\n    local diff53\n    local diff54\n    local diff55\n    local\
    \ diff56\n    local diff57\n    local diff58\n    local diff59\n    local diff60\n\
    \    local diff61\n    local diff62\n    local diff63\n    local diff64\n    local\
    \ diff65\n    local diff66\n    local diff67\n    local diff68\n    local diff69\n\
    \    local diff70\n    local diff71\n    local diff72\n    local diff73\n    local\
    \ diff74\n    local diff75\n    local diff76\n    local diff77\n    local diff78\n\
    \    local diff79\n    local diff80\n    local diff81\n    local diff82\n    local\
    \ diff83\n    local diff84\n    local diff85\n    local diff86\n    local diff87\n\
    \    local diff88\n    local diff89\n    local diff90\n    local diff91\n    local\
    \ diff92\n    local diff93\n    local diff94\n    local diff95\n    local diff96\n\
    \    local diff97\n    local diff98\n    local diff99\n    local diff\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ string=$1\n    local integer\n    integer=$(echo \"$string\" | sed -e 's/\\\
    ./\\\\./g' -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo\
    \ \"$integer\" | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n\
    \    integer=$(echo \"$integer\" | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\\
    ([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\" | sed -e 's/^0*//' -e 's/^-\\\
    ([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\" | sed -e 's/^0*//'\
    \ -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\"\
    \ | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo\
    \ \"$integer\" | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n\
    \    integer=$(echo \"$integer\" | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\\
    ([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\" | sed -e 's/^0*//' -e 's/^-\\\
    ([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\" | sed -e 's/^0*//'\
    \ -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\"\
    \ | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n    integer=$(echo\
    \ \"$integer\" | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\([0-9]*\\)$/\\1/')\n\
    \    integer=$(echo \"$integer\" | sed -e 's/^0*//' -e 's/^-\\([0-9]*\\)\\.\\\
    ([0-9]*\\)$/\\1/')\n    integer=$(echo \"$integer\" | sed -e 's/^0\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6vm9iile.sh: line 33: unexpected EOF while looking for matching
    `''''

    /tmp/tmp6vm9iile.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ closestDiff\n  local closestInteger\n  local closestString\n  local diffString\n\
    \  local diffInteger\n  local diffStringLength\n  local diffIntegerLength\n  local\
    \ diffStringLengthMinusIntegerLength\n  local diffIntegerLengthMinusStringLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLength\n  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLengthMinusIntegerLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLength\n\
    \  local diffStringLengthMinusIntegerLengthMinusStringLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLengthMinusIntegerLength\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ val=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n  local\
    \ closestDiff\n  local closestDiffAbs\n  local closestDiffAbsInt\n  local closestDiffAbsIntInt\n\
    \  local closestDiffAbsIntIntInt\n  local closestDiffAbsIntIntIntInt\n  local\
    \ closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntInt\n  local\
    \ closestDiffAbsIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n  local\
    \ closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local integer\n    local diff\n    local closest\n    local diff2\n\
    \    local closest2\n    local diff3\n    local closest3\n    local diff4\n  \
    \  local closest4\n    local diff5\n    local closest5\n    local diff6\n    local\
    \ closest6\n    local diff7\n    local closest7\n    local diff8\n    local closest8\n\
    \    local diff9\n    local closest9\n    local diff10\n    local closest10\n\
    \    local diff11\n    local closest11\n    local diff12\n    local closest12\n\
    \    local diff13\n    local closest13\n    local diff14\n    local closest14\n\
    \    local diff15\n    local closest15\n    local diff16\n    local closest16\n\
    \    local diff17\n    local closest17\n    local diff18\n    local closest18\n\
    \    local diff19\n    local closest19\n    local diff20\n    local closest20\n\
    \    local diff21\n    local closest21\n    local diff22\n    local closest22\n\
    \    local diff23\n    local closest23\n    local diff24\n    local closest24\n\
    \    local diff25\n    local closest25\n    local diff26\n    local closest26\n\
    \    local diff27\n    local closest27\n    local diff28\n    local closest28\n\
    \    local diff29\n    local closest29\n    local diff30\n    local closest30\n\
    \    local diff31\n    local closest31\n    local diff32\n    local closest32\n\
    \    local diff33\n    local closest33\n    local diff34\n    local closest34\n\
    \    local diff35\n    local closest35\n    local diff36\n    local closest36\n\
    \    local diff37\n    local closest37\n    local diff38\n    local closest38\n\
    \    local diff39\n    local closest39\n    local diff40\n    local closest40\n\
    \    local diff41\n    local closest41\n    local diff42\n    local closest42\n\
    \    local diff43\n    local closest43\n    local diff44\n    local closest44\n\
    \    local diff45\n    local closest45\n    local diff46\n    local closest46\n\
    \    local diff47\n    local closest47\n    local diff48\n    local closest48\n\
    \    local diff49\n    local closest49\n    local diff50\n    local closest50\n\
    \    local diff51\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local closest2\n  local diff3\n  local closest3\n  local diff4\n  local closest4\n\
    \  local diff5\n  local closest5\n  local diff6\n  local closest6\n  local diff7\n\
    \  local closest7\n  local diff8\n  local closest8\n  local diff9\n  local closest9\n\
    \  local diff10\n  local closest10\n  local diff11\n  local closest11\n  local\
    \ diff12\n  local closest12\n  local diff13\n  local closest13\n  local diff14\n\
    \  local closest14\n  local diff15\n  local closest15\n  local diff16\n  local\
    \ closest16\n  local diff17\n  local closest17\n  local diff18\n  local closest18\n\
    \  local diff19\n  local closest19\n  local diff20\n  local closest20\n  local\
    \ diff21\n  local closest21\n  local diff22\n  local closest22\n  local diff23\n\
    \  local closest23\n  local diff24\n  local closest24\n  local diff25\n  local\
    \ closest25\n  local diff26\n  local closest26\n  local diff27\n  local closest27\n\
    \  local diff28\n  local closest28\n  local diff29\n  local closest29\n  local\
    \ diff30\n  local closest30\n  local diff31\n  local closest31\n  local diff32\n\
    \  local closest32\n  local diff33\n  local closest33\n  local diff34\n  local\
    \ closest34\n  local diff35\n  local closest35\n  local diff36\n  local closest36\n\
    \  local diff37\n  local closest37\n  local diff38\n  local closest38\n  local\
    \ diff39\n  local closest39\n  local diff40\n  local closest40\n  local diff41\n\
    \  local closest41\n  local diff42\n  local closest42\n  local diff43\n  local\
    \ closest43\n  local diff44\n  local closest44\n  local diff45\n  local closest45\n\
    \  local diff46\n  local closest46\n  local diff47\n  local closest47\n  local\
    \ diff48\n  local closest48\n  local diff49\n  local closest49\n  local diff50\n\
    \  local closest50\n  local diff51\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"${string%%.*}\"\n  local digits=${string#*.}\n\
    \  local digits_length=${#digits}\n  local digits_length2=$(( digits_length +\
    \ 1 ))\n  local digits_length3=$(( digits_length2 + 1 ))\n  local digits_length4=$((\
    \ digits_length3 + 1 ))\n  local digits_length5=$(( digits_length4 + 1 ))\n  local\
    \ digits_length6=$(( digits_length5 + 1 ))\n  local digits_length7=$(( digits_length6\
    \ + 1 ))\n  local digits_length8=$(( digits_length7 + 1 ))\n  local digits_length9=$((\
    \ digits_length8 + 1 ))\n  local digits_length10=$(( digits_length9 + 1 ))\n \
    \ local digits_length11=$(( digits_length10 + 1 ))\n  local digits_length12=$((\
    \ digits_length11 + 1 ))\n  local digits_length13=$(( digits_length12 + 1 ))\n\
    \  local digits_length14=$(( digits_length13 + 1 ))\n  local digits_length15=$((\
    \ digits_length14 + 1 ))\n  local digits_length16=$(( digits_length15 + 1 ))\n\
    \  local digits_length17=$(( digits_length16 + 1 ))\n  local digits_length18=$((\
    \ digits_length17 + 1 ))\n  local digits_length19=$(( digits_length18 + 1 ))\n\
    \  local digits_length20=$(( digits_length19 + 1 ))\n  local digits_length21=$((\
    \ digits_length20 + 1 ))\n  local digits_length22=$(( digits_length21 + 1 ))\n\
    \  local digits_length23=$(( digits_length22 + 1 ))\n  local digits_length24=$((\
    \ digits_length23 + 1 ))\n  local digits_length25=$(( digits_length24 + 1 ))\n\
    \  local digits_length26=$(( digits_length25 + 1 ))\n  local digits_length27=$((\
    \ digits_length26 + 1 ))\n  local digits_length28=$(( digits_length27 + 1 ))\n\
    \  local digits_length29=$(( digits_length28 + 1 ))\n  local digits_\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff1\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local closest\n  local diff\n  local closest\n  local\
    \ diff\n  local closest\n  local diff\n  local closest\n  local diff\n  local\
    \ closest\n  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo $number | sed 's/\\./,/g')\n  local closest=$(echo\
    \ $integers | awk -F, '{print $1}' | sort -n | tail -1)\n  local diff=$(echo $number\
    \ | awk -F, '{print $1}' | sort -n | head -1)\n  local diff2=$(( $(echo $diff\
    \ - $closest) | bc ))\n  local diff3=$(( $(echo $diff - $closest) | bc ))\n  local\
    \ diff4=$(( $(echo $diff - $closest) | bc ))\n  local diff5=$(( $(echo $diff -\
    \ $closest) | bc ))\n  local diff6=$(( $(echo $diff - $closest) | bc ))\n  local\
    \ diff7=$(( $(echo $diff - $closest) | bc ))\n  local diff8=$(( $(echo $diff -\
    \ $closest) | bc ))\n  local diff9=$(( $(echo $diff - $closest) | bc ))\n  local\
    \ diff10=$(( $(echo $diff - $closest) | bc ))\n  local diff11=$(( $(echo $diff\
    \ - $closest) | bc ))\n  local diff12=$(( $(echo $diff - $closest) | bc ))\n \
    \ local diff13=$(( $(echo $diff - $closest) | bc ))\n  local diff14=$(( $(echo\
    \ $diff - $closest) | bc ))\n  local diff15=$(( $(echo $diff - $closest) | bc\
    \ ))\n  local diff16=$(( $(echo $diff - $closest) | bc ))\n  local diff17=$((\
    \ $(echo $diff - $closest) | bc ))\n  local diff18=$(( $(echo $diff - $closest)\
    \ | bc ))\n  local diff19=$(( $(echo $diff - $closest) | bc ))\n  local diff20=$((\
    \ $(echo $diff - $closest) | bc ))\n  local diff21=$(( $(echo $diff - $closest)\
    \ | bc ))\n  local diff22=$(( $(echo $diff - $closest) | bc ))\n  local diff23=$((\
    \ $(echo $diff - $closest) | bc ))\n  local diff24=$(( $(echo $diff - $closest)\
    \ | bc ))\n  local diff25=$(( $(echo $diff - $closest) | bc ))\n  local diff26=$((\
    \ $(echo $diff - $\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnv1zi54k.sh: line 46: unexpected EOF while looking for matching
    `)''

    /tmp/tmpnv1zi54k.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n\
    \  local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local diff99\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$3\"\n  local diff\n\
    \  local diff2\n  local diff3\n  local diff4\n  local diff5\n  local diff6\n \
    \ local diff7\n  local diff8\n  local diff9\n  local diff10\n  local diff11\n\
    \  local diff12\n  local diff13\n  local diff14\n  local diff15\n  local diff16\n\
    \  local diff17\n  local diff18\n  local diff19\n  local diff20\n  local diff21\n\
    \  local diff22\n  local diff23\n  local diff24\n  local diff25\n  local diff26\n\
    \  local diff27\n  local diff28\n  local diff29\n  local diff30\n  local diff31\n\
    \  local diff32\n  local diff33\n  local diff34\n  local diff35\n  local diff36\n\
    \  local diff37\n  local diff38\n  local diff39\n  local diff40\n  local diff41\n\
    \  local diff42\n  local diff43\n  local diff44\n  local diff45\n  local diff46\n\
    \  local diff47\n  local diff48\n  local diff49\n  local diff50\n  local diff51\n\
    \  local diff52\n  local diff53\n  local diff54\n  local diff55\n  local diff56\n\
    \  local diff57\n  local diff58\n  local diff59\n  local diff60\n  local diff61\n\
    \  local diff62\n  local diff63\n  local diff64\n  local diff65\n  local diff66\n\
    \  local diff67\n  local diff68\n  local diff69\n  local diff70\n  local diff71\n\
    \  local diff72\n  local diff73\n  local diff74\n  local diff75\n  local diff76\n\
    \  local diff77\n  local diff78\n  local diff79\n  local diff80\n  local diff81\n\
    \  local diff82\n  local diff83\n  local diff84\n  local diff85\n  local diff86\n\
    \  local diff87\n  local diff88\n  local diff89\n  local diff90\n  local diff91\n\
    \  local diff92\n  local diff93\n  local diff94\n  local diff95\n  local diff96\n\
    \  local diff97\n  local diff98\n  local diff99\n\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local closestdiff\n  local closestdiff2\n\
    \  local closestdiff3\n  local closestdiff4\n  local closestdiff5\n  local closestdiff6\n\
    \  local closestdiff7\n  local closestdiff8\n  local closestdiff9\n  local closestdiff10\n\
    \  local closestdiff11\n  local closestdiff12\n  local closestdiff13\n  local\
    \ closestdiff14\n  local closestdiff15\n  local closestdiff16\n  local closestdiff17\n\
    \  local closestdiff18\n  local closestdiff19\n  local closestdiff20\n  local\
    \ closestdiff21\n  local closestdiff22\n  local closestdiff23\n  local closestdiff24\n\
    \  local closestdiff25\n  local closestdiff26\n  local closestdiff27\n  local\
    \ closestdiff28\n  local closestdiff29\n  local closestdiff30\n  local closestdiff31\n\
    \  local closestdiff32\n  local closestdiff33\n  local closestdiff34\n  local\
    \ closestdiff35\n  local closestdiff36\n  local closestdiff37\n  local closestdiff38\n\
    \  local closestdiff39\n  local closestdiff40\n  local closestdiff41\n  local\
    \ closestdiff42\n  local closestdiff43\n  local closestdiff44\n  local closestdiff45\n\
    \  local closestdiff46\n  local closestdiff47\n  local closestdiff48\n  local\
    \ closestdiff49\n  local closestdiff50\n  local closestdiff51\n  local closestdiff52\n\
    \  local closestdiff53\n  local closestdiff54\n  local closestdiff55\n  local\
    \ closestdiff56\n  local closestdiff57\n  local closestdiff58\n  local closestdiff59\n\
    \  local closestdiff60\n  local closestdiff61\n  local closestdiff62\n  local\
    \ closestdiff63\n  local closestdiff64\n  local closestdiff65\n  local closestdiff66\n\
    \  local closestdiff67\n  local closestdiff68\n  local closestdiff69\n  local\
    \ closestdiff70\n  local closestdiff71\n  local closestdiff72\n  local closestdiff73\n\
    \  local closestdiff74\n  local closestdiff75\n  local closestdiff76\n  local\
    \ closestdiff77\n  local closestdiff78\n  local closestdiff79\n  local closestdiff80\n\
    \  local closestdiff81\n  local closestdiff82\n  local closestdiff83\n  \n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local diff\n  local closest\n  local closestdiff\n  local closestclosest\n\
    \  local closestclosestdiff\n  local closestclosestclosest\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestclosest\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestclosestdiff\n\
    \  local closestclosestclosestclosestdiff\n  local closestclosestclosestdiff\n\
    \  local closestclosestclosestdiff\n  local closestclosestclosestdiff\n  local\
    \ closestclosestdiff\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local closestclosest\n  local closestdiff\n  local closestclosestdiff\n\
    \  local closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local diff\n  local closest\n  local closestdiff\n  local diff\n\
    \  local closest\n  local closestdiff\n  local diff\n  local closest\n  local\
    \ closestdiff\n  local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local closestdiff\n\
    \  local diffdiff\n  local closestdiffdiffdiff\n  local diffdiffdiff\n  local\
    \ closestdiffdiffdiffdiff\n  local diffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n\
    \  local diffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n \
    \ local diffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  local\
    \ diffdiffdiffdiff\n  local closestdiffdiffdiffdiffdiffdiffdiffdiff\n  \n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integers=$(echo \"$number\" | sed -e 's/\\./,/g' -e 's/,$//g')\n\
    \  local closest=$(echo \"$number\" | awk '{print $1}')\n  local diff=$(echo \"\
    $closest-$integers\" | bc)\n  local closestInt=$(echo \"$closest\" | awk '{print\
    \ $1}')\n  local diffInt=$(echo \"$diff\" | awk '{print $1}')\n  if [ \"$diffInt\"\
    \ -eq 0 ]; then\n    echo \"$closestInt\"\n  else\n    echo \"$closestInt+1\"\n\
    \  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpcsve5pv7.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local diff\n  local closest\n  local\
    \ diff2\n  local closest2\n  local diff3\n  local closest3\n  local diff4\n  local\
    \ closest4\n  local diff5\n  local closest5\n  local diff6\n  local closest6\n\
    \  local diff7\n  local closest7\n  local diff8\n  local closest8\n  local diff9\n\
    \  local closest9\n  local diff10\n  local closest10\n  local diff11\n  local\
    \ closest11\n  local diff12\n  local closest12\n  local diff13\n  local closest13\n\
    \  local diff14\n  local closest14\n  local diff15\n  local closest15\n  local\
    \ diff16\n  local closest16\n  local diff17\n  local closest17\n  local diff18\n\
    \  local closest18\n  local diff19\n  local closest19\n  local diff20\n  local\
    \ closest20\n  local diff21\n  local closest21\n  local diff22\n  local closest22\n\
    \  local diff23\n  local closest23\n  local diff24\n  local closest24\n  local\
    \ diff25\n  local closest25\n  local diff26\n  local closest26\n  local diff27\n\
    \  local closest27\n  local diff28\n  local closest28\n  local diff29\n  local\
    \ closest29\n  local diff30\n  local closest30\n  local diff31\n  local closest31\n\
    \  local diff32\n  local closest32\n  local diff33\n  local closest33\n  local\
    \ diff34\n  local closest34\n  local diff35\n  local closest35\n  local diff36\n\
    \  local closest36\n  local diff37\n  local closest37\n  local diff38\n  local\
    \ closest38\n  local diff39\n  local closest39\n  local diff40\n  local closest40\n\
    \  local diff41\n  local closest41\n  local diff42\n  local closest42\n  local\
    \ diff43\n  local closest43\n  local diff44\n  local closest44\n  local diff45\n\
    \  local closest45\n  local diff46\n  local closest46\n  local diff47\n  local\
    \ closest47\n  local diff48\n  local closest48\n  local diff49\n  local closest49\n\
    \  local diff50\n  local closest50\n  local \n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ string=\"$1\"\n  local integer=\"$2\"\n  local closest=\"$integer\"\n  local\
    \ diff\n\n  diff=$(echo \"$integer - $closest\" | bc)\n  if [ \"$diff\" -eq 0\
    \ ]; then\n    echo \"$integer\"\n  else\n    if [ \"$diff\" -lt 0 ]; then\n \
    \     closest=$(($integer - 1))\n    else\n      closest=$(($integer + 1))\n \
    \   fi\n  fi\n  echo \"$closest\"\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 2: syntax error

    /tmp/tmp7y6i5xed.sh: line 24: [: : integer expression expected

    /tmp/tmp7y6i5xed.sh: line 27: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer\n  local diff\n  local closest\n  local diff2\n \
    \ local diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local\
    \ diff8\n  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local\
    \ diff13\n  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local\
    \ diff18\n  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local\
    \ diff23\n  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local\
    \ diff28\n  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local\
    \ diff33\n  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local\
    \ diff38\n  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local\
    \ diff43\n  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local\
    \ diff48\n  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local\
    \ diff53\n  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local\
    \ diff58\n  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local\
    \ diff63\n  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local\
    \ diff68\n  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local\
    \ diff73\n  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local\
    \ diff78\n  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local\
    \ diff83\n  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local\
    \ diff88\n  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local\
    \ diff93\n  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local\
    \ diff98\n  local diff99\n  local diff100\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ string=\"$1\"\n    local integer=\"$2\"\n    local closest=\"$integer\"\n  \
    \  local diff=\"$integer\"\n    local diff2=\"$integer\"\n    local diff3=\"$integer\"\
    \n    local diff4=\"$integer\"\n    local diff5=\"$integer\"\n    local diff6=\"\
    $integer\"\n    local diff7=\"$integer\"\n    local diff8=\"$integer\"\n    local\
    \ diff9=\"$integer\"\n    local diff10=\"$integer\"\n    local diff11=\"$integer\"\
    \n    local diff12=\"$integer\"\n    local diff13=\"$integer\"\n    local diff14=\"\
    $integer\"\n    local diff15=\"$integer\"\n    local diff16=\"$integer\"\n   \
    \ local diff17=\"$integer\"\n    local diff18=\"$integer\"\n    local diff19=\"\
    $integer\"\n    local diff20=\"$integer\"\n    local diff21=\"$integer\"\n   \
    \ local diff22=\"$integer\"\n    local diff23=\"$integer\"\n    local diff24=\"\
    $integer\"\n    local diff25=\"$integer\"\n    local diff26=\"$integer\"\n   \
    \ local diff27=\"$integer\"\n    local diff28=\"$integer\"\n    local diff29=\"\
    $integer\"\n    local diff30=\"$integer\"\n    local diff31=\"$integer\"\n   \
    \ local diff32=\"$integer\"\n    local diff33=\"$integer\"\n    local diff34=\"\
    $integer\"\n    local diff35=\"$integer\"\n    local diff36=\"$integer\"\n   \
    \ local diff37=\"$integer\"\n    local diff38=\"$integer\"\n    local diff39=\"\
    $integer\"\n    local diff40=\"$integer\"\n    local diff41=\"$integer\"\n   \
    \ local diff42=\"$integer\"\n    local diff43=\"$integer\"\n    local diff44=\"\
    $integer\"\n    local diff45=\"$integer\"\n    local diff46=\"$integer\"\n   \
    \ local diff47=\"$integer\"\n    local diff48=\"$integer\"\n    local diff49=\"\
    $integer\"\n    local diff50=\"$integer\"\n    local diff51=\"$integer\"\n   \
    \ local diff52=\"$integer\"\n    local diff53=\"$integer\"\n    local diff54=\"\
    $integer\"\n    local diff55=\"$integer\"\n    local diff56=\"$integer\"\n   \
    \ local diff57=\"$integer\"\n    local diff58=\"$integer\"\n    local diff59=\"\
    $integer\"\n    local diff60=\"$integer\"\n    local diff61=\"$integer\"\n   \
    \ local diff62=\"$integer\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjhjj33tv.sh: line 95: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjhjj33tv.sh: line 99: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local diff\n  local closest\n  local diff\n  local closest\n  local diff\n \
    \ local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local closest\n  local diff\n  local closest\n  local diff\n\
    \  local closest\n  local diff\n  local closest\n  local diff\n  local closest\n\
    \  local diff\n  local \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff1\n  local diff2\n  local\
    \ diff3\n  local diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n\
    \  local diff9\n  local diff10\n  local diff11\n  local diff12\n  local diff13\n\
    \  local diff14\n  local diff15\n  local diff16\n  local diff17\n  local diff18\n\
    \  local diff19\n  local diff20\n  local diff21\n  local diff22\n  local diff23\n\
    \  local diff24\n  local diff25\n  local diff26\n  local diff27\n  local diff28\n\
    \  local diff29\n  local diff30\n  local diff31\n  local diff32\n  local diff33\n\
    \  local diff34\n  local diff35\n  local diff36\n  local diff37\n  local diff38\n\
    \  local diff39\n  local diff40\n  local diff41\n  local diff42\n  local diff43\n\
    \  local diff44\n  local diff45\n  local diff46\n  local diff47\n  local diff48\n\
    \  local diff49\n  local diff50\n  local diff51\n  local diff52\n  local diff53\n\
    \  local diff54\n  local diff55\n  local diff56\n  local diff57\n  local diff58\n\
    \  local diff59\n  local diff60\n  local diff61\n  local diff62\n  local diff63\n\
    \  local diff64\n  local diff65\n  local diff66\n  local diff67\n  local diff68\n\
    \  local diff69\n  local diff70\n  local diff71\n  local diff72\n  local diff73\n\
    \  local diff74\n  local diff75\n  local diff76\n  local diff77\n  local diff78\n\
    \  local diff79\n  local diff80\n  local diff81\n  local diff82\n  local diff83\n\
    \  local diff84\n  local diff85\n  local diff86\n  local diff87\n  local diff88\n\
    \  local diff89\n  local diff90\n  local diff91\n  local diff92\n  local diff93\n\
    \  local diff94\n  local diff95\n  local diff96\n  local diff97\n  local diff98\n\
    \  local diff99\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local closest\n  local diff\n\n\
    \  if [[ $number == \"\" ]]; then\n    echo \"No number given\"\n    return 1\n\
    \  fi\n\n  if [[ $min == \"\" ]]; then\n    echo \"No minimum value given\"\n\
    \    return 1\n  fi\n\n  if [[ $max == \"\" ]]; then\n    echo \"No maximum value\
    \ given\"\n    return 1\n  fi\n\n  local number=$1\n  local min=$2\n  local max=$3\n\
    \n  if [[ $number == \"\" ]]; then\n    echo \"No number given\"\n    return 1\n\
    \  fi\n\n  if [[ $min == \"\" ]]; then\n    echo \"No minimum value given\"\n\
    \    return 1\n  fi\n\n  if [[ $max == \"\" ]]; then\n    echo \"No maximum value\
    \ given\"\n    return 1\n  fi\n\n  local number=$1\n  local min=$2\n  local max=$3\n\
    \n  if [[ $number == \"\" ]]; then\n    echo \"No number given\"\n    return 1\n\
    \  fi\n\n  if [[ $min == \"\" ]]; then\n    echo \"No minimum value given\"\n\
    \    return 1\n  fi\n\n  if [[ $max == \"\" ]]; then\n    echo \"No maximum value\
    \ given\"\n    return 1\n  fi\n\n  local number=$1\n  local min=$2\n  local max=$3\n\
    \n  if [[ $number == \"\" ]]; then\n    echo \"No number given\"\n    return 1\n\
    \  fi\n\n  if [[ $min == \"\" ]]; then\n    echo \"No minimum value given\"\n\
    \    return 1\n  fi\n\n  if [[ $max == \"\" ]]; then\n    echo \"No maximum value\
    \ given\"\n    return 1\n  fi\n\n  local number=$1\n  local min=$2\n  local max=$3\n\
    \n  if [[ $number == \"\" ]]; then\n    echo \"No number given\"\n    return 1\n\
    \  fi\n\n  if [[ $min == \"\" ]]; then\n    echo \"No minimum value given\"\n\
    \    return 1\n  fi\n\n  if [[ $max == \"\" ]]; then\n    echo \"No maximum value\
    \ given\"\n    return 1\n  fi\n\n  local number=$1\n  local min=$2\n  local max=$3\n\
    \n  if [[ $number == \"\" ]]; then\n    echo \"No number given\"\n    return 1\n\
    \  fi\n\n  if [[ $min == \"\" ]]; then\n    echo \"No minimum value given\"\n\
    \    return 1\n  fi\n\n  if [[ $max == \"\" ]]; then\n    echo \"No maximum value\
    \ given\"\n    return 1\n  fi\n\n  local number=$1\n  local min=$2\n  local max=$3\n\
    \n  if [[ $number == \"\" \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpljqchuan.sh: line 138: syntax error in conditional expression

    /tmp/tmpljqchuan.sh: line 139: syntax error near `}''

    /tmp/tmpljqchuan.sh: line 139: `}''

    '
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local min=$2\n    local max=$3\n    local diff=$((max-min))\n\
    \    local closest=$((min+diff/2))\n    local closestInt=$((closest))\n    if\
    \ [ \"$closestInt\" -eq \"$number\" ]; then\n        echo \"$number\"\n    else\n\
    \        echo \"$closestInt\"\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local closest\n  local diff\n  local diff2\n  local diff3\n  local\
    \ diff4\n  local diff5\n  local diff6\n  local diff7\n  local diff8\n  local diff9\n\
    \  local diff10\n  local diff11\n  local diff12\n  local diff13\n  local diff14\n\
    \  local diff15\n  local diff16\n  local diff17\n  local diff18\n  local diff19\n\
    \  local diff20\n  local diff21\n  local diff22\n  local diff23\n  local diff24\n\
    \  local diff25\n  local diff26\n  local diff27\n  local diff28\n  local diff29\n\
    \  local diff30\n  local diff31\n  local diff32\n  local diff33\n  local diff34\n\
    \  local diff35\n  local diff36\n  local diff37\n  local diff38\n  local diff39\n\
    \  local diff40\n  local diff41\n  local diff42\n  local diff43\n  local diff44\n\
    \  local diff45\n  local diff46\n  local diff47\n  local diff48\n  local diff49\n\
    \  local diff50\n  local diff51\n  local diff52\n  local diff53\n  local diff54\n\
    \  local diff55\n  local diff56\n  local diff57\n  local diff58\n  local diff59\n\
    \  local diff60\n  local diff61\n  local diff62\n  local diff63\n  local diff64\n\
    \  local diff65\n  local diff66\n  local diff67\n  local diff68\n  local diff69\n\
    \  local diff70\n  local diff71\n  local diff72\n  local diff73\n  local diff74\n\
    \  local diff75\n  local diff76\n  local diff77\n  local diff78\n  local diff79\n\
    \  local diff80\n  local diff81\n  local diff82\n  local diff83\n  local diff84\n\
    \  local diff85\n  local diff86\n  local diff87\n  local diff88\n  local diff89\n\
    \  local diff90\n  local diff91\n  local diff92\n  local diff93\n  local diff94\n\
    \  local diff95\n  local diff96\n  local diff97\n  local diff98\n  local diff99\n\
    \  local diff100\n  local diff\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local closest=$(( min + max / 2\
    \ ))\n  local diff=$(( max - min ))\n  local closestdiff=$(( closest - min ))\n\
    \  local closestdiff2=$(( closest - max ))\n  local closestdiff3=$(( closest +\
    \ max ))\n  local closestdiff4=$(( closest + min ))\n  local closestdiff5=$((\
    \ closest - min ))\n  local closestdiff6=$(( closest - max ))\n  local closestdiff7=$((\
    \ closest + min ))\n  local closestdiff8=$(( closest + max ))\n  local closestdiff9=$((\
    \ closest - min ))\n  local closestdiff10=$(( closest - max ))\n  local closestdiff11=$((\
    \ closest + min ))\n  local closestdiff12=$(( closest + max ))\n  local closestdiff13=$((\
    \ closest - min ))\n  local closestdiff14=$(( closest - max ))\n  local closestdiff15=$((\
    \ closest + min ))\n  local closestdiff16=$(( closest + max ))\n  local closestdiff17=$((\
    \ closest - min ))\n  local closestdiff18=$(( closest - max ))\n  local closestdiff19=$((\
    \ closest + min ))\n  local closestdiff20=$(( closest + max ))\n  local closestdiff21=$((\
    \ closest - min ))\n  local closestdiff22=$(( closest - max ))\n  local closestdiff23=$((\
    \ closest + min ))\n  local closestdiff24=$(( closest + max ))\n  local closestdiff25=$((\
    \ closest - min ))\n  local closestdiff26=$(( closest - max ))\n  local closestdiff27=$((\
    \ closest + min ))\n  local closestdiff28=$(( closest + max ))\n  local closestdiff29=$((\
    \ closest - min ))\n  local closestdiff30=$(( closest - max ))\n  local closestdiff31=$((\
    \ closest + min ))\n  local closestdiff32=$(( closest + max ))\n  local closestdiff33=$((\
    \ closest - min ))\n  local closestdiff34=$(( closest - max ))\n  local closestdiff35=$((\
    \ closest + min ))\n  local closestdiff36=$(( closest + max ))\n  local closestdiff\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local min=$2\n  local max=$3\n  local diff\n  local closest\n \
    \ local closestDiff\n  local closestDiffAbs\n  local closestDiffAbsInt\n  local\
    \ closestDiffAbsIntInt\n  local closestDiffAbsIntIntInt\n  local closestDiffAbsIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiffAbsIntIntIntIntInt\n  local closestDiffAbsIntIntIntIntInt\n\
    \  local closestDiff\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660045065
