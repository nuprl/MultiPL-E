language: sh
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [[ $length -gt 3 ]]; then\n    local\
    \ i\n    for (( i = 3; i <= length; i++ )); do\n      local j\n      for (( j\
    \ = 1; j <= i; j++ )); do\n        local k\n        for (( k = 1; k <= j; k++\
    \ )); do\n          if [[ ${string:$i:$j:$k} == *\"${string:$i:$j:$k}\"* ]]; then\n\
    \            echo \"false\"\n            return 1\n          fi\n        done\n\
    \      done\n    done\n    echo \"true\"\n    return 0\n  fi\n  echo \"false\"\
    \n  return 1\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxtmu615s.sh: line 30: string: 1:1: syntax error in expression (error
    token is ":1")

    '
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local letter\n  local i\n  for\
    \ i in $(seq 0 $((length-1))); do\n    letter=${string:$i:1}\n    count=$((count+1))\n\
    \  done\n  if (( length == 3 )); then\n    for i in $(seq 0 $((length-2))); do\n\
    \      letter=${string:$i:1}\n      if (( ${count:-0} != 1 )); then\n        echo\
    \ \"false\"\n        return\n      fi\n    done\n  fi\n  echo \"true\"\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local i\n        for (( i=1; i<$length-3; i++ )); do\n            if [[ ${string:$i:1}\
    \ == ${string:$i+1:1} ]]; then\n                local j\n                for ((\
    \ j=$i+2; j<$length; j++ )); do\n                    if [[ ${string:$j:1} == ${string:$j+1:1}\
    \ ]]; then\n                        local k\n                        for (( k=$j+2;\
    \ k<$length; k++ )); do\n                            if [[ ${string:$k:1} == ${string:$k+1:1}\
    \ ]]; then\n                                return 0\n                       \
    \     fi\n                        done\n                    fi\n             \
    \   done\n            fi\n        done\n        return 1\n    else\n        return\
    \ 0\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    if [[ $len -gt 3 ]]; then\n        local count=0\n\
    \        local count2=0\n        local count3=0\n        local count4=0\n    \
    \    local count5=0\n        local count6=0\n        local count7=0\n        local\
    \ count8=0\n        local count9=0\n        local count10=0\n        local count11=0\n\
    \        local count12=0\n        local count13=0\n        local count14=0\n \
    \       local count15=0\n        local count16=0\n        local count17=0\n  \
    \      local count18=0\n        local count19=0\n        local count20=0\n   \
    \     local count21=0\n        local count22=0\n        local count23=0\n    \
    \    local count24=0\n        local count25=0\n        local count26=0\n     \
    \   local count27=0\n        local count28=0\n        local count29=0\n      \
    \  local count30=0\n        local count31=0\n        local count32=0\n       \
    \ local count33=0\n        local count34=0\n        local count35=0\n        local\
    \ count36=0\n        local count37=0\n        local count38=0\n        local count39=0\n\
    \        local count40=0\n        local count41=0\n        local count42=0\n \
    \       local count43=0\n        local count44=0\n        local count45=0\n  \
    \      local count46=0\n        local count47=0\n        local count48=0\n   \
    \     local count49=0\n        local count50=0\n        local count51=0\n    \
    \    local count52=0\n        local count53=0\n        local count54=0\n     \
    \   local count55=0\n        local count56=0\n        local count57=0\n      \
    \  local count58=0\n        local count59=0\n        local count60=0\n       \
    \ local count61=0\n        local count62=0\n        local count63=0\n        local\
    \ count64=0\n        local count65=0\n        local count66=0\n        local count67=0\n\
    \        local count68=0\n        local count69=0\n        local count70=0\n \
    \       local count71=0\n        local count72=0\n        local count73=0\n  \
    \      local count74=0\n        local count75=0\n        local count76=0\n   \
    \     local count77=0\n        local count78=0\n        local count79=0\n    \
    \    local count80=0\n        local count81=0\n        local count82=0\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5qtdzgwm.sh: line 106: syntax error near unexpected token `}''

    /tmp/tmp5qtdzgwm.sh: line 106: `}''

    '
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local letter\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letters=()\n    local\
    \ letter\n    local i\n    local j\n    local k\n    local l\n    local m\n  \
    \  local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [[ $length -gt 3 ]]; then\n    for ((\
    \ i=1; i<$length-3; i++ )); do\n      if [[ \"$string\" == \"${string:$i:1}${string:$i+1:1}${string:$i+2:1}\"\
    \ ]]; then\n        echo \"true\"\n        return\n      fi\n    done\n  fi\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [ \"${length}\" -lt 3 ]; then\n    echo\
    \ \"false\"\n  else\n    local i\n    local j\n    local k\n    local count\n\
    \    local letter\n    local letter2\n    local letter3\n    local letter4\n \
    \   local letter5\n    local letter6\n    local letter7\n    local letter8\n \
    \   local letter9\n    local letter10\n    local letter11\n    local letter12\n\
    \    local letter13\n    local letter14\n    local letter15\n    local letter16\n\
    \    local letter17\n    local letter18\n    local letter19\n    local letter20\n\
    \    local letter21\n    local letter22\n    local letter23\n    local letter24\n\
    \    local letter25\n    local letter26\n    local letter27\n    local letter28\n\
    \    local letter29\n    local letter30\n    local letter31\n    local letter32\n\
    \    local letter33\n    local letter34\n    local letter35\n    local letter36\n\
    \    local letter37\n    local letter38\n    local letter39\n    local letter40\n\
    \    local letter41\n    local letter42\n    local letter43\n    local letter44\n\
    \    local letter45\n    local letter46\n    local letter47\n    local letter48\n\
    \    local letter49\n    local letter50\n    local letter51\n    local letter52\n\
    \    local letter53\n    local letter54\n    local letter55\n    local letter56\n\
    \    local letter57\n    local letter58\n    local letter59\n    local letter60\n\
    \    local letter61\n    local letter62\n    local letter63\n    local letter64\n\
    \    local letter65\n    local letter66\n    local letter67\n    local letter68\n\
    \    local letter69\n    local letter70\n    local letter71\n    local letter72\n\
    \    local letter73\n    local letter74\n    local letter75\n    local letter76\n\
    \    local letter77\n    local letter78\n    local letter79\n    local letter80\n\
    \    local letter81\n    local letter82\n    local letter83\n    local letter84\n\
    \    local letter85\n    local letter86\n    local letter87\n    local letter88\n\
    \    local letter89\n    local letter90\n    local letter91\n    local letter92\n\
    \    local letter93\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpugfcjul5.sh: line 124: syntax error near unexpected token `}''

    /tmp/tmpugfcjul5.sh: line 124: `}''

    '
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len=\"${#str}\"\n    local count=0\n    local char\n    local\
    \ char1\n    local char2\n    local char3\n    local char4\n    local char5\n\
    \    local char6\n    local char7\n    local char8\n    local char9\n    local\
    \ char10\n    local char11\n    local char12\n    local char13\n    local char14\n\
    \    local char15\n    local char16\n    local char17\n    local char18\n    local\
    \ char19\n    local char20\n    local char21\n    local char22\n    local char23\n\
    \    local char24\n    local char25\n    local char26\n    local char27\n    local\
    \ char28\n    local char29\n    local char30\n    local char31\n    local char32\n\
    \    local char33\n    local char34\n    local char35\n    local char36\n    local\
    \ char37\n    local char38\n    local char39\n    local char40\n    local char41\n\
    \    local char42\n    local char43\n    local char44\n    local char45\n    local\
    \ char46\n    local char47\n    local char48\n    local char49\n    local char50\n\
    \    local char51\n    local char52\n    local char53\n    local char54\n    local\
    \ char55\n    local char56\n    local char57\n    local char58\n    local char59\n\
    \    local char60\n    local char61\n    local char62\n    local char63\n    local\
    \ char64\n    local char65\n    local char66\n    local char67\n    local char68\n\
    \    local char69\n    local char70\n    local char71\n    local char72\n    local\
    \ char73\n    local char74\n    local char75\n    local char76\n    local char77\n\
    \    local char78\n    local char79\n    local char80\n    local char81\n    local\
    \ char82\n    local char83\n    local char84\n    local char85\n    local char86\n\
    \    local char87\n    local char88\n    local char89\n    local char90\n    local\
    \ char91\n    local char92\n    local char93\n    local char94\n    local char95\n\
    \    local char96\n    local char97\n    local char98\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len=${#str}\n    if [[ $len -gt 3 ]]; then\n        local i\n\
    \        for (( i=0; i<3; i++ )); do\n            local j\n            for ((\
    \ j=0; j<3; j++ )); do\n                if [[ ${str:$((i+j)):1} == \"a\" ]]; then\n\
    \                    local k\n                    for (( k=0; k<3; k++ )); do\n\
    \                        if [[ ${str:$((i+k)):1} == \"a\" ]]; then\n         \
    \                   local l\n                            for (( l=0; l<3; l++\
    \ )); do\n                                if [[ ${str:$((i+l)):1} == \"a\" ]];\
    \ then\n                                    return 0\n                       \
    \         fi\n                            done\n                        fi\n \
    \                   done\n                fi\n            done\n        done\n\
    \        return 1\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local last\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local A\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local char\n    local char2\n   \
    \ local char3\n    local char4\n    local char5\n    local char6\n    local char7\n\
    \    local char8\n    local char9\n    local char10\n    local char11\n    local\
    \ char12\n    local char13\n    local char14\n    local char15\n    local char16\n\
    \    local char17\n    local char18\n    local char19\n    local char20\n    local\
    \ char21\n    local char22\n    local char23\n    local char24\n    local char25\n\
    \    local char26\n    local char27\n    local char28\n    local char29\n    local\
    \ char30\n    local char31\n    local char32\n    local char33\n    local char34\n\
    \    local char35\n    local char36\n    local char37\n    local char38\n    local\
    \ char39\n    local char40\n    local char41\n    local char42\n    local char43\n\
    \    local char44\n    local char45\n    local char46\n    local char47\n    local\
    \ char48\n    local char49\n    local char50\n    local char51\n    local char52\n\
    \    local char53\n    local char54\n    local char55\n    local char56\n    local\
    \ char57\n    local char58\n    local char59\n    local char60\n    local char61\n\
    \    local char62\n    local char63\n    local char64\n    local char65\n    local\
    \ char66\n    local char67\n    local char68\n    local char69\n    local char70\n\
    \    local char71\n    local char72\n    local char73\n    local char74\n    local\
    \ char75\n    local char76\n    local char77\n    local char78\n    local char79\n\
    \    local char80\n    local char81\n    local char82\n    local char83\n    local\
    \ char84\n    local char85\n    local char86\n    local char87\n    local char88\n\
    \    local char89\n    local char90\n    local char91\n    local char92\n    local\
    \ char93\n    local char94\n    local char95\n    local char96\n    local char97\n\
    \    local char98\n    local char99\n    \n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local letter2\n\
    \  local letter3\n  local letter4\n  local letter5\n  local letter6\n  local letter7\n\
    \  local letter8\n  local letter9\n  local letter10\n  local letter11\n  local\
    \ letter12\n  local letter13\n  local letter14\n  local letter15\n  local letter16\n\
    \  local letter17\n  local letter18\n  local letter19\n  local letter20\n  local\
    \ letter21\n  local letter22\n  local letter23\n  local letter24\n  local letter25\n\
    \  local letter26\n  local letter27\n  local letter28\n  local letter29\n  local\
    \ letter30\n  local letter31\n  local letter32\n  local letter33\n  local letter34\n\
    \  local letter35\n  local letter36\n  local letter37\n  local letter38\n  local\
    \ letter39\n  local letter40\n  local letter41\n  local letter42\n  local letter43\n\
    \  local letter44\n  local letter45\n  local letter46\n  local letter47\n  local\
    \ letter48\n  local letter49\n  local letter50\n  local letter51\n  local letter52\n\
    \  local letter53\n  local letter54\n  local letter55\n  local letter56\n  local\
    \ letter57\n  local letter58\n  local letter59\n  local letter60\n  local letter61\n\
    \  local letter62\n  local letter63\n  local letter64\n  local letter65\n  local\
    \ letter66\n  local letter67\n  local letter68\n  local letter69\n  local letter70\n\
    \  local letter71\n  local letter72\n  local letter73\n  local letter74\n  local\
    \ letter75\n  local letter76\n  local letter77\n  local letter78\n  local letter79\n\
    \  local letter80\n  local letter81\n  local letter82\n  local letter83\n  local\
    \ letter84\n  local letter85\n  local letter86\n  local letter87\n  local letter88\n\
    \  local letter89\n  local letter90\n  local letter91\n  local letter92\n  local\
    \ letter93\n  local letter94\n  local letter95\n  local letter96\n  local letter97\n\
    \  local letter98\n  local letter99\n\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local count2=0\n        local count3=0\n        local count4=0\n\
    \        local count5=0\n        local count6=0\n        local count7=0\n    \
    \    local count8=0\n        local count9=0\n        local count10=0\n       \
    \ local count11=0\n        local count12=0\n        local count13=0\n        local\
    \ count14=0\n        local count15=0\n        local count16=0\n        local count17=0\n\
    \        local count18=0\n        local count19=0\n        local count20=0\n \
    \       local count21=0\n        local count22=0\n        local count23=0\n  \
    \      local count24=0\n        local count25=0\n        local count26=0\n   \
    \     local count27=0\n        local count28=0\n        local count29=0\n    \
    \    local count30=0\n        local count31=0\n        local count32=0\n     \
    \   local count33=0\n        local count34=0\n        local count35=0\n      \
    \  local count36=0\n        local count37=0\n        local count38=0\n       \
    \ local count39=0\n        local count40=0\n        local count41=0\n        local\
    \ count42=0\n        local count43=0\n        local count44=0\n        local count45=0\n\
    \        local count46=0\n        local count47=0\n        local count48=0\n \
    \       local count49=0\n        local count50=0\n        local count51=0\n  \
    \      local count52=0\n        local count53=0\n        local count54=0\n   \
    \     local count55=0\n        local count56=0\n        local count57=0\n    \
    \    local count58=0\n        local count59=0\n        local count60=0\n     \
    \   local count61=0\n        local count62=0\n        local count63=0\n      \
    \  local count64=0\n        local count65=0\n        local count66=0\n       \
    \ local count67=0\n        local count68=0\n        local count69=0\n        local\
    \ count70=0\n        local count71=0\n        local count72=0\n        local count73=0\n\
    \        local count74=0\n        local count75=0\n        local count76=0\n \
    \       local count77=0\n        local count78=0\n        local count79=0\n  \
    \      local count80=0\n        local count81=0\n        local count82=0\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsg4ijwtp.sh: line 106: syntax error near unexpected token `}''

    /tmp/tmpsg4ijwtp.sh: line 106: `}''

    '
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    local count=0\n    local letter\n    local i\n   \
    \ local j\n    local k\n    local l\n    local m\n    local n\n    local o\n \
    \   local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letters=()\n    local\
    \ result\n\n    if [[ $length -lt 3 ]]; then\n        echo \"false\"\n       \
    \ return\n    fi\n\n    for (( i=0; i<$length; i++ )); do\n        letters[$i]=${string:$i:1}\n\
    \        if [[ ${#letters[*]} -eq 3 ]]; then\n            count=$(( count + 1\
    \ ))\n        fi\n    done\n\n    if [[ $count -eq 3 ]]; then\n        result=\"\
    true\"\n    else\n        result=\"false\"\n    fi\n\n    echo \"$result\"\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  if [[ $length -gt 3 ]]; then\n    local i\n\
    \    for (( i = 3; i <= length; i++ )); do\n      if [[ ${string:$i:1} == ${string:$((i-1)):1}\
    \ ]]; then\n        echo \"false\"\n        return\n      fi\n    done\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local len=${#str}\n  local count=0\n  local last\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local hapsh\n\
    \n  if [[ $length -gt 3 ]]; then\n    hapsh=\"false\"\n  else\n    hapsh=\"true\"\
    \n  fi\n\n  for (( i=0; i<${#string}; i++ )); do\n    letter=${string:$i:1}\n\
    \    if [[ $letter != $letter ]]; then\n      hapsh=\"false\"\n      break\n \
    \   fi\n    (( count++ ))\n  done\n\n  if [[ $hapsh == \"true\" ]]; then\n   \
    \ echo \"$hapsh\"\n  else\n    echo \"$hapsh\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local count2=0\n    local count3=0\n\
    \    local count4=0\n    local count5=0\n    local count6=0\n    local count7=0\n\
    \    local count8=0\n    local count9=0\n    local count10=0\n    local count11=0\n\
    \    local count12=0\n    local count13=0\n    local count14=0\n    local count15=0\n\
    \    local count16=0\n    local count17=0\n    local count18=0\n    local count19=0\n\
    \    local count20=0\n    local count21=0\n    local count22=0\n    local count23=0\n\
    \    local count24=0\n    local count25=0\n    local count26=0\n    local count27=0\n\
    \    local count28=0\n    local count29=0\n    local count30=0\n    local count31=0\n\
    \    local count32=0\n    local count33=0\n    local count34=0\n    local count35=0\n\
    \    local count36=0\n    local count37=0\n    local count38=0\n    local count39=0\n\
    \    local count40=0\n    local count41=0\n    local count42=0\n    local count43=0\n\
    \    local count44=0\n    local count45=0\n    local count46=0\n    local count47=0\n\
    \    local count48=0\n    local count49=0\n    local count50=0\n    local count51=0\n\
    \    local count52=0\n    local count53=0\n    local count54=0\n    local count55=0\n\
    \    local count56=0\n    local count57=0\n    local count58=0\n    local count59=0\n\
    \    local count60=0\n    local count61=0\n    local count62=0\n    local count63=0\n\
    \    local count64=0\n    local count65=0\n    local count66=0\n    local count67=0\n\
    \    local count68=0\n    local count69=0\n    local count70=0\n    local count71=0\n\
    \    local count72=0\n    local count73=0\n    local count74=0\n    local count75=0\n\
    \    local count76=0\n    local count77=0\n    local count78=0\n    local count79=0\n\
    \    local count80=0\n    local count81=0\n    local count82=0\n    local count83=0\n\
    \    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local hapsh\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  if [[ $length -gt 3 ]]; then\n    local count=0\n\
    \    local letter\n    while (( $count < 3 )); do\n      letter=${string:$count:1}\n\
    \      (( count++ ))\n    done\n  else\n    local count=0\n    local letter\n\
    \    while (( $count < 3 )); do\n      letter=${string:$count:1}\n      (( count++\
    \ ))\n    done\n  fi\n  local letter2\n  local letter3\n  local letter4\n  local\
    \ letter5\n  local letter6\n  local letter7\n  local letter8\n  local letter9\n\
    \  local letter10\n  local letter11\n  local letter12\n  local letter13\n  local\
    \ letter14\n  local letter15\n  local letter16\n  local letter17\n  local letter18\n\
    \  local letter19\n  local letter20\n  local letter21\n  local letter22\n  local\
    \ letter23\n  local letter24\n  local letter25\n  local letter26\n  local letter27\n\
    \  local letter28\n  local letter29\n  local letter30\n  local letter31\n  local\
    \ letter32\n  local letter33\n  local letter34\n  local letter35\n  local letter36\n\
    \  local letter37\n  local letter38\n  local letter39\n  local letter40\n  local\
    \ letter41\n  local letter42\n  local letter43\n  local letter44\n  local letter45\n\
    \  local letter46\n  local letter47\n  local letter48\n  local letter49\n  local\
    \ letter50\n  local letter51\n  local letter52\n  local letter53\n  local letter54\n\
    \  local letter55\n  local letter56\n  local letter57\n  local letter58\n  local\
    \ letter59\n  local letter60\n  local letter61\n  local letter62\n  local letter63\n\
    \  local letter64\n  local letter65\n  local letter66\n  local letter67\n  local\
    \ letter68\n  local letter69\n  local letter70\n  local letter71\n  local letter72\n\
    \  local letter73\n  local letter74\n  local letter75\n  local letter76\n  local\
    \ letter77\n  local letter78\n  local letter79\n  local letter80\n  local letter81\n\
    \  local letter82\n  local letter83\n\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    local count=0\n    local last\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local A\n    local B\n    local C\n    local\
    \ D\n    local E\n    local F\n    local G\n    local H\n    local I\n    local\
    \ J\n    local K\n    local L\n    local M\n    local N\n    local O\n    local\
    \ P\n    local Q\n    local R\n    local S\n    local T\n    local U\n    local\
    \ V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    local i\n    local j\n    local k\n    local count\n\
    \    local flag\n\n    if [[ $len < 3 ]]; then\n        echo \"false\"\n     \
    \   return\n    fi\n\n    flag=true\n    for (( i=1; i<len; i++ )); do\n     \
    \   for (( j=1; j<i; j++ )); do\n            if [[ ${str:$i:1} == ${str:$j:1}\
    \ ]]; then\n                count=$(( count+1 ))\n            fi\n        done\n\
    \        if [[ $count -eq 3 ]]; then\n            flag=false\n            break\n\
    \        fi\n        count=0 # reset count\n    done\n    if [[ $flag == true\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local letter\n        for (( i=0; i<${#string}; i++ )); do\n\
    \            letter=${string:$i:1}\n            if [[ $count -eq 0 ]]; then\n\
    \                (( count++ ))\n            else\n                if [[ $letter\
    \ != $letter ]]; then\n                    (( count++ ))\n                fi\n\
    \            fi\n        done\n        if [[ $count -eq 3 ]]; then\n         \
    \   echo \"true\"\n        else\n            echo \"false\"\n        fi\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local char\n  local char1\n  local\
    \ char2\n  local char3\n  local char4\n  local char5\n  local char6\n  local char7\n\
    \  local char8\n  local char9\n  local char10\n  local char11\n  local char12\n\
    \  local char13\n  local char14\n  local char15\n  local char16\n  local char17\n\
    \  local char18\n  local char19\n  local char20\n  local char21\n  local char22\n\
    \  local char23\n  local char24\n  local char25\n  local char26\n  local char27\n\
    \  local char28\n  local char29\n  local char30\n  local char31\n  local char32\n\
    \  local char33\n  local char34\n  local char35\n  local char36\n  local char37\n\
    \  local char38\n  local char39\n  local char40\n  local char41\n  local char42\n\
    \  local char43\n  local char44\n  local char45\n  local char46\n  local char47\n\
    \  local char48\n  local char49\n  local char50\n  local char51\n  local char52\n\
    \  local char53\n  local char54\n  local char55\n  local char56\n  local char57\n\
    \  local char58\n  local char59\n  local char60\n  local char61\n  local char62\n\
    \  local char63\n  local char64\n  local char65\n  local char66\n  local char67\n\
    \  local char68\n  local char69\n  local char70\n  local char71\n  local char72\n\
    \  local char73\n  local char74\n  local char75\n  local char76\n  local char77\n\
    \  local char78\n  local char79\n  local char80\n  local char81\n  local char82\n\
    \  local char83\n  local char84\n  local char85\n  local char86\n  local char87\n\
    \  local char88\n  local char89\n  local char90\n  local char91\n  local char92\n\
    \  local char93\n  local char94\n  local char95\n  local char96\n  local char97\n\
    \  local char98\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letter\n  local\
    \ hapsh\n  hapsh=false\n  while [ \"$count\" -lt \"$length\" ]; do\n    letter=\"\
    ${string:$count:1}\"\n    if [ \"$letter\" == \"a\" ] || [ \"$letter\" == \"e\"\
    \ ] || [ \"$letter\" == \"i\" ] || [ \"$letter\" == \"o\" ] || [ \"$letter\" ==\
    \ \"u\" ]; then\n      hapsh=true\n    fi\n    ((count++))\n  done\n  echo \"\
    $hapsh\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local char\n    local char1\n   \
    \ local char2\n    local char3\n    local char4\n    local char5\n    local char6\n\
    \    local char7\n    local char8\n    local char9\n    local char10\n    local\
    \ char11\n    local char12\n    local char13\n    local char14\n    local char15\n\
    \    local char16\n    local char17\n    local char18\n    local char19\n    local\
    \ char20\n    local char21\n    local char22\n    local char23\n    local char24\n\
    \    local char25\n    local char26\n    local char27\n    local char28\n    local\
    \ char29\n    local char30\n    local char31\n    local char32\n    local char33\n\
    \    local char34\n    local char35\n    local char36\n    local char37\n    local\
    \ char38\n    local char39\n    local char40\n    local char41\n    local char42\n\
    \    local char43\n    local char44\n    local char45\n    local char46\n    local\
    \ char47\n    local char48\n    local char49\n    local char50\n    local char51\n\
    \    local char52\n    local char53\n    local char54\n    local char55\n    local\
    \ char56\n    local char57\n    local char58\n    local char59\n    local char60\n\
    \    local char61\n    local char62\n    local char63\n    local char64\n    local\
    \ char65\n    local char66\n    local char67\n    local char68\n    local char69\n\
    \    local char70\n    local char71\n    local char72\n    local char73\n    local\
    \ char74\n    local char75\n    local char76\n    local char77\n    local char78\n\
    \    local char79\n    local char80\n    local char81\n    local char82\n    local\
    \ char83\n    local char84\n    local char85\n    local char86\n    local char87\n\
    \    local char88\n    local char89\n    local char90\n    local char91\n    local\
    \ char92\n    local char93\n    local char94\n    local char95\n    local char96\n\
    \    local char97\n    local char98\n    \n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local len=${#str}\n  if [[ $len < 3 ]]; then\n    return 0\n  fi\n  local count=0\n\
    \  local last\n  local i\n  for ((i=0; i<len-3; i++)); do\n    last=${str:$i:1}\n\
    \    count=$((count+1))\n  done\n  if [[ $count -eq 3 ]]; then\n    return 1\n\
    \  else\n    return 0\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=1\n  local letter\n  while\
    \ [ \"$count\" -le \"$length\" ]; do\n    letter=\"${string:$count:1}\"\n    if\
    \ [ \"$letter\" == \"a\" ] || [ \"$letter\" == \"b\" ] || [ \"$letter\" == \"\
    c\" ] || [ \"$letter\" == \"d\" ] || [ \"$letter\" == \"e\" ] || [ \"$letter\"\
    \ == \"f\" ] || [ \"$letter\" == \"g\" ] || [ \"$letter\" == \"h\" ] || [ \"$letter\"\
    \ == \"i\" ] || [ \"$letter\" == \"j\" ] || [ \"$letter\" == \"k\" ] || [ \"$letter\"\
    \ == \"l\" ] || [ \"$letter\" == \"m\" ] || [ \"$letter\" == \"n\" ] || [ \"$letter\"\
    \ == \"o\" ] || [ \"$letter\" == \"p\" ] || [ \"$letter\" == \"q\" ] || [ \"$letter\"\
    \ == \"r\" ] || [ \"$letter\" == \"s\" ] || [ \"$letter\" == \"t\" ] || [ \"$letter\"\
    \ == \"u\" ] || [ \"$letter\" == \"v\" ] || [ \"$letter\" == \"w\" ] || [ \"$letter\"\
    \ == \"x\" ] || [ \"$letter\" == \"y\" ] || [ \"$letter\" == \"z\" ]; then\n \
    \     count=$(( $count + 1 ))\n    else\n      count=$(( $count + 1 ))\n    fi\n\
    \  done\n  echo \"$count\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len=${#str}\n    if [[ $len -gt 3 ]]; then\n        echo \"false\"\
    \n        return\n    fi\n    local count=0\n    local letters=()\n    for ((\
    \ i=0; i<len; i++ )); do\n        local letter=${str:$i:1}\n        if [[ ${letters[*]}\
    \ =~ $letter ]]; then\n            (( count++ ))\n        else\n            ((\
    \ count-- ))\n            letters+=(\"$letter\")\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n  \
    \  echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letters=()\n    local\
    \ letter\n    local hapsh\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letters=()\n\
    \    local result=0\n    local i\n\n    for ((i=0; i<length; i++)); do\n     \
    \   letters[$i]=\"${string:$i:1}\"\n    done\n\n    for ((i=0; i<length; i++));\
    \ do\n        if [[ ${letters[$i]} == ${letters[$((i+1))]} ]]; then\n        \
    \    ((count++))\n        else\n            ((result=1))\n            break\n\
    \        fi\n    done\n\n    if [[ $count -eq 3 ]]; then\n        result=1\n \
    \   fi\n\n    echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local lastchar=\"\
    \"\n    local lastcharcount=0\n    local lastcharcount2=0\n    local lastcharcount3=0\n\
    \    local lastcharcount4=0\n    local lastcharcount5=0\n    local lastcharcount6=0\n\
    \    local lastcharcount7=0\n    local lastcharcount8=0\n    local lastcharcount9=0\n\
    \    local lastcharcount10=0\n    local lastcharcount11=0\n    local lastcharcount12=0\n\
    \    local lastcharcount13=0\n    local lastcharcount14=0\n    local lastcharcount15=0\n\
    \    local lastcharcount16=0\n    local lastcharcount17=0\n    local lastcharcount18=0\n\
    \    local lastcharcount19=0\n    local lastcharcount20=0\n    local lastcharcount21=0\n\
    \    local lastcharcount22=0\n    local lastcharcount23=0\n    local lastcharcount24=0\n\
    \    local lastcharcount25=0\n    local lastcharcount26=0\n    local lastcharcount27=0\n\
    \    local lastcharcount28=0\n    local lastcharcount29=0\n    local lastcharcount30=0\n\
    \    local lastcharcount31=0\n    local lastcharcount32=0\n    local lastcharcount33=0\n\
    \    local lastcharcount34=0\n    local lastcharcount35=0\n    local lastcharcount36=0\n\
    \    local lastcharcount37=0\n    local lastcharcount38=0\n    local lastcharcount39=0\n\
    \    local lastcharcount40=0\n    local lastcharcount41=0\n    local lastcharcount42=0\n\
    \    local lastcharcount43=0\n    local lastcharcount44=0\n    local lastcharcount45=0\n\
    \    local lastcharcount46=0\n    local lastcharcount47=0\n    local lastcharcount48=0\n\
    \    local lastcharcount49=0\n    local lastcharcount50=0\n    local lastcharcount51=0\n\
    \    local lastcharcount52=0\n    local lastcharcount53=0\n    local lastcharcount54=0\n\
    \    local lastcharcount55=0\n    local lastcharcount56=0\n    local lastcharcount57=0\n\
    \    local lastcharcount58=0\n    local lastcharcount59=0\n    local lastcharcount60=0\n\
    \    local lastcharcount61=0\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local char\n  local char1\n \
    \ local char2\n  local char3\n  local char4\n  local char5\n  local char6\n  local\
    \ char7\n  local char8\n  local char9\n  local char10\n  local char11\n  local\
    \ char12\n  local char13\n  local char14\n  local char15\n  local char16\n  local\
    \ char17\n  local char18\n  local char19\n  local char20\n  local char21\n  local\
    \ char22\n  local char23\n  local char24\n  local char25\n  local char26\n  local\
    \ char27\n  local char28\n  local char29\n  local char30\n  local char31\n  local\
    \ char32\n  local char33\n  local char34\n  local char35\n  local char36\n  local\
    \ char37\n  local char38\n  local char39\n  local char40\n  local char41\n  local\
    \ char42\n  local char43\n  local char44\n  local char45\n  local char46\n  local\
    \ char47\n  local char48\n  local char49\n  local char50\n  local char51\n  local\
    \ char52\n  local char53\n  local char54\n  local char55\n  local char56\n  local\
    \ char57\n  local char58\n  local char59\n  local char60\n  local char61\n  local\
    \ char62\n  local char63\n  local char64\n  local char65\n  local char66\n  local\
    \ char67\n  local char68\n  local char69\n  local char70\n  local char71\n  local\
    \ char72\n  local char73\n  local char74\n  local char75\n  local char76\n  local\
    \ char77\n  local char78\n  local char79\n  local char80\n  local char81\n  local\
    \ char82\n  local char83\n  local char84\n  local char85\n  local char86\n  local\
    \ char87\n  local char88\n  local char89\n  local char90\n  local char91\n  local\
    \ char92\n  local char93\n  local char94\n  local char95\n  local char96\n  local\
    \ char97\n  local char98\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local letters=()\n  local result\n\
    \n  if [[ $length -gt 3 ]]; then\n    for (( i=1; i<length-3; i++ )); do\n   \
    \   letters[$i]=${string:$i:1}\n    done\n    for (( i=0; i<3; i++ )); do\n  \
    \    if [[ ${letters[$i]} == ${letters[$((i+1))]} ]]; then\n        (( count++\
    \ ))\n      fi\n    done\n    if [[ $count -eq 3 ]]; then\n      result=true\n\
    \    else\n      result=false\n    fi\n  else\n    result=true\n  fi\n  echo $result\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local last\n  local flag=0\n\
    \  local i\n  for i in $(seq 0 $((len-3)))\n  do\n    last=${string:$i:1}\n  \
    \  if [ \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\" == \"$last\" -o \"$last\" == \"$last\" -o \"$last\" == \"$last\"\
    \ -o \"$last\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjyx2j9u0.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjyx2j9u0.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letter\n  while\
    \ [ \"$length\" -gt 0 ]; do\n    letter=\"${string:$count:1}\"\n    count=$((count+1))\n\
    \    if [ \"$letter\" == \"$letter\" ] || [ \"$letter\" == \"$letter$letter\"\
    \ ] || [ \"$letter\" == \"$letter$letter$letter\" ]; then\n      length=$((length-1))\n\
    \      count=$((count+1))\n    fi\n  done\n  if [ \"$length\" -eq 0 ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  if [[ $length -gt 3 ]]; then\n    for (( i=1;\
    \ i<$length; i++ )); do\n      if [[ ${string:$i:1} == ${string:$i:1} ]]; then\n\
    \        (( i++ ))\n      fi\n    done\n  fi\n  [[ \"$length\" -ge 3 ]] && [[\
    \ \"$string\" == *{a..z}* ]] || return 1\n  return 0\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letter\n    local\
    \ last\n    local flag=0\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local count=0\n        local count2=0\n        local count3=0\n        local\
    \ count4=0\n        local count5=0\n        local count6=0\n        local count7=0\n\
    \        local count8=0\n        local count9=0\n        local count10=0\n   \
    \     local count11=0\n        local count12=0\n        local count13=0\n    \
    \    local count14=0\n        local count15=0\n        local count16=0\n     \
    \   local count17=0\n        local count18=0\n        local count19=0\n      \
    \  local count20=0\n        local count21=0\n        local count22=0\n       \
    \ local count23=0\n        local count24=0\n        local count25=0\n        local\
    \ count26=0\n        local count27=0\n        local count28=0\n        local count29=0\n\
    \        local count30=0\n        local count31=0\n        local count32=0\n \
    \       local count33=0\n        local count34=0\n        local count35=0\n  \
    \      local count36=0\n        local count37=0\n        local count38=0\n   \
    \     local count39=0\n        local count40=0\n        local count41=0\n    \
    \    local count42=0\n        local count43=0\n        local count44=0\n     \
    \   local count45=0\n        local count46=0\n        local count47=0\n      \
    \  local count48=0\n        local count49=0\n        local count50=0\n       \
    \ local count51=0\n        local count52=0\n        local count53=0\n        local\
    \ count54=0\n        local count55=0\n        local count56=0\n        local count57=0\n\
    \        local count58=0\n        local count59=0\n        local count60=0\n \
    \       local count61=0\n        local count62=0\n        local count63=0\n  \
    \      local count64=0\n        local count65=0\n        local count66=0\n   \
    \     local count67=0\n        local count68=0\n        local count69=0\n    \
    \    local count70=0\n        local count71=0\n        local count72=0\n     \
    \   local count73=0\n        local count74=0\n        local count75=0\n      \
    \  local count76=0\n        local count77=0\n        local count78=0\n       \
    \ local count79=0\n        local count80=0\n        local count81=0\n        local\
    \ count82\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmas1m4w9.sh: line 106: syntax error near unexpected token `}''

    /tmp/tmpmas1m4w9.sh: line 106: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local hapsh\n\
    \  hapsh=false\n  while [[ $count -lt $length ]]; do\n    letter=${string:$count:1}\n\
    \    count=$((count+1))\n    if [[ \"$letter\" == \"$letter\" ]]; then\n     \
    \ hapsh=true\n    fi\n  done\n  echo \"$hapsh\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letter\n  local\
    \ letter2\n  local letter3\n  local letter4\n  local letter5\n  local letter6\n\
    \  local letter7\n  local letter8\n  local letter9\n  local letter10\n  local\
    \ letter11\n  local letter12\n  local letter13\n  local letter14\n  local letter15\n\
    \  local letter16\n  local letter17\n  local letter18\n  local letter19\n  local\
    \ letter20\n  local letter21\n  local letter22\n  local letter23\n  local letter24\n\
    \  local letter25\n  local letter26\n  local letter27\n  local letter28\n  local\
    \ letter29\n  local letter30\n  local letter31\n  local letter32\n  local letter33\n\
    \  local letter34\n  local letter35\n  local letter36\n  local letter37\n  local\
    \ letter38\n  local letter39\n  local letter40\n  local letter41\n  local letter42\n\
    \  local letter43\n  local letter44\n  local letter45\n  local letter46\n  local\
    \ letter47\n  local letter48\n  local letter49\n  local letter50\n  local letter51\n\
    \  local letter52\n  local letter53\n  local letter54\n  local letter55\n  local\
    \ letter56\n  local letter57\n  local letter58\n  local letter59\n  local letter60\n\
    \  local letter61\n  local letter62\n  local letter63\n  local letter64\n  local\
    \ letter65\n  local letter66\n  local letter67\n  local letter68\n  local letter69\n\
    \  local letter70\n  local letter71\n  local letter72\n  local letter73\n  local\
    \ letter74\n  local letter75\n  local letter76\n  local letter77\n  local letter78\n\
    \  local letter79\n  local letter80\n  local letter81\n  local letter82\n  local\
    \ letter83\n  local letter84\n  local letter85\n  local letter86\n  local letter87\n\
    \  local letter88\n  local letter89\n  local letter90\n  local letter91\n  local\
    \ letter92\n  local letter93\n  local letter94\n  local letter95\n  local letter96\n\
    \  local letter97\n  local letter98\n  local letter99\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=$((${#string} + 1))\n  if [[ ${#string} -ge 3 ]]; then\n    for\
    \ (( i=1; i<${#string}; i++ )); do\n      if [[ ${string:$i:1} == ${string:$((i+1)):1}\
    \ ]]; then\n        (( i++ ))\n      else\n        (( length-- ))\n        break\n\
    \      fi\n    done\n  else\n    length=0\n  fi\n  if [[ ${length} -ge 3 ]]; then\n\
    \    echo true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=1\n  local hapsh=true\n  while [ $count\
    \ -lt $length ]; do\n    if [[ $string =~ (.)\\1{3} ]]; then\n      hapsh=false\n\
    \    fi\n    ((count++))\n  done\n  echo $hapsh\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    if [[ $len -gt 3 ]]; then\n        local count=1\n\
    \        local i\n        for (( i=1; i<len; i++ )); do\n            if [[ ${string:$i:1}\
    \ == ${string:$i:1} ]]; then\n                (( count++ ))\n            else\n\
    \                break\n            fi\n        done\n        if [[ $count -eq\
    \ 3 ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letter\n \
    \   local hapsh\n\n    if [[ $length -gt 3 ]]; then\n        hapsh=\"false\"\n\
    \    else\n        hapsh=\"true\"\n    fi\n\n    for (( i=0; i<$length; i++ ));\
    \ do\n        letter=\"${string:$i:1}\"\n        if [[ ${#letter} -eq 1 ]]; then\n\
    \            count=$(( count+1 ))\n        else\n            if [[ $count -eq\
    \ 3 ]]; then\n                hapsh=\"false\"\n                break\n       \
    \     else\n                count=0\n            fi\n        fi\n    done\n\n\
    \    echo \"$hapsh\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [[ $length -gt 3 ]]; then\n    for ((\
    \ i=0; i<3; i++ )); do\n      local letter=\"${string:$i:1}\"\n      local count=\"\
    ${string:$i:2}\"\n      [[ \"$count\" == \"$count\" ]]\n    done\n  else\n   \
    \ false\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local char\n    local char1\n\
    \    local char2\n    local char3\n    local char4\n    local char5\n    local\
    \ char6\n    local char7\n    local char8\n    local char9\n    local char10\n\
    \    local char11\n    local char12\n    local char13\n    local char14\n    local\
    \ char15\n    local char16\n    local char17\n    local char18\n    local char19\n\
    \    local char20\n    local char21\n    local char22\n    local char23\n    local\
    \ char24\n    local char25\n    local char26\n    local char27\n    local char28\n\
    \    local char29\n    local char30\n    local char31\n    local char32\n    local\
    \ char33\n    local char34\n    local char35\n    local char36\n    local char37\n\
    \    local char38\n    local char39\n    local char40\n    local char41\n    local\
    \ char42\n    local char43\n    local char44\n    local char45\n    local char46\n\
    \    local char47\n    local char48\n    local char49\n    local char50\n    local\
    \ char51\n    local char52\n    local char53\n    local char54\n    local char55\n\
    \    local char56\n    local char57\n    local char58\n    local char59\n    local\
    \ char60\n    local char61\n    local char62\n    local char63\n    local char64\n\
    \    local char65\n    local char66\n    local char67\n    local char68\n    local\
    \ char69\n    local char70\n    local char71\n    local char72\n    local char73\n\
    \    local char74\n    local char75\n    local char76\n    local char77\n    local\
    \ char78\n    local char79\n    local char80\n    local char81\n    local char82\n\
    \    local char83\n    local char84\n    local char85\n    local char86\n    local\
    \ char87\n    local char88\n    local char89\n    local char90\n    local char91\n\
    \    local char92\n    local char93\n    local char94\n    local char95\n    local\
    \ char96\n    local char97\n    local char98\n\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  if [[ $len < 3 ]]; then\n    echo \"false\"\n\
    \  else\n    local count=0\n    local last\n    for (( i=0; i<${#string}; i++\
    \ )); do\n      if [[ \"${string:$i:1}\" == \"${string:$i:1}\" ]]; then\n    \
    \    count=$((count+1))\n      else\n        if [[ \"${count}\" -eq 3 ]]; then\n\
    \          echo \"true\"\n          break\n        fi\n        count=0\n     \
    \ fi\n    done\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letters=()\n  local\
    \ letter\n  local result\n\n  if [[ $length -lt 3 ]]; then\n    echo \"false\"\
    \n    return\n  fi\n\n  while (( count < length )); do\n    letter=\"${string:$count:1}\"\
    \n    if [[ -z ${letters[*]} ]]; then\n      letters[$count]=$letter\n      count=$((\
    \ count + 1 ))\n    else\n      count=$(( count + 1 ))\n    fi\n  done\n\n  result=\"\
    true\"\n  for (( i = 0; i < ${#letters[*]}; i++ )); do\n    if [[ \"${letters[$i]}\"\
    \ == \"${letters[$(( i + 1 ))]}\" ]]; then\n      result=\"false\"\n      break\n\
    \    fi\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local count2=0\n    local count3=0\n\
    \    local count4=0\n    local count5=0\n    local count6=0\n    local count7=0\n\
    \    local count8=0\n    local count9=0\n    local count10=0\n    local count11=0\n\
    \    local count12=0\n    local count13=0\n    local count14=0\n    local count15=0\n\
    \    local count16=0\n    local count17=0\n    local count18=0\n    local count19=0\n\
    \    local count20=0\n    local count21=0\n    local count22=0\n    local count23=0\n\
    \    local count24=0\n    local count25=0\n    local count26=0\n    local count27=0\n\
    \    local count28=0\n    local count29=0\n    local count30=0\n    local count31=0\n\
    \    local count32=0\n    local count33=0\n    local count34=0\n    local count35=0\n\
    \    local count36=0\n    local count37=0\n    local count38=0\n    local count39=0\n\
    \    local count40=0\n    local count41=0\n    local count42=0\n    local count43=0\n\
    \    local count44=0\n    local count45=0\n    local count46=0\n    local count47=0\n\
    \    local count48=0\n    local count49=0\n    local count50=0\n    local count51=0\n\
    \    local count52=0\n    local count53=0\n    local count54=0\n    local count55=0\n\
    \    local count56=0\n    local count57=0\n    local count58=0\n    local count59=0\n\
    \    local count60=0\n    local count61=0\n    local count62=0\n    local count63=0\n\
    \    local count64=0\n    local count65=0\n    local count66=0\n    local count67=0\n\
    \    local count68=0\n    local count69=0\n    local count70=0\n    local count71=0\n\
    \    local count72=0\n    local count73=0\n    local count74=0\n    local count75=0\n\
    \    local count76=0\n    local count77=0\n    local count78=0\n    local count79=0\n\
    \    local count80=0\n    local count81=0\n    local count82=0\n    local count83=0\n\
    \    local count\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local len=${#str}\n  if [[ $len -gt 3 ]]; then\n    local i\n    for (( i=0;\
    \ i<3; i++ )); do\n      local j\n      for (( j=0; j<3; j++ )); do\n        local\
    \ k\n        for (( k=0; k<3; k++ )); do\n          if [[ ${str:$((i+j+k))} ==\
    \ ${str:$((i+j+k+1))} ]]; then\n            (( k++ ))\n          else\n      \
    \      (( j++ ))\n          fi\n        done\n      done\n    done\n  fi\n  echo\
    \ $(( len == 3 && $(( len % 3 )) == 0 ))\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letter\n    local result\n\
    \n    if [[ $length -gt 3 ]]; then\n        echo \"false\"\n        return\n \
    \   fi\n\n    for (( i=0; i<${#string}; i++ )); do\n        letter=${string:$i:1}\n\
    \        if [[ $letter != $letter ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n        count=$((count+1))\n        if [[ $count -eq\
    \ 3 ]]; then\n            echo \"true\"\n            return\n        fi\n    done\n\
    \    echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local letter\n        for (( i = 0; i < length; ++i )); do\n\
    \            letter=${string:$i:1}\n            if [[ $letter != $letter ]]; then\n\
    \                let count+=1\n            fi\n        done\n        if [[ $count\
    \ -eq 3 ]]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local count2=0\n        local count3=0\n        local count4=0\n\
    \        local count5=0\n        local count6=0\n        local count7=0\n    \
    \    local count8=0\n        local count9=0\n        local count10=0\n       \
    \ local count11=0\n        local count12=0\n        local count13=0\n        local\
    \ count14=0\n        local count15=0\n        local count16=0\n        local count17=0\n\
    \        local count18=0\n        local count19=0\n        local count20=0\n \
    \       local count21=0\n        local count22=0\n        local count23=0\n  \
    \      local count24=0\n        local count25=0\n        local count26=0\n   \
    \     local count27=0\n        local count28=0\n        local count29=0\n    \
    \    local count30=0\n        local count31=0\n        local count32=0\n     \
    \   local count33=0\n        local count34=0\n        local count35=0\n      \
    \  local count36=0\n        local count37=0\n        local count38=0\n       \
    \ local count39=0\n        local count40=0\n        local count41=0\n        local\
    \ count42=0\n        local count43=0\n        local count44=0\n        local count45=0\n\
    \        local count46=0\n        local count47=0\n        local count48=0\n \
    \       local count49=0\n        local count50=0\n        local count51=0\n  \
    \      local count52=0\n        local count53=0\n        local count54=0\n   \
    \     local count55=0\n        local count56=0\n        local count57=0\n    \
    \    local count58=0\n        local count59=0\n        local count60=0\n     \
    \   local count61=0\n        local count62=0\n        local count63=0\n      \
    \  local count64=0\n        local count65=0\n        local count66=0\n       \
    \ local count67=0\n        local count68=0\n        local count69=0\n        local\
    \ count70=0\n        local count71=0\n        local count72=0\n        local count73=0\n\
    \        local count74=0\n        local count75=0\n        local count76=0\n \
    \       local count77=0\n        local count78=0\n        local count79=0\n  \
    \      local count80=0\n        local count81=0\n        local count82=0\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_6rzji6l.sh: line 106: syntax error near unexpected token `}''

    /tmp/tmp_6rzji6l.sh: line 106: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letter\n  local\
    \ hapsh\n  hapsh=false\n  while [ \"$count\" -lt \"$length\" ]; do\n    letter=\"\
    ${string:$count:1}\"\n    if [ \"$letter\" == \"a\" ] || [ \"$letter\" == \"b\"\
    \ ] || [ \"$letter\" == \"c\" ] || [ \"$letter\" == \"d\" ] || [ \"$letter\" ==\
    \ \"e\" ] || [ \"$letter\" == \"f\" ] || [ \"$letter\" == \"g\" ] || [ \"$letter\"\
    \ == \"h\" ] || [ \"$letter\" == \"i\" ] || [ \"$letter\" == \"j\" ] || [ \"$letter\"\
    \ == \"k\" ] || [ \"$letter\" == \"l\" ] || [ \"$letter\" == \"m\" ] || [ \"$letter\"\
    \ == \"n\" ] || [ \"$letter\" == \"o\" ] || [ \"$letter\" == \"p\" ] || [ \"$letter\"\
    \ == \"q\" ] || [ \"$letter\" == \"r\" ] || [ \"$letter\" == \"s\" ] || [ \"$letter\"\
    \ == \"t\" ] || [ \"$letter\" == \"u\" ] || [ \"$letter\" == \"v\" ] || [ \"$letter\"\
    \ == \"w\" ] || [ \"$letter\" == \"x\" ] || [ \"$letter\" == \"y\" ] || [ \"$letter\"\
    \ == \"z\" ]; then\n      hapsh=true\n      break\n    fi\n    ((count++))\n \
    \ done\n  echo \"$hapsh\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local char\n  local char1\n \
    \ local char2\n  local char3\n  local char4\n  local char5\n  local char6\n  local\
    \ char7\n  local char8\n  local char9\n  local char10\n  local char11\n  local\
    \ char12\n  local char13\n  local char14\n  local char15\n  local char16\n  local\
    \ char17\n  local char18\n  local char19\n  local char20\n  local char21\n  local\
    \ char22\n  local char23\n  local char24\n  local char25\n  local char26\n  local\
    \ char27\n  local char28\n  local char29\n  local char30\n  local char31\n  local\
    \ char32\n  local char33\n  local char34\n  local char35\n  local char36\n  local\
    \ char37\n  local char38\n  local char39\n  local char40\n  local char41\n  local\
    \ char42\n  local char43\n  local char44\n  local char45\n  local char46\n  local\
    \ char47\n  local char48\n  local char49\n  local char50\n  local char51\n  local\
    \ char52\n  local char53\n  local char54\n  local char55\n  local char56\n  local\
    \ char57\n  local char58\n  local char59\n  local char60\n  local char61\n  local\
    \ char62\n  local char63\n  local char64\n  local char65\n  local char66\n  local\
    \ char67\n  local char68\n  local char69\n  local char70\n  local char71\n  local\
    \ char72\n  local char73\n  local char74\n  local char75\n  local char76\n  local\
    \ char77\n  local char78\n  local char79\n  local char80\n  local char81\n  local\
    \ char82\n  local char83\n  local char84\n  local char85\n  local char86\n  local\
    \ char87\n  local char88\n  local char89\n  local char90\n  local char91\n  local\
    \ char92\n  local char93\n  local char94\n  local char95\n  local char96\n  local\
    \ char97\n  local char98\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local count=0\n        local letter\n        for (( i=1; i<$length; i++ ));\
    \ do\n            letter=\"${string:$i:1}\"\n            if [[ $count -eq 0 ]];\
    \ then\n                count=$((count+1))\n            else\n               \
    \ if [[ $letter != $letter ]]; then\n                    count=0\n           \
    \     fi\n            fi\n        done\n        if [[ $count -eq 3 ]]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=1\n  local hapsh=true\n  while [ $count\
    \ -le $length ]; do\n    if [[ ${string:$count:1} == ${string:$count:2} == ${string:$count:3}\
    \ ]]; then\n      hapsh=false\n    fi\n    count=$((count+1))\n  done\n  echo\
    \ $hapsh\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4fsgnt45.sh: line 26: syntax error in conditional expression

    /tmp/tmp4fsgnt45.sh: line 26: syntax error near `==''

    /tmp/tmp4fsgnt45.sh: line 26: `    if [[ ${string:$count:1} == ${string:$count:2}
    == ${string:$count:3} ]]; then''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letters=()\n \
    \   local i=0\n    while [ $i -lt $length ]; do\n        local letter=${string:$i:1}\n\
    \        letters+=(\"$letter\")\n        (( i++ ))\n    done\n    local j=0\n\
    \    while [ $j -lt $length ]; do\n        local letter=${string:$j:1}\n     \
    \   if [[ ${letters[*]} != $letter ]]; then\n            (( count++ ))\n     \
    \   fi\n        (( j++ ))\n    done\n    if [ $count -eq 3 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local last\n    local i\n  \
    \  local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len=${#str}\n    local count=0\n    local i\n    local j\n   \
    \ local k\n    local l\n    local m\n    local n\n    local o\n    local p\n \
    \   local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [[ $length -gt 3 ]]; then\n    local\
    \ count=0\n    local last\n    local i\n    for ((i=0; i<$length; i++)); do\n\
    \      last=\"${string:$i:1}\"\n      ((count++))\n      if [[ $count -eq 3 ]];\
    \ then\n        if [[ $last != $last ]]; then\n          echo \"false\"\n    \
    \      exit 0\n        fi\n      fi\n    done\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n    exit 0\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    local count=0\n    local flag=0\n    local i\n   \
    \ local j\n    local k\n    local l\n    local m\n    local n\n    local o\n \
    \   local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n    local J\n    local K\n    local L\n    local M\n\
    \    local N\n    local O\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local U\n    local V\n    local W\n    local X\n    local Y\n\
    \    local Z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local O\n\
    \    local P\n    local Q\n    local R\n    local S\n    local T\n    local U\n\
    \    local V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letter\n \
    \   local result\n\n    if [[ $length -gt 3 ]]; then\n        echo \"false\"\n\
    \        return\n    fi\n\n    for (( i=0; i<$length; i++ )); do\n        letter=\"\
    ${string:$i:1}\"\n        if [[ $letter != $letter ]]; then\n            result=false\n\
    \            break\n        fi\n        count=$((count+1))\n        if [[ $count\
    \ -eq 3 ]]; then\n            result=true\n            break\n        fi\n   \
    \ done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local last=\n    local last2=\n \
    \   local last3=\n    local last4=\n    local last5=\n    local last6=\n    local\
    \ last7=\n    local last8=\n    local last9=\n    local last10=\n    local last11=\n\
    \    local last12=\n    local last13=\n    local last14=\n    local last15=\n\
    \    local last16=\n    local last17=\n    local last18=\n    local last19=\n\
    \    local last20=\n    local last21=\n    local last22=\n    local last23=\n\
    \    local last24=\n    local last25=\n    local last26=\n    local last27=\n\
    \    local last28=\n    local last29=\n    local last30=\n    local last31=\n\
    \    local last32=\n    local last33=\n    local last34=\n    local last35=\n\
    \    local last36=\n    local last37=\n    local last38=\n    local last39=\n\
    \    local last40=\n    local last41=\n    local last42=\n    local last43=\n\
    \    local last44=\n    local last45=\n    local last46=\n    local last47=\n\
    \    local last48=\n    local last49=\n    local last50=\n    local last51=\n\
    \    local last52=\n    local last53=\n    local last54=\n    local last55=\n\
    \    local last56=\n    local last57=\n    local last58=\n    local last59=\n\
    \    local last60=\n    local last61=\n    local last62=\n    local last63=\n\
    \    local last64=\n    local last65=\n    local last66=\n    local last67=\n\
    \    local last68=\n    local last69=\n    local last70=\n    local last71=\n\
    \    local last72=\n    local last73=\n    local last74=\n    local last75=\n\
    \    local last76=\n    local last77=\n    local last78=\n    local last79=\n\
    \    local last80=\n    local last81=\n    local last82=\n    local last83=\n\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local last\n        for (( i=0; i<${#string}; i++ )); do\n\
    \            local current=${string:$i:1}\n            if [[ $current != $last\
    \ ]]; then\n                (( count++ ))\n            fi\n            last=$current\n\
    \        done\n        if (( count >= 3 )); then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letter\n    local\
    \ result\n\n    if [[ $length -gt 3 ]]; then\n        echo \"false\"\n       \
    \ return\n    fi\n\n    for (( i=0; i<$length; i++ )); do\n        letter=${string:$i:1}\n\
    \        if [[ $letter != $letter ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n        count=$((count+1))\n    done\n\n    if [[\
    \ $count -eq 3 ]]; then\n        echo \"true\"\n        return\n    fi\n\n   \
    \ echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local i\n  for i in $(seq 0 $((len-3)))\n\
    \  do\n    if [[ ${string:$i:1} == ${string:$((i+1)):1} ]]\n    then\n      ((count++))\n\
    \    fi\n  done\n  if [[ $count -gt 3 ]]\n  then\n    return 0\n  else\n    return\
    \ 1\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local happy=0\n    local happy1=0\n\
    \    local happy2=0\n    local happy3=0\n    local happy4=0\n    local happy5=0\n\
    \    local happy6=0\n    local happy7=0\n    local happy8=0\n    local happy9=0\n\
    \    local happy10=0\n    local happy11=0\n    local happy12=0\n    local happy13=0\n\
    \    local happy14=0\n    local happy15=0\n    local happy16=0\n    local happy17=0\n\
    \    local happy18=0\n    local happy19=0\n    local happy20=0\n    local happy21=0\n\
    \    local happy22=0\n    local happy23=0\n    local happy24=0\n    local happy25=0\n\
    \    local happy26=0\n    local happy27=0\n    local happy28=0\n    local happy29=0\n\
    \    local happy30=0\n    local happy31=0\n    local happy32=0\n    local happy33=0\n\
    \    local happy34=0\n    local happy35=0\n    local happy36=0\n    local happy37=0\n\
    \    local happy38=0\n    local happy39=0\n    local happy40=0\n    local happy41=0\n\
    \    local happy42=0\n    local happy43=0\n    local happy44=0\n    local happy45=0\n\
    \    local happy46=0\n    local happy47=0\n    local happy48=0\n    local happy49=0\n\
    \    local happy50=0\n    local happy51=0\n    local happy52=0\n    local happy53=0\n\
    \    local happy54=0\n    local happy55=0\n    local happy56=0\n    local happy57=0\n\
    \    local happy58=0\n    local happy59=0\n    local happy60=0\n    local happy61=0\n\
    \    local happy62=0\n    local happy63=0\n    local happy64=0\n    local happy65=0\n\
    \    local happy66=0\n    local happy67=0\n    local happy68=0\n    local happy69=0\n\
    \    local happy70=0\n    local happy71=0\n    local happy72=0\n    local happy73=0\n\
    \    local happy74=0\n    local happy75=0\n    local happy76=0\n    local happy77=0\n\
    \    local happy78=0\n    local happy79=0\n    local happy80=0\n    local happy81=0\n\
    \    local happy82\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [ \"${length}\" -lt 3 ]; then\n    echo\
    \ \"false\"\n  else\n    local i\n    local j\n    local k\n    local count\n\
    \    local count2\n    local count3\n    local count4\n    local count5\n    local\
    \ count6\n    local count7\n    local count8\n    local count9\n    local count10\n\
    \    local count11\n    local count12\n    local count13\n    local count14\n\
    \    local count15\n    local count16\n    local count17\n    local count18\n\
    \    local count19\n    local count20\n    local count21\n    local count22\n\
    \    local count23\n    local count24\n    local count25\n    local count26\n\
    \    local count27\n    local count28\n    local count29\n    local count30\n\
    \    local count31\n    local count32\n    local count33\n    local count34\n\
    \    local count35\n    local count36\n    local count37\n    local count38\n\
    \    local count39\n    local count40\n    local count41\n    local count42\n\
    \    local count43\n    local count44\n    local count45\n    local count46\n\
    \    local count47\n    local count48\n    local count49\n    local count50\n\
    \    local count51\n    local count52\n    local count53\n    local count54\n\
    \    local count55\n    local count56\n    local count57\n    local count58\n\
    \    local count59\n    local count60\n    local count61\n    local count62\n\
    \    local count63\n    local count64\n    local count65\n    local count66\n\
    \    local count67\n    local count68\n    local count69\n    local count70\n\
    \    local count71\n    local count72\n    local count73\n    local count74\n\
    \    local count75\n    local count76\n    local count77\n    local count78\n\
    \    local count79\n    local count80\n    local count81\n    local count82\n\
    \    local count83\n    local count84\n    local count85\n    local count86\n\
    \    local count87\n    local count88\n    local count89\n    local count90\n\
    \    local count91\n    local count92\n    local count93\n    local count94\n\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuxtxvmrb.sh: line 124: syntax error near unexpected token `}''

    /tmp/tmpuxtxvmrb.sh: line 124: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=1\n  local letter\n  local count2\n\
    \  local letter2\n  local count3\n  local letter3\n  local count4\n  local letter4\n\
    \  local count5\n  local letter5\n  local count6\n  local letter6\n  local count7\n\
    \  local letter7\n  local count8\n  local letter8\n  local count9\n  local letter9\n\
    \  local count10\n  local letter10\n  local count11\n  local letter11\n  local\
    \ count12\n  local letter12\n  local count13\n  local letter13\n  local count14\n\
    \  local letter14\n  local count15\n  local letter15\n  local count16\n  local\
    \ letter16\n  local count17\n  local letter17\n  local count18\n  local letter18\n\
    \  local count19\n  local letter19\n  local count20\n  local letter20\n  local\
    \ count21\n  local letter21\n  local count22\n  local letter22\n  local count23\n\
    \  local letter23\n  local count24\n  local letter24\n  local count25\n  local\
    \ letter25\n  local count26\n  local letter26\n  local count27\n  local letter27\n\
    \  local count28\n  local letter28\n  local count29\n  local letter29\n  local\
    \ count30\n  local letter30\n  local count31\n  local letter31\n  local count32\n\
    \  local letter32\n  local count33\n  local letter33\n  local count34\n  local\
    \ letter34\n  local count35\n  local letter35\n  local count36\n  local letter36\n\
    \  local count37\n  local letter37\n  local count38\n  local letter38\n  local\
    \ count39\n  local letter39\n  local count40\n  local letter40\n  local count41\n\
    \  local letter41\n  local count42\n  local letter42\n  local count43\n  local\
    \ letter43\n  local count44\n  local letter44\n  local count45\n  local letter45\n\
    \  local count46\n  local letter46\n  local count47\n  local letter47\n  local\
    \ count48\n  local letter48\n  local count49\n  local letter49\n  local count50\n\
    \  local letter50\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local last\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letters=()\n \
    \   local letter\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local c=0\n    local flag=0\n   \
    \ local i=0\n    local j=0\n    while [ $i -lt $len ]; do\n        if [ $c -eq\
    \ 3 ]; then\n            ((count++))\n            c=0\n        fi\n        if\
    \ [ $count -eq 3 ]; then\n            flag=1\n        fi\n        if [ $flag -eq\
    \ 1 ]; then\n            if [ $i -eq $j ]; then\n                ((c++))\n   \
    \         else\n                ((c=0))\n            fi\n        fi\n        ((i++))\n\
    \        ((j++))\n    done\n    if [ $flag -eq 1 ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local char\n    local char1\n   \
    \ local char2\n    local char3\n    local char4\n    local char5\n    local char6\n\
    \    local char7\n    local char8\n    local char9\n    local char10\n    local\
    \ char11\n    local char12\n    local char13\n    local char14\n    local char15\n\
    \    local char16\n    local char17\n    local char18\n    local char19\n    local\
    \ char20\n    local char21\n    local char22\n    local char23\n    local char24\n\
    \    local char25\n    local char26\n    local char27\n    local char28\n    local\
    \ char29\n    local char30\n    local char31\n    local char32\n    local char33\n\
    \    local char34\n    local char35\n    local char36\n    local char37\n    local\
    \ char38\n    local char39\n    local char40\n    local char41\n    local char42\n\
    \    local char43\n    local char44\n    local char45\n    local char46\n    local\
    \ char47\n    local char48\n    local char49\n    local char50\n    local char51\n\
    \    local char52\n    local char53\n    local char54\n    local char55\n    local\
    \ char56\n    local char57\n    local char58\n    local char59\n    local char60\n\
    \    local char61\n    local char62\n    local char63\n    local char64\n    local\
    \ char65\n    local char66\n    local char67\n    local char68\n    local char69\n\
    \    local char70\n    local char71\n    local char72\n    local char73\n    local\
    \ char74\n    local char75\n    local char76\n    local char77\n    local char78\n\
    \    local char79\n    local char80\n    local char81\n    local char82\n    local\
    \ char83\n    local char84\n    local char85\n    local char86\n    local char87\n\
    \    local char88\n    local char89\n    local char90\n    local char91\n    local\
    \ char92\n    local char93\n    local char94\n    local char95\n    local char96\n\
    \    local char97\n    local char98\n    \n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letters=()\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local len=${#string}\n  local count=0\n  local letter\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local count=0\n        local count2=0\n        local count3=0\n        local\
    \ count4=0\n        local count5=0\n        local count6=0\n        local count7=0\n\
    \        local count8=0\n        local count9=0\n        local count10=0\n   \
    \     local count11=0\n        local count12=0\n        local count13=0\n    \
    \    local count14=0\n        local count15=0\n        local count16=0\n     \
    \   local count17=0\n        local count18=0\n        local count19=0\n      \
    \  local count20=0\n        local count21=0\n        local count22=0\n       \
    \ local count23=0\n        local count24=0\n        local count25=0\n        local\
    \ count26=0\n        local count27=0\n        local count28=0\n        local count29=0\n\
    \        local count30=0\n        local count31=0\n        local count32=0\n \
    \       local count33=0\n        local count34=0\n        local count35=0\n  \
    \      local count36=0\n        local count37=0\n        local count38=0\n   \
    \     local count39=0\n        local count40=0\n        local count41=0\n    \
    \    local count42=0\n        local count43=0\n        local count44=0\n     \
    \   local count45=0\n        local count46=0\n        local count47=0\n      \
    \  local count48=0\n        local count49=0\n        local count50=0\n       \
    \ local count51=0\n        local count52=0\n        local count53=0\n        local\
    \ count54=0\n        local count55=0\n        local count56=0\n        local count57=0\n\
    \        local count58=0\n        local count59=0\n        local count60=0\n \
    \       local count61=0\n        local count62=0\n        local count63=0\n  \
    \      local count64=0\n        local count65=0\n        local count66=0\n   \
    \     local count67=0\n        local count68=0\n        local count69=0\n    \
    \    local count70=0\n        local count71=0\n        local count72=0\n     \
    \   local count73=0\n        local count74=0\n        local count75=0\n      \
    \  local count76=0\n        local count77=0\n        local count78=0\n       \
    \ local count79=0\n        local count80=0\n        local count81=0\n        local\
    \ count82\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmas1m4w9.sh: line 106: syntax error near unexpected token `}''

    /tmp/tmpmas1m4w9.sh: line 106: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letters=()\n  local\
    \ letter\n  local result\n\n  if [[ $length -gt 3 ]]; then\n    return 0\n  fi\n\
    \n  while (( count < length )); do\n    letter=\"${string:$count:1}\"\n    letters+=($letter)\n\
    \    (( count++ ))\n  done\n\n  result=$(echo \"${letters[*]}\" | sort -u | grep\
    \ -q \"^${letters[*]}\")\n  echo $result\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local len=${#str}\n  local count=0\n  local letters=()\n  local i\n  for i\
    \ in $(seq 0 $((len-3)))\n  do\n    letters[$i]=${str:$i:1}\n  done\n  for i in\
    \ $(seq 0 $((len-3)))\n  do\n    if [[ ${letters[$i]} == ${letters[$((i+1))]}\
    \ && ${letters[$i]} == ${letters[$((i+2))]} && ${letters[$i]} == ${letters[$((i+3))]}\
    \ ]]; then\n      ((count++))\n    fi\n  done\n  if [[ $count -gt 3 ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ ${length} -lt 3 ]]; then\n        echo\
    \ \"false\"\n    else\n        local count=0\n        local count2=0\n       \
    \ local count3=0\n        local count4=0\n        local count5=0\n        local\
    \ count6=0\n        local count7=0\n        local count8=0\n        local count9=0\n\
    \        local count10=0\n        local count11=0\n        local count12=0\n \
    \       local count13=0\n        local count14=0\n        local count15=0\n  \
    \      local count16=0\n        local count17=0\n        local count18=0\n   \
    \     local count19=0\n        local count20=0\n        local count21=0\n    \
    \    local count22=0\n        local count23=0\n        local count24=0\n     \
    \   local count25=0\n        local count26=0\n        local count27=0\n      \
    \  local count28=0\n        local count29=0\n        local count30=0\n       \
    \ local count31=0\n        local count32=0\n        local count33=0\n        local\
    \ count34=0\n        local count35=0\n        local count36=0\n        local count37=0\n\
    \        local count38=0\n        local count39=0\n        local count40=0\n \
    \       local count41=0\n        local count42=0\n        local count43=0\n  \
    \      local count44=0\n        local count45=0\n        local count46=0\n   \
    \     local count47=0\n        local count48=0\n        local count49=0\n    \
    \    local count50=0\n        local count51=0\n        local count52=0\n     \
    \   local count53=0\n        local count54=0\n        local count55=0\n      \
    \  local count56=0\n        local count57=0\n        local count58=0\n       \
    \ local count59=0\n        local count60=0\n        local count61=0\n        local\
    \ count62=0\n        local count63=0\n        local count64=0\n        local count65=0\n\
    \        local count66=0\n        local count67=0\n        local count68=0\n \
    \       local count69=0\n        local count70=0\n        local count71=0\n  \
    \      local count72=0\n        local count73=0\n        local count74=0\n   \
    \     local count75=0\n        local count76=0\n        local count77=0\n    \
    \    local count78=0\n        local count79=0\n        local count80=0\n     \
    \   local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe9r6d_ge.sh: line 107: syntax error near unexpected token `}''

    /tmp/tmpe9r6d_ge.sh: line 107: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local last\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n    local J\n    local K\n    local L\n    local M\n\
    \    local N\n    local O\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local U\n    local V\n    local W\n    local X\n    local Y\n\
    \    local Z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local O\n\
    \    local P\n    local Q\n    local R\n    local S\n    local T\n    local U\n\
    \    local V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [ \"${length}\" -lt 3 ]; then\n    echo\
    \ \"false\"\n  else\n    local i\n    local j\n    local k\n    for (( i = 1;\
    \ i <= length; i += 1 )); do\n      for (( j = 1; j <= i; j += 1 )); do\n    \
    \    for (( k = 1; k <= j; k += 1 )); do\n          if [ \"${string:$i:$j:$k}\"\
    \ == \"${string:$j:$k:$i}\" ]; then\n            echo \"false\"\n            break\n\
    \          fi\n        done\n      done\n    done\n    echo \"true\"\n  fi\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr0v6z_i6.sh: line 32: string: 1:1: syntax error in expression (error
    token is ":1")

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    if [[ $len -gt 3 ]]; then\n        local count=0\n\
    \        local char\n        for (( i=0; i<${#string}; i++ )); do\n          \
    \  char=${string:$i:1}\n            if [[ $char != $char ]]; then\n          \
    \      (( count++ ))\n            fi\n        done\n        if [[ $count -eq 3\
    \ ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [ \"${length}\" -lt 3 ]; then\n    return\
    \ 0\n  fi\n  local count=0\n  local letter\n  while [ \"${count}\" -lt \"${length}\"\
    \ ]; do\n    letter=\"${string:$count:1}\"\n    count=$((count+1))\n    if [ \"\
    ${#letter}\" -eq 1 ]; then\n      continue\n    fi\n    if [ \"${#letter}\" -eq\
    \ 2 ]; then\n      continue\n    fi\n    if [ \"${#letter}\" -eq 3 ]; then\n \
    \     if [ \"${letter}\" != \"${letter%?}\" ]; then\n        continue\n      fi\n\
    \    fi\n    return 1\n  done\n  return 0\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    if [[ $len -gt 3 ]]; then\n        echo \"false\"\n\
    \    else\n        local i=0\n        local j=0\n        local k=0\n        while\
    \ [[ $i -lt $len ]]; do\n            if [[ $i -eq $j ]]; then\n              \
    \  let k+=1\n            else\n                let j+=1\n            fi\n    \
    \    done\n        if [[ $k -lt 3 ]]; then\n            echo \"true\"\n      \
    \  else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660042446
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letters=()\n    local\
    \ letter\n    local i\n    local j\n    local k\n    local l\n    local m\n  \
    \  local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ i\n        for (( i=1; i<$length-3; i++ )); do\n            if [[ $string !=\
    \ ${string:$i:1} ]]; then\n                return 0\n            fi\n        done\n\
    \        return 1\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=$((${#string} - 1))\n    local count=0\n    local letters=()\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n    local\
    \ C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n\
    \    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n \
    \   local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n  \
    \  local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n   \
    \ local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local\
    \ c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n    local\
    \ C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n\
    \    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n \
    \   local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n  \
    \  local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n   \
    \ local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    \n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=1\n    local result=\"\
    false\"\n    while [[ $count -le $length ]]; do\n        local letter=\"${string:$count:1}\"\
    \n        if [[ ${!letter} == *[!a-z] ]]; then\n            result=\"true\"\n\
    \            break\n        fi\n        ((count++))\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf_2olbal.sh: line 27: : invalid variable name

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letters=()\n\
    \    local letter\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local last\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local result\n\n    if\
    \ [[ $len -gt 3 ]]; then\n        echo \"false\"\n        return\n    fi\n\n \
    \   for (( i=0; i<$len; i++ )); do\n        if [[ \"$string\" == \"${string:$i:1}\"\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n\n    if [[ $count\
    \ -eq 3 ]]; then\n        result=\"true\"\n    else\n        result=\"false\"\n\
    \    fi\n\n    echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    if [[ $len < 3 ]]; then\n        echo \"false\"\
    \n        return\n    fi\n    local count=0\n    local last\n    local i\n   \
    \ for (( i=1; i<len; i++ )); do\n        local char=${string:$i:1}\n        if\
    \ [[ \"$char\" == \"$last\" ]]; then\n            (( count++ ))\n        else\n\
    \            count=1\n            last=\"$char\"\n        fi\n        if [[ \"\
    $count\" -eq 3 ]]; then\n            echo \"true\"\n            return\n     \
    \   fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local letter2\n\
    \  local letter3\n  local letter4\n  local letter5\n  local letter6\n  local letter7\n\
    \  local letter8\n  local letter9\n  local letter10\n  local letter11\n  local\
    \ letter12\n  local letter13\n  local letter14\n  local letter15\n  local letter16\n\
    \  local letter17\n  local letter18\n  local letter19\n  local letter20\n  local\
    \ letter21\n  local letter22\n  local letter23\n  local letter24\n  local letter25\n\
    \  local letter26\n  local letter27\n  local letter28\n  local letter29\n  local\
    \ letter30\n  local letter31\n  local letter32\n  local letter33\n  local letter34\n\
    \  local letter35\n  local letter36\n  local letter37\n  local letter38\n  local\
    \ letter39\n  local letter40\n  local letter41\n  local letter42\n  local letter43\n\
    \  local letter44\n  local letter45\n  local letter46\n  local letter47\n  local\
    \ letter48\n  local letter49\n  local letter50\n  local letter51\n  local letter52\n\
    \  local letter53\n  local letter54\n  local letter55\n  local letter56\n  local\
    \ letter57\n  local letter58\n  local letter59\n  local letter60\n  local letter61\n\
    \  local letter62\n  local letter63\n  local letter64\n  local letter65\n  local\
    \ letter66\n  local letter67\n  local letter68\n  local letter69\n  local letter70\n\
    \  local letter71\n  local letter72\n  local letter73\n  local letter74\n  local\
    \ letter75\n  local letter76\n  local letter77\n  local letter78\n  local letter79\n\
    \  local letter80\n  local letter81\n  local letter82\n  local letter83\n  local\
    \ letter84\n  local letter85\n  local letter86\n  local letter87\n  local letter88\n\
    \  local letter89\n  local letter90\n  local letter91\n  local letter92\n  local\
    \ letter93\n  local letter94\n  local letter95\n  local letter96\n  local letter97\n\
    \  local letter98\n  local letter99\n\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local letter\n        for (( i=0; i<${#string}; i++ )); do\n\
    \            letter=${string:$i:1}\n            (( count++ ))\n        done\n\
    \        if (( count % 3 )); then\n            echo \"false\"\n        else\n\
    \            echo \"true\"\n        fi\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letter\n    local count2\n\
    \    local letter2\n    local count3\n    local letter3\n    local count4\n  \
    \  local letter4\n    local count5\n    local letter5\n    local count6\n    local\
    \ letter6\n    local count7\n    local letter7\n    local count8\n    local letter8\n\
    \    local count9\n    local letter9\n    local count10\n    local letter10\n\
    \    local count11\n    local letter11\n    local count12\n    local letter12\n\
    \    local count13\n    local letter13\n    local count14\n    local letter14\n\
    \    local count15\n    local letter15\n    local count16\n    local letter16\n\
    \    local count17\n    local letter17\n    local count18\n    local letter18\n\
    \    local count19\n    local letter19\n    local count20\n    local letter20\n\
    \    local count21\n    local letter21\n    local count22\n    local letter22\n\
    \    local count23\n    local letter23\n    local count24\n    local letter24\n\
    \    local count25\n    local letter25\n    local count26\n    local letter26\n\
    \    local count27\n    local letter27\n    local count28\n    local letter28\n\
    \    local count29\n    local letter29\n    local count30\n    local letter30\n\
    \    local count31\n    local letter31\n    local count32\n    local letter32\n\
    \    local count33\n    local letter33\n    local count34\n    local letter34\n\
    \    local count35\n    local letter35\n    local count36\n    local letter36\n\
    \    local count37\n    local letter37\n    local count38\n    local letter38\n\
    \    local count39\n    local letter39\n    local count40\n    local letter40\n\
    \    local count41\n    local letter41\n    local count42\n    local letter42\n\
    \    local count43\n    local letter43\n    local count44\n    local letter44\n\
    \    local count45\n    local letter45\n    local count46\n    local letter46\n\
    \    local count47\n    local letter47\n    local count48\n    local letter48\n\
    \    local count49\n    local letter49\n    local count50\n    local letter50\n\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letter\n    local count2=0\n\
    \    local letter2\n    local count3=0\n    local letter3\n    local count4=0\n\
    \    local letter4\n    local count5=0\n    local letter5\n    local count6=0\n\
    \    local letter6\n    local count7=0\n    local letter7\n    local count8=0\n\
    \    local letter8\n    local count9=0\n    local letter9\n    local count10=0\n\
    \    local letter10\n    local count11=0\n    local letter11\n    local count12=0\n\
    \    local letter12\n    local count13=0\n    local letter13\n    local count14=0\n\
    \    local letter14\n    local count15=0\n    local letter15\n    local count16=0\n\
    \    local letter16\n    local count17=0\n    local letter17\n    local count18=0\n\
    \    local letter18\n    local count19=0\n    local letter19\n    local count20=0\n\
    \    local letter20\n    local count21=0\n    local letter21\n    local count22=0\n\
    \    local letter22\n    local count23=0\n    local letter23\n    local count24=0\n\
    \    local letter24\n    local count25=0\n    local letter25\n    local count26=0\n\
    \    local letter26\n    local count27=0\n    local letter27\n    local count28=0\n\
    \    local letter28\n    local count29=0\n    local letter29\n    local count30=0\n\
    \    local letter30\n    local count31=0\n    local letter31\n    local count32=0\n\
    \    local letter32\n    local count33=0\n    local letter33\n    local count34=0\n\
    \    local letter34\n    local count35=0\n    local letter35\n    local count36=0\n\
    \    local letter36\n    local count37=0\n    local letter37\n    local count38=0\n\
    \    local letter38\n    local count39=0\n    local letter39\n    local count40=0\n\
    \    local letter40\n    local count41=0\n    local letter41\n    local count42=0\n\
    \    local letter42\n    local count43=0\n    local letter43\n    local count44=0\n\
    \    local letter44\n    local count45=0\n    local letter45\n    local count46=0\n\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letter\n    local count2=0\n\
    \    local letter2\n    local count3=0\n    local letter3\n    local count4=0\n\
    \    local letter4\n    local count5=0\n    local letter5\n    local count6=0\n\
    \    local letter6\n    local count7=0\n    local letter7\n    local count8=0\n\
    \    local letter8\n    local count9=0\n    local letter9\n    local count10=0\n\
    \    local letter10\n    local count11=0\n    local letter11\n    local count12=0\n\
    \    local letter12\n    local count13=0\n    local letter13\n    local count14=0\n\
    \    local letter14\n    local count15=0\n    local letter15\n    local count16=0\n\
    \    local letter16\n    local count17=0\n    local letter17\n    local count18=0\n\
    \    local letter18\n    local count19=0\n    local letter19\n    local count20=0\n\
    \    local letter20\n    local count21=0\n    local letter21\n    local count22=0\n\
    \    local letter22\n    local count23=0\n    local letter23\n    local count24=0\n\
    \    local letter24\n    local count25=0\n    local letter25\n    local count26=0\n\
    \    local letter26\n    local count27=0\n    local letter27\n    local count28=0\n\
    \    local letter28\n    local count29=0\n    local letter29\n    local count30=0\n\
    \    local letter30\n    local count31=0\n    local letter31\n    local count32=0\n\
    \    local letter32\n    local count33=0\n    local letter33\n    local count34=0\n\
    \    local letter34\n    local count35=0\n    local letter35\n    local count36=0\n\
    \    local letter36\n    local count37=0\n    local letter37\n    local count38=0\n\
    \    local letter38\n    local count39=0\n    local letter39\n    local count40=0\n\
    \    local letter40\n    local count41=0\n    local letter41\n    local count42=0\n\
    \    local letter42\n    local count43=0\n    local letter43\n    local count44=0\n\
    \    local letter44\n    local count45=0\n    local letter45\n    local count46=0\n\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local result\n\
    \n  if [[ $length -gt 3 ]]; then\n    for (( i=0; i<3; i++ )); do\n      letter=${string:$i:1}\n\
    \      result=$(echo \"$string\" | grep -q \"$letter\")\n      if [[ $result ]];\
    \ then\n        (( count++ ))\n      fi\n    done\n  fi\n\n  if [[ $count -eq\
    \ 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    for (( i=0; i<len; i++ )); do\n        letters[$i]=${string:$i:1}\n \
    \   done\n    for (( i=0; i<len; i++ )); do\n        if [[ ${letters[$i]} == ${letters[$((i+1))]}\
    \ ]]; then\n            count=$((count+1))\n        fi\n    done\n    if [[ $count\
    \ -ge 3 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=1\n  local happy=\"false\"\n  while\
    \ [ $count -le $length ]; do\n    if [[ $string =~ (.)\\1{3} ]]; then\n      happy=\"\
    true\"\n    fi\n    ((count++))\n  done\n  echo $happy\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=1\n    local letter\n \
    \   local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n    local C\n    local D\n    local E\n    local F\n    local\
    \ G\n    local H\n    local I\n    local J\n    local K\n    local L\n    local\
    \ M\n    local N\n    local O\n    local P\n    local Q\n    local R\n    local\
    \ S\n    local T\n    local U\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local letters=()\n    local i=0\n\
    \    while [ $i -lt $len ]; do\n        letters[$i]=${s:i:1}\n        (( i++ ))\n\
    \    done\n    local j=0\n    while [ $j -lt $len ]; do\n        if [ ${letters[$j]}\
    \ != ${letters[$((j+1))]} ]; then\n            (( count++ ))\n        fi\n   \
    \     (( j++ ))\n    done\n    if [ $count -eq 3 ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcejfp3qa.sh: line 32: [: a: unary operator expected

    /tmp/tmpcejfp3qa.sh: line 32: [: a: unary operator expected

    /tmp/tmpcejfp3qa.sh: line 32: [: d: unary operator expected

    /tmp/tmpcejfp3qa.sh: line 32: [: b: unary operator expected

    /tmp/tmpcejfp3qa.sh: line 32: [: b: unary operator expected

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=$((${#string} + 1))\n    local count=0\n    local lastchar\n\
    \    local lastcharcount\n    local happy\n    local happycount\n    local happylastchar\n\
    \    local happylastcharcount\n    local happycount2\n    local happylastchar2\n\
    \    local happycount3\n    local happylastchar3\n    local happycount4\n    local\
    \ happylastchar4\n    local happycount5\n    local happylastchar5\n    local happycount6\n\
    \    local happylastchar6\n    local happycount7\n    local happylastchar7\n \
    \   local happycount8\n    local happylastchar8\n    local happycount9\n    local\
    \ happylastchar9\n    local happycount10\n    local happylastchar10\n    local\
    \ happycount11\n    local happylastchar11\n    local happycount12\n    local happylastchar12\n\
    \    local happycount13\n    local happylastchar13\n    local happycount14\n \
    \   local happylastchar14\n    local happycount15\n    local happylastchar15\n\
    \    local happycount16\n    local happylastchar16\n    local happycount17\n \
    \   local happylastchar17\n    local happycount18\n    local happylastchar18\n\
    \    local happycount19\n    local happylastchar19\n    local happycount20\n \
    \   local happylastchar20\n    local happycount21\n    local happylastchar21\n\
    \    local happycount22\n    local happylastchar22\n    local happycount23\n \
    \   local happylastchar23\n    local happycount24\n    local happylastchar24\n\
    \    local happycount25\n    local happylastchar25\n    local happycount26\n \
    \   local happylastchar26\n    local happycount27\n    local happylastchar27\n\
    \    local happycount28\n    local happylastchar28\n    local happycount29\n \
    \   local happylastchar29\n    local happycount30\n    local happylastchar30\n\
    \    local happycount31\n    local happylastchar31\n    local happycount32\n \
    \   local happylastchar32\n    local happycount33\n    local happylastchar33\n\
    \    local happycount34\n    local happylastchar34\n    local happycount35\n \
    \   local happylastchar35\n    local happycount36\n    local happylastchar36\n\
    \    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=$((${#string} + 1))\n  local count=0\n  local count2=0\n  local\
    \ count3=0\n  local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n\
    \  local count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local\
    \ count12=0\n  local count13=0\n  local count14=0\n  local count15=0\n  local\
    \ count16=0\n  local count17=0\n  local count18=0\n  local count19=0\n  local\
    \ count20=0\n  local count21=0\n  local count22=0\n  local count23=0\n  local\
    \ count24=0\n  local count25=0\n  local count26=0\n  local count27=0\n  local\
    \ count28=0\n  local count29=0\n  local count30=0\n  local count31=0\n  local\
    \ count32=0\n  local count33=0\n  local count34=0\n  local count35=0\n  local\
    \ count36=0\n  local count37=0\n  local count38=0\n  local count39=0\n  local\
    \ count40=0\n  local count41=0\n  local count42=0\n  local count43=0\n  local\
    \ count44=0\n  local count45=0\n  local count46=0\n  local count47=0\n  local\
    \ count48=0\n  local count49=0\n  local count50=0\n  local count51=0\n  local\
    \ count52=0\n  local count53=0\n  local count54=0\n  local count55=0\n  local\
    \ count56=0\n  local count57=0\n  local count58=0\n  local count59=0\n  local\
    \ count60=0\n  local count61=0\n  local count62=0\n  local count63=0\n  local\
    \ count64=0\n  local count65=0\n  local count66=0\n  local count67=0\n  local\
    \ count68=0\n  local count69=0\n  local count70=0\n  local count71=0\n  local\
    \ count72=0\n  local count73=0\n  local count74=0\n  local count75=0\n  local\
    \ count76=0\n  local count77=0\n  local count78=0\n  local count79=0\n  local\
    \ count80=0\n  local count81=0\n  local count82=0\n  local count83\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local i\n        for (( i = 3; i <= length; i++ )); do\n            local\
    \ j\n            for (( j = 1; j <= i; j++ )); do\n                if [[ ${string:$j:1}\
    \ == ${string:$j:1} ]]; then\n                    echo \"false\"\n           \
    \         exit 0\n                fi\n            done\n        done\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n        exit 0\n    fi\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local lastchar=\"\"\n\
    \    local lastcharcount=0\n    local lastcharcount2=0\n    local lastcharcount3=0\n\
    \    local lastcharcount4=0\n    local lastcharcount5=0\n    local lastcharcount6=0\n\
    \    local lastcharcount7=0\n    local lastcharcount8=0\n    local lastcharcount9=0\n\
    \    local lastcharcount10=0\n    local lastcharcount11=0\n    local lastcharcount12=0\n\
    \    local lastcharcount13=0\n    local lastcharcount14=0\n    local lastcharcount15=0\n\
    \    local lastcharcount16=0\n    local lastcharcount17=0\n    local lastcharcount18=0\n\
    \    local lastcharcount19=0\n    local lastcharcount20=0\n    local lastcharcount21=0\n\
    \    local lastcharcount22=0\n    local lastcharcount23=0\n    local lastcharcount24=0\n\
    \    local lastcharcount25=0\n    local lastcharcount26=0\n    local lastcharcount27=0\n\
    \    local lastcharcount28=0\n    local lastcharcount29=0\n    local lastcharcount30=0\n\
    \    local lastcharcount31=0\n    local lastcharcount32=0\n    local lastcharcount33=0\n\
    \    local lastcharcount34=0\n    local lastcharcount35=0\n    local lastcharcount36=0\n\
    \    local lastcharcount37=0\n    local lastcharcount38=0\n    local lastcharcount39=0\n\
    \    local lastcharcount40=0\n    local lastcharcount41=0\n    local lastcharcount42=0\n\
    \    local lastcharcount43=0\n    local lastcharcount44=0\n    local lastcharcount45=0\n\
    \    local lastcharcount46=0\n    local lastcharcount47=0\n    local lastcharcount48=0\n\
    \    local lastcharcount49=0\n    local lastcharcount50=0\n    local lastcharcount51=0\n\
    \    local lastcharcount52=0\n    local lastcharcount53=0\n    local lastcharcount54=0\n\
    \    local lastcharcount55=0\n    local lastcharcount56=0\n    local lastcharcount57=0\n\
    \    local lastcharcount58=0\n    local lastcharcount59=0\n    local lastcharcount60=0\n\
    \    local lastcharcount61=0\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  if [[ ${length} -lt 3 ]]; then\n    echo \"false\"\
    \n  else\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local a\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3wqjcijg.sh: line 123: syntax error near unexpected token `}''

    /tmp/tmp3wqjcijg.sh: line 123: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=1\n  local letter\n  while\
    \ [ \"$count\" -le \"$length\" ]; do\n    letter=\"${string:$count:1}\"\n    if\
    \ [ \"$letter\" == \"a\" ] || [ \"$letter\" == \"b\" ] || [ \"$letter\" == \"\
    c\" ] || [ \"$letter\" == \"d\" ] || [ \"$letter\" == \"e\" ] || [ \"$letter\"\
    \ == \"f\" ] || [ \"$letter\" == \"g\" ] || [ \"$letter\" == \"h\" ] || [ \"$letter\"\
    \ == \"i\" ] || [ \"$letter\" == \"j\" ] || [ \"$letter\" == \"k\" ] || [ \"$letter\"\
    \ == \"l\" ] || [ \"$letter\" == \"m\" ] || [ \"$letter\" == \"n\" ] || [ \"$letter\"\
    \ == \"o\" ] || [ \"$letter\" == \"p\" ] || [ \"$letter\" == \"q\" ] || [ \"$letter\"\
    \ == \"r\" ] || [ \"$letter\" == \"s\" ] || [ \"$letter\" == \"t\" ] || [ \"$letter\"\
    \ == \"u\" ] || [ \"$letter\" == \"v\" ] || [ \"$letter\" == \"w\" ] || [ \"$letter\"\
    \ == \"x\" ] || [ \"$letter\" == \"y\" ] || [ \"$letter\" == \"z\" ]; then\n \
    \     count=$(( $count + 1 ))\n    else\n      count=$(( $count + 1 ))\n     \
    \ echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letters=()\n  local\
    \ result=false\n  local letter\n  local i\n  local j\n  local k\n  local l\n \
    \ local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local \n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ result=false\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n    local C\n    local D\n    local E\n    local F\n    local\
    \ G\n    local H\n    local I\n    local J\n    local K\n    local L\n    local\
    \ M\n    local N\n    local O\n    local P\n    local Q\n    local R\n    local\
    \ S\n    local T\n    local U\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local len=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local i\n  for i in $(seq 0 $((len-3)))\n  do\n    letter=${string:$i:1}\n\
    \    letters+=($letter)\n  done\n  for i in $(seq 0 $((len-3)))\n  do\n    letter=${string:$i:1}\n\
    \    if [[ ${letters[*]} != ${letter} ]]\n    then\n      count=$((count+1))\n\
    \    fi\n  done\n  if (( len > 3 ))\n  then\n    if (( count > 0 ))\n    then\n\
    \      return 0\n    else\n      return 1\n    fi\n  else\n    return 0\n  fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local hapsh\n\n  if [[ $len -gt 3 ]]; then\n    for (( i=0; i<len; i++ ));\
    \ do\n      letter=${string:$i:1}\n      if [[ ${letters[*]} != *\"$letter\"*\
    \ ]]; then\n        (( count++ ))\n        letters+=(\"$letter\")\n      fi\n\
    \    done\n  else\n    hapsh=\"true\"\n  fi\n\n  if [[ $hapsh == \"true\" ]];\
    \ then\n    echo \"$hapsh\"\n  else\n    echo \"$hapsh\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local letter\n  while\
    \ [ \"$count\" -lt \"$length\" ]; do\n    letter=\"${string:$count:1}\"\n    count=$((count+1))\n\
    \    if [ \"$letter\" == \"a\" ] || [ \"$letter\" == \"b\" ] || [ \"$letter\"\
    \ == \"c\" ] || [ \"$letter\" == \"d\" ] || [ \"$letter\" == \"e\" ] || [ \"$letter\"\
    \ == \"f\" ] || [ \"$letter\" == \"g\" ] || [ \"$letter\" == \"h\" ] || [ \"$letter\"\
    \ == \"i\" ] || [ \"$letter\" == \"j\" ] || [ \"$letter\" == \"k\" ] || [ \"$letter\"\
    \ == \"l\" ] || [ \"$letter\" == \"m\" ] || [ \"$letter\" == \"n\" ] || [ \"$letter\"\
    \ == \"o\" ] || [ \"$letter\" == \"p\" ] || [ \"$letter\" == \"q\" ] || [ \"$letter\"\
    \ == \"r\" ] || [ \"$letter\" == \"s\" ] || [ \"$letter\" == \"t\" ] || [ \"$letter\"\
    \ == \"u\" ] || [ \"$letter\" == \"v\" ] || [ \"$letter\" == \"w\" ] || [ \"$letter\"\
    \ == \"x\" ] || [ \"$letter\" == \"y\" ] || [ \"$letter\" == \"z\" ]; then\n \
    \     continue\n    fi\n    if [ \"$letter\" == \"A\" ] || [ \"$letter\" == \"\
    B\" ] || [ \"$letter\" == \"C\" ] || [ \"$letter\" == \"D\" ] || [ \"$letter\"\
    \ == \"E\" ] || [ \"$letter\" == \"F\" ] || [ \"$letter\" == \"G\" ] || [ \"$letter\"\
    \ == \"H\" ] || [ \"$letter\" == \"I\" ] || [ \"$letter\" == \"J\" ] || [ \"$letter\"\
    \ == \"K\" ] || [ \"$letter\" == \"L\" ] || [ \"$letter\" == \"M\" ] || [ \"$letter\"\
    \ == \"N\" ] || [ \"$letter\" == \"O\" ] || [ \"$letter\" == \"P\" ] || [ \"$letter\"\
    \ == \"Q\" ] || [ \"$letter\" == \"R\" ] || [ \"$letter\" == \"S\" ] || [ \"$letter\"\
    \ == \"T\" ] || [ \"$letter\" == \"U\" ] || [ \"$letter\" == \"V\" ] || [ \"$letter\"\
    \ == \"W\" ] || [ \"$letter\" == \"X\" ] || [ \"$letter\" == \"Y\" ] || [ \"$letter\"\
    \ == \"Z\" ]; then\n      continue\n    fi\n    if [ \"$letter\" == \"0\" ] ||\
    \ [ \"$letter\" == \"1\" ] || [ \"$letter\" == \"2\" ] || [ \"$letter\" == \"\
    3\" ]; then\n      continue\n    fi\n    if [ \"$letter\" == \"4\" ] || [ \"$letter\"\
    \ == \"5\" ] || [ \"$letter\" == \"6\" ] || [ \"$letter\" == \"7\" ]; then\n \
    \     continue\n    fi\n    if [ \"$letter\" == \"8\" ] || [ \"$letter\" == \"\
    9\" ]; then\n      continue\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp26fhdgr6.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmp26fhdgr6.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letter\n \
    \   local hapsh\n\n    if [ \"${length}\" -lt 3 ]; then\n        hapsh=\"false\"\
    \n    elif [ \"${length}\" -eq 3 ]; then\n        hapsh=\"true\"\n    else\n \
    \       echo \"String length should be at least 3 and should be 3 or more.\"\n\
    \        hapsh=\"false\"\n    fi\n\n    for (( i=0; i<${#string}; i++ )); do\n\
    \        letter=\"${string:$i:1}\"\n        if [ \"${count}\" -eq 0 ]; then\n\
    \            count=1\n        elif [ \"${count}\" -eq 1 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 2 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 3 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 4 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 5 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 6 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 7 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 8 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 9 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 10 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 11 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 12 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 13 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 14 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 15 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 16 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 17 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 18 ]; then\n            count=$((\
    \ count+1 ))\n        elif [ \"${count}\" -eq 19 ]; then\n            \n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd73e5o4x.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpd73e5o4x.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [ \"${length}\" -lt 3 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local i\n    for (( i = 3;\
    \ i <= length; i++ )); do\n        local j\n        for (( j = 1; j <= i; j++\
    \ )); do\n            if [ \"${string:$j:1}\" == \"${string:$j:1}\" ] || [ \"\
    ${string:$j:1}\" == \"${string:$j:2}\" ] || [ \"${string:$j:1}\" == \"${string:$j:3}\"\
    \ ]; then\n                echo \"false\"\n                return\n          \
    \  fi\n        done\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local i\n        for (( i=0; i<3; i++ )); do\n            if [[ ${string:$i:1}\
    \ == ${string:$((i+1)):1} ]]; then\n                let \"i+=1\"\n           \
    \ else\n                return 1\n            fi\n        done\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local hapsh\n\
    \  local i\n  hapsh=false\n  if [[ $length -lt 3 ]]; then\n    return 0\n  fi\n\
    \  for ((i = 0; i < length; i++)); do\n    letter=${string:$i:1}\n    if [[ $letter\
    \ != $letter ]]; then\n      hapsh=true\n      break\n    fi\n    ((count++))\n\
    \  done\n  if [[ $hapsh == true ]]; then\n    return 0\n  else\n    return 1\n\
    \  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ letter\n    local hapsh\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  if [[ $length -gt 3 ]]; then\n    for (( i=1; i<length-3;\
    \ i++ )); do\n      if [[ ${string:$i:1} == ${string:$i+1:1} ]]; then\n      \
    \  echo \"false\"\n        return\n      fi\n    done\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local result\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n    local J\n    local K\n    local L\n    local M\n\
    \    local N\n    local O\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local U\n    local V\n    local W\n    local X\n    local Y\n\
    \    local Z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local O\n\
    \    local P\n    local Q\n    local R\n    local S\n    local T\n    local U\n\
    \    local V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [ \"${length}\" -lt 3 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local count=0\n    local\
    \ char\n    while [ \"${count}\" -lt \"${length}\" ]; do\n        char=\"${string:$count:1}\"\
    \n        if [ \"${char}\" == \"a\" ] || [ \"${char}\" == \"b\" ] || [ \"${char}\"\
    \ == \"c\" ] || [ \"${char}\" == \"d\" ] || [ \"${char}\" == \"e\" ] || [ \"${char}\"\
    \ == \"f\" ] || [ \"${char}\" == \"g\" ] || [ \"${char}\" == \"h\" ] || [ \"${char}\"\
    \ == \"i\" ] || [ \"${char}\" == \"j\" ] || [ \"${char}\" == \"k\" ] || [ \"${char}\"\
    \ == \"l\" ] || [ \"${char}\" == \"m\" ] || [ \"${char}\" == \"n\" ] || [ \"${char}\"\
    \ == \"o\" ] || [ \"${char}\" == \"p\" ] || [ \"${char}\" == \"q\" ] || [ \"${char}\"\
    \ == \"r\" ] || [ \"${char}\" == \"s\" ] || [ \"${char}\" == \"t\" ] || [ \"${char}\"\
    \ == \"u\" ] || [ \"${char}\" == \"v\" ] || [ \"${char}\" == \"w\" ] || [ \"${char}\"\
    \ == \"x\" ] || [ \"${char}\" == \"y\" ] || [ \"${char}\" == \"z\" ]; then\n \
    \           (( count++ ))\n        fi\n    done\n    if [ \"${count}\" -eq \"\
    ${length}\" ]; then\n        echo \"true\"\n        return\n    fi\n    echo \"\
    false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    local count=0\n    local i=0 j=0\n    local flag=0\n\
    \    local temp\n    while [ $i -lt $len ]; do\n        temp=${str:$i:3}\n   \
    \     if [ \"$temp\" != \"${str:$i:2}\" ] && [ \"$temp\" != \"${str:$i:1}\" ];\
    \ then\n            flag=1\n            break\n        fi\n        (( i++ ))\n\
    \    done\n    if [ $flag -eq 0 ]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ letter\n    for (( i=0; i<len; i++ )); do\n        letter=${string:$i:1}\n \
    \       (( count++ ))\n        letters+=(\"$letter\")\n    done\n    if [ \"$count\"\
    \ -eq 3 ]; then\n        for (( i=0; i<3; i++ )); do\n            letter=${letters[i]}\n\
    \            if [[ ${letters[$i]} == ${letters[$i+1]} ]]; then\n             \
    \   echo \"false\"\n                return 1\n            fi\n        done\n \
    \       echo \"true\"\n        return 0\n    else\n        echo \"false\"\n  \
    \      return 1\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    local count=0\n    local letters=()\n    local\
    \ letter\n    local hapsh\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local A\n    local B\n    local C\n    local D\n\
    \    local E\n    local F\n    local G\n    local H\n    local I\n    local J\n\
    \    local K\n    local L\n    local M\n    local N\n    local O\n    local P\n\
    \    local Q\n    local R\n    local S\n    local T\n    local U\n    local V\n\
    \    local W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local last\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local i\n  for i in $(seq 0 $((length-1))); do\n    letter=${string:$i:1}\n\
    \    letters+=(\"$letter\")\n  done\n  for i in $(seq 0 $((length-1))); do\n \
    \   letter=${string:$i:1}\n    if [[ ${letters[$i]} == ${letters[$((i+1))]} ]];\
    \ then\n      ((count++))\n    fi\n  done\n  if ((length >= 3)); then\n    if\
    \ ((count >= 3)); then\n      return 0\n    else\n      return 1\n    fi\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local len=${#string}\n  local count=0\n  local letters=()\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local count2=0\n  local count3=0\n\
    \  local count4=0\n  local count5=0\n  local count6=0\n  local count7=0\n  local\
    \ count8=0\n  local count9=0\n  local count10=0\n  local count11=0\n  local count12=0\n\
    \  local count13=0\n  local count14=0\n  local count15=0\n  local count16=0\n\
    \  local count17=0\n  local count18=0\n  local count19=0\n  local count20=0\n\
    \  local count21=0\n  local count22=0\n  local count23=0\n  local count24=0\n\
    \  local count25=0\n  local count26=0\n  local count27=0\n  local count28=0\n\
    \  local count29=0\n  local count30=0\n  local count31=0\n  local count32=0\n\
    \  local count33=0\n  local count34=0\n  local count35=0\n  local count36=0\n\
    \  local count37=0\n  local count38=0\n  local count39=0\n  local count40=0\n\
    \  local count41=0\n  local count42=0\n  local count43=0\n  local count44=0\n\
    \  local count45=0\n  local count46=0\n  local count47=0\n  local count48=0\n\
    \  local count49=0\n  local count50=0\n  local count51=0\n  local count52=0\n\
    \  local count53=0\n  local count54=0\n  local count55=0\n  local count56=0\n\
    \  local count57=0\n  local count58=0\n  local count59=0\n  local count60=0\n\
    \  local count61=0\n  local count62=0\n  local count63=0\n  local count64=0\n\
    \  local count65=0\n  local count66=0\n  local count67=0\n  local count68=0\n\
    \  local count69=0\n  local count70=0\n  local count71=0\n  local count72=0\n\
    \  local count73=0\n  local count74=0\n  local count75=0\n  local count76=0\n\
    \  local count77=0\n  local count78=0\n  local count79=0\n  local count80=0\n\
    \  local count81=0\n  local count82=0\n  local count83=0\n  local \n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    if [[ $len -gt 3 ]]; then\n        local count=0\n\
    \        local lastchar\n        for (( i=0; i<len; i++ )); do\n            lastchar=${string:$i:1}\n\
    \            if [[ $lastchar != $lastchar ]]; then\n                (( count++\
    \ ))\n            fi\n        done\n        if [[ $count -eq 3 ]]; then\n    \
    \        echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    local count=0\n    local letters=()\n    local flag=0\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ hapsh=false\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local A\n    local B\n    local C\n    local D\n    local E\n\
    \    local F\n    local G\n    local H\n    local I\n    local J\n    local K\n\
    \    local L\n    local M\n    local N\n    local O\n    local P\n    local Q\n\
    \    local R\n    local S\n    local T\n    local U\n    local V\n    local W\n\
    \    local X\n    local Y\n    local Z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n    local J\n    local K\n    local L\n    local M\n\
    \    local N\n    local O\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local U\n    local V\n    local W\n    local X\n    local Y\n\
    \    local Z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=$((${#string} - 1))\n    local count=0\n    local lastchar\n\
    \    local lastcharcount\n    local lastcharcount2\n    local lastcharcount3\n\
    \    local lastcharcount4\n    local lastcharcount5\n    local lastcharcount6\n\
    \    local lastcharcount7\n    local lastcharcount8\n    local lastcharcount9\n\
    \    local lastcharcount10\n    local lastcharcount11\n    local lastcharcount12\n\
    \    local lastcharcount13\n    local lastcharcount14\n    local lastcharcount15\n\
    \    local lastcharcount16\n    local lastcharcount17\n    local lastcharcount18\n\
    \    local lastcharcount19\n    local lastcharcount20\n    local lastcharcount21\n\
    \    local lastcharcount22\n    local lastcharcount23\n    local lastcharcount24\n\
    \    local lastcharcount25\n    local lastcharcount26\n    local lastcharcount27\n\
    \    local lastcharcount28\n    local lastcharcount29\n    local lastcharcount30\n\
    \    local lastcharcount31\n    local lastcharcount32\n    local lastcharcount33\n\
    \    local lastcharcount34\n    local lastcharcount35\n    local lastcharcount36\n\
    \    local lastcharcount37\n    local lastcharcount38\n    local lastcharcount39\n\
    \    local lastcharcount40\n    local lastcharcount41\n    local lastcharcount42\n\
    \    local lastcharcount43\n    local lastcharcount44\n    local lastcharcount45\n\
    \    local lastcharcount46\n    local lastcharcount47\n    local lastcharcount48\n\
    \    local lastcharcount49\n    local lastcharcount50\n    local lastcharcount51\n\
    \    local lastcharcount52\n    local lastcharcount53\n    local lastcharcount54\n\
    \    local lastcharcount55\n    local lastcharcount56\n    local lastcharcount57\n\
    \    local lastcharcount58\n    local lastcharcount59\n    local lastcharcount60\n\
    \    local lastcharcount61\n    local lastcharcount62\n    local lastcharcount63\n\
    \    local lastcharcount64\n    local lastcharcount65\n    local lastcharcount66\n\
    \    local lastcharcount67\n    local lastcharcount68\n    local lastcharcount69\n\
    \    local last\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local char\n    local temp\n\
    \    local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
    \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
    \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
    \ W\n    local X\n    local Y\n    local Z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ A\n    local B\n    local C\n    local D\n    local E\n    local F\n    local\
    \ G\n    local H\n    local I\n    local J\n    local K\n    local L\n    local\
    \ M\n    local N\n    local O\n    local P\n    local Q\n    local R\n    local\
    \ S\n    local T\n    local U\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letters=()\n\
    \    local letter\n    for (( i=0; i<${#string}; i++ )); do\n        letter=\"\
    ${string:$i:1}\"\n        letters+=(\"$letter\")\n    done\n    for (( i=0; i<${#letters[@]};\
    \ i++ )); do\n        letter=\"${letters[$i]}\"\n        if [[ ${#letters[@]}\
    \ -eq 3 ]]; then\n            if [[ ${letters[$((i+1))]} != ${letters[$((i+2))]}\
    \ ]]; then\n                count=$((count+1))\n            fi\n        fi\n \
    \   done\n    if [[ ${count} -gt 3 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=$((${#string} + 1))\n  local count=0\n  local temp\n  local result\n\
    \n  for (( i=1; i<${#string}; i++ )); do\n    temp=${string:$i:1}\n    if [[ $temp\
    \ != $temp ]]; then\n      result=false\n      break\n    fi\n    (( count++ ))\n\
    \  done\n\n  if [[ $count -ge 3 ]]; then\n    result=true\n  else\n    result=false\n\
    \  fi\n\n  echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  if [[ $length -gt 3 ]]; then\n    local i\n    for\
    \ (( i = 3; i <= length; i++ )); do\n      local j\n      for (( j = 3; j <= length\
    \ - i; j++ )); do\n        local k\n        for (( k = 3; k <= length - i - j;\
    \ k++ )); do\n          if [[ ${string:$i:$j:$k} == *[!-zA-Za-z]* ]]; then\n \
    \           echo \"false\"\n            return 1\n          fi\n        done\n\
    \      done\n    done\n    echo \"true\"\n    return 0\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letters=()\n \
    \   local i=0\n\n    while [ $i -lt $length ]; do\n        local letter=${string:$i:1}\n\
    \        ((count++))\n        letters+=(\"$letter\")\n        ((i++))\n    done\n\
    \n    if [ $count -gt 3 ]; then\n        local distinct=0\n        for letter\
    \ in \"${letters[@]}\"; do\n            if [[ ${letters[*]} != *\"$letter\"* ]];\
    \ then\n                distinct=1\n                break\n            fi\n  \
    \      done\n        if [ $distinct -eq 0 ]; then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local result\n\n  if [[\
    \ $length -gt 3 ]]; then\n    return 0\n  fi\n\n  while [[ $count -lt $length\
    \ ]]; do\n    if [[ $((count+1)) -eq $length ]]; then\n      result=false\n  \
    \  else\n      result=$(echo \"${string:$count:1}\" | sort | uniq -d)\n    fi\n\
    \    if [[ $result != \"\" ]]; then\n      result=true\n    fi\n    count=$((count+1))\n\
    \  done\n\n  return $result\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9tr3hco8.sh: line 42: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letter\n    local\
    \ count1\n    local count2\n    local count3\n    local count4\n    local count5\n\
    \    local count6\n    local count7\n    local count8\n    local count9\n    local\
    \ count10\n    local count11\n    local count12\n    local count13\n    local\
    \ count14\n    local count15\n    local count16\n    local count17\n    local\
    \ count18\n    local count19\n    local count20\n    local count21\n    local\
    \ count22\n    local count23\n    local count24\n    local count25\n    local\
    \ count26\n    local count27\n    local count28\n    local count29\n    local\
    \ count30\n    local count31\n    local count32\n    local count33\n    local\
    \ count34\n    local count35\n    local count36\n    local count37\n    local\
    \ count38\n    local count39\n    local count40\n    local count41\n    local\
    \ count42\n    local count43\n    local count44\n    local count45\n    local\
    \ count46\n    local count47\n    local count48\n    local count49\n    local\
    \ count50\n    local count51\n    local count52\n    local count53\n    local\
    \ count54\n    local count55\n    local count56\n    local count57\n    local\
    \ count58\n    local count59\n    local count60\n    local count61\n    local\
    \ count62\n    local count63\n    local count64\n    local count65\n    local\
    \ count66\n    local count67\n    local count68\n    local count69\n    local\
    \ count70\n    local count71\n    local count72\n    local count73\n    local\
    \ count74\n    local count75\n    local count76\n    local count77\n    local\
    \ count78\n    local count79\n    local count80\n    local count81\n    local\
    \ count82\n    local count83\n    local count84\n    local count85\n    local\
    \ count86\n    local count87\n    local count88\n    local count89\n    local\
    \ count90\n    local count91\n    local count92\n    local count93\n    local\
    \ count94\n    local count95\n    local count96\n    local count97\n    local\
    \ count98\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letter\n    local\
    \ hapsh\n    local i\n    local j\n    local k\n    local l\n    local m\n   \
    \ local n\n    local o\n    local p\n    local q\n    local r\n    local s\n \
    \   local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=${#str}\n    if [[ $len < 3 ]]; then\n        echo \"false\"\n\
    \        return\n    fi\n    local i\n    for (( i=0; i<len; i++ )); do\n    \
    \    local j\n        for (( j=0; j<3; j++ )); do\n            if [[ $str[$i+$j]\
    \ != $str[$i+$j+1] ]]; then\n                echo \"false\"\n                return\n\
    \            fi\n        done\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local char\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n    local J\n    local K\n    local L\n    local M\n\
    \    local N\n    local O\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local U\n    local V\n    local W\n    local X\n    local Y\n\
    \    local Z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local O\n\
    \    local P\n    local Q\n    local R\n    local S\n    local T\n    local U\n\
    \    local V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letters=()\n\
    \    local letter\n    local hapsh\n    \n    if [[ $length -gt 3 ]]; then\n \
    \       hapsh=true\n    else\n        hapsh=false\n    fi\n    \n    for (( i=1;\
    \ i<=$length; i++ )); do\n        letter=\"${string:$i:1}\"\n        if [[ ${#letters[@]}\
    \ -eq 0 ]]; then\n            letters[$count]=$letter\n            count=$((count+1))\n\
    \        else\n            if [[ ${letters[$count]} != $letter ]]; then\n    \
    \            hapsh=false\n                break\n            fi\n        fi\n\
    \    done\n    \n    echo \"$hapsh\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letter\n    local\
    \ result\n\n    if [[ $len -gt 3 ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n\n    for (( i=1; i<len; i++ )); do\n        letter=${string:$i:1}\n\
    \        if [[ $letter != $letter ]]; then\n            echo \"false\"\n     \
    \       return\n        fi\n        count=$((count+1))\n        if [[ $count -eq\
    \ 3 ]]; then\n            echo \"true\"\n            return\n        fi\n    done\n\
    \    echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local c\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local result\n    local letter\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    local C\n    local D\n    local E\n    local F\n    local G\n    local H\n\
    \    local I\n    local J\n    local K\n    local L\n    local M\n    local N\n\
    \    local O\n    local P\n    local Q\n    local R\n    local S\n    local T\n\
    \    local U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [ \"${length}\" -lt 3 ]; then\n    return\
    \ 0\n  fi\n  local count=0\n  local char\n  while [ \"${count}\" -lt \"${length}\"\
    \ ]; do\n    char=\"${string:$count:1}\"\n    if [ \"${char}\" == \"a\" ] || [\
    \ \"${char}\" == \"b\" ] || [ \"${char}\" == \"c\" ] || [ \"${char}\" == \"d\"\
    \ ] || [ \"${char}\" == \"e\" ] || [ \"${char}\" == \"f\" ] || [ \"${char}\" ==\
    \ \"g\" ] || [ \"${char}\" == \"h\" ] || [ \"${char}\" == \"i\" ] || [ \"${char}\"\
    \ == \"j\" ] || [ \"${char}\" == \"k\" ] || [ \"${char}\" == \"l\" ] || [ \"${char}\"\
    \ == \"m\" ] || [ \"${char}\" == \"n\" ] || [ \"${char}\" == \"o\" ] || [ \"${char}\"\
    \ == \"p\" ] || [ \"${char}\" == \"q\" ] || [ \"${char}\" == \"r\" ] || [ \"${char}\"\
    \ == \"s\" ] || [ \"${char}\" == \"t\" ] || [ \"${char}\" == \"u\" ] || [ \"${char}\"\
    \ == \"v\" ] || [ \"${char}\" == \"w\" ] || [ \"${char}\" == \"x\" ] || [ \"${char}\"\
    \ == \"y\" ] || [ \"${char}\" == \"z\" ]; then\n      count=$(( count + 1 ))\n\
    \    else\n      count=$(( count + 1 ))\n      count=$(( count + 1 ))\n    fi\n\
    \  done\n  if [ \"${count}\" -eq \"${length}\" ]; then\n    return 1\n  else\n\
    \    return 0\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local letters=()\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letter\n  local temp\n\
    \  local result\n\n  if [ \"$length\" -lt 3 ]; then\n    return 0\n  fi\n\n  while\
    \ [ \"$count\" -lt \"$length\" ]; do\n    letter=${string:$count:1}\n    temp=${string:$count:2}\n\
    \    if [ \"$letter\" != \"$temp\" ]; then\n      result=false\n      break\n\
    \    fi\n    count=$((count+3))\n  done\n\n  if [ \"$result\" == \"true\" ]; then\n\
    \    return 1\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    if [[ $len -gt 3 ]]; then\n        local count=0\n\
    \        local last\n        for (( i=0; i<len; i++ )); do\n            if [[\
    \ \"${string:$i:1}\" == \"${string:$i:1}\" ]]; then\n                (( count++\
    \ ))\n            else\n                if [[ $count -eq 3 ]]; then\n        \
    \            echo \"true\"\n                    return\n                fi\n \
    \               count=0\n            fi\n        done\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [ \"${length}\" -lt 3 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local count=0\n    local\
    \ letter\n    for letter in \"${string}\"; do\n        if [ \"${count}\" -eq 0\
    \ ]; then\n            count=$((count+1))\n            continue\n        fi\n\
    \        if [ \"${letter}\" != \"${string[count-1]}\" ]; then\n            echo\
    \ \"false\"\n            return\n        fi\n        count=$((count+1))\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    local i\n        for (( i=1; i<=$((length-1)); i++ )); do\n            if\
    \ [[ $((i%3)) -ne 0 ]]; then\n                echo \"false\"\n               \
    \ return 1\n            fi\n        done\n        echo \"true\"\n        return\
    \ 0\n    else\n        echo \"false\"\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local lastchar=\"\"\n\
    \  local lastcharcount=0\n  local lastcharcount2=0\n  local lastcharcount3=0\n\
    \  local lastcharcount4=0\n  local lastcharcount5=0\n  local lastcharcount6=0\n\
    \  local lastcharcount7=0\n  local lastcharcount8=0\n  local lastcharcount9=0\n\
    \  local lastcharcount10=0\n  local lastcharcount11=0\n  local lastcharcount12=0\n\
    \  local lastcharcount13=0\n  local lastcharcount14=0\n  local lastcharcount15=0\n\
    \  local lastcharcount16=0\n  local lastcharcount17=0\n  local lastcharcount18=0\n\
    \  local lastcharcount19=0\n  local lastcharcount20=0\n  local lastcharcount21=0\n\
    \  local lastcharcount22=0\n  local lastcharcount23=0\n  local lastcharcount24=0\n\
    \  local lastcharcount25=0\n  local lastcharcount26=0\n  local lastcharcount27=0\n\
    \  local lastcharcount28=0\n  local lastcharcount29=0\n  local lastcharcount30=0\n\
    \  local lastcharcount31=0\n  local lastcharcount32=0\n  local lastcharcount33=0\n\
    \  local lastcharcount34=0\n  local lastcharcount35=0\n  local lastcharcount36=0\n\
    \  local lastcharcount37=0\n  local lastcharcount38=0\n  local lastcharcount39=0\n\
    \  local lastcharcount40=0\n  local lastcharcount41=0\n  local lastcharcount42=0\n\
    \  local lastcharcount43=0\n  local lastcharcount44=0\n  local lastcharcount45=0\n\
    \  local lastcharcount46=0\n  local lastcharcount47=0\n  local lastcharcount48=0\n\
    \  local lastcharcount49=0\n  local lastcharcount50=0\n  local lastcharcount51=0\n\
    \  local lastcharcount52=0\n  local lastcharcount53=0\n  local lastcharcount54=0\n\
    \  local lastcharcount55=0\n  local lastcharcount56=0\n  local lastcharcount57=0\n\
    \  local lastcharcount58=0\n  local lastcharcount59=0\n  local lastcharcount60=0\n\
    \  local lastcharcount61=0\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [ \"${length}\" -lt 3 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local count=0\n    local\
    \ letter\n    while [ \"${count}\" -lt \"${length}\" ]; do\n        letter=\"\
    ${string:$count:1}\"\n        if [ \"${letter}\" == \"a\" ] || [ \"${letter}\"\
    \ == \"b\" ] || [ \"${letter}\" == \"c\" ] || [ \"${letter}\" == \"d\" ] || [\
    \ \"${letter}\" == \"e\" ] || [ \"${letter}\" == \"f\" ] || [ \"${letter}\" ==\
    \ \"g\" ] || [ \"${letter}\" == \"h\" ] || [ \"${letter}\" == \"i\" ] || [ \"\
    ${letter}\" == \"j\" ] || [ \"${letter}\" == \"k\" ] || [ \"${letter}\" == \"\
    l\" ] || [ \"${letter}\" == \"m\" ] || [ \"${letter}\" == \"n\" ] || [ \"${letter}\"\
    \ == \"o\" ] || [ \"${letter}\" == \"p\" ] || [ \"${letter}\" == \"q\" ] || [\
    \ \"${letter}\" == \"r\" ] || [ \"${letter}\" == \"s\" ] || [ \"${letter}\" ==\
    \ \"t\" ] || [ \"${letter}\" == \"u\" ] || [ \"${letter}\" == \"v\" ] || [ \"\
    ${letter}\" == \"w\" ] || [ \"${letter}\" == \"x\" ] || [ \"${letter}\" == \"\
    y\" ] || [ \"${letter}\" == \"z\" ]; then\n            (( count++ ))\n       \
    \ fi\n    done\n    if [ \"${count}\" -eq \"${length}\" ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    echo \"false\"\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=1\n  local result\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local last\n    local flag=0\n  \
    \  local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    local C\n    local D\n    local E\n    local F\n    local G\n    local H\n\
    \    local I\n    local J\n    local K\n    local L\n    local M\n    local N\n\
    \    local O\n    local P\n    local Q\n    local R\n    local S\n    local T\n\
    \    local U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local len=${#string}\n  if [[ $len < 3 ]]; then\n    echo \"false\"\n  else\n\
    \    local i\n    for (( i = 3; i <= len; i++ )); do\n      local j\n      for\
    \ (( j = 1; j <= i; j++ )); do\n        if [[ $string != ${string:$j:1} ]]; then\n\
    \          echo \"false\"\n          break\n        fi\n      done\n    done\n\
    \    echo \"true\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    if [[ $len -gt 3 ]]; then\n        local count=0\n\
    \        local last\n        for (( i=0; i<len; i++ )); do\n            if [[\
    \ \"$string\" == \"${string:$i:1}\" ]]; then\n                (( count++ ))\n\
    \            else\n                if [[ $count -eq 3 ]]; then\n             \
    \       echo \"true\"\n                    exit 0\n                fi\n      \
    \          count=0\n            fi\n        done\n    fi\n    echo \"false\"\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local char\n    local char1\n\
    \    local char2\n    local char3\n    local char4\n    local char5\n    local\
    \ char6\n    local char7\n    local char8\n    local char9\n    local char10\n\
    \    local char11\n    local char12\n    local char13\n    local char14\n    local\
    \ char15\n    local char16\n    local char17\n    local char18\n    local char19\n\
    \    local char20\n    local char21\n    local char22\n    local char23\n    local\
    \ char24\n    local char25\n    local char26\n    local char27\n    local char28\n\
    \    local char29\n    local char30\n    local char31\n    local char32\n    local\
    \ char33\n    local char34\n    local char35\n    local char36\n    local char37\n\
    \    local char38\n    local char39\n    local char40\n    local char41\n    local\
    \ char42\n    local char43\n    local char44\n    local char45\n    local char46\n\
    \    local char47\n    local char48\n    local char49\n    local char50\n    local\
    \ char51\n    local char52\n    local char53\n    local char54\n    local char55\n\
    \    local char56\n    local char57\n    local char58\n    local char59\n    local\
    \ char60\n    local char61\n    local char62\n    local char63\n    local char64\n\
    \    local char65\n    local char66\n    local char67\n    local char68\n    local\
    \ char69\n    local char70\n    local char71\n    local char72\n    local char73\n\
    \    local char74\n    local char75\n    local char76\n    local char77\n    local\
    \ char78\n    local char79\n    local char80\n    local char81\n    local char82\n\
    \    local char83\n    local char84\n    local char85\n    local char86\n    local\
    \ char87\n    local char88\n    local char89\n    local char90\n    local char91\n\
    \    local char92\n    local char93\n    local char94\n    local char95\n    local\
    \ char96\n    local char97\n    local char98\n\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local flag=0\n    local char\n  \
    \  local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letter\n    local\
    \ count2\n    local letter2\n    local count3\n    local letter3\n    local count4\n\
    \    local letter4\n    local count5\n    local letter5\n    local count6\n  \
    \  local letter6\n    local count7\n    local letter7\n    local count8\n    local\
    \ letter8\n    local count9\n    local letter9\n    local count10\n    local letter10\n\
    \    local count11\n    local letter11\n    local count12\n    local letter12\n\
    \    local count13\n    local letter13\n    local count14\n    local letter14\n\
    \    local count15\n    local letter15\n    local count16\n    local letter16\n\
    \    local count17\n    local letter17\n    local count18\n    local letter18\n\
    \    local count19\n    local letter19\n    local count20\n    local letter20\n\
    \    local count21\n    local letter21\n    local count22\n    local letter22\n\
    \    local count23\n    local letter23\n    local count24\n    local letter24\n\
    \    local count25\n    local letter25\n    local count26\n    local letter26\n\
    \    local count27\n    local letter27\n    local count28\n    local letter28\n\
    \    local count29\n    local letter29\n    local count30\n    local letter30\n\
    \    local count31\n    local letter31\n    local count32\n    local letter32\n\
    \    local count33\n    local letter33\n    local count34\n    local letter34\n\
    \    local count35\n    local letter35\n    local count36\n    local letter36\n\
    \    local count37\n    local letter37\n    local count38\n    local letter38\n\
    \    local count39\n    local letter39\n    local count40\n    local letter40\n\
    \    local count41\n    local letter41\n    local count42\n    local letter42\n\
    \    local count43\n    local letter43\n    local count44\n    local letter44\n\
    \    local count45\n    local letter45\n    local count46\n    local letter46\n\
    \    local count47\n    local letter47\n    local count48\n    local letter48\n\
    \    local count49\n    local letter49\n    local count50\n    local letter50\n\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local letter\n        for (( i=0; i<${#string}; i++ )); do\n\
    \            letter=${string:$i:1}\n            if [[ $count -eq 0 ]]; then\n\
    \                count=$((count+1))\n            else\n                if [[ $letter\
    \ != $letter ]]; then\n                    count=$((count+1))\n              \
    \  else\n                    count=$((count+1))\n                fi\n        \
    \    fi\n        done\n        if [[ $count -eq 3 ]]; then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    else\n     \
    \   echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local letter\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local lastchar=\"\
    \"\n    local lastcharcount=0\n    local happy=\"false\"\n    local happycount=0\n\
    \    local happylastchar=\"\"\n    local happylastcharcount=0\n    local happylastcharcount2=0\n\
    \    local happylastcharcount3=0\n    local happylastcharcount4=0\n    local happylastcharcount5=0\n\
    \    local happylastcharcount6=0\n    local happylastcharcount7=0\n    local happylastcharcount8=0\n\
    \    local happylastcharcount9=0\n    local happylastcharcount10=0\n    local\
    \ happylastcharcount11=0\n    local happylastcharcount12=0\n    local happylastcharcount13=0\n\
    \    local happylastcharcount14=0\n    local happylastcharcount15=0\n    local\
    \ happylastcharcount16=0\n    local happylastcharcount17=0\n    local happylastcharcount18=0\n\
    \    local happylastcharcount19=0\n    local happylastcharcount20=0\n    local\
    \ happylastcharcount21=0\n    local happylastcharcount22=0\n    local happylastcharcount23=0\n\
    \    local happylastcharcount24=0\n    local happylastcharcount25=0\n    local\
    \ happylastcharcount26=0\n    local happylastcharcount27=0\n    local happylastcharcount28=0\n\
    \    local happylastcharcount29=0\n    local happylastcharcount30=0\n    local\
    \ happylastcharcount31=0\n    local happylastcharcount32=0\n    local happylastcharcount33=0\n\
    \    local happylastcharcount34=0\n    local happylastcharcount35=0\n    local\
    \ happylastcharcount36=0\n    local happylastcharcount37=0\n    local happylastcharcount38=0\n\
    \    local happylastcharcount39=0\n    local happylastcharcount40=0\n    local\
    \ happylastcharcount41=0\n    local happylastcharcount42=0\n    local happylastcharcount43=0\n\
    \    local happylastcharcount44=0\n    local happylastcharcount45=0\n    local\
    \ happylastcharcount46=0\n    local happylastcharcount47=0\n    local happylastcharcount48=0\n\
    \    local happylastcharcount49=0\n    local happylastcharcount50=0\n    local\
    \ happylastcharcount51=0\n    local happy\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local char\n    local hapsh\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local A\n    local B\n    local C\n    local D\n    local E\n    local F\n\
    \    local G\n    local H\n    local I\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local O\n    local P\n    local Q\n    local R\n\
    \    local S\n    local T\n    local U\n    local V\n    local W\n    local X\n\
    \    local Y\n    local Z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    local C\n    local D\n    local E\n    local F\n    local G\n    local H\n\
    \    local I\n    local J\n    local K\n    local L\n    local M\n    local N\n\
    \    local O\n    local P\n    local Q\n    local R\n    local S\n    local T\n\
    \    local U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [[ $length -gt 3 ]]; then\n    local\
    \ count=0\n    local letter\n    while (( count < 3 )); do\n      letter=\"${string:$count:1}\"\
    \n      (( count++ ))\n    done\n  else\n    local count=0\n    local letter\n\
    \    while (( count < 3 )); do\n      letter=\"${string:$count:1}\"\n      ((\
    \ count++ ))\n    done\n  fi\n  local distinct=0\n  local letter\n  for (( count\
    \ = 0; count < 3; count++ )); do\n    letter=\"${string:$count:1}\"\n    (( distinct\
    \ += 1 ))\n  done\n  if (( distinct == 3 )); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local letters=()\n  local\
    \ temp\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letter\n \
    \   local hapsh\n\n    if [ \"$length\" -lt 3 ]; then\n        return false\n\
    \    fi\n\n    for (( i=1; i<=$length; i++ )); do\n        letter=\"${string:$i:1}\"\
    \n        if [ \"$letter\" == \"$letter\" ]; then\n            count=$(( count+1\
    \ ))\n        else\n            if [ \"$count\" -eq 3 ]; then\n              \
    \  hapsh=true\n                break\n            fi\n            count=0\n  \
    \      fi\n    done\n\n    if [ \"$hapsh\" == \"true\" ]; then\n        return\
    \ true\n    else\n        return false\n    fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0etj8sk_.sh: line 28: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=$((${#string} - 1))\n  local count=1\n  local letter\n  while\
    \ [[ $count -le $length ]]; do\n    letter=${string:$count:1}\n    count=$((count\
    \ + 1))\n    if [[ ${#letter} -eq 1 ]]; then\n      echo \"false\"\n      return\
    \ 1\n    fi\n  done\n  echo \"true\"\n  return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local char\n    local lastchar\n\
    \    local lastcharcount\n    local happy\n\n    if [[ $len -gt 3 ]]; then\n \
    \       happy=\"false\"\n    else\n        happy=\"true\"\n    fi\n\n    for ((\
    \ i=0; i<$len; i++ )); do\n        char=${string:$i:1}\n        if [[ $char !=\
    \ $lastchar ]]; then\n            count=$((count+1))\n        else\n         \
    \   lastcharcount=$((lastcharcount+1))\n        fi\n        if [[ $lastcharcount\
    \ -eq 3 ]]; then\n            happy=\"false\"\n        fi\n        lastchar=$char\n\
    \    done\n    echo \"$happy\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local count2=0\n    local count3=0\n\
    \    local count4=0\n    local count5=0\n    local count6=0\n    local count7=0\n\
    \    local count8=0\n    local count9=0\n    local count10=0\n    local count11=0\n\
    \    local count12=0\n    local count13=0\n    local count14=0\n    local count15=0\n\
    \    local count16=0\n    local count17=0\n    local count18=0\n    local count19=0\n\
    \    local count20=0\n    local count21=0\n    local count22=0\n    local count23=0\n\
    \    local count24=0\n    local count25=0\n    local count26=0\n    local count27=0\n\
    \    local count28=0\n    local count29=0\n    local count30=0\n    local count31=0\n\
    \    local count32=0\n    local count33=0\n    local count34=0\n    local count35=0\n\
    \    local count36=0\n    local count37=0\n    local count38=0\n    local count39=0\n\
    \    local count40=0\n    local count41=0\n    local count42=0\n    local count43=0\n\
    \    local count44=0\n    local count45=0\n    local count46=0\n    local count47=0\n\
    \    local count48=0\n    local count49=0\n    local count50=0\n    local count51=0\n\
    \    local count52=0\n    local count53=0\n    local count54=0\n    local count55=0\n\
    \    local count56=0\n    local count57=0\n    local count58=0\n    local count59=0\n\
    \    local count60=0\n    local count61=0\n    local count62=0\n    local count63=0\n\
    \    local count64=0\n    local count65=0\n    local count66=0\n    local count67=0\n\
    \    local count68=0\n    local count69=0\n    local count70=0\n    local count71=0\n\
    \    local count72=0\n    local count73=0\n    local count74=0\n    local count75=0\n\
    \    local count76=0\n    local count77=0\n    local count78=0\n    local count79=0\n\
    \    local count80=0\n    local count81=0\n    local count82=0\n    local count83=0\n\
    \    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042440
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    local count=0\n    local letter\n \
    \   local hapsh\n    local letter2\n    local letter3\n    local letter4\n   \
    \ local letter5\n    local letter6\n    local letter7\n    local letter8\n   \
    \ local letter9\n    local letter10\n    local letter11\n    local letter12\n\
    \    local letter13\n    local letter14\n    local letter15\n    local letter16\n\
    \    local letter17\n    local letter18\n    local letter19\n    local letter20\n\
    \    local letter21\n    local letter22\n    local letter23\n    local letter24\n\
    \    local letter25\n    local letter26\n    local letter27\n    local letter28\n\
    \    local letter29\n    local letter30\n    local letter31\n    local letter32\n\
    \    local letter33\n    local letter34\n    local letter35\n    local letter36\n\
    \    local letter37\n    local letter38\n    local letter39\n    local letter40\n\
    \    local letter41\n    local letter42\n    local letter43\n    local letter44\n\
    \    local letter45\n    local letter46\n    local letter47\n    local letter48\n\
    \    local letter49\n    local letter50\n    local letter51\n    local letter52\n\
    \    local letter53\n    local letter54\n    local letter55\n    local letter56\n\
    \    local letter57\n    local letter58\n    local letter59\n    local letter60\n\
    \    local letter61\n    local letter62\n    local letter63\n    local letter64\n\
    \    local letter65\n    local letter66\n    local letter67\n    local letter68\n\
    \    local letter69\n    local letter70\n    local letter71\n    local letter72\n\
    \    local letter73\n    local letter74\n    local letter75\n    local letter76\n\
    \    local letter77\n    local letter78\n    local letter79\n    local letter80\n\
    \    local letter81\n    local letter82\n    local letter83\n    local letter84\n\
    \    local letter85\n    local letter86\n    local letter87\n    local letter88\n\
    \    local letter89\n    local letter90\n    local letter91\n    local letter92\n\
    \    local letter93\n    local letter94\n    local letter95\n    local letter96\n\
    \    local letter97\n    local letter98\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local char\n    local last\n\
    \    local result\n\n    if [[ $len -gt 3 ]]; then\n        echo \"false\"\n \
    \       return\n    fi\n\n    for (( i=0; i<len; i++ )); do\n        char=${string:$i:1}\n\
    \        if [[ $char != $last ]]; then\n            count=$((count+1))\n     \
    \   else\n            count=$((count-1))\n        fi\n        last=$char\n   \
    \ done\n\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  local count=0\n  local char\n\n  while\
    \ [ \"$count\" -lt \"$length\" ]; do\n    char=\"${string:$count:1}\"\n    count=$((count+1))\n\
    \    if [ \"$char\" == \"a\" ] || [ \"$char\" == \"e\" ] || [ \"$char\" == \"\
    i\" ] || [ \"$char\" == \"o\" ] || [ \"$char\" == \"u\" ]; then\n      continue\n\
    \    fi\n    if [ \"$char\" == \"b\" ] || [ \"$char\" == \"c\" ] || [ \"$char\"\
    \ == \"d\" ] || [ \"$char\" == \"f\" ] || [ \"$char\" == \"g\" ] || [ \"$char\"\
    \ == \"h\" ] || [ \"$char\" == \"j\" ] || [ \"$char\" == \"k\" ] || [ \"$char\"\
    \ == \"l\" ] || [ \"$char\" == \"m\" ] || [ \"$char\" == \"n\" ] || [ \"$char\"\
    \ == \"p\" ] || [ \"$char\" == \"q\" ] || [ \"$char\" == \"r\" ] || [ \"$char\"\
    \ == \"s\" ] || [ \"$char\" == \"t\" ] || [ \"$char\" == \"v\" ] || [ \"$char\"\
    \ == \"w\" ] || [ \"$char\" == \"x\" ] || [ \"$char\" == \"y\" ]; then\n     \
    \ continue\n    fi\n    if [ \"$char\" == \"z\" ]; then\n      continue\n    fi\n\
    \    if [ \"$char\" == \"0\" ]; then\n      continue\n    fi\n    if [ \"$char\"\
    \ == \"1\" ]; then\n      continue\n    fi\n    if [ \"$char\" == \"2\" ]; then\n\
    \      continue\n    fi\n    if [ \"$char\" == \"3\" ]; then\n      continue\n\
    \    fi\n    if [ \"$char\" == \"4\" ]; then\n      continue\n    fi\n    if [\
    \ \"$char\" == \"5\" ]; then\n      continue\n    fi\n    if [ \"$char\" == \"\
    6\" ]; then\n      continue\n    fi\n    if [ \"$char\" == \"7\" ]; then\n   \
    \   continue\n    fi\n    if [ \"$char\" == \"8\" ]; then\n      continue\n  \
    \  fi\n    if [ \"$char\" == \"9\" ]; then\n      continue\n    fi\n    if [ \"\
    $char\" == \"-\" ]; then\n      continue\n    fi\n    if [ \"$char\" == \".\"\
    \ ]; then\n      continue\n    fi\n    if [ \"$char\" == \"_\" ]; then\n     \
    \ continue\n    fi\n    if [ \"$char\" == \"+\" ]; then\n      continue\n    fi\n\
    \    if [ \"$char\" == \"/\" ]; then\n      continue\n    fi\n    if [ \"$char\"\
    \ == \"(\" ]; then\n      continue\n    fi\n    if [ \"$char\" == \")\" ]; then\n\
    \      continue\n    fi\n    if [ \"$char\" == \"{\" ]; then\n      continue\n\
    \    fi\n    if [ \"$char\" == \"}\" ]; then\n      continue\n    fi\n    if [\
    \ \"$char\" == \"[\" ]; then\n      continue\n    fi\n\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmeh03786.sh: line 99: syntax error near unexpected token `}''

    /tmp/tmpmeh03786.sh: line 99: `}''

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  if [[ $len -gt 3 ]]; then\n    for (( i=1; i<len;\
    \ i++ )); do\n      if [[ \"$string\" == \"${string:$i:1}\" ]]; then\n       \
    \ echo \"false\"\n        return\n      fi\n    done\n  else\n    echo \"true\"\
    \n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=1\n  local letter\n  local hapsh\n\
    \  hapsh=false\n  while [ \"$count\" -lt \"$length\" ]; do\n    letter=${string:$count:1}\n\
    \    if [ \"$letter\" == \"$letter\" ] || [ \"$letter\" == \"$letter$letter\"\
    \ ] || [ \"$letter\" == \"$letter$letter$letter\" ]; then\n      hapsh=true\n\
    \    fi\n    count=$(( $count + 1 ))\n  done\n  echo \"$hapsh\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=0\n  local letters=()\n  local letter\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=${#string}\n    if [[ $length -gt 3 ]]; then\n        local\
    \ count=0\n        local letters=()\n        for (( i=0; i<$length; i++ )); do\n\
    \            local letter=${string:$i:1}\n            (( count++ ))\n        \
    \    letters+=(\"$letter\")\n        done\n        if (( count % 3 )); then\n\
    \            echo \"false\"\n        else\n            echo \"true\"\n       \
    \ fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=${#string}\n    local count=0\n    local letter\n    local\
    \ count1\n    local count2\n    local count3\n    local count4\n    local count5\n\
    \    local count6\n    local count7\n    local count8\n    local count9\n    local\
    \ count10\n    local count11\n    local count12\n    local count13\n    local\
    \ count14\n    local count15\n    local count16\n    local count17\n    local\
    \ count18\n    local count19\n    local count20\n    local count21\n    local\
    \ count22\n    local count23\n    local count24\n    local count25\n    local\
    \ count26\n    local count27\n    local count28\n    local count29\n    local\
    \ count30\n    local count31\n    local count32\n    local count33\n    local\
    \ count34\n    local count35\n    local count36\n    local count37\n    local\
    \ count38\n    local count39\n    local count40\n    local count41\n    local\
    \ count42\n    local count43\n    local count44\n    local count45\n    local\
    \ count46\n    local count47\n    local count48\n    local count49\n    local\
    \ count50\n    local count51\n    local count52\n    local count53\n    local\
    \ count54\n    local count55\n    local count56\n    local count57\n    local\
    \ count58\n    local count59\n    local count60\n    local count61\n    local\
    \ count62\n    local count63\n    local count64\n    local count65\n    local\
    \ count66\n    local count67\n    local count68\n    local count69\n    local\
    \ count70\n    local count71\n    local count72\n    local count73\n    local\
    \ count74\n    local count75\n    local count76\n    local count77\n    local\
    \ count78\n    local count79\n    local count80\n    local count81\n    local\
    \ count82\n    local count83\n    local count84\n    local count85\n    local\
    \ count86\n    local count87\n    local count88\n    local count89\n    local\
    \ count90\n    local count91\n    local count92\n    local count93\n    local\
    \ count94\n    local count95\n    local count96\n    local count97\n    local\
    \ count98\n\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local len=${#string}\n    local count=0\n    local letters=()\n    local\
    \ i\n    for (( i=0; i<len; i++ )); do\n        letters[$i]=${string:$i:1}\n \
    \       (( count++ ))\n    done\n    local j\n    for (( j=0; j<len; j++ )); do\n\
    \        if [[ ${letters[$j]} != ${letters[$((j+1))]} ]]; then\n            echo\
    \ \"false\"\n            return 1\n        fi\n    done\n    echo \"true\"\n \
    \   return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  if [[ $length -gt 3 ]]; then\n    for (( i=0; i<3;\
    \ i++ )); do\n      local letter=${string:$i:1}\n      local count=0\n      for\
    \ (( j=0; j<length; j++ )); do\n        if [[ \"$letter\" == \"${string:$j:1}\"\
    \ ]]; then\n          (( count++ ))\n        fi\n      done\n      if [[ $count\
    \ -eq 3 ]]; then\n        echo \"true\"\n        return\n      fi\n    done\n\
    \  fi\n  echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local count=0\n  local letter\n  local count2=0\n\
    \  local letter2\n  local count3=0\n  local letter3\n  local count4=0\n  local\
    \ letter4\n  local count5=0\n  local letter5\n  local count6=0\n  local letter6\n\
    \  local count7=0\n  local letter7\n  local count8=0\n  local letter8\n  local\
    \ count9=0\n  local letter9\n  local count10=0\n  local letter10\n  local count11=0\n\
    \  local letter11\n  local count12=0\n  local letter12\n  local count13=0\n  local\
    \ letter13\n  local count14=0\n  local letter14\n  local count15=0\n  local letter15\n\
    \  local count16=0\n  local letter16\n  local count17=0\n  local letter17\n  local\
    \ count18=0\n  local letter18\n  local count19=0\n  local letter19\n  local count20=0\n\
    \  local letter20\n  local count21=0\n  local letter21\n  local count22=0\n  local\
    \ letter22\n  local count23=0\n  local letter23\n  local count24=0\n  local letter24\n\
    \  local count25=0\n  local letter25\n  local count26=0\n  local letter26\n  local\
    \ count27=0\n  local letter27\n  local count28=0\n  local letter28\n  local count29=0\n\
    \  local letter29\n  local count30=0\n  local letter30\n  local count31=0\n  local\
    \ letter31\n  local count32=0\n  local letter32\n  local count33=0\n  local letter33\n\
    \  local count34=0\n  local letter34\n  local count35=0\n  local letter35\n  local\
    \ count36=0\n  local letter36\n  local count37=0\n  local letter37\n  local count38=0\n\
    \  local letter38\n  local count39=0\n  local letter39\n  local count40=0\n  local\
    \ letter40\n  local count41=0\n  local letter41\n  local count42=0\n  local letter42\n\
    \  local count43=0\n  local letter43\n  local count44=0\n  local letter44\n  local\
    \ count45=0\n  local letter45\n  local count46=0\n\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=\"${#string}\"\n  if [ \"${length}\" -lt 3 ]; then\n    echo\
    \ \"false\"\n  else\n    local i\n    for (( i=0; i<${#string}-3; i++ )); do\n\
    \      if [ \"${string:$i:1}\" == \"${string:$i+1:1}\" ] || [ \"${string:$i:1}\"\
    \ == \"${string:$i+2:1}\" ]; then\n        echo \"false\"\n        break\n   \
    \   else\n        echo \"true\"\n      fi\n    done\n  fi\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local len=${#string}\n  local count=0\n  local letter\n  local i\n  for i in\
    \ {1..len}; do\n    letter=${string:$i:1}\n    if [[ $letter != $letter ]]; then\n\
    \      count=$((count+1))\n    fi\n  done\n  if [[ $count -ge 3 ]]; then\n   \
    \ true\n  else\n    false\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8j7hitx_.sh: line 27: string: {1..len}: syntax error: operand expected
    (error token is "{1..len}")

    '
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [ \"${length}\" -lt 3 ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local count=0\n    local\
    \ last=\"${string}\"\n    local last2=\"${string}\"\n    local last3=\"${string}\"\
    \n    local last4=\"${string}\"\n    local last5=\"${string}\"\n    local last6=\"\
    ${string}\"\n    local last7=\"${string}\"\n    local last8=\"${string}\"\n  \
    \  local last9=\"${string}\"\n    local last10=\"${string}\"\n    local last11=\"\
    ${string}\"\n    local last12=\"${string}\"\n    local last13=\"${string}\"\n\
    \    local last14=\"${string}\"\n    local last15=\"${string}\"\n    local last16=\"\
    ${string}\"\n    local last17=\"${string}\"\n    local last18=\"${string}\"\n\
    \    local last19=\"${string}\"\n    local last20=\"${string}\"\n    local last21=\"\
    ${string}\"\n    local last22=\"${string}\"\n    local last23=\"${string}\"\n\
    \    local last24=\"${string}\"\n    local last25=\"${string}\"\n    local last26=\"\
    ${string}\"\n    local last27=\"${string}\"\n    local last28=\"${string}\"\n\
    \    local last29=\"${string}\"\n    local last30=\"${string}\"\n    local last31=\"\
    ${string}\"\n    local last32=\"${string}\"\n    local last33=\"${string}\"\n\
    \    local last34=\"${string}\"\n    local last35=\"${string}\"\n    local last36=\"\
    ${string}\"\n    local last37=\"${string}\"\n    local last38=\"${string}\"\n\
    \    local last39=\"${string}\"\n    local last40=\"${string}\"\n    local last41=\"\
    ${string}\"\n    local last42=\"${string}\"\n    local last43=\"${string}\"\n\
    \    local last44=\"${string}\"\n    local last45=\"${string}\"\n    local last46=\"\
    ${string}\"\n    local last47=\"${string}\"\n    local last48=\"${string}\"\n\
    \    local last49=\"${string}\"\n    local last50=\"${string}\"\n    local last51=\"\
    ${string}\"\n    local last52=\"${string}\"\n    local last53=\"${string}\"\n\
    \    local last54=\"${string}\"\n    local last55=\"${string}\"\n    local last56=\"\
    ${string}\"\n    local last57=\"${string}\"\n    local last58=\"${string}\"\n\
    \    local last59=\"${string}\"\n    local last\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length=${#string}\n  local count=0\n  local char\n  local result\n\
    \n  if [[ $length -gt 3 ]]; then\n    for (( i=0; i<${#string}; i++ )); do\n \
    \     char=${string:$i:1}\n      (( count++ ))\n      if [[ $count -eq 3 ]]; then\n\
    \        if [[ ${!char} != ${!char} ]]; then\n          result=\"false\"\n   \
    \       break\n        fi\n      fi\n    done\n  else\n    result=\"false\"\n\
    \  fi\n\n  echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042441
