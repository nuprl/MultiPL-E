language: sh
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local paren_group\n    local paren_group_str=\"\"\n    local paren_group_level=0\n\
    \    local paren_group_level_str=\"\"\n    local paren_group_str_count=0\n   \
    \ local paren_group_str_count_str=\"\"\n    local paren_group_str_count_level=0\n\
    \    local paren_group_str_count_level_str=\"\"\n    local paren_group_str_count_level_str_count=0\n\
    \    local paren_group_str_count_level_str_count_str=\"\"\n    local paren_group_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_str=\"\"\n\
    \    local paren_group_str_count_level_str_count_level_str_count_level_str=\"\"\
    \n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_level_str_count_str=\"\
    \"\n    local paren_group_str_count_level_str_count_level_str_count_level_str_count_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local max_level_str=\"\"\n    local level=0\n\
    \    local level_index=0\n    local level_str=\"\"\n    local level_str_index=0\n\
    \    local level_str_len=0\n    local level_str_len_index=0\n    local level_str_len_str=\"\
    \"\n    local level_str_len_str_index=0\n    local level_str_len_str_len=0\n \
    \   local level_str_len_str_len_index=0\n    local level_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_index=0\n    local level_str_len_str_len_str_len=0\n\
    \    local level_str_len_str_len_str_len_index=0\n    local level_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_index=0\n    local level_str_len_str_len_str_len_str_len=0\n\
    \    local level_str_len_str_len_str_len_str_len_index=0\n    local level_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_index=0\n    local level_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_index=0\n    local level_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_index=0\n    local\
    \ level_str_len_str_len_str_len_str_len_str_len_str_len=0\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\n  \
    \  local level_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n \
    \   local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_str_count=0\n\
    \  local parens_str_depth=0\n  local parens_str_depth_max=0\n  local parens_str_depth_max_index=0\n\
    \  local parens_str_depth_max_count=0\n  local parens_str_depth_max_count_index=0\n\
    \  local parens_str_depth_max_count_index2=0\n  local parens_str_depth_max_count_index3=0\n\
    \  local parens_str_depth_max_count_index4=0\n  local parens_str_depth_max_count_index5=0\n\
    \  local parens_str_depth_max_count_index6=0\n  local parens_str_depth_max_count_index7=0\n\
    \  local parens_str_depth_max_count_index8=0\n  local parens_str_depth_max_count_index9=0\n\
    \  local parens_str_depth_max_count_index10=0\n  local parens_str_depth_max_count_index11=0\n\
    \  local parens_str_depth_max_count_index12=0\n  local parens_str_depth_max_count_index13=0\n\
    \  local parens_str_depth_max_count_index14=0\n  local parens_str_depth_max_count_index15=0\n\
    \  local parens_str_depth_max_count_index16=0\n  local parens_str_depth_max_count_index17=0\n\
    \  local parens_str_depth_max_count_index18=0\n  local parens_str_depth_max_count_index19=0\n\
    \  local parens_str_depth_max_count_index20=0\n  local parens_str_depth_max_count_index21=0\n\
    \  local parens_str_depth_max_count_index22=0\n  local parens_str_depth_max_count_index23=0\n\
    \  local parens_str_depth_max_count_index24=0\n  local parens_str_depth_max_count_index25=0\n\
    \  local parens_str_depth_max_count_index26=0\n  local parens_str_depth_max_count_index27=0\n\
    \  local parens_str_depth_max_count_index28=0\n  local parens_str_depth_max_count_index29=0\n\
    \  local parens_str_depth_max_count_index30=0\n  local parens_str_depth_max_count_index31=0\n\
    \  local parens_str_depth_max_count_index32=0\n  local parens_str_depth_max_count_index33=0\n\
    \  local parens_str_depth_max_count_index34=0\n  local parens_str_depth_max_count_index35=0\n\
    \  local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_count=0\n    local parens_str_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_str=\"\"\n    local parens_str_depth_max_depth_str_count=0\n\
    \    local parens_str_depth_max_depth_str_depth=0\n    local parens_str_depth_max_depth_str_depth_str=\"\
    \"\n    local parens_str_depth_max_depth_str_depth_str_count=0\n    local parens_str_depth_max_depth_str_depth_str_depth=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str=\"\"\n    local\
    \ parens_str_depth_max_depth_str_depth_str_depth_str_count=0\n    local parens_str_depth_max_depth_str_depth_str_depth_str_depth=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str=\"\"\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local max_level_group=\"\"\n    local max_level_group_string=\"\
    \"\n    local max_level_group_count=0\n    local max_level_group_count=0\n   \
    \ local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_group_count=0\n    local max_level_group_count=0\n    local max_level_group_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count=0\n    local\
    \ max_level_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local level=0\n    local level_index=0\n   \
    \ local paren_group_index=0\n    local paren_group\n    local paren_group_level\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index2\n    local paren_group_level_length_index3\n\
    \    local paren_group_level_length_index4\n    local paren_group_level_length_index5\n\
    \    local paren_group_level_length_index6\n    local paren_group_level_length_index7\n\
    \    local paren_group_level_length_index8\n    local paren_group_level_length_index9\n\
    \    local paren_group_level_length_index10\n    local paren_group_level_length_index11\n\
    \    local paren_group_level_length_index12\n    local paren_group_level_length_index13\n\
    \    local paren_group_level_length_index14\n    local paren_group_level_length_index15\n\
    \    local paren_group_level_length_index16\n    local paren_group_level_length_index17\n\
    \    local paren_group_level_length_index18\n    local paren_group_level_length_index19\n\
    \    local paren_group_level_length_index20\n    local paren_group_level_length_index21\n\
    \    local paren_group_level_length_index22\n    local paren_group_level_length_index23\n\
    \    local paren_group_level_length_index24\n    local paren_group_level_length_index25\n\
    \    local paren_group_level_length_index26\n    local paren_group_level_length_index27\n\
    \    local paren_group_level_length_index28\n    local paren_group_level_length_index29\n\
    \    local paren_group_level_length_index30\n    local paren_group_level_length_index31\n\
    \    local paren_group_level_length_index32\n    local paren_group_level_length_index33\n\
    \    local paren_group_level_length_index34\n    local paren_group_level_length_index35\n\
    \    local paren_group_level_length_index36\n    local paren_group_level_length_index37\n\
    \    local paren_group_level_length_index38\n    local paren_group_level_length_index39\n\
    \    local paren_group_level_length_index40\n    local paren_group_level_length_index41\n\
    \    local paren_group_level_length_index42\n    local paren_group_level_length_index43\n\
    \    local paren_group_level_length_index44\n    local paren_group_level_length_index45\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count2=0\n    local paren_level_str_count3=0\n    local paren_level_str_count4=0\n\
    \    local paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local\
    \ paren_level_str_count7=0\n    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n\
    \    local paren_level_str_count10=0\n    local paren_level_str_count11=0\n  \
    \  local paren_level_str_count12=0\n    local paren_level_str_count13=0\n    local\
    \ paren_level_str_count14=0\n    local paren_level_str_count15=0\n    local paren_level_str_count16=0\n\
    \    local paren_level_str_count17=0\n    local paren_level_str_count18=0\n  \
    \  local paren_level_str_count19=0\n    local paren_level_str_count20=0\n    local\
    \ paren_level_str_count21=0\n    local paren_level_str_count22=0\n    local paren_level_str_count23=0\n\
    \    local paren_level_str_count24=0\n    local paren_level_str_count25=0\n  \
    \  local paren_level_str_count26=0\n    local paren_level_str_count27=0\n    local\
    \ paren_level_str_count28=0\n    local paren_level_str_count29=0\n    local paren_level_str_count30=0\n\
    \    local paren_level_str_count31=0\n    local paren_level_str_count32=0\n  \
    \  local paren_level_str_count33=0\n    local paren_level_str_count34=0\n    local\
    \ paren_level_str_count35=0\n    local paren_level_str_count36=0\n    local paren_level_str_count37=0\n\
    \    local paren_level_str_count38=0\n    local paren_level_str_count39=0\n  \
    \  local paren_level_str_count40=0\n    local paren_level_str_count41=0\n    local\
    \ paren_level_str_count42=0\n    local paren_level_str_count43=0\n    local paren_level_str_count44=0\n\
    \    local paren_level_str_count45=0\n    local paren_level_str_count46=0\n  \
    \  local paren_level_str_count47=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count2=0\n    local paren_level_str_count3=0\n    local paren_level_str_count4=0\n\
    \    local paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local\
    \ paren_level_str_count7=0\n    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n\
    \    local paren_level_str_count10=0\n    local paren_level_str_count11=0\n  \
    \  local paren_level_str_count12=0\n    local paren_level_str_count13=0\n    local\
    \ paren_level_str_count14=0\n    local paren_level_str_count15=0\n    local paren_level_str_count16=0\n\
    \    local paren_level_str_count17=0\n    local paren_level_str_count18=0\n  \
    \  local paren_level_str_count19=0\n    local paren_level_str_count20=0\n    local\
    \ paren_level_str_count21=0\n    local paren_level_str_count22=0\n    local paren_level_str_count23=0\n\
    \    local paren_level_str_count24=0\n    local paren_level_str_count25=0\n  \
    \  local paren_level_str_count26=0\n    local paren_level_str_count27=0\n    local\
    \ paren_level_str_count28=0\n    local paren_level_str_count29=0\n    local paren_level_str_count30=0\n\
    \    local paren_level_str_count31=0\n    local paren_level_str_count32=0\n  \
    \  local paren_level_str_count33=0\n    local paren_level_str_count34=0\n    local\
    \ paren_level_str_count35=0\n    local paren_level_str_count36=0\n    local paren_level_str_count37=0\n\
    \    local paren_level_str_count38=0\n    local paren_level_str_count39=0\n  \
    \  local paren_level_str_count40=0\n    local paren_level_str_count41=0\n    local\
    \ paren_level_str_count42=0\n    local paren_level_str_count43=0\n    local paren_level_str_count44=0\n\
    \    local paren_level_str_count45=0\n    local paren_level_str_count46=0\n  \
    \  local paren_level_str_count47=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_string=\"\"\n    local paren_group_level=0\n\
    \    local paren_group_level_string=\"\"\n    local paren_group_level_max=0\n\
    \    local paren_group_level_max_string=\"\"\n    local paren_group_level_max_level=0\n\
    \    local paren_group_level_max_level_string=\"\"\n    local paren_group_level_max_level_max=0\n\
    \    local paren_group_level_max_level_max_string=\"\"\n    local paren_group_level_max_level_max_level=0\n\
    \    local paren_group_level_max_level_max_level_string=\"\"\n    local paren_group_level_max_level_max_level_max=0\n\
    \    local paren_group_level_max_level_max_level_max_string=\"\"\n    local paren_group_level_max_level_max_level_max_level=0\n\
    \    local paren_group_level_max_level_max_level_max_level_string=\"\"\n    local\
    \ paren_group_level_max_level_max_level_max_level_max=0\n    local paren_group_level_max_level_max_level_max_level_max_string=\"\
    \"\n    local paren_group_level_max_level_max_level_max_level_max_level=0\n  \
    \  local paren_group_level_max_level_max_level_max_level_max_level_string=\"\"\
    \n    local paren_group_level_max_level_max_level_max_level_max_level_max=0\n\
    \    local paren_group_level_max_level_max_level_max_level_max_level_max_string=\"\
    \"\n    local paren_group_level_max_level_max_level_max_level_max_level_max_level=0\n\
    \    local paren_group_level_max_level_max_level_max_level_max_level_max_level_string=\"\
    \"\n    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max=0\n\
    \    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_string=\"\
    \"\n    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_level=0\n\
    \    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_level_string=\"\
    \"\n    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_level_max=0\n\
    \    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_level_max_string=\"\
    \"\n    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level=0\n\
    \    local paren_group_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_string=\"\
    \"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str1=\"\
    \"\n    local paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local\
    \ paren_level_str4=\"\"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\
    \"\n    local paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local\
    \ paren_level_str9=\"\"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\
    \"\n    local paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local\
    \ paren_level_str14=\"\"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\
    \"\n    local paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local\
    \ paren_level_str19=\"\"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\
    \"\n    local paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local\
    \ paren_level_str24=\"\"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\
    \"\n    local paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local\
    \ paren_level_str29=\"\"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\
    \"\n    local paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local\
    \ paren_level_str34=\"\"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\
    \"\n    local paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local\
    \ paren_level_str39=\"\"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\
    \"\n    local paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local\
    \ paren_level_str44=\"\"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\
    \"\n    local paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local\
    \ paren_level_str49=\"\"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\
    \"\n    local paren_level_str\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local paren_level_count=0\n    local paren_levels=()\n\
    \    local paren_levels_str=\"\"\n    local paren_levels_str_count=0\n    local\
    \ paren_levels_str_count2=0\n    local paren_levels_str_count3=0\n    local paren_levels_str_count4=0\n\
    \    local paren_levels_str_count5=0\n    local paren_levels_str_count6=0\n  \
    \  local paren_levels_str_count7=0\n    local paren_levels_str_count8=0\n    local\
    \ paren_levels_str_count9=0\n    local paren_levels_str_count10=0\n    local paren_levels_str_count11=0\n\
    \    local paren_levels_str_count12=0\n    local paren_levels_str_count13=0\n\
    \    local paren_levels_str_count14=0\n    local paren_levels_str_count15=0\n\
    \    local paren_levels_str_count16=0\n    local paren_levels_str_count17=0\n\
    \    local paren_levels_str_count18=0\n    local paren_levels_str_count19=0\n\
    \    local paren_levels_str_count20=0\n    local paren_levels_str_count21=0\n\
    \    local paren_levels_str_count22=0\n    local paren_levels_str_count23=0\n\
    \    local paren_levels_str_count24=0\n    local paren_levels_str_count25=0\n\
    \    local paren_levels_str_count26=0\n    local paren_levels_str_count27=0\n\
    \    local paren_levels_str_count28=0\n    local paren_levels_str_count29=0\n\
    \    local paren_levels_str_count30=0\n    local paren_levels_str_count31=0\n\
    \    local paren_levels_str_count32=0\n    local paren_levels_str_count33=0\n\
    \    local paren_levels_str_count34=0\n    local paren_levels_str_count35=0\n\
    \    local paren_levels_str_count36=0\n    local paren_levels_str_count37=0\n\
    \    local paren_levels_str_count38=0\n    local paren_levels_str_count39=0\n\
    \    local paren_levels_str_count40=0\n    local paren_levels_str_count41=0\n\
    \    local paren_levels_str_count42=0\n    local paren_level\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group\n    local\
    \ paren_group_count=0\n    local paren_group_level=0\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level\n    local paren_group_level_str\n\
    \    local paren_group_level_int\n    local paren_group_level_intstr\n    local\
    \ paren_group_level_intstrstr\n    local paren_group_level_intstrstrstr\n    local\
    \ paren_group_level_intstrstrstrstr\n    local paren_group_level_intstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n \
    \   local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_groups=()\n\
    \    local parens_group=''\n    local parens_group_count=0\n    local parens_group_length=0\n\
    \    local parens_group_length_count=0\n    local parens_group_length_index=0\n\
    \    local parens_group_length_index_count=0\n    local parens_group_length_index_count2=0\n\
    \    local parens_group_length_index_count3=0\n    local parens_group_length_index_count4=0\n\
    \    local parens_group_length_index_count5=0\n    local parens_group_length_index_count6=0\n\
    \    local parens_group_length_index_count7=0\n    local parens_group_length_index_count8=0\n\
    \    local parens_group_length_index_count9=0\n    local parens_group_length_index_count10=0\n\
    \    local parens_group_length_index_count11=0\n    local parens_group_length_index_count12=0\n\
    \    local parens_group_length_index_count13=0\n    local parens_group_length_index_count14=0\n\
    \    local parens_group_length_index_count15=0\n    local parens_group_length_index_count16=0\n\
    \    local parens_group_length_index_count17=0\n    local parens_group_length_index_count18=0\n\
    \    local parens_group_length_index_count19=0\n    local parens_group_length_index_count20=0\n\
    \    local parens_group_length_index_count21=0\n    local parens_group_length_index_count22=0\n\
    \    local parens_group_length_index_count23=0\n    local parens_group_length_index_count24=0\n\
    \    local parens_group_length_index_count25=0\n    local parens_group_length_index_count26=0\n\
    \    local parens_group_length_index_count27=0\n    local parens_group_length_index_count28=0\n\
    \    local parens_group_length_index_count29=0\n    local parens_group_length_index_count30=0\n\
    \    local parens_group_length_index_count31=0\n    local parens_group_length_index_count32=0\n\
    \    local parens_group_length_index_count33=0\n    local parens_group_length_index_count34=0\n\
    \    local parens_group_length_index_count35=0\n    local parens_group_length_index_count36=0\n\
    \    local parens_group_length_index_count37=0\n    local parens_group_length_index_count38=0\n\
    \    local parens_group_length_index_count39=0\n    local parens_group_length_index_count40=0\n\
    \    local parens_group_length_index_count41=0\n    local parens_group_length\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local nested_parens_str=$1\n  local\
    \ max_level=0\n  local max_level_inner=0\n  local max_level_outer=0\n  local level=0\n\
    \  local level_inner=0\n  local level_outer=0\n  local paren_level=0\n  local\
    \ paren_level_inner=0\n  local paren_level_outer=0\n  local paren_level_inner_inner=0\n\
    \  local paren_level_outer_outer=0\n  local paren_level_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_outer_outer_outer_outer=0\n  local paren_level_inner_inner_inner_inner_inner=0\n\
    \  local paren_level_outer_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_levels_string=\"\
    \"\n    local paren_levels_string_index=0\n    local paren_levels_string_index2=0\n\
    \    local paren_levels_string_index3=0\n    local paren_levels_string_index4=0\n\
    \    local paren_levels_string_index5=0\n    local paren_levels_string_index6=0\n\
    \    local paren_levels_string_index7=0\n    local paren_levels_string_index8=0\n\
    \    local paren_levels_string_index9=0\n    local paren_levels_string_index10=0\n\
    \    local paren_levels_string_index11=0\n    local paren_levels_string_index12=0\n\
    \    local paren_levels_string_index13=0\n    local paren_levels_string_index14=0\n\
    \    local paren_levels_string_index15=0\n    local paren_levels_string_index16=0\n\
    \    local paren_levels_string_index17=0\n    local paren_levels_string_index18=0\n\
    \    local paren_levels_string_index19=0\n    local paren_levels_string_index20=0\n\
    \    local paren_levels_string_index21=0\n    local paren_levels_string_index22=0\n\
    \    local paren_levels_string_index23=0\n    local paren_levels_string_index24=0\n\
    \    local paren_levels_string_index25=0\n    local paren_levels_string_index26=0\n\
    \    local paren_levels_string_index27=0\n    local paren_levels_string_index28=0\n\
    \    local paren_levels_string_index29=0\n    local paren_levels_string_index30=0\n\
    \    local paren_levels_string_index31=0\n    local paren_levels_string_index32=0\n\
    \    local paren_levels_string_index33=0\n    local paren_levels_string_index34=0\n\
    \    local paren_levels_string_index35=0\n    local paren_levels_string_index36=0\n\
    \    local paren_levels_string_index37=0\n    local paren_levels_string_index38=0\n\
    \    local paren_levels_string_index39=0\n    local paren_levels_string_index40=0\n\
    \    local paren_levels_string_index41=0\n    local paren_levels_string_index42=0\n\
    \    local paren_levels_string_index43=0\n    local \n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_str=$1\n\
    \    local parens_str_count=0\n    local parens_str_depth=0\n    local parens_str_depth_max=0\n\
    \    local parens_str_depth_max_index=0\n    local parens_str_depth_max_count=0\n\
    \    local parens_str_depth_max_str=\"\"\n    local parens_str_depth_max_str_index=0\n\
    \    local parens_str_depth_max_str_count=0\n    local parens_str_depth_max_str_str=\"\
    \"\n    local parens_str_depth_max_str_str_index=0\n    local parens_str_depth_max_str_str_count=0\n\
    \    local parens_str_depth_max_str_str_str=\"\"\n    local parens_str_depth_max_str_str_str_index=0\n\
    \    local parens_str_depth_max_str_str_str_count=0\n    local parens_str_depth_max_str_str_str_str=\"\
    \"\n    local parens_str_depth_max_str_str_str_str_index=0\n    local parens_str_depth_max_str_str_str_str_count=0\n\
    \    local parens_str_depth_max_str_str_str_str_str=\"\"\n    local parens_str_depth_max_str_str_str_str_str_index=0\n\
    \    local parens_str_depth_max_str_str_str_str_str_count=0\n    local parens_str_depth_max_str_str_str_str_str_str=\"\
    \"\n    local parens_str_depth_max_str_str_str_str_str_str_index=0\n    local\
    \ parens_str_depth_max_str_str_str_str_str_str_count=0\n    local parens_str_depth_max_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_depth_max_str_str_str_str_str_str_str_index=0\n    local\
    \ parens_str_depth_max_str_str_str_str_str_str_str_count=0\n    local parens_str_depth_max_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_depth_max_str_str_str_str_str_str_str_str_index=0\n \
    \   local parens_str_depth_max_str_str_str_str_str_str_str_str_count=0\n    local\
    \ parens_str_depth_max_str_str_str_str_str_str_str_str=\"\"\n    local parens_str_depth_max_str_str_str_str_str_str_str_str_index=0\n\
    \    local parens_str_depth_max_str_str_str_str_str_str_str_str_count=0\n    local\
    \ parens_str_depth_max_str_str_str_str_str_str_str_str_str=\"\"\n    local parens_str_depth_max_str_str_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level\n    local paren_group_level_str\n\
    \    local paren_group_level_int\n    local paren_group_level_intstr\n    local\
    \ paren_group_level_intstr_str\n    local paren_group_level_intstr_int\n    local\
    \ paren_group_level_intstr_intstr\n    local paren_group_level_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr\n    local paren_group_level_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr\n    local paren_group_level_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr\n    local paren_group_level_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr\n    local\
    \ paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_str\n    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_int\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level\n    local paren_group_level_string\n\
    \    local paren_group_string\n    local paren_group_string_count\n    local paren_group_string_count=0\n\
    \    local paren_group_string\n    local paren_group_string_length\n    local\
    \ paren_group_string_length=0\n    local paren_group_string_length_string\n  \
    \  local paren_group_string_length_string_count\n    local paren_group_string_length_string_count=0\n\
    \    local paren_group_string_length_string\n    local paren_group_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string\n    local paren_group_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_count=0\n    local paren_group_string_length_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string_length_string\n    local\
    \ paren_group_string_length_string_length_string_length_string_count\n    local\
    \ paren_group_string_length_string_length_string_length_string_length\n    local\
    \ paren_group_string_length_string_length_string_length_string_length_string\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_count\n\
    \    local paren_group_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n\
    \    local paren_group_string_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str2=\"\
    \"\n    local paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local\
    \ paren_level_str4=\"\"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\
    \"\n    local paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local\
    \ paren_level_str9=\"\"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\
    \"\n    local paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local\
    \ paren_level_str14=\"\"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\
    \"\n    local paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local\
    \ paren_level_str19=\"\"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\
    \"\n    local paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local\
    \ paren_level_str24=\"\"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\
    \"\n    local paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local\
    \ paren_level_str29=\"\"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\
    \"\n    local paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local\
    \ paren_level_str34=\"\"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\
    \"\n    local paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local\
    \ paren_level_str39=\"\"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\
    \"\n    local paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local\
    \ paren_level_str44=\"\"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\
    \"\n    local paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local\
    \ paren_level_str49=\"\"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\
    \"\n    local paren_level_str52\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local level=0\n    local parens_str=\"\"\n    local parens_level=0\n\
    \    local parens_str_count=0\n    local parens_str_count2=0\n    local parens_str_count_temp=0\n\
    \    local parens_str_count_temp2=0\n    local parens_str_count_temp3=0\n    local\
    \ parens_str_count_temp4=0\n    local parens_str_count_temp5=0\n    local parens_str_count_temp6=0\n\
    \    local parens_str_count_temp7=0\n    local parens_str_count_temp8=0\n    local\
    \ parens_str_count_temp9=0\n    local parens_str_count_temp10=0\n    local parens_str_count_temp11=0\n\
    \    local parens_str_count_temp12=0\n    local parens_str_count_temp13=0\n  \
    \  local parens_str_count_temp14=0\n    local parens_str_count_temp15=0\n    local\
    \ parens_str_count_temp16=0\n    local parens_str_count_temp17=0\n    local parens_str_count_temp18=0\n\
    \    local parens_str_count_temp19=0\n    local parens_str_count_temp20=0\n  \
    \  local parens_str_count_temp21=0\n    local parens_str_count_temp22=0\n    local\
    \ parens_str_count_temp23=0\n    local parens_str_count_temp24=0\n    local parens_str_count_temp25=0\n\
    \    local parens_str_count_temp26=0\n    local parens_str_count_temp27=0\n  \
    \  local parens_str_count_temp28=0\n    local parens_str_count_temp29=0\n    local\
    \ parens_str_count_temp30=0\n    local parens_str_count_temp31=0\n    local parens_str_count_temp32=0\n\
    \    local parens_str_count_temp33=0\n    local parens_str_count_temp34=0\n  \
    \  local parens_str_count_temp35=0\n    local parens_str_count_temp36=0\n    local\
    \ parens_str_count_temp37=0\n    local parens_str_count_temp38=0\n    local parens_str_count_temp39=0\n\
    \    local parens_str_count_temp40=0\n    local parens_str_count_temp41=0\n  \
    \  local parens_str_count_temp42=0\n    local parens_str_count_temp43=0\n    local\
    \ parens_str_count_temp44=0\n    local parens_str_count_temp45=0\n    local parens_str_count_temp46=0\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_string\n    local paren_group_level\n\
    \    local paren_group_level_string\n    local paren_group_level_num\n    local\
    \ paren_group_level_num_string\n    local paren_group_level_num_string2\n    local\
    \ paren_group_level_num_string3\n    local paren_group_level_num_string4\n   \
    \ local paren_group_level_num_string5\n    local paren_group_level_num_string6\n\
    \    local paren_group_level_num_string7\n    local paren_group_level_num_string8\n\
    \    local paren_group_level_num_string9\n    local paren_group_level_num_string10\n\
    \    local paren_group_level_num_string11\n    local paren_group_level_num_string12\n\
    \    local paren_group_level_num_string13\n    local paren_group_level_num_string14\n\
    \    local paren_group_level_num_string15\n    local paren_group_level_num_string16\n\
    \    local paren_group_level_num_string17\n    local paren_group_level_num_string18\n\
    \    local paren_group_level_num_string19\n    local paren_group_level_num_string20\n\
    \    local paren_group_level_num_string21\n    local paren_group_level_num_string22\n\
    \    local paren_group_level_num_string23\n    local paren_group_level_num_string24\n\
    \    local paren_group_level_num_string25\n    local paren_group_level_num_string26\n\
    \    local paren_group_level_num_string27\n    local paren_group_level_num_string28\n\
    \    local paren_group_level_num_string29\n    local paren_group_level_num_string30\n\
    \    local paren_group_level_num_string31\n    local paren_group_level_num_string32\n\
    \    local paren_group_level_num_string33\n    local paren_group_level_num_string34\n\
    \    local paren_group_level_num_string35\n    local paren_group_level_num_string36\n\
    \    local paren_group_level_num_string37\n    local paren_group_level_num_string38\n\
    \    local paren_group_level_num_string39\n    local paren_group_level_num_string40\n\
    \    local paren_group_level_num_string41\n    local paren_group_level_num_string42\n\
    \    local paren_group_level_num_string43\n    local paren_group_level_num_string44\n\
    \    local paren_group_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group\n    local\
    \ paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_count=0\n    local parens_str_depth_max_count2=0\n\
    \    local parens_str_depth_max_count3=0\n    local parens_str_depth_max_count4=0\n\
    \    local parens_str_depth_max_count5=0\n    local parens_str_depth_max_count6=0\n\
    \    local parens_str_depth_max_count7=0\n    local parens_str_depth_max_count8=0\n\
    \    local parens_str_depth_max_count9=0\n    local parens_str_depth_max_count10=0\n\
    \    local parens_str_depth_max_count11=0\n    local parens_str_depth_max_count12=0\n\
    \    local parens_str_depth_max_count13=0\n    local parens_str_depth_max_count14=0\n\
    \    local parens_str_depth_max_count15=0\n    local parens_str_depth_max_count16=0\n\
    \    local parens_str_depth_max_count17=0\n    local parens_str_depth_max_count18=0\n\
    \    local parens_str_depth_max_count19=0\n    local parens_str_depth_max_count20=0\n\
    \    local parens_str_depth_max_count21=0\n    local parens_str_depth_max_count22=0\n\
    \    local parens_str_depth_max_count23=0\n    local parens_str_depth_max_count24=0\n\
    \    local parens_str_depth_max_count25=0\n    local parens_str_depth_max_count26=0\n\
    \    local parens_str_depth_max_count27=0\n    local parens_str_depth_max_count28=0\n\
    \    local parens_str_depth_max_count29=0\n    local parens_str_depth_max_count30=0\n\
    \    local parens_str_depth_max_count31=0\n    local parens_str_depth_max_count32=0\n\
    \    local parens_str_depth_max_count33=0\n    local parens_str_depth_max_count34=0\n\
    \    local parens_str_depth_max_count35=0\n    local parens_str_depth_max_count36=0\n\
    \    local parens_str_depth_max_count37=0\n    local parens_str_depth_max_count38=0\n\
    \    local parens_str_depth_max_count39=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local max_level_str_count=0\n\
    \    local max_level_str_len=0\n    local max_level_str_len_count=0\n    local\
    \ max_level_str_len_str=\"\"\n    local max_level_str_len_str_count=0\n    local\
    \ max_level_str_len_str_len=0\n    local max_level_str_len_str_len_count=0\n \
    \   local max_level_str_len_str_len_str=\"\"\n    local max_level_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len=0\n    local max_level_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str=\"\"\n    local max_level_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len=0\n    local max_level_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str=\"\"\n    local max_level_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len=0\n    local max_level_str_len_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str=\"\"\n    local\
    \ max_level_str_len_str_len_str_len_str_len_str_len_str_count=0\n    local max_level_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len=\"\
    \"\n    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len=\"\
    \"\n    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group\n    local\
    \ paren_group_level\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_counts_index\n    local paren_group_counts_indexs\n   \
    \ local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_values\n  \
    \  local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_values\n  \
    \  local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_values\n  \
    \  local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_values\n  \
    \  local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_values\n  \
    \  local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_values\n  \
    \  local paren_group_counts_values\n    local paren_group_counts_values\n    local\
    \ paren_group_counts_values\n    local paren_group_counts_values\n    local paren_group_counts_values\n\
    \    local paren_group_counts_values\n    local paren_group_counts_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_levels=$(echo $1 | sed\
    \ 's/\\([^()]*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnhmro855.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmpnhmro855.sh: line 25: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_levels_index=0\n\
    \    local paren_levels_string=\"\"\n    local paren_levels_string_index=0\n \
    \   local paren_levels_string_index2=0\n    local paren_levels_string_index3=0\n\
    \    local paren_levels_string_index4=0\n    local paren_levels_string_index5=0\n\
    \    local paren_levels_string_index6=0\n    local paren_levels_string_index7=0\n\
    \    local paren_levels_string_index8=0\n    local paren_levels_string_index9=0\n\
    \    local paren_levels_string_index10=0\n    local paren_levels_string_index11=0\n\
    \    local paren_levels_string_index12=0\n    local paren_levels_string_index13=0\n\
    \    local paren_levels_string_index14=0\n    local paren_levels_string_index15=0\n\
    \    local paren_levels_string_index16=0\n    local paren_levels_string_index17=0\n\
    \    local paren_levels_string_index18=0\n    local paren_levels_string_index19=0\n\
    \    local paren_levels_string_index20=0\n    local paren_levels_string_index21=0\n\
    \    local paren_levels_string_index22=0\n    local paren_levels_string_index23=0\n\
    \    local paren_levels_string_index24=0\n    local paren_levels_string_index25=0\n\
    \    local paren_levels_string_index26=0\n    local paren_levels_string_index27=0\n\
    \    local paren_levels_string_index28=0\n    local paren_levels_string_index29=0\n\
    \    local paren_levels_string_index30=0\n    local paren_levels_string_index31=0\n\
    \    local paren_levels_string_index32=0\n    local paren_levels_string_index33=0\n\
    \    local paren_levels_string_index34=0\n    local paren_levels_string_index35=0\n\
    \    local paren_levels_string_index36=0\n    local paren_levels_string_index37=0\n\
    \    local paren_levels_string_index38=0\n    local paren_levels_string_index39=0\n\
    \    local paren_levels_string_index40=0\n    local paren_levels_string_index41=0\n\
    \    local paren_levels_string_index42=0\n    local paren_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level=0\n    local paren_group_level_string=\"\
    \"\n    local paren_group_string=\"\"\n    local paren_group_level_char\n    local\
    \ paren_group_level_char_length\n    local paren_group_level_char_length_string\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_group_level_char_length_string_index\n    local paren_group_level_char_length_string_index\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_group=0\n\
    \    local parens_group_count=0\n    local parens_group_length=0\n    local parens_group_string=\"\
    \"\n    local parens_group_string_count=0\n    local parens_group_string_length=0\n\
    \    local parens_group_string_value=\"\"\n    local parens_group_string_value_count=0\n\
    \    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n    local parens_group_string_value_count=0\n    local parens_group_string_value=\"\
    \"\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level_str=\"\"\n    local level_num=0\n\
    \    local level_num_str=\"\"\n    local level_num_str2=\"\"\n    local level_num_str2num=0\n\
    \    local level_num_str2num_str=\"\"\n    local level_num_str2num_str2=\"\"\n\
    \    local level_num_str2num_str2num=0\n    local level_num_str2num_str2num_str=\"\
    \"\n    local level_num_str2num_str2num_str2=\"\"\n    local level_num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str=\"\"\n    local level_num_str2num_str2num_str2num_str2=\"\
    \"\n    local level_num_str2num_str2num_str2num_str2num=0\n    local level_num_str2num_str2num_str2num_str2num_str=\"\
    \"\n    local level_num_str2num_str2num_str2num_str2num_str2=\"\"\n    local level_num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str=\"\"\n    local\
    \ level_num_str2num_str2num_str2num_str2num_str2num_str2=\"\"\n    local level_num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str=\"\"\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2=\"\"\
    \n    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str=\"\
    \"\n    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num_str2num=0\n\
    \    local level_num_str2num_str2\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_index=0\n\
    \    local parens_str_depth_max_index2=0\n    local parens_str_depth_max_index3=0\n\
    \    local parens_str_depth_max_index4=0\n    local parens_str_depth_max_index5=0\n\
    \    local parens_str_depth_max_index6=0\n    local parens_str_depth_max_index7=0\n\
    \    local parens_str_depth_max_index8=0\n    local parens_str_depth_max_index9=0\n\
    \    local parens_str_depth_max_index10=0\n    local parens_str_depth_max_index11=0\n\
    \    local parens_str_depth_max_index12=0\n    local parens_str_depth_max_index13=0\n\
    \    local parens_str_depth_max_index14=0\n    local parens_str_depth_max_index15=0\n\
    \    local parens_str_depth_max_index16=0\n    local parens_str_depth_max_index17=0\n\
    \    local parens_str_depth_max_index18=0\n    local parens_str_depth_max_index19=0\n\
    \    local parens_str_depth_max_index20=0\n    local parens_str_depth_max_index21=0\n\
    \    local parens_str_depth_max_index22=0\n    local parens_str_depth_max_index23=0\n\
    \    local parens_str_depth_max_index24=0\n    local parens_str_depth_max_index25=0\n\
    \    local parens_str_depth_max_index26=0\n    local parens_str_depth_max_index27=0\n\
    \    local parens_str_depth_max_index28=0\n    local parens_str_depth_max_index29=0\n\
    \    local parens_str_depth_max_index30=0\n    local parens_str_depth_max_index31=0\n\
    \    local parens_str_depth_max_index32=0\n    local parens_str_depth_max_index33=0\n\
    \    local parens_str_depth_max_index34=0\n    local parens_str_depth_max_index35=0\n\
    \    local parens_str_depth_max_index36=0\n    local parens_str_depth_max_index37=0\n\
    \    local parens_str_depth_max_index38=0\n    local parens_str_depth_max_index39=0\n\
    \    local parens_str_depth_max_index40=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level_string=\"\"\n    local level=0\n\
    \    local level_str=\"\"\n    local level_str_len=0\n    local level_str_len2=0\n\
    \    local level_str_len3=0\n    local level_str_len4=0\n    local level_str_len5=0\n\
    \    local level_str_len6=0\n    local level_str_len7=0\n    local level_str_len8=0\n\
    \    local level_str_len9=0\n    local level_str_len10=0\n    local level_str_len11=0\n\
    \    local level_str_len12=0\n    local level_str_len13=0\n    local level_str_len14=0\n\
    \    local level_str_len15=0\n    local level_str_len16=0\n    local level_str_len17=0\n\
    \    local level_str_len18=0\n    local level_str_len19=0\n    local level_str_len20=0\n\
    \    local level_str_len21=0\n    local level_str_len22=0\n    local level_str_len23=0\n\
    \    local level_str_len24=0\n    local level_str_len25=0\n    local level_str_len26=0\n\
    \    local level_str_len27=0\n    local level_str_len28=0\n    local level_str_len29=0\n\
    \    local level_str_len30=0\n    local level_str_len31=0\n    local level_str_len32=0\n\
    \    local level_str_len33=0\n    local level_str_len34=0\n    local level_str_len35=0\n\
    \    local level_str_len36=0\n    local level_str_len37=0\n    local level_str_len38=0\n\
    \    local level_str_len39=0\n    local level_str_len40=0\n    local level_str_len41=0\n\
    \    local level_str_len42=0\n    local level_str_len43=0\n    local level_str_len44=0\n\
    \    local level_str_len45=0\n    local level_str_len46=0\n    local level_str_len47=0\n\
    \    local level_str_len48=0\n    local level_str_len49=0\n    local level_str_len50=0\n\
    \    local level_str_len51=0\n    local level_str_len52=0\n    local level_str_len53=0\n\
    \    local level_str_len54=0\n    local level_str_len55=0\n    local level_str_len56=0\n\
    \    local level_str_len57=0\n    local level_str_len58=0\n    local level_str_len59=0\n\
    \    local level_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_level_str\n    local paren_group_level_int\n    local paren_group_level_intstr\n\
    \    local paren_group_level_intstr_str\n    local paren_group_level_intstr_int\n\
    \    local paren_group_level_intstr_intstr\n    local paren_group_level_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr\n    local paren_group_level_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr\n    local paren_group_level_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr\n    local paren_group_level_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr\n    local\
    \ paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_str\n    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_str\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr\n\
    \    local paren_group_level_intstr_intstr_intstr_intstr_intstr_intstr_intstr_intstr_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_group=\"\"\n    local max_level_group_len=0\n    local max_level_group_len_count=0\n\
    \    local max_level_group_count=0\n    local max_level_group_count_count=0\n\
    \    local max_level_group_count_count_count=0\n    local max_level_group_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count=0\n    local max_level_group_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count=0\n    local\
    \ max_level_group_count_count_count_count_count_count_count_count=0\n    local\
    \ max_level_group_count_count_count_count_count_count_count_count_count=0\n  \
    \  local max_level_group_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_str_count=0\n\
    \  local parens_str_depth=0\n  local parens_str_depth_max=0\n  local parens_str_depth_max_str=\"\
    \"\n  local parens_str_depth_max_count=0\n  local parens_str_depth_max_depth=0\n\
    \  local parens_str_depth_max_depth_str=\"\"\n  local parens_str_depth_max_depth_str_count=0\n\
    \  local parens_str_depth_max_depth_str_depth=0\n  local parens_str_depth_max_depth_str_depth_str=\"\
    \"\n  local parens_str_depth_max_depth_str_depth_str_count=0\n  local parens_str_depth_max_depth_str_depth_str_depth=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str=\"\"\n  local parens_str_depth_max_depth_str_depth_str_depth_str_count=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth=0\n  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \  local parens_str_depth_max_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count_string=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_group=\"\
    \"\n    local paren_group_string=\"\"\n    local paren_group_level=0\n    local\
    \ paren_group_level_string=\"\"\n    local paren_group_count=0\n    local paren_group_count_string=\"\
    \"\n    local paren_group_count_level=0\n    local paren_group_count_level_string=\"\
    \"\n    local paren_group_count_string2=\"\"\n    local paren_group_count_level2=0\n\
    \    local paren_group_count_level_string2=\"\"\n    local paren_group_count_string3=\"\
    \"\n    local paren_group_count_level3=0\n    local paren_group_count_level_string3=\"\
    \"\n    local paren_group_count_string4=\"\"\n    local paren_group_count_level4=0\n\
    \    local paren_group_count_level_string4=\"\"\n    local paren_group_count_string5=\"\
    \"\n    local paren_group_count_level5=0\n    local paren_group_count_level_string5=\"\
    \"\n    local paren_group_count_string6=\"\"\n    local paren_group_count_level6=0\n\
    \    local paren_group_count_level_string6=\"\"\n    local paren_group_count_string7=\"\
    \"\n    local paren_group_count_level7=0\n    local paren_group_count_level_string7=\"\
    \"\n    local paren_group_count_string8=\"\"\n    local paren_group_count_level8=0\n\
    \    local paren_group_count_level_string8=\"\"\n    local paren_group_count_string9=\"\
    \"\n    local paren_group_count_level9=0\n    local paren_group_count_level_string9=\"\
    \"\n    local paren_group_count_string10=\"\"\n    local paren_group_count_level10=0\n\
    \    local paren_group_count_level_string10=\"\"\n    local paren_group_count_string11=\"\
    \"\n    local paren_group_count_level11=0\n    local paren_group_count_level_string11=\"\
    \"\n    local paren_group_count_string12=\"\"\n    local paren_group_count_level12=0\n\
    \    local paren_group_count_level_string12=\"\"\n    local paren_group_count_string13=\"\
    \"\n    local paren_group_count_level13=0\n    local paren_group_count_level_string13=\"\
    \"\n    local paren_group_count_string14=\"\"\n    local paren_group_count_level14=0\n\
    \    local paren_group_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_level=0\n    local parens_str_level_max=0\n    local parens_str_level_max_index=0\n\
    \    local parens_str_level_max_count=0\n    local parens_str_level_max_count_index=0\n\
    \    local parens_str_level_max_count_index2=0\n    local parens_str_level_max_count_index3=0\n\
    \    local parens_str_level_max_count_index4=0\n    local parens_str_level_max_count_index5=0\n\
    \    local parens_str_level_max_count_index6=0\n    local parens_str_level_max_count_index7=0\n\
    \    local parens_str_level_max_count_index8=0\n    local parens_str_level_max_count_index9=0\n\
    \    local parens_str_level_max_count_index10=0\n    local parens_str_level_max_count_index11=0\n\
    \    local parens_str_level_max_count_index12=0\n    local parens_str_level_max_count_index13=0\n\
    \    local parens_str_level_max_count_index14=0\n    local parens_str_level_max_count_index15=0\n\
    \    local parens_str_level_max_count_index16=0\n    local parens_str_level_max_count_index17=0\n\
    \    local parens_str_level_max_count_index18=0\n    local parens_str_level_max_count_index19=0\n\
    \    local parens_str_level_max_count_index20=0\n    local parens_str_level_max_count_index21=0\n\
    \    local parens_str_level_max_count_index22=0\n    local parens_str_level_max_count_index23=0\n\
    \    local parens_str_level_max_count_index24=0\n    local parens_str_level_max_count_index25=0\n\
    \    local parens_str_level_max_count_index26=0\n    local parens_str_level_max_count_index27=0\n\
    \    local parens_str_level_max_count_index28=0\n    local parens_str_level_max_count_index29=0\n\
    \    local parens_str_level_max_count_index30=0\n    local parens_str_level_max_count_index31=0\n\
    \    local parens_str_level_max_count_index32=0\n    local parens_str_level_max_count_index33=0\n\
    \    local parens_str_level_max_count_index34=0\n    local parens_str_level_max_count_index35=0\n\
    \    local parens_str_level_max_count_index36=0\n    local parens_str_level_max_count_index37=0\n\
    \    local parens_str_level_max_count_index38=0\n    local parens_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local level_str=\"\
    \"\n    local level_str_count=0\n    local level_str_str=\"\"\n    local level_str_str_count=0\n\
    \    local level_str_str_str=\"\"\n    local level_str_str_str_count=0\n    local\
    \ level_str_str_str_str=\"\"\n    local level_str_str_str_str_count=0\n    local\
    \ level_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group=''\n    local\
    \ paren_group_level=0\n    local paren_group_level_count=0\n    local paren_group_level_max_count=0\n\
    \    local paren_group_level_max_count2=0\n    local paren_group_level_max_count3=0\n\
    \    local paren_group_level_max_count4=0\n    local paren_group_level_max_count5=0\n\
    \    local paren_group_level_max_count6=0\n    local paren_group_level_max_count7=0\n\
    \    local paren_group_level_max_count8=0\n    local paren_group_level_max_count9=0\n\
    \    local paren_group_level_max_count10=0\n    local paren_group_level_max_count11=0\n\
    \    local paren_group_level_max_count12=0\n    local paren_group_level_max_count13=0\n\
    \    local paren_group_level_max_count14=0\n    local paren_group_level_max_count15=0\n\
    \    local paren_group_level_max_count16=0\n    local paren_group_level_max_count17=0\n\
    \    local paren_group_level_max_count18=0\n    local paren_group_level_max_count19=0\n\
    \    local paren_group_level_max_count20=0\n    local paren_group_level_max_count21=0\n\
    \    local paren_group_level_max_count22=0\n    local paren_group_level_max_count23=0\n\
    \    local paren_group_level_max_count24=0\n    local paren_group_level_max_count25=0\n\
    \    local paren_group_level_max_count26=0\n    local paren_group_level_max_count27=0\n\
    \    local paren_group_level_max_count28=0\n    local paren_group_level_max_count29=0\n\
    \    local paren_group_level_max_count30=0\n    local paren_group_level_max_count31=0\n\
    \    local paren_group_level_max_count32=0\n    local paren_group_level_max_count33=0\n\
    \    local paren_group_level_max_count34=0\n    local paren_group_level_max_count35=0\n\
    \    local paren_group_level_max_count36=0\n    local paren_group_level_max_count37=0\n\
    \    local paren_group_level_max_count38=0\n    local paren_group_level_max_count39=0\n\
    \    local paren_group_level_max_count40=0\n    local paren_group_level_max_count41=0\n\
    \    local paren_group_level_max_count42=0\n    \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_string=\"\"\n  local paren_level=0\n  local paren_level_string=\"\
    \"\n  local paren_level_char=\"\"\n  local paren_level_char_count=0\n  local paren_level_chars=\"\
    \"\n  local paren_level_char_counts=\"\"\n  local paren_level_char_counts_string=\"\
    \"\n  local paren_level_char_counts_strings=\"\"\n  local paren_level_char_counts_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings=\"\"\n  local paren_level_char_counts_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings=\"\"\n  local paren_level_char_counts_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings=\"\"\n  local\
    \ paren_level_char_counts_strings_strings_strings_strings_string=\"\"\n  local\
    \ paren_level_char_counts_strings_strings_strings_strings_strings=\"\"\n  local\
    \ paren_level_char_counts_strings_strings_strings_strings_strings_string=\"\"\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_strings=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group_string=\"\"\n    local paren_group_level=0\n    local\
    \ paren_group_level_string=\"\"\n    local paren_group_level_max=0\n    local\
    \ paren_group_level_max_string=\"\"\n    local paren_group_level_max_string2=\"\
    \"\n    local paren_group_level_max_string3=\"\"\n    local paren_group_level_max_string4=\"\
    \"\n    local paren_group_level_max_string5=\"\"\n    local paren_group_level_max_string6=\"\
    \"\n    local paren_group_level_max_string7=\"\"\n    local paren_group_level_max_string8=\"\
    \"\n    local paren_group_level_max_string9=\"\"\n    local paren_group_level_max_string10=\"\
    \"\n    local paren_group_level_max_string11=\"\"\n    local paren_group_level_max_string12=\"\
    \"\n    local paren_group_level_max_string13=\"\"\n    local paren_group_level_max_string14=\"\
    \"\n    local paren_group_level_max_string15=\"\"\n    local paren_group_level_max_string16=\"\
    \"\n    local paren_group_level_max_string17=\"\"\n    local paren_group_level_max_string18=\"\
    \"\n    local paren_group_level_max_string19=\"\"\n    local paren_group_level_max_string20=\"\
    \"\n    local paren_group_level_max_string21=\"\"\n    local paren_group_level_max_string22=\"\
    \"\n    local paren_group_level_max_string23=\"\"\n    local paren_group_level_max_string24=\"\
    \"\n    local paren_group_level_max_string25=\"\"\n    local paren_group_level_max_string26=\"\
    \"\n    local paren_group_level_max_string27=\"\"\n    local paren_group_level_max_string28=\"\
    \"\n    local paren_group_level_max_string29=\"\"\n    local paren_group_level_max_string30=\"\
    \"\n    local paren_group_level_max_string31=\"\"\n    local paren_group_level_max_string32=\"\
    \"\n    local paren_group_level_max_string33=\"\"\n    local paren_group_level_max_string34=\"\
    \"\n    local paren_group_level_max_string35=\"\"\n    local paren_group_level_max_string36=\"\
    \"\n    local paren_group_level_max_string37=\"\"\n    local paren_group_level_max_string38=\"\
    \"\n    local paren_group_level_max_string39=\"\"\n    local paren_group_level_max_string40=\"\
    \"\n    local paren_group_level_max_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=0\n\
    \    local paren_groups_output=\"\"\n    local paren_groups_level=0\n    local\
    \ paren_groups_max_level=0\n    local paren_groups_max_level_str=\"\"\n    local\
    \ paren_groups_max_level_num=0\n    local paren_groups_max_level_num_str=\"\"\n\
    \    local paren_groups_max_level_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_str_reverse=\"\
    \"\n    local paren_groups_max_level_num_num_str_reverse=\"\"\n    local paren_groups_max_level_num_num_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_count=0\n    local parens_str_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_str=\"\"\n    local parens_str_depth_max_depth_count=0\n\
    \    local parens_str_depth_max_depth_max=0\n    local parens_str_depth_max_depth_max_str=\"\
    \"\n    local parens_str_depth_max_depth_max_count=0\n    local parens_str_depth_max_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_max_depth_str=\"\"\n    local parens_str_depth_max_depth_max_depth_max=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_str=\"\"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_depth=0\n    local parens_str_depth_max_depth_max_depth_max_str=\"\
    \"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n    local parens_str_depth_max_depth_max_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_str=\"\"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_depth=0\n    local parens_str_depth_max_depth_max_depth_max_str=\"\
    \"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n    local parens_str_depth_max_depth_max_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_str=\"\"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_depth=0\n    local parens_str_depth_max_depth_max_depth_max_str=\"\
    \"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n    local parens_str_depth_max_depth_max_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_str=\"\"\n    local parens_str_depth_max_depth_max_depth_max_count=0\n\
    \    local parens_str_depth_max_depth_max_depth_max_depth=0\n    local parens_str_depth_max_depth_max_depth_max_str=\"\
    \"\n    local parens_str_depth_max_depth_max_depth_max_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_level=0\n\
    \  local level=0\n  local parens=\"\"\n  local i\n  local j\n  local parens_level\n\
    \  local parens_str\n  local parens_str_count\n  local parens_str_count_max\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_str_count_max_index\n  local parens_str_count_max_index\n  local\
    \ parens_str_count_max_index\n  local parens_str_count_max_index\n  local parens_str_count_max_index\n\
    \  local parens_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ nested_parens_str_count=0\n    local nested_parens_str_depth=0\n    local nested_parens_str_depth_max=0\n\
    \    local nested_parens_str_depth_max_str=\"\"\n    local nested_parens_str_depth_max_count=0\n\
    \    local nested_parens_str_depth_max_str_count=0\n    local nested_parens_str_depth_max_str_depth=0\n\
    \    local nested_parens_str_depth_max_str_depth_str=\"\"\n    local nested_parens_str_depth_max_str_depth_str_count=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_count=0\n    local nested_parens_str_depth_max_str_depth_str_depth=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str=\"\"\n    local\
    \ nested_parens_str_depth_max_str_depth_str_depth_str_count=0\n    local nested_parens_str_depth_max_str_depth_str_depth_str_count=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str_depth=0\n    local\
    \ nested_parens_str_depth_max_str_depth_str_depth_str_depth_str=\"\"\n    local\
    \ nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_count=0\n    local\
    \ nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_count=0\n    local\
    \ nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth=0\n    local\
    \ nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str=\"\"\
    \n    local nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n    local nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str_count=0\n\
    \    local nested_parens_str_depth_max_str_depth_str_depth_str_depth\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_i=0\n    local\
    \ parens_arr_max=0\n    local parens_arr_max_index=0\n    local parens_arr_max_len=0\n\
    \    local parens_arr_max_str=\"\"\n    local parens_arr_max_str_len=0\n    local\
    \ parens_arr_max_str_i=0\n    local parens_arr_max_str_j=0\n    local parens_arr_max_str_k=0\n\
    \    local parens_arr_max_str_l=0\n    local parens_arr_max_str_m=0\n    local\
    \ parens_arr_max_str_n=0\n    local parens_arr_max_str_p=0\n    local parens_arr_max_str_q=0\n\
    \    local parens_arr_max_str_r=0\n    local parens_arr_max_str_s=0\n    local\
    \ parens_arr_max_str_t=0\n    local parens_arr_max_str_u=0\n    local parens_arr_max_str_v=0\n\
    \    local parens_arr_max_str_w=0\n    local parens_arr_max_str_x=0\n    local\
    \ parens_arr_max_str_y=0\n    local parens_arr_max_str_z=0\n    local parens_arr_max_str_a=0\n\
    \    local parens_arr_max_str_b=0\n    local parens_arr_max_str_c=0\n    local\
    \ parens_arr_max_str_d=0\n    local parens_arr_max_str_e=0\n    local parens_arr_max_str_f=0\n\
    \    local parens_arr_max_str_g=0\n    local parens_arr_max_str_h=0\n    local\
    \ parens_arr_max_str_i=0\n    local parens_arr_max_str_j=0\n    local parens_arr_max_str_k=0\n\
    \    local parens_arr_max_str_l=0\n    local parens_arr_max_str_m=0\n    local\
    \ parens_arr_max_str_n=0\n    local parens_arr_max_str_p=0\n    local parens_arr_max_str_q=0\n\
    \    local parens_arr_max_str_r=0\n    local parens_arr_max_str_s=0\n    local\
    \ parens_arr_max_str_t=0\n    local parens_arr_max_str_u=0\n    local parens_arr_max_str_v=0\n\
    \    local parens_arr_max_str_w=0\n    local parens_arr_max_str_x=0\n    local\
    \ parens_arr_max_str_y=0\n    local parens_arr_max_str_z=0\n    local parens_arr_max_str_a=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_str_count=0\n    local level_str_count_str=\"\"\n    local level_str_count_str_count=0\n\
    \    local level_str_count_str_count_str=\"\"\n    local level_str_count_str_count_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str=\"\"\n    local level_str_count_str_count_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str=\"\"\n    local level_str_count_str_count_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str=\"\"\n   \
    \ local level_str_count_str_count_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\"\n   \
    \ local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\"\
    \n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_count_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=\"$1\"\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group=\"\"\n    local\
    \ paren_group_level=0\n    local paren_group_count=0\n    local paren_group_content=\"\
    \"\n    local paren_group_content_level=0\n    local paren_group_content_count=0\n\
    \    local paren_group_content_count2=0\n    local paren_group_content_count3=0\n\
    \    local paren_group_content_count4=0\n    local paren_group_content_count5=0\n\
    \    local paren_group_content_count6=0\n    local paren_group_content_count7=0\n\
    \    local paren_group_content_count8=0\n    local paren_group_content_count9=0\n\
    \    local paren_group_content_count10=0\n    local paren_group_content_count11=0\n\
    \    local paren_group_content_count12=0\n    local paren_group_content_count13=0\n\
    \    local paren_group_content_count14=0\n    local paren_group_content_count15=0\n\
    \    local paren_group_content_count16=0\n    local paren_group_content_count17=0\n\
    \    local paren_group_content_count18=0\n    local paren_group_content_count19=0\n\
    \    local paren_group_content_count20=0\n    local paren_group_content_count21=0\n\
    \    local paren_group_content_count22=0\n    local paren_group_content_count23=0\n\
    \    local paren_group_content_count24=0\n    local paren_group_content_count25=0\n\
    \    local paren_group_content_count26=0\n    local paren_group_content_count27=0\n\
    \    local paren_group_content_count28=0\n    local paren_group_content_count29=0\n\
    \    local paren_group_content_count30=0\n    local paren_group_content_count31=0\n\
    \    local paren_group_content_count32=0\n    local paren_group_content_count33=0\n\
    \    local paren_group_content_count34=0\n    local paren_group_content_count35=0\n\
    \    local paren_group_content_count36=0\n    local paren_group_content_count37=0\n\
    \    local paren_group_content_count38=0\n    local paren_group_content_count39=0\n\
    \    local paren_group_content_count40=0\n    local paren_group_content_count41=0\n\
    \    local paren_group_content_count42=0\n    local paren_group_content_count43=0\n\
    \    local paren_group_content_count44=0\n    local paren_group_content_count45\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_str=$1\n\
    \    local parens_str_count=0\n    local parens_str_depth=0\n    local parens_str_last=\"\
    \"\n    local parens_str_last_depth=0\n    local parens_str_last_count=0\n   \
    \ local parens_str_last_last=\"\"\n    local parens_str_last_last_depth=0\n  \
    \  local parens_str_last_last_count=0\n    local parens_str_last_last_last=\"\"\
    \n    local parens_str_last_last_last_depth=0\n    local parens_str_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_depth=0\n\
    \    local parens_str_last_last_last_last_count=0\n    local parens_str_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_depth=0\n    local parens_str_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_last_last_depth=0\n\
    \    local parens_str_last_last_last_last_last_last_count=0\n    local parens_str_last_last_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_last_depth=0\n    local parens_str_last_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_last_last_depth=0\n\
    \    local parens_str_last_last_last_last_last_last_count=0\n    local parens_str_last_last_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_last_depth=0\n    local parens_str_last_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_last_last_depth=0\n\
    \    local parens_str_last_last_last_last_last_last_count=0\n    local parens_str_last_last_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_last_depth=0\n    local parens_str_last_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_last_last_depth=0\n\
    \    local parens_str_last_last_last_last_last_last_count=0\n    local parens_str_last_last_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_last_depth=0\n\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_level=0\n  local parens_string=$1\n\
    \  local parens_string2=\"\"\n  local parens_string3=\"\"\n  local parens_string4=\"\
    \"\n  local parens_string5=\"\"\n  local parens_string6=\"\"\n  local parens_string7=\"\
    \"\n  local parens_string8=\"\"\n  local parens_string9=\"\"\n  local parens_string10=\"\
    \"\n  local parens_string11=\"\"\n  local parens_string12=\"\"\n  local parens_string13=\"\
    \"\n  local parens_string14=\"\"\n  local parens_string15=\"\"\n  local parens_string16=\"\
    \"\n  local parens_string17=\"\"\n  local parens_string18=\"\"\n  local parens_string19=\"\
    \"\n  local parens_string20=\"\"\n  local parens_string21=\"\"\n  local parens_string22=\"\
    \"\n  local parens_string23=\"\"\n  local parens_string24=\"\"\n  local parens_string25=\"\
    \"\n  local parens_string26=\"\"\n  local parens_string27=\"\"\n  local parens_string28=\"\
    \"\n  local parens_string29=\"\"\n  local parens_string30=\"\"\n  local parens_string31=\"\
    \"\n  local parens_string32=\"\"\n  local parens_string33=\"\"\n  local parens_string34=\"\
    \"\n  local parens_string35=\"\"\n  local parens_string36=\"\"\n  local parens_string37=\"\
    \"\n  local parens_string38=\"\"\n  local parens_string39=\"\"\n  local parens_string40=\"\
    \"\n  local parens_string41=\"\"\n  local parens_string42=\"\"\n  local parens_string43=\"\
    \"\n  local parens_string44=\"\"\n  local parens_string45=\"\"\n  local parens_string46=\"\
    \"\n  local parens_string47=\"\"\n  local parens_string48=\"\"\n  local parens_string49=\"\
    \"\n  local parens_string50=\"\"\n  local parens_string51=\"\"\n  local parens_string52=\"\
    \"\n  local parens_string53=\"\"\n  local parens_string54=\"\"\n  local parens_string55=\"\
    \"\n  local parens_string56=\"\"\n  local parens_string57=\"\"\n  local parens_string58=\"\
    \"\n  local parens_string59=\"\"\n  local parens_string60=\"\"\n  local parens_string61=\"\
    \"\n  local parens_string62=\"\"\n  local parens_string63=\"\"\n  \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ nested_parens_str_count=0\n    local nested_parens_str_level=0\n    local nested_parens_str_level_max=0\n\
    \    local nested_parens_str_level_max_index=0\n    local nested_parens_str_level_max_count=0\n\
    \    local nested_parens_str_level_max_count_index=0\n    local nested_parens_str_level_max_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count=0\n    local nested_parens_str_level_max_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index=0\n    local nested_parens_str_level_max_count_index_count_index_count=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local nested_parens_str_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count2=0\n    local paren_level_str_count3=0\n    local paren_level_str_count4=0\n\
    \    local paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local\
    \ paren_level_str_count7=0\n    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n\
    \    local paren_level_str_count10=0\n    local paren_level_str_count11=0\n  \
    \  local paren_level_str_count12=0\n    local paren_level_str_count13=0\n    local\
    \ paren_level_str_count14=0\n    local paren_level_str_count15=0\n    local paren_level_str_count16=0\n\
    \    local paren_level_str_count17=0\n    local paren_level_str_count18=0\n  \
    \  local paren_level_str_count19=0\n    local paren_level_str_count20=0\n    local\
    \ paren_level_str_count21=0\n    local paren_level_str_count22=0\n    local paren_level_str_count23=0\n\
    \    local paren_level_str_count24=0\n    local paren_level_str_count25=0\n  \
    \  local paren_level_str_count26=0\n    local paren_level_str_count27=0\n    local\
    \ paren_level_str_count28=0\n    local paren_level_str_count29=0\n    local paren_level_str_count30=0\n\
    \    local paren_level_str_count31=0\n    local paren_level_str_count32=0\n  \
    \  local paren_level_str_count33=0\n    local paren_level_str_count34=0\n    local\
    \ paren_level_str_count35=0\n    local paren_level_str_count36=0\n    local paren_level_str_count37=0\n\
    \    local paren_level_str_count38=0\n    local paren_level_str_count39=0\n  \
    \  local paren_level_str_count40=0\n    local paren_level_str_count41=0\n    local\
    \ paren_level_str_count42=0\n    local paren_level_str_count43=0\n    local paren_level_str_count44=0\n\
    \    local paren_level_str_count45=0\n    local paren_level_str_count46=0\n  \
    \  local paren_level_str_count47=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=\"$1\"\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_string_count=0\n    local level_of_nesting=0\n    local level_of_nesting_string=\"\
    \"\n    local level_of_nesting_string_count=0\n    local level_of_nesting_string_count2=0\n\
    \    local level_of_nesting_string_count3=0\n    local level_of_nesting_string_count4=0\n\
    \    local level_of_nesting_string_count5=0\n    local level_of_nesting_string_count6=0\n\
    \    local level_of_nesting_string_count7=0\n    local level_of_nesting_string_count8=0\n\
    \    local level_of_nesting_string_count9=0\n    local level_of_nesting_string_count10=0\n\
    \    local level_of_nesting_string_count11=0\n    local level_of_nesting_string_count12=0\n\
    \    local level_of_nesting_string_count13=0\n    local level_of_nesting_string_count14=0\n\
    \    local level_of_nesting_string_count15=0\n    local level_of_nesting_string_count16=0\n\
    \    local level_of_nesting_string_count17=0\n    local level_of_nesting_string_count18=0\n\
    \    local level_of_nesting_string_count19=0\n    local level_of_nesting_string_count20=0\n\
    \    local level_of_nesting_string_count21=0\n    local level_of_nesting_string_count22=0\n\
    \    local level_of_nesting_string_count23=0\n    local level_of_nesting_string_count24=0\n\
    \    local level_of_nesting_string_count25=0\n    local level_of_nesting_string_count26=0\n\
    \    local level_of_nesting_string_count27=0\n    local level_of_nesting_string_count28=0\n\
    \    local level_of_nesting_string_count29=0\n    local level_of_nesting_string_count30=0\n\
    \    local level_of_nesting_string_count31=0\n    local level_of_nesting_string_count32=0\n\
    \    local level_of_nesting_string_count33=0\n    local level_of_nesting_string_count34=0\n\
    \    local level_of_nesting_string_count35=0\n    local level_of_nesting_string_count36=0\n\
    \    local level_of_nesting_string_count37=0\n    local level_of_nesting_string_count38=0\n\
    \    local level_of_nesting_string_count39=0\n    local level_of_nesting_string_count40=0\n\
    \    local level_of_nesting_string_count41=0\n    local level_of_nesting_string\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_levels=$(echo \"$1\"\
    \ | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\\
    (.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' |\
    \ sed 's/\\(.*\\)//g' | sed \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5gzc23xq.sh: line 10: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5gzc23xq.sh: line 25: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count_string=\"\
    \"\n    local paren_level_str_count_string2=\"\"\n    local paren_level_str_count_string3=\"\
    \"\n    local paren_level_str_count_string4=\"\"\n    local paren_level_str_count_string5=\"\
    \"\n    local paren_level_str_count_string6=\"\"\n    local paren_level_str_count_string7=\"\
    \"\n    local paren_level_str_count_string8=\"\"\n    local paren_level_str_count_string9=\"\
    \"\n    local paren_level_str_count_string10=\"\"\n    local paren_level_str_count_string11=\"\
    \"\n    local paren_level_str_count_string12=\"\"\n    local paren_level_str_count_string13=\"\
    \"\n    local paren_level_str_count_string14=\"\"\n    local paren_level_str_count_string15=\"\
    \"\n    local paren_level_str_count_string16=\"\"\n    local paren_level_str_count_string17=\"\
    \"\n    local paren_level_str_count_string18=\"\"\n    local paren_level_str_count_string19=\"\
    \"\n    local paren_level_str_count_string20=\"\"\n    local paren_level_str_count_string21=\"\
    \"\n    local paren_level_str_count_string22=\"\"\n    local paren_level_str_count_string23=\"\
    \"\n    local paren_level_str_count_string24=\"\"\n    local paren_level_str_count_string25=\"\
    \"\n    local paren_level_str_count_string26=\"\"\n    local paren_level_str_count_string27=\"\
    \"\n    local paren_level_str_count_string28=\"\"\n    local paren_level_str_count_string29=\"\
    \"\n    local paren_level_str_count_string30=\"\"\n    local paren_level_str_count_string31=\"\
    \"\n    local paren_level_str_count_string32=\"\"\n    local paren_level_str_count_string33=\"\
    \"\n    local paren_level_str_count_string34=\"\"\n    local paren_level_str_count_string35=\"\
    \"\n    local paren_level_str_count_string36=\"\"\n    local paren_level_str_count_string37=\"\
    \"\n    local paren_level_str_count_string38=\"\"\n    local paren_level_str_count_string39=\"\
    \"\n    local paren_level_str_count_string40=\"\"\n    local paren_level_str_count_string41\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local depth=0\n  local\
    \ parens=0\n  local parens_str=\"\"\n  local parens_depth=0\n  local parens_str_depth=0\n\
    \  local depths=()\n  local depths_str=()\n  local depths_str_depth=()\n  local\
    \ depths_str_depth_max=-1\n  local depths_str_depth_max_str=\"\"\n  local depths_str_depth_max_str_depth=0\n\
    \  local depths_str_depth_max_str_depth_str=\"\"\n  local depths_str_depth_max_str_depth_str_depth=0\n\
    \  local depths_str_depth_max_str_depth_str_depth_str=\"\"\n  local depths_str_depth_max_str_depth_str_depth_str_depth=0\n\
    \  local depths_str_depth_max_str_depth_str_depth_str_depth_str=\"\"\n  local\
    \ depths_str_depth_max_str_depth_str_depth_str_depth_str_depth=0\n  local depths_str_depth_max_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local depths_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth=0\n\
    \  local depths_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local depths_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local depths_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str=\"\
    \"\n  local depths_str_depth_max_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth_str_depth\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_levels_index=0\n\
    \    local paren_levels_string=\"\"\n    local paren_levels_string_index=0\n \
    \   local paren_levels_string_index2=0\n    local paren_levels_string_index3=0\n\
    \    local paren_levels_string_index4=0\n    local paren_levels_string_index5=0\n\
    \    local paren_levels_string_index6=0\n    local paren_levels_string_index7=0\n\
    \    local paren_levels_string_index8=0\n    local paren_levels_string_index9=0\n\
    \    local paren_levels_string_index10=0\n    local paren_levels_string_index11=0\n\
    \    local paren_levels_string_index12=0\n    local paren_levels_string_index13=0\n\
    \    local paren_levels_string_index14=0\n    local paren_levels_string_index15=0\n\
    \    local paren_levels_string_index16=0\n    local paren_levels_string_index17=0\n\
    \    local paren_levels_string_index18=0\n    local paren_levels_string_index19=0\n\
    \    local paren_levels_string_index20=0\n    local paren_levels_string_index21=0\n\
    \    local paren_levels_string_index22=0\n    local paren_levels_string_index23=0\n\
    \    local paren_levels_string_index24=0\n    local paren_levels_string_index25=0\n\
    \    local paren_levels_string_index26=0\n    local paren_levels_string_index27=0\n\
    \    local paren_levels_string_index28=0\n    local paren_levels_string_index29=0\n\
    \    local paren_levels_string_index30=0\n    local paren_levels_string_index31=0\n\
    \    local paren_levels_string_index32=0\n    local paren_levels_string_index33=0\n\
    \    local paren_levels_string_index34=0\n    local paren_levels_string_index35=0\n\
    \    local paren_levels_string_index36=0\n    local paren_levels_string_index37=0\n\
    \    local paren_levels_string_index38=0\n    local paren_levels_string_index39=0\n\
    \    local paren_levels_string_index40=0\n    local paren_levels_string_index41=0\n\
    \    local paren_levels_string_index42=0\n    local paren_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local level_count=0\n\
    \    local level_str=\"\"\n    local level_str_count=0\n    local level_str_str=\"\
    \"\n    local level_str_str_count=0\n    local level_str_str_str=\"\"\n    local\
    \ level_str_str_str_count=0\n    local level_str_str_str_str=\"\"\n    local level_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ nested_parens_str_count=0\n    local nested_parens_str_depth=0\n    local nested_parens_str_depth_max=0\n\
    \    local nested_parens_str_depth_max_str=\"\"\n    local nested_parens_str_depth_max_count=0\n\
    \    local nested_parens_str_depth_max_count2=0\n    local nested_parens_str_depth_max_count3=0\n\
    \    local nested_parens_str_depth_max_count4=0\n    local nested_parens_str_depth_max_count5=0\n\
    \    local nested_parens_str_depth_max_count6=0\n    local nested_parens_str_depth_max_count7=0\n\
    \    local nested_parens_str_depth_max_count8=0\n    local nested_parens_str_depth_max_count9=0\n\
    \    local nested_parens_str_depth_max_count10=0\n    local nested_parens_str_depth_max_count11=0\n\
    \    local nested_parens_str_depth_max_count12=0\n    local nested_parens_str_depth_max_count13=0\n\
    \    local nested_parens_str_depth_max_count14=0\n    local nested_parens_str_depth_max_count15=0\n\
    \    local nested_parens_str_depth_max_count16=0\n    local nested_parens_str_depth_max_count17=0\n\
    \    local nested_parens_str_depth_max_count18=0\n    local nested_parens_str_depth_max_count19=0\n\
    \    local nested_parens_str_depth_max_count20=0\n    local nested_parens_str_depth_max_count21=0\n\
    \    local nested_parens_str_depth_max_count22=0\n    local nested_parens_str_depth_max_count23=0\n\
    \    local nested_parens_str_depth_max_count24=0\n    local nested_parens_str_depth_max_count25=0\n\
    \    local nested_parens_str_depth_max_count26=0\n    local nested_parens_str_depth_max_count27=0\n\
    \    local nested_parens_str_depth_max_count28=0\n    local nested_parens_str_depth_max_count29=0\n\
    \    local nested_parens_str_depth_max_count30=0\n    local nested_parens_str_depth_max_count31=0\n\
    \    local nested_parens_str_depth_max_count32=0\n    local nested_parens_str_depth_max_count33=0\n\
    \    local nested_parens_str_depth_max_count34=0\n    local nested_parens_str_depth_max_count35=0\n\
    \    local nested_parens_str_depth_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_levels=$(echo $1 | sed\
    \ 's/\\([^)]*\\)\\(/\\1\\n/g' | sed 's/\\(.*\\)\\(/\\1\\n/g' | sed 's/\\(.*\\\
    )\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\\
    )\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\\
    (.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)/\\\
    1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\\
    n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\\
    )/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\\
    (.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\\
    )\\(.*\\)\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\\
    (.*\\)\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\\
    )\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\)\\(.*\\)\\\
    (.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\n/g' | sed 's/\\(.*\\\
    )\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)/\\1\\n/g' |\
    \ sed 's/\\(.*\\)\\(.*\\)\\(.*\\)\\(.*\\)\\(\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp22bc5s3u.sh: line 10: unexpected EOF while looking for matching
    `''''

    /tmp/tmp22bc5s3u.sh: line 25: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_string=$1\n\
    \    local parens_string2=\"\"\n    local parens_string3=\"\"\n    local parens_string4=\"\
    \"\n    local parens_string5=\"\"\n    local parens_string6=\"\"\n    local parens_string7=\"\
    \"\n    local parens_string8=\"\"\n    local parens_string9=\"\"\n    local parens_string10=\"\
    \"\n    local parens_string11=\"\"\n    local parens_string12=\"\"\n    local\
    \ parens_string13=\"\"\n    local parens_string14=\"\"\n    local parens_string15=\"\
    \"\n    local parens_string16=\"\"\n    local parens_string17=\"\"\n    local\
    \ parens_string18=\"\"\n    local parens_string19=\"\"\n    local parens_string20=\"\
    \"\n    local parens_string21=\"\"\n    local parens_string22=\"\"\n    local\
    \ parens_string23=\"\"\n    local parens_string24=\"\"\n    local parens_string25=\"\
    \"\n    local parens_string26=\"\"\n    local parens_string27=\"\"\n    local\
    \ parens_string28=\"\"\n    local parens_string29=\"\"\n    local parens_string30=\"\
    \"\n    local parens_string31=\"\"\n    local parens_string32=\"\"\n    local\
    \ parens_string33=\"\"\n    local parens_string34=\"\"\n    local parens_string35=\"\
    \"\n    local parens_string36=\"\"\n    local parens_string37=\"\"\n    local\
    \ parens_string38=\"\"\n    local parens_string39=\"\"\n    local parens_string40=\"\
    \"\n    local parens_string41=\"\"\n    local parens_string42=\"\"\n    local\
    \ parens_string43=\"\"\n    local parens_string44=\"\"\n    local parens_string45=\"\
    \"\n    local parens_string46=\"\"\n    local parens_string47=\"\"\n    local\
    \ parens_string48=\"\"\n    local parens_string49=\"\"\n    local parens_string50=\"\
    \"\n    local parens_string51=\"\"\n    local parens_string52=\"\"\n    local\
    \ parens_string53=\"\"\n    local parens_string54=\"\"\n    local parens_string55=\"\
    \"\n    local parens_string56=\"\"\n    local parens_string57=\"\"\n    local\
    \ parens_string58=\"\"\n    local parens_string59=\"\"\n    local parens_string60=\"\
    \"\n    local parens_string61=\"\"\n    local parens_string62=\"\"\n    local\
    \ parens_string63=\"\"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local max_level_str=\"\"\n    local level=0\n\
    \    local level_index=0\n    local level_str=\"\"\n    local level_str_index=0\n\
    \    local level_str_len=0\n    local level_str_len_index=0\n    local level_str_len_str=\"\
    \"\n    local level_str_len_str_index=0\n    local level_str_len_str_len=0\n \
    \   local level_str_len_str_len_index=0\n    local level_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_index=0\n    local level_str_len_str_len_str_len=0\n\
    \    local level_str_len_str_len_str_len_index=0\n    local level_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_index=0\n    local level_str_len_str_len_str_len_str_len=0\n\
    \    local level_str_len_str_len_str_len_str_len_index=0\n    local level_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_index=0\n    local level_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_index=0\n    local level_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_index=0\n    local\
    \ level_str_len_str_len_str_len_str_len_str_len_str_len=0\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\n  \
    \  local level_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n \
    \   local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_index=0\n\
    \    local level_str_len_str_len_str_len_str_len_str_len_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_index=0\n  local level=0\n  local level_index=0\n  local paren_group_index=0\n\
    \  local paren_group\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_level_length\n  local paren_group_level_length_index\n  local\
    \ paren_group_level_length_value\n  local paren_group_level_length_value_length\n\
    \  local paren_group_level_length_value_length_index\n  local paren_group_level_length_value_length_value\n\
    \  local paren_group_level_length_value_length_value_index\n  local paren_group_level_length_value_length_value_value\n\
    \  local paren_group_level_length_value_length_value_value_index\n  local paren_group_level_length_value_length_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value\n  local paren_group_level_length_value_length_value_value_value_index\n\
    \  local paren_group_level_length_value_length_value_value_value_value\n  local\
    \ paren_group_level_length_value_length_value_value_value_value\n  local paren_group_level_length_value_length_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_index\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_index\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_index\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value_index\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value_value_index\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value_value_value\n\
    \  local paren_group_level_length_value_length_value_value_value_value_value_value_value_value_value_index\n\
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_string=$1\n\
    \    local parens_string2=\"\"\n    local parens_string3=\"\"\n    local parens_string4=\"\
    \"\n    local parens_string5=\"\"\n    local parens_string6=\"\"\n    local parens_string7=\"\
    \"\n    local parens_string8=\"\"\n    local parens_string9=\"\"\n    local parens_string10=\"\
    \"\n    local parens_string11=\"\"\n    local parens_string12=\"\"\n    local\
    \ parens_string13=\"\"\n    local parens_string14=\"\"\n    local parens_string15=\"\
    \"\n    local parens_string16=\"\"\n    local parens_string17=\"\"\n    local\
    \ parens_string18=\"\"\n    local parens_string19=\"\"\n    local parens_string20=\"\
    \"\n    local parens_string21=\"\"\n    local parens_string22=\"\"\n    local\
    \ parens_string23=\"\"\n    local parens_string24=\"\"\n    local parens_string25=\"\
    \"\n    local parens_string26=\"\"\n    local parens_string27=\"\"\n    local\
    \ parens_string28=\"\"\n    local parens_string29=\"\"\n    local parens_string30=\"\
    \"\n    local parens_string31=\"\"\n    local parens_string32=\"\"\n    local\
    \ parens_string33=\"\"\n    local parens_string34=\"\"\n    local parens_string35=\"\
    \"\n    local parens_string36=\"\"\n    local parens_string37=\"\"\n    local\
    \ parens_string38=\"\"\n    local parens_string39=\"\"\n    local parens_string40=\"\
    \"\n    local parens_string41=\"\"\n    local parens_string42=\"\"\n    local\
    \ parens_string43=\"\"\n    local parens_string44=\"\"\n    local parens_string45=\"\
    \"\n    local parens_string46=\"\"\n    local parens_string47=\"\"\n    local\
    \ parens_string48=\"\"\n    local parens_string49=\"\"\n    local parens_string50=\"\
    \"\n    local parens_string51=\"\"\n    local parens_string52=\"\"\n    local\
    \ parens_string53=\"\"\n    local parens_string54=\"\"\n    local parens_string55=\"\
    \"\n    local parens_string56=\"\"\n    local parens_string57=\"\"\n    local\
    \ parens_string58=\"\"\n    local parens_string59=\"\"\n    local parens_string60=\"\
    \"\n    local parens_string61=\"\"\n    local parens_string62=\"\"\n    local\
    \ parens_string63=\"\"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_chars=\"\"\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char=\"\"\n    local level_char_index2=0\n    local level_char2=\"\
    \"\n    local level_char_index3=0\n    local level_char3=\"\"\n    local level_char_index4=0\n\
    \    local level_char4=\"\"\n    local level_char_index5=0\n    local level_char5=\"\
    \"\n    local level_char_index6=0\n    local level_char6=\"\"\n    local level_char_index7=0\n\
    \    local level_char7=\"\"\n    local level_char_index8=0\n    local level_char8=\"\
    \"\n    local level_char_index9=0\n    local level_char9=\"\"\n    local level_char_index10=0\n\
    \    local level_char10=\"\"\n    local level_char_index11=0\n    local level_char11=\"\
    \"\n    local level_char_index12=0\n    local level_char12=\"\"\n    local level_char_index13=0\n\
    \    local level_char13=\"\"\n    local level_char_index14=0\n    local level_char14=\"\
    \"\n    local level_char_index15=0\n    local level_char15=\"\"\n    local level_char_index16=0\n\
    \    local level_char16=\"\"\n    local level_char_index17=0\n    local level_char17=\"\
    \"\n    local level_char_index18=0\n    local level_char18=\"\"\n    local level_char_index19=0\n\
    \    local level_char19=\"\"\n    local level_char_index20=0\n    local level_char20=\"\
    \"\n    local level_char_index21=0\n    local level_char21=\"\"\n    local level_char_index22=0\n\
    \    local level_char22=\"\"\n    local level_char_index23=0\n    local level_char23=\"\
    \"\n    local level_char_index24=0\n    local level_char24=\"\"\n    local level_char_index25=0\n\
    \    local level_char25=\"\"\n    local level_char_index26=0\n    local level_char26=\"\
    \"\n    local level_char_index27=0\n    local level_char27=\"\"\n    local level_char_index28=0\n\
    \    local level_char28=\"\"\n    local level_char_index29=0\n    local level_char29=\"\
    \"\n    local level_char_index30=0\n    local level_char30=\"\"\n    local level_char_index31=0\n\
    \    local level_char31=\"\"\n    local level_char_index\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_string_count=0\n    local paren_group\n    local paren_group_string\n\
    \    local paren_group_count=0\n    local paren_group_string_count=0\n    local\
    \ paren_group_level\n    local paren_group_level_string\n    local paren_group_level_count=0\n\
    \    local paren_group_level_string_count=0\n    local paren_group_level_level\n\
    \    local paren_group_level_level_string\n    local paren_group_level_level_count=0\n\
    \    local paren_group_level_level_string_count=0\n    local paren_group_level_level_level_string\n\
    \    local paren_group_level_level_level_count=0\n    local paren_group_level_level_level_string_count=0\n\
    \    local paren_group_level_level_level_level_string\n    local paren_group_level_level_level_level_count=0\n\
    \    local paren_group_level_level_level_level_string_count=0\n    local paren_group_level_level_level_level_level_string\n\
    \    local paren_group_level_level_level_level_level_count=0\n    local paren_group_level_level_level_level_level_string_count=0\n\
    \    local paren_group_level_level_level_level_level_level_string\n    local paren_group_level_level_level_level_level_level_count=0\n\
    \    local paren_group_level_level_level_level_level_level_string_count=0\n  \
    \  local paren_group_level_level_level_level_level_level_level_string\n    local\
    \ paren_group_level_level_level_level_level_level_level_count=0\n    local paren_group_level_level_level_level_level_level_level_level_string_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_string\n\
    \    local paren_group_level_level_level_level_level_level_level_level_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_string_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_string\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_string_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_level_level_string\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_level_level_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_level_level_string_count=0\n\
    \    local paren_group_level_level_level_level_level_level_level_level_level_level_level_level_string\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_count=0\n    local level_count_str=\"\"\n    local level_count_str2=\"\
    \"\n    local level_count_str2=\"\"\n    local level_count_str3=\"\"\n    local\
    \ level_count_str4=\"\"\n    local level_count_str5=\"\"\n    local level_count_str6=\"\
    \"\n    local level_count_str7=\"\"\n    local level_count_str8=\"\"\n    local\
    \ level_count_str9=\"\"\n    local level_count_str10=\"\"\n    local level_count_str11=\"\
    \"\n    local level_count_str12=\"\"\n    local level_count_str13=\"\"\n    local\
    \ level_count_str14=\"\"\n    local level_count_str15=\"\"\n    local level_count_str16=\"\
    \"\n    local level_count_str17=\"\"\n    local level_count_str18=\"\"\n    local\
    \ level_count_str19=\"\"\n    local level_count_str20=\"\"\n    local level_count_str21=\"\
    \"\n    local level_count_str22=\"\"\n    local level_count_str23=\"\"\n    local\
    \ level_count_str24=\"\"\n    local level_count_str25=\"\"\n    local level_count_str26=\"\
    \"\n    local level_count_str27=\"\"\n    local level_count_str28=\"\"\n    local\
    \ level_count_str29=\"\"\n    local level_count_str30=\"\"\n    local level_count_str31=\"\
    \"\n    local level_count_str32=\"\"\n    local level_count_str33=\"\"\n    local\
    \ level_count_str34=\"\"\n    local level_count_str35=\"\"\n    local level_count_str36=\"\
    \"\n    local level_count_str37=\"\"\n    local level_count_str38=\"\"\n    local\
    \ level_count_str39=\"\"\n    local level_count_str40=\"\"\n    local level_count_str41=\"\
    \"\n    local level_count_str42=\"\"\n    local level_count_str43=\"\"\n    local\
    \ level_count_str44=\"\"\n    local level_count_str45=\"\"\n    local level_count_str46=\"\
    \"\n    local level_count_str47=\"\"\n    local level_count_str48=\"\"\n    local\
    \ level_count_str49=\"\"\n    local level_count_str50=\"\"\n    local level_count_str51=\"\
    \"\n    local level_count_str52=\"\"\n    local level_count_str53=\"\"\n    local\
    \ level_count_str54=\"\"\n    local level_count_str55=\"\"\n    local level_count_str56=\"\
    \"\n    local level_count_str57=\"\"\n    local level_count_str58=\"\"\n    local\
    \ level_count_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level=0\n    local paren_group_level_string=\"\
    \"\n    local paren_group_string=\"\"\n    local paren_group_string=\"\"\n   \
    \ local paren_group_level_num\n    local paren_group_level_num_string\n    local\
    \ paren_group_level_num_string2\n    local paren_group_level_num_string3\n   \
    \ local paren_group_level_num_string4\n    local paren_group_level_num_string5\n\
    \    local paren_group_level_num_string6\n    local paren_group_level_num_string7\n\
    \    local paren_group_level_num_string8\n    local paren_group_level_num_string9\n\
    \    local paren_group_level_num_string10\n    local paren_group_level_num_string11\n\
    \    local paren_group_level_num_string12\n    local paren_group_level_num_string13\n\
    \    local paren_group_level_num_string14\n    local paren_group_level_num_string15\n\
    \    local paren_group_level_num_string16\n    local paren_group_level_num_string17\n\
    \    local paren_group_level_num_string18\n    local paren_group_level_num_string19\n\
    \    local paren_group_level_num_string20\n    local paren_group_level_num_string21\n\
    \    local paren_group_level_num_string22\n    local paren_group_level_num_string23\n\
    \    local paren_group_level_num_string24\n    local paren_group_level_num_string25\n\
    \    local paren_group_level_num_string26\n    local paren_group_level_num_string27\n\
    \    local paren_group_level_num_string28\n    local paren_group_level_num_string29\n\
    \    local paren_group_level_num_string30\n    local paren_group_level_num_string31\n\
    \    local paren_group_level_num_string32\n    local paren_group_level_num_string33\n\
    \    local paren_group_level_num_string34\n    local paren_group_level_num_string35\n\
    \    local paren_group_level_num_string36\n    local paren_group_level_num_string37\n\
    \    local paren_group_level_num_string38\n    local paren_group_level_num_string39\n\
    \    local paren_group_level_num_string40\n    local paren_group_level_num_string41\n\
    \    local paren_group_level_num_string42\n    local paren_group_level_num_string43\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_group_string=\"\
    \"\n    local paren_group_level=0\n    local paren_group_level_string=\"\"\n \
    \   local paren_group_level_max=0\n    local paren_group_level_max_string=\"\"\
    \n    local paren_group_level_max_string2=\"\"\n    local paren_group_level_max_string3=\"\
    \"\n    local paren_group_level_max_string4=\"\"\n    local paren_group_level_max_string5=\"\
    \"\n    local paren_group_level_max_string6=\"\"\n    local paren_group_level_max_string7=\"\
    \"\n    local paren_group_level_max_string8=\"\"\n    local paren_group_level_max_string9=\"\
    \"\n    local paren_group_level_max_string10=\"\"\n    local paren_group_level_max_string11=\"\
    \"\n    local paren_group_level_max_string12=\"\"\n    local paren_group_level_max_string13=\"\
    \"\n    local paren_group_level_max_string14=\"\"\n    local paren_group_level_max_string15=\"\
    \"\n    local paren_group_level_max_string16=\"\"\n    local paren_group_level_max_string17=\"\
    \"\n    local paren_group_level_max_string18=\"\"\n    local paren_group_level_max_string19=\"\
    \"\n    local paren_group_level_max_string20=\"\"\n    local paren_group_level_max_string21=\"\
    \"\n    local paren_group_level_max_string22=\"\"\n    local paren_group_level_max_string23=\"\
    \"\n    local paren_group_level_max_string24=\"\"\n    local paren_group_level_max_string25=\"\
    \"\n    local paren_group_level_max_string26=\"\"\n    local paren_group_level_max_string27=\"\
    \"\n    local paren_group_level_max_string28=\"\"\n    local paren_group_level_max_string29=\"\
    \"\n    local paren_group_level_max_string30=\"\"\n    local paren_group_level_max_string31=\"\
    \"\n    local paren_group_level_max_string32=\"\"\n    local paren_group_level_max_string33=\"\
    \"\n    local paren_group_level_max_string34=\"\"\n    local paren_group_level_max_string35=\"\
    \"\n    local paren_group_level_max_string36=\"\"\n    local paren_group_level_max_string37=\"\
    \"\n    local paren_group_level_max_string38=\"\"\n    local paren_group_level_max_string39=\"\
    \"\n    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local paren_group_index=0\n    local paren_group=\"\"\n    local paren_group_str=\"\
    \"\n    local paren_group_count=0\n    local paren_group_count_str=\"\"\n    local\
    \ paren_group_count_index=0\n    local paren_group_counts=()\n    local paren_group_counts_str=\"\
    \"\n    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local paren_group_counts_index=0\n\
    \    local paren_group_counts_index=0\n    local \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_index=0\n  local max_level_str=\"\"\n  local paren_level=0\n\
    \  local paren_level_index=0\n  local paren_level_str=\"\"\n  local paren_level_str_index=0\n\
    \  local paren_level_str_index2=0\n  local paren_level_str_index3=0\n  local paren_level_str_index4=0\n\
    \  local paren_level_str_index5=0\n  local paren_level_str_index6=0\n  local paren_level_str_index7=0\n\
    \  local paren_level_str_index8=0\n  local paren_level_str_index9=0\n  local paren_level_str_index10=0\n\
    \  local paren_level_str_index11=0\n  local paren_level_str_index12=0\n  local\
    \ paren_level_str_index13=0\n  local paren_level_str_index14=0\n  local paren_level_str_index15=0\n\
    \  local paren_level_str_index16=0\n  local paren_level_str_index17=0\n  local\
    \ paren_level_str_index18=0\n  local paren_level_str_index19=0\n  local paren_level_str_index20=0\n\
    \  local paren_level_str_index21=0\n  local paren_level_str_index22=0\n  local\
    \ paren_level_str_index23=0\n  local paren_level_str_index24=0\n  local paren_level_str_index25=0\n\
    \  local paren_level_str_index26=0\n  local paren_level_str_index27=0\n  local\
    \ paren_level_str_index28=0\n  local paren_level_str_index29=0\n  local paren_level_str_index30=0\n\
    \  local paren_level_str_index31=0\n  local paren_level_str_index32=0\n  local\
    \ paren_level_str_index33=0\n  local paren_level_str_index34=0\n  local paren_level_str_index35=0\n\
    \  local paren_level_str_index36=0\n  local paren_level_str_index37=0\n  local\
    \ paren_level_str_index38=0\n  local paren_level_str_index39=0\n  local paren_level_str_index40=0\n\
    \  local paren_level_str_index41=0\n  local paren_level_str_index42=0\n  local\
    \ paren_level_str_index43=0\n  local paren_level_str_index44=0\n  local paren_level_str_index45=0\n\
    \  local paren_level_str_index46=0\n  local \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ nested_parens_array=()\n    local level=0\n    local parens_level=0\n    local\
    \ parens_level_str=\"\"\n    local parens_level_array=()\n    local parens_level_max=0\n\
    \    local parens_level_max_str=\"\"\n    local parens_level_max_array=()\n  \
    \  local parens_level_max_max=0\n    local parens_level_max_max_str=\"\"\n   \
    \ local parens_level_max_max_array=()\n    local parens_level_max_max_max=0\n\
    \    local parens_level_max_max_max_str=\"\"\n    local parens_level_max_max_max_array=()\n\
    \    local parens_level_max_max_max_max=0\n    local parens_level_max_max_max_max_str=\"\
    \"\n    local parens_level_max_max_max_max_array=()\n    local parens_level_max_max_max_max_max=0\n\
    \    local parens_level_max_max_max_max_max_str=\"\"\n    local parens_level_max_max_max_max_max_array=()\n\
    \    local parens_level_max_max_max_max_max_max=0\n    local parens_level_max_max_max_max_max_max_str=\"\
    \"\n    local parens_level_max_max_max_max_max_max_array=()\n    local parens_level_max_max_max_max_max_max_max=0\n\
    \    local parens_level_max_max_max_max_max_max_max_str=\"\"\n    local parens_level_max_max_max_max_max_max_max_array=()\n\
    \    local parens_level_max_max_max_max_max_max_max_max=0\n    local parens_level_max_max_max_max_max_max_max_max_str=\"\
    \"\n    local parens_level_max_max_max_max_max_max_max_max_array=()\n    local\
    \ parens_level_max_max_max_max_max_max_max_max_max=0\n    local parens_level_max_max_max_max_max_max_max_max_max_str=\"\
    \"\n    local parens_level_max_max_max_max_max_max_max_max_max_max_array=()\n\
    \    local parens_level_max_max_max_max_max_max_max_max_max_max_max=0\n    local\
    \ parens_level_max_max_max_max_max_max_max_max_max_max_str=\"\"\n    local parens_level_max_max_max_max_max_max_max_max_max_max_array=()\n\
    \    local parens_level_max_max_max_max_max_max_max_max_max_max_max_max=0\n  \
    \  local parens_level_max_max_max_max_max_max_max_max_max_max_max_str=\"\"\n \
    \   local parens_level_max_max_max_max_max_max_max_max_max_max_max_max_array=()\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local max_level_num=0\n    local max_level_num_str=\"\
    \"\n    local max_level_num_str1=\"\"\n    local max_level_num_str2=\"\"\n   \
    \ local max_level_num_str3=\"\"\n    local max_level_num_str4=\"\"\n    local\
    \ max_level_num_str5=\"\"\n    local max_level_num_str6=\"\"\n    local max_level_num_str7=\"\
    \"\n    local max_level_num_str8=\"\"\n    local max_level_num_str9=\"\"\n   \
    \ local max_level_num_str10=\"\"\n    local max_level_num_str11=\"\"\n    local\
    \ max_level_num_str12=\"\"\n    local max_level_num_str13=\"\"\n    local max_level_num_str14=\"\
    \"\n    local max_level_num_str15=\"\"\n    local max_level_num_str16=\"\"\n \
    \   local max_level_num_str17=\"\"\n    local max_level_num_str18=\"\"\n    local\
    \ max_level_num_str19=\"\"\n    local max_level_num_str20=\"\"\n    local max_level_num_str21=\"\
    \"\n    local max_level_num_str22=\"\"\n    local max_level_num_str23=\"\"\n \
    \   local max_level_num_str24=\"\"\n    local max_level_num_str25=\"\"\n    local\
    \ max_level_num_str26=\"\"\n    local max_level_num_str27=\"\"\n    local max_level_num_str28=\"\
    \"\n    local max_level_num_str29=\"\"\n    local max_level_num_str30=\"\"\n \
    \   local max_level_num_str31=\"\"\n    local max_level_num_str32=\"\"\n    local\
    \ max_level_num_str33=\"\"\n    local max_level_num_str34=\"\"\n    local max_level_num_str35=\"\
    \"\n    local max_level_num_str36=\"\"\n    local max_level_num_str37=\"\"\n \
    \   local max_level_num_str38=\"\"\n    local max_level_num_str39=\"\"\n    local\
    \ max_level_num_str40=\"\"\n    local max_level_num_str41=\"\"\n    local max_level_num_str42=\"\
    \"\n    local max_level_num_str43=\"\"\n    local max_level_num_str44=\"\"\n \
    \   local max_level_num_str45=\"\"\n    local max_level_num_str46=\"\"\n    local\
    \ max_level_num_str47=\"\"\n    local max_level_num_str48=\"\"\n    local max_level_num_str49=\"\
    \"\n    local max_level_num_str50=\"\"\n    local max_level_num_str51=\"\"\n \
    \   local max_level_num_str52=\"\"\n    local max_level_num_str53=\"\"\n\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=${#paren_groups}\n\
    \    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n\
    \    local paren_level_str_reverse=0\n    local paren_level_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str=\"\"\n    local paren_level_str_reverse_str_count=0\n\
    \    local paren_level_str_reverse_str_reverse=0\n    local paren_level_str_reverse_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str=\"\"\n    local paren_level_str_reverse_str_reverse_str_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse=0\n    local paren_level_str_reverse_str_reverse_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str=\"\"\n    local\
    \ paren_level_str_reverse_str_reverse_str_reverse_str_count=0\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\"\
    \n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=0\n\
    \    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_count=0\n\
    \    local paren_level_str_reverse_str_reverse_str_re\n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local groups=\"$1\"\n  local max_level=0\n\
    \  local max_level_string=\"\"\n  local level=0\n  local level_string=\"\"\n \
    \ local level_str=\"\"\n  local level_str_with_quotes=\"\"\n  local level_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes=\"\"\n  local level_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes=\"\"\n  local\
    \ level_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str_with_quotes_str=\"\
    \"\n  local level_str_with_quotes_str_with_quotes_str_with_quotes_str_\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_index=0\n  local paren_levels=()\n  local paren_levels_index=0\n\
    \  local paren_levels_string=\"\"\n  local paren_levels_string_index=0\n  local\
    \ paren_levels_string_index2=0\n  local paren_levels_string_index3=0\n  local\
    \ paren_levels_string_index4=0\n  local paren_levels_string_index5=0\n  local\
    \ paren_levels_string_index6=0\n  local paren_levels_string_index7=0\n  local\
    \ paren_levels_string_index8=0\n  local paren_levels_string_index9=0\n  local\
    \ paren_levels_string_index10=0\n  local paren_levels_string_index11=0\n  local\
    \ paren_levels_string_index12=0\n  local paren_levels_string_index13=0\n  local\
    \ paren_levels_string_index14=0\n  local paren_levels_string_index15=0\n  local\
    \ paren_levels_string_index16=0\n  local paren_levels_string_index17=0\n  local\
    \ paren_levels_string_index18=0\n  local paren_levels_string_index19=0\n  local\
    \ paren_levels_string_index20=0\n  local paren_levels_string_index21=0\n  local\
    \ paren_levels_string_index22=0\n  local paren_levels_string_index23=0\n  local\
    \ paren_levels_string_index24=0\n  local paren_levels_string_index25=0\n  local\
    \ paren_levels_string_index26=0\n  local paren_levels_string_index27=0\n  local\
    \ paren_levels_string_index28=0\n  local paren_levels_string_index29=0\n  local\
    \ paren_levels_string_index30=0\n  local paren_levels_string_index31=0\n  local\
    \ paren_levels_string_index32=0\n  local paren_levels_string_index33=0\n  local\
    \ paren_levels_string_index34=0\n  local paren_levels_string_index35=0\n  local\
    \ paren_levels_string_index36=0\n  local paren_levels_string_index37=0\n  local\
    \ paren_levels_string_index38=0\n  local paren_levels_string_index39=0\n  local\
    \ paren_levels_string_index40=0\n  local paren_levels_string_index41=0\n  local\
    \ paren_levels_string_index42=0\n  local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local parens_str=\"\"\n    local parens_level=0\n    local parens_level_str=\"\
    \"\n    local parens_str_count=0\n    local parens_level_str_count=0\n    local\
    \ parens_str_count2=0\n    local parens_level_str_count2=0\n    local parens_str_count3=0\n\
    \    local parens_level_str_count3=0\n    local parens_str_count4=0\n    local\
    \ parens_level_str_count4=0\n    local parens_str_count5=0\n    local parens_level_str_count5=0\n\
    \    local parens_str_count6=0\n    local parens_level_str_count6=0\n    local\
    \ parens_str_count7=0\n    local parens_level_str_count7=0\n    local parens_str_count8=0\n\
    \    local parens_level_str_count8=0\n    local parens_str_count9=0\n    local\
    \ parens_level_str_count9=0\n    local parens_str_count10=0\n    local parens_level_str_count10=0\n\
    \    local parens_str_count11=0\n    local parens_level_str_count11=0\n    local\
    \ parens_str_count12=0\n    local parens_level_str_count12=0\n    local parens_str_count13=0\n\
    \    local parens_level_str_count13=0\n    local parens_str_count14=0\n    local\
    \ parens_level_str_count14=0\n    local parens_str_count15=0\n    local parens_level_str_count15=0\n\
    \    local parens_str_count16=0\n    local parens_level_str_count16=0\n    local\
    \ parens_str_count17=0\n    local parens_level_str_count17=0\n    local parens_str_count18=0\n\
    \    local parens_level_str_count18=0\n    local parens_str_count19=0\n    local\
    \ parens_level_str_count19=0\n    local parens_str_count20=0\n    local parens_level_str_count20=0\n\
    \    local parens_str_count21=0\n    local parens_level_str_count21=0\n    local\
    \ parens_str_count22=0\n    local parens_level_str_count22=0\n    local parens_str_count23=0\n\
    \    local parens_level_str_count23=0\n    local parens_str_count24=0\n    local\
    \ parens_level_str_count24=0\n    local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_level_index=0\n\
    \    local paren_level\n    local paren_level_string\n    local paren_level_str\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    \    local paren_level_str_index\n    local paren_level_str_index\n    local paren_level_str_index\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_string=\"\"\n  local max_level_group=\"\"\n  local max_level_group_string=\"\
    \"\n  local level=0\n  local level_group=\"\"\n  local level_group_string=\"\"\
    \n  local level_group_count=0\n  local level_group_count_string=\"\"\n  local\
    \ level_group_count_string2=\"\"\n  local level_group_count_string3=\"\"\n  local\
    \ level_group_count_string4=\"\"\n  local level_group_count_string5=\"\"\n  local\
    \ level_group_count_string6=\"\"\n  local level_group_count_string7=\"\"\n  local\
    \ level_group_count_string8=\"\"\n  local level_group_count_string9=\"\"\n  local\
    \ level_group_count_string10=\"\"\n  local level_group_count_string11=\"\"\n \
    \ local level_group_count_string12=\"\"\n  local level_group_count_string13=\"\
    \"\n  local level_group_count_string14=\"\"\n  local level_group_count_string15=\"\
    \"\n  local level_group_count_string16=\"\"\n  local level_group_count_string17=\"\
    \"\n  local level_group_count_string18=\"\"\n  local level_group_count_string19=\"\
    \"\n  local level_group_count_string20=\"\"\n  local level_group_count_string21=\"\
    \"\n  local level_group_count_string22=\"\"\n  local level_group_count_string23=\"\
    \"\n  local level_group_count_string24=\"\"\n  local level_group_count_string25=\"\
    \"\n  local level_group_count_string26=\"\"\n  local level_group_count_string27=\"\
    \"\n  local level_group_count_string28=\"\"\n  local level_group_count_string29=\"\
    \"\n  local level_group_count_string30=\"\"\n  local level_group_count_string31=\"\
    \"\n  local level_group_count_string32=\"\"\n  local level_group_count_string33=\"\
    \"\n  local level_group_count_string34=\"\"\n  local level_group_count_string35=\"\
    \"\n  local level_group_count_string36=\"\"\n  local level_group_count_string37=\"\
    \"\n  local level_group_count_string38=\"\"\n  local level_group_count_string39=\"\
    \"\n  local level_group_count_string40=\"\"\n  local level_group_count_string41=\"\
    \"\n  local level_group_count_string42=\"\"\n  local level_group_count_string43=\"\
    \"\n  local level_group_count_string44=\"\"\n  local level_group_count_string45=\"\
    \"\n  local level_group_count_string46=\"\"\n  local level_group_count_string47=\"\
    \"\n  local level_group_count_string48=\"\"\n  local level_group_count_string49=\"\
    \"\n  local level_group_count_string50=\"\"\n  local \n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local paren_group\n    local paren_group_str=\"\"\n    local paren_group_level=0\n\
    \    local paren_group_level_str=\"\"\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_str_count=0\n   \
    \ local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local i=0\n    while [ $i -lt ${#groups} ]; do\n        local g=${groups:$i:1}\n\
    \        if [[ $g == \")\" ]]; then\n            ((level--))\n            if ((level\
    \ == 0)); then\n                ((max_level++))\n                level_string=\"\
    ${level_string}${max_level_string}\"\n            fi\n        fi\n        if [[\
    \ $g == \"(\" ]]; then\n            ((level++))\n            level_string=\"${level_string}${max_level_string}\"\
    \n        fi\n        ((i++))\n    done\n    echo $level_string\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_str=$1\n\
    \    local parens_str_count=0\n    local parens_str_depth=0\n    local parens_str_depth_max=0\n\
    \    local parens_str_depth_max_str=\"\"\n    local parens_str_depth_max_count=0\n\
    \    local parens_str_depth_max_count2=0\n    local parens_str_depth_max_count3=0\n\
    \    local parens_str_depth_max_count4=0\n    local parens_str_depth_max_count5=0\n\
    \    local parens_str_depth_max_count6=0\n    local parens_str_depth_max_count7=0\n\
    \    local parens_str_depth_max_count8=0\n    local parens_str_depth_max_count9=0\n\
    \    local parens_str_depth_max_count10=0\n    local parens_str_depth_max_count11=0\n\
    \    local parens_str_depth_max_count12=0\n    local parens_str_depth_max_count13=0\n\
    \    local parens_str_depth_max_count14=0\n    local parens_str_depth_max_count15=0\n\
    \    local parens_str_depth_max_count16=0\n    local parens_str_depth_max_count17=0\n\
    \    local parens_str_depth_max_count18=0\n    local parens_str_depth_max_count19=0\n\
    \    local parens_str_depth_max_count20=0\n    local parens_str_depth_max_count21=0\n\
    \    local parens_str_depth_max_count22=0\n    local parens_str_depth_max_count23=0\n\
    \    local parens_str_depth_max_count24=0\n    local parens_str_depth_max_count25=0\n\
    \    local parens_str_depth_max_count26=0\n    local parens_str_depth_max_count27=0\n\
    \    local parens_str_depth_max_count28=0\n    local parens_str_depth_max_count29=0\n\
    \    local parens_str_depth_max_count30=0\n    local parens_str_depth_max_count31=0\n\
    \    local parens_str_depth_max_count32=0\n    local parens_str_depth_max_count33=0\n\
    \    local parens_str_depth_max_count34=0\n    local parens_str_depth_max_count35=0\n\
    \    local parens_str_depth_max_count36=0\n    local parens_str_depth_max_count37=0\n\
    \    local parens_str_depth_max_count38=0\n    local parens_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_index=0\n  local max_level_str=\"\"\n  local paren_level=0\n\
    \  local paren_level_index=0\n  local paren_level_str=\"\"\n  local paren_level_str_index=0\n\
    \  local paren_level_str_index2=0\n  local paren_level_str_index3=0\n  local paren_level_str_index4=0\n\
    \  local paren_level_str_index5=0\n  local paren_level_str_index6=0\n  local paren_level_str_index7=0\n\
    \  local paren_level_str_index8=0\n  local paren_level_str_index9=0\n  local paren_level_str_index10=0\n\
    \  local paren_level_str_index11=0\n  local paren_level_str_index12=0\n  local\
    \ paren_level_str_index13=0\n  local paren_level_str_index14=0\n  local paren_level_str_index15=0\n\
    \  local paren_level_str_index16=0\n  local paren_level_str_index17=0\n  local\
    \ paren_level_str_index18=0\n  local paren_level_str_index19=0\n  local paren_level_str_index20=0\n\
    \  local paren_level_str_index21=0\n  local paren_level_str_index22=0\n  local\
    \ paren_level_str_index23=0\n  local paren_level_str_index24=0\n  local paren_level_str_index25=0\n\
    \  local paren_level_str_index26=0\n  local paren_level_str_index27=0\n  local\
    \ paren_level_str_index28=0\n  local paren_level_str_index29=0\n  local paren_level_str_index30=0\n\
    \  local paren_level_str_index31=0\n  local paren_level_str_index32=0\n  local\
    \ paren_level_str_index33=0\n  local paren_level_str_index34=0\n  local paren_level_str_index35=0\n\
    \  local paren_level_str_index36=0\n  local paren_level_str_index37=0\n  local\
    \ paren_level_str_index38=0\n  local paren_level_str_index39=0\n  local paren_level_str_index40=0\n\
    \  local paren_level_str_index41=0\n  local paren_level_str_index42=0\n  local\
    \ paren_level_str_index43=0\n  local paren_level_str_index44=0\n  local paren_level_str_index45=0\n\
    \  local paren_level_str_index46=0\n  local \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_str=$1\n\
    \    local parens_str_count=0\n    local parens_str_depth=0\n    local parens_str_depth_max=0\n\
    \    local parens_str_depth_max_index=0\n    local parens_str_depth_max_count=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str_depth_max_count_index=0\n\
    \    local parens_str_depth_max_count_index=0\n    local parens_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_index=0\n  local max_level_str=\"\"\n  local paren_level=0\n\
    \  local paren_level_index=0\n  local paren_level_str=\"\"\n  local paren_level_str_index=0\n\
    \  local paren_level_str_index2=0\n  local paren_level_str_index3=0\n  local paren_level_str_index4=0\n\
    \  local paren_level_str_index5=0\n  local paren_level_str_index6=0\n  local paren_level_str_index7=0\n\
    \  local paren_level_str_index8=0\n  local paren_level_str_index9=0\n  local paren_level_str_index10=0\n\
    \  local paren_level_str_index11=0\n  local paren_level_str_index12=0\n  local\
    \ paren_level_str_index13=0\n  local paren_level_str_index14=0\n  local paren_level_str_index15=0\n\
    \  local paren_level_str_index16=0\n  local paren_level_str_index17=0\n  local\
    \ paren_level_str_index18=0\n  local paren_level_str_index19=0\n  local paren_level_str_index20=0\n\
    \  local paren_level_str_index21=0\n  local paren_level_str_index22=0\n  local\
    \ paren_level_str_index23=0\n  local paren_level_str_index24=0\n  local paren_level_str_index25=0\n\
    \  local paren_level_str_index26=0\n  local paren_level_str_index27=0\n  local\
    \ paren_level_str_index28=0\n  local paren_level_str_index29=0\n  local paren_level_str_index30=0\n\
    \  local paren_level_str_index31=0\n  local paren_level_str_index32=0\n  local\
    \ paren_level_str_index33=0\n  local paren_level_str_index34=0\n  local paren_level_str_index35=0\n\
    \  local paren_level_str_index36=0\n  local paren_level_str_index37=0\n  local\
    \ paren_level_str_index38=0\n  local paren_level_str_index39=0\n  local paren_level_str_index40=0\n\
    \  local paren_level_str_index41=0\n  local paren_level_str_index42=0\n  local\
    \ paren_level_str_index43=0\n  local paren_level_str_index44=0\n  local paren_level_str_index45=0\n\
    \  local paren_level_str_index46=0\n  local \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=\"$1\"\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_str=\"\"\n\
    \    local level_str_count=0\n    local level_str_count2=0\n    local level_str_count3=0\n\
    \    local level_str_count4=0\n    local level_str_count5=0\n    local level_str_count6=0\n\
    \    local level_str_count7=0\n    local level_str_count8=0\n    local level_str_count9=0\n\
    \    local level_str_count10=0\n    local level_str_count11=0\n    local level_str_count12=0\n\
    \    local level_str_count13=0\n    local level_str_count14=0\n    local level_str_count15=0\n\
    \    local level_str_count16=0\n    local level_str_count17=0\n    local level_str_count18=0\n\
    \    local level_str_count19=0\n    local level_str_count20=0\n    local level_str_count21=0\n\
    \    local level_str_count22=0\n    local level_str_count23=0\n    local level_str_count24=0\n\
    \    local level_str_count25=0\n    local level_str_count26=0\n    local level_str_count27=0\n\
    \    local level_str_count28=0\n    local level_str_count29=0\n    local level_str_count30=0\n\
    \    local level_str_count31=0\n    local level_str_count32=0\n    local level_str_count33=0\n\
    \    local level_str_count34=0\n    local level_str_count35=0\n    local level_str_count36=0\n\
    \    local level_str_count37=0\n    local level_str_count38=0\n    local level_str_count39=0\n\
    \    local level_str_count40=0\n    local level_str_count41=0\n    local level_str_count42=0\n\
    \    local level_str_count43=0\n    local level_str_count44=0\n    local level_str_count45=0\n\
    \    local level_str_count46=0\n    local level_str_count47=0\n    local level_str_count48=0\n\
    \    local level_str_count49=0\n    local level_str_count50=0\n    local level_str_count51=0\n\
    \    local level_str_count52=0\n    local level_str_count53=0\n    local level_str_count54=0\n\
    \    local level_str_count55=0\n    local level_str_count56=0\n    local level_str_count57=0\n\
    \    local level_str_count58=0\n    local level_str_count59=0\n    local level_str_count60=0\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_count=0\n    local parens_str_depth_max_depth=0\n\
    \    local parens_str_depth_max_depth_str=\"\"\n    local parens_str_depth_max_depth_count=0\n\
    \    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str_depth_max_depth_count_str=\"\"\n    local parens_str_depth_max_depth_count_str=\"\
    \"\n    local parens_str\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n    local\
    \ paren_level_str_count2=0\n    local paren_level_str_count3=0\n    local paren_level_str_count4=0\n\
    \    local paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local\
    \ paren_level_str_count7=0\n    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n\
    \    local paren_level_str_count10=0\n    local paren_level_str_count11=0\n  \
    \  local paren_level_str_count12=0\n    local paren_level_str_count13=0\n    local\
    \ paren_level_str_count14=0\n    local paren_level_str_count15=0\n    local paren_level_str_count16=0\n\
    \    local paren_level_str_count17=0\n    local paren_level_str_count18=0\n  \
    \  local paren_level_str_count19=0\n    local paren_level_str_count20=0\n    local\
    \ paren_level_str_count21=0\n    local paren_level_str_count22=0\n    local paren_level_str_count23=0\n\
    \    local paren_level_str_count24=0\n    local paren_level_str_count25=0\n  \
    \  local paren_level_str_count26=0\n    local paren_level_str_count27=0\n    local\
    \ paren_level_str_count28=0\n    local paren_level_str_count29=0\n    local paren_level_str_count30=0\n\
    \    local paren_level_str_count31=0\n    local paren_level_str_count32=0\n  \
    \  local paren_level_str_count33=0\n    local paren_level_str_count34=0\n    local\
    \ paren_level_str_count35=0\n    local paren_level_str_count36=0\n    local paren_level_str_count37=0\n\
    \    local paren_level_str_count38=0\n    local paren_level_str_count39=0\n  \
    \  local paren_level_str_count40=0\n    local paren_level_str_count41=0\n    local\
    \ paren_level_str_count42=0\n    local paren_level_str_count43=0\n    local paren_level_str_count44=0\n\
    \    local paren_level_str_count45=0\n    local paren_level_str_count46=0\n  \
    \  local paren_level_str_count47=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_string_count=0\n    local level_string_count2=0\n    local\
    \ level_string_count3=0\n    local level_string_count4=0\n    local level_string_count5=0\n\
    \    local level_string_count6=0\n    local level_string_count7=0\n    local level_string_count8=0\n\
    \    local level_string_count9=0\n    local level_string_count10=0\n    local\
    \ level_string_count11=0\n    local level_string_count12=0\n    local level_string_count13=0\n\
    \    local level_string_count14=0\n    local level_string_count15=0\n    local\
    \ level_string_count16=0\n    local level_string_count17=0\n    local level_string_count18=0\n\
    \    local level_string_count19=0\n    local level_string_count20=0\n    local\
    \ level_string_count21=0\n    local level_string_count22=0\n    local level_string_count23=0\n\
    \    local level_string_count24=0\n    local level_string_count25=0\n    local\
    \ level_string_count26=0\n    local level_string_count27=0\n    local level_string_count28=0\n\
    \    local level_string_count29=0\n    local level_string_count30=0\n    local\
    \ level_string_count31=0\n    local level_string_count32=0\n    local level_string_count33=0\n\
    \    local level_string_count34=0\n    local level_string_count35=0\n    local\
    \ level_string_count36=0\n    local level_string_count37=0\n    local level_string_count38=0\n\
    \    local level_string_count39=0\n    local level_string_count40=0\n    local\
    \ level_string_count41=0\n    local level_string_count42=0\n    local level_string_count43=0\n\
    \    local level_string_count44=0\n    local level_string_count45=0\n    local\
    \ level_string_count46=0\n    local level_string_count47=0\n    local level_string_count48=0\n\
    \    local level_string_count49=0\n    local level_string_count50=0\n    local\
    \ level_string_count51=0\n    local level_string_count52=0\n    local level_string_count53=0\n\
    \    local level_string_count54=0\n    local level_string_count55=0\n    local\
    \ level_string_count56=0\n    local level_string_count57=0\n    local level_string_count58=0\n\
    \    local level_string_count59=0\n    local level_string_count60=0\n    \n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_string=\"\"\n    local paren_group_level=0\n\
    \    local paren_group_level_string=\"\"\n    local paren_group_level_num=0\n\
    \    local paren_group_level_num_string=\"\"\n    local paren_group_level_num_string2=\"\
    \"\n    local paren_group_level_num_string3=\"\"\n    local paren_group_level_num_string4=\"\
    \"\n    local paren_group_level_num_string5=\"\"\n    local paren_group_level_num_string6=\"\
    \"\n    local paren_group_level_num_string7=\"\"\n    local paren_group_level_num_string8=\"\
    \"\n    local paren_group_level_num_string9=\"\"\n    local paren_group_level_num_string10=\"\
    \"\n    local paren_group_level_num_string11=\"\"\n    local paren_group_level_num_string12=\"\
    \"\n    local paren_group_level_num_string13=\"\"\n    local paren_group_level_num_string14=\"\
    \"\n    local paren_group_level_num_string15=\"\"\n    local paren_group_level_num_string16=\"\
    \"\n    local paren_group_level_num_string17=\"\"\n    local paren_group_level_num_string18=\"\
    \"\n    local paren_group_level_num_string19=\"\"\n    local paren_group_level_num_string20=\"\
    \"\n    local paren_group_level_num_string21=\"\"\n    local paren_group_level_num_string22=\"\
    \"\n    local paren_group_level_num_string23=\"\"\n    local paren_group_level_num_string24=\"\
    \"\n    local paren_group_level_num_string25=\"\"\n    local paren_group_level_num_string26=\"\
    \"\n    local paren_group_level_num_string27=\"\"\n    local paren_group_level_num_string28=\"\
    \"\n    local paren_group_level_num_string29=\"\"\n    local paren_group_level_num_string30=\"\
    \"\n    local paren_group_level_num_string31=\"\"\n    local paren_group_level_num_string32=\"\
    \"\n    local paren_group_level_num_string33=\"\"\n    local paren_group_level_num_string34=\"\
    \"\n    local paren_group_level_num_string35=\"\"\n    local paren_group_level_num_string36=\"\
    \"\n    local paren_group_level_num_string37=\"\"\n    local paren_group_level_num_string38=\"\
    \"\n    local paren_group_level_num_string39=\"\"\n    local paren_group_level_num_string40=\"\
    \"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ nested_parens_arr=()\n    local parens_level=0\n    local parens_level_count=0\n\
    \    local parens_level_max_count=0\n    local parens_level_max_count_index=0\n\
    \    local parens_level_max_count_index=0\n    local parens_level_max_count_value=0\n\
    \    local parens_level_max_count_value_index=0\n    local parens_level_max_count_value_value=0\n\
    \    local parens_level_max_count_value_value_index=0\n    local parens_level_max_count_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_level_max_count_value_value_value_index=0\n    local parens_level_max_count_value_value_value_value=0\n\
    \    local parens_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_string=\"\"\n  local level=0\n  local level_string=\"\"\n \
    \ local level_string_count=0\n  local level_char_count=0\n  local level_char=\"\
    \"\n  local level_char_count=0\n  local level_char=\"\"\n  local level_char=\"\
    \"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n\
    \  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n \
    \ local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local\
    \ level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\
    \"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n\
    \  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n \
    \ local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local\
    \ level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\
    \"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n\
    \  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n \
    \ local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local\
    \ level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\
    \"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n\
    \  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n \
    \ local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local\
    \ level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\
    \"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n\
    \  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n \
    \ local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local\
    \ level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\
    \"\n  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n\
    \  local level_char=\"\"\n  local level_char=\"\"\n  local level_char=\"\"\n \
    \ local level_char=\"\"\n  local level_char=\"\"\n  local level_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str1=\"\"\n    local\
    \ paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local paren_level_str4=\"\
    \"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\"\n    local\
    \ paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local paren_level_str9=\"\
    \"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\"\n    local\
    \ paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local paren_level_str14=\"\
    \"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\"\n    local\
    \ paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local paren_level_str19=\"\
    \"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\"\n    local\
    \ paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local paren_level_str24=\"\
    \"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\"\n    local\
    \ paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local paren_level_str29=\"\
    \"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\"\n    local\
    \ paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local paren_level_str34=\"\
    \"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\"\n    local\
    \ paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local paren_level_str39=\"\
    \"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\"\n    local\
    \ paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local paren_level_str44=\"\
    \"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\"\n    local\
    \ paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local paren_level_str49=\"\
    \"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\"\n    local\
    \ paren_level_str52=\"\"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=${#paren_groups}\n\
    \    local paren_groups_count_max=${paren_groups_count}\n    local paren_groups_count_max_index=-1\n\
    \    local paren_groups_count_max_value=-1\n    local paren_groups_count_max_string=\"\
    \"\n    local paren_groups_count_max_string_index=0\n    local paren_groups_count_max_string_value=0\n\
    \    local paren_groups_count_max_string_value_index=0\n    local paren_groups_count_max_string_value_string=\"\
    \"\n    local paren_groups_count_max_string_value_string_index=0\n    local paren_groups_count_max_string_value_string_value=\"\
    \"\n    local paren_groups_count_max_string_value_string_value_index=0\n    local\
    \ paren_groups_count_max_string_value_string_value_value=\"\"\n    local paren_groups_count_max_string_value_string_value_index=0\n\
    \    local paren_groups_count_max_string_value_string_value_value=\"\"\n    local\
    \ paren_groups_count_max_string_value_string_value_value_index=0\n    local paren_groups_count_max_string_value_string_value_value_value=\"\
    \"\n    local paren_groups_count_max_string_value_string_value_value_index=0\n\
    \    local paren_groups_count_max_string_value_string_value_value_value=\"\"\n\
    \    local paren_groups_count_max_string_value_string_value_value_index=0\n  \
    \  local paren_groups_count_max_string_value_string_value_value_value=\"\"\n \
    \   local paren_groups_count_max_string_value_string_value_value_index=0\n   \
    \ local paren_groups_count_max_string_value_string_value_value_value=\"\"\n  \
    \  local paren_groups_count_max_string_value_string_value_value_index=0\n    local\
    \ paren_groups_count_max_string_value_string_value_value_value=\"\"\n    local\
    \ paren_groups_count_max_string_value_string_value_value_index=0\n    local paren_groups_count_max_string_value_string_value_value_value=\"\
    \"\n    local paren_groups_count_max_string_value_string_value_value_index=0\n\
    \    local paren_groups_count_max_string_value_string_value_value_value=\"\"\n\
    \    local paren_groups_count_max_string_value_string_value_value_index=0\n  \
    \  local paren_groups_count_max_string_value_string_value_value_value=\"\"\n \
    \   local paren_groups_count_max_string_value_string_value_value_index=0\n   \
    \ local paren_groups_count_max_string_value_string_value_value_value=\"\"\n  \
    \  local paren_groups_count_max_string_value_string_value_value_index=0\n    local\
    \ paren_groups_count_max_string_value_string_value_value_value=\"\"\n    local\
    \ paren_groups_count_max_string_value_string_value_value_index=0\n    local paren_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=0\n\
    \    local paren_groups_max_level=0\n    local paren_groups_max_level_str=\"\"\
    \n    local paren_groups_max_level_str_count=0\n    local paren_groups_max_level_str_len=0\n\
    \    local paren_groups_max_level_str_len_max=0\n    local paren_groups_max_level_str_len_max_str=\"\
    \"\n    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    local paren_groups_max_level_str_len_max_count=0\n\
    \    local paren_groups_max_level_str_len_max_count=0\n    \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_array=()\n\
    \    local paren_level=0\n    local paren_level_count=0\n    local paren_level_string=\"\
    \"\n    local paren_level_array=()\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_level_array_count=0\n    local paren_level_array_string=\"\"\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str1=\"\
    \"\n    local paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local\
    \ paren_level_str4=\"\"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\
    \"\n    local paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local\
    \ paren_level_str9=\"\"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\
    \"\n    local paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local\
    \ paren_level_str14=\"\"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\
    \"\n    local paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local\
    \ paren_level_str19=\"\"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\
    \"\n    local paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local\
    \ paren_level_str24=\"\"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\
    \"\n    local paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local\
    \ paren_level_str29=\"\"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\
    \"\n    local paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local\
    \ paren_level_str34=\"\"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\
    \"\n    local paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local\
    \ paren_level_str39=\"\"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\
    \"\n    local paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local\
    \ paren_level_str44=\"\"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\
    \"\n    local paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local\
    \ paren_level_str49=\"\"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\
    \"\n    local paren_level_str\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_max=0\n    local parens_str_level=0\n    local parens_str_maxlevel=0\n\
    \    local parens_str_maxlevel_count=0\n    local parens_str_maxlevel_str=\"\"\
    \n    local parens_str_maxlevel_str_count=0\n    local parens_str_maxlevel_str_max=0\n\
    \    local parens_str_maxlevel_str_level=0\n    local parens_str_maxlevel_str_maxlevel=0\n\
    \    local parens_str_maxlevel_str_maxlevel_count=0\n    local parens_str_maxlevel_str_maxlevel_str=\"\
    \"\n    local parens_str_maxlevel_str_maxlevel_str_count=0\n    local parens_str_maxlevel_str_maxlevel_str_max=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_level=0\n    local parens_str_maxlevel_str_maxlevel_str_maxlevel=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_count=0\n    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str=\"\
    \"\n    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_count=0\n    local\
    \ parens_str_maxlevel_str_maxlevel_str_maxlevel_str_max=0\n    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_level=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel=0\n    local\
    \ parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_count=0\n    local\
    \ parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str=\"\"\n    local\
    \ parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_count=0\n   \
    \ local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_max=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_level=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_count=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str=\"\
    \"\n    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_count=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_maxlevel_str_max=0\n\
    \    local parens_str_maxlevel_str_maxlevel_str_maxlevel_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=\"$1\"\n    local max_level=0\n\
    \    local max_level_index=0\n    local max_level_str=\"\"\n    local max_level_str_index=0\n\
    \    local max_level_str_len=0\n    local max_level_str_len_index=0\n    local\
    \ max_level_str_len_value=0\n    local max_level_str_len_value_index=0\n    local\
    \ max_level_str_len_value_value=0\n    local max_level_str_len_value_value_index=0\n\
    \    local max_level_str_len_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    local max_level_str_len_value_value_value_index=0\n\
    \    local max_level_str_len_value_value_value_value=0\n    \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local parens_str=\"\"\n    local parens_level=0\n    local parens_level_str=\"\
    \"\n    local parens_str_count=0\n    local parens_level_str_count=0\n    local\
    \ parens_str_count2=0\n    local parens_level_str_count2=0\n    local parens_str_count3=0\n\
    \    local parens_level_str_count3=0\n    local parens_str_count4=0\n    local\
    \ parens_level_str_count4=0\n    local parens_str_count5=0\n    local parens_level_str_count5=0\n\
    \    local parens_str_count6=0\n    local parens_level_str_count6=0\n    local\
    \ parens_str_count7=0\n    local parens_level_str_count7=0\n    local parens_str_count8=0\n\
    \    local parens_level_str_count8=0\n    local parens_str_count9=0\n    local\
    \ parens_level_str_count9=0\n    local parens_str_count10=0\n    local parens_level_str_count10=0\n\
    \    local parens_str_count11=0\n    local parens_level_str_count11=0\n    local\
    \ parens_str_count12=0\n    local parens_level_str_count12=0\n    local parens_str_count13=0\n\
    \    local parens_level_str_count13=0\n    local parens_str_count14=0\n    local\
    \ parens_level_str_count14=0\n    local parens_str_count15=0\n    local parens_level_str_count15=0\n\
    \    local parens_str_count16=0\n    local parens_level_str_count16=0\n    local\
    \ parens_str_count17=0\n    local parens_level_str_count17=0\n    local parens_str_count18=0\n\
    \    local parens_level_str_count18=0\n    local parens_str_count19=0\n    local\
    \ parens_level_str_count19=0\n    local parens_str_count20=0\n    local parens_level_str_count20=0\n\
    \    local parens_str_count21=0\n    local parens_level_str_count21=0\n    local\
    \ parens_str_count22=0\n    local parens_level_str_count22=0\n    local parens_str_count23=0\n\
    \    local parens_level_str_count23=0\n    local parens_str_count24=0\n    local\
    \ parens_level_str_count24=0\n    local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_levels=$(echo $1 | sed\
    \ 's/\\(.*\\)/\\1/g' | sed 's/\\([^)]*\\)/\"&\"/g' | sed 's/\"\\(.*\\)\"/\\1/g'\
    \ | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\\
    )\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\
    \\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' |\
    \ sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"\
    /\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\\
    (.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed\
    \ 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\\
    1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\\
    )\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\
    \\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' |\
    \ sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"\
    /\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\\
    (.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed\
    \ 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\1/g' | sed 's/\"\\(.*\\)\"/\\\
    1/g' | sed 's/\"\\(.*\\)\"/\\1/g\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeeeduxqk.sh: line 10: unexpected EOF while looking for matching
    `''''

    /tmp/tmpeeeduxqk.sh: line 25: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_count=0\n    local paren_group_string=\"\
    \"\n    local paren_group_level=0\n    local paren_group_level_str=\"\"\n    local\
    \ paren_group_level_str_count=0\n    local paren_group_level_str_count=0\n   \
    \ local paren_group_level_str_count=0\n    local paren_group_level_str_count_2=0\n\
    \    local paren_group_level_str_count_3=0\n    local paren_group_level_str_count_4=0\n\
    \    local paren_group_level_str_count_5=0\n    local paren_group_level_str_count_6=0\n\
    \    local paren_group_level_str_count_7=0\n    local paren_group_level_str_count_8=0\n\
    \    local paren_group_level_str_count_9=0\n    local paren_group_level_str_count_10=0\n\
    \    local paren_group_level_str_count_11=0\n    local paren_group_level_str_count_12=0\n\
    \    local paren_group_level_str_count_13=0\n    local paren_group_level_str_count_14=0\n\
    \    local paren_group_level_str_count_15=0\n    local paren_group_level_str_count_16=0\n\
    \    local paren_group_level_str_count_17=0\n    local paren_group_level_str_count_18=0\n\
    \    local paren_group_level_str_count_19=0\n    local paren_group_level_str_count_20=0\n\
    \    local paren_group_level_str_count_21=0\n    local paren_group_level_str_count_22=0\n\
    \    local paren_group_level_str_count_23=0\n    local paren_group_level_str_count_24=0\n\
    \    local paren_group_level_str_count_25=0\n    local paren_group_level_str_count_26=0\n\
    \    local paren_group_level_str_count_27=0\n    local paren_group_level_str_count_28=0\n\
    \    local paren_group_level_str_count_29=0\n    local paren_group_level_str_count_30=0\n\
    \    local paren_group_level_str_count_31=0\n    local paren_group_level_str_count_32=0\n\
    \    local paren_group_level_str_count_33=0\n    local paren_group_level_str_count_34=0\n\
    \    local paren_group_level_str_count_35=0\n    local paren_group_level_str_count_36=0\n\
    \    local paren_group_level_str_count_37=0\n    local paren_group_level_str_count_38=0\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group\n    local\
    \ paren_group_count\n    local paren_group_level\n    local paren_group_str\n\
    \    local paren_group_str_count\n    local paren_group_str_level\n    local paren_group_str_str\n\
    \    local paren_group_str_str_level\n    local paren_group_str_str_str\n    local\
    \ paren_group_str_str_str_level\n    local paren_group_str_str_str_str\n    local\
    \ paren_group_str_str_str_str_level\n    local paren_group_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_level\n    local paren_group_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_level\n    local paren_group_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_level\n    local paren_group_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_level\n    local paren_group_str_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_str_level\n    local paren_group_str_str_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_level\n    local paren_group_str_str_str_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_level\n    local\
    \ paren_group_str_str_str_str_str_str_str_str_str_str_str_str\n    local paren_group_str_str_str_str_str_str_str_str_str_str_str_level\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_str\n \
    \   local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_level\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_str_level\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_level\n\
    \    local paren_group_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str\n\
    \    local paren_group_str_str_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_arr=($paren_groups)\n\
    \    local paren_groups_arr_len=${#paren_groups[@]}\n    local paren_groups_arr_i=0\n\
    \    local paren_groups_arr_j=0\n    local paren_groups_arr_max=0\n    local paren_groups_arr_max_j=0\n\
    \    local paren_groups_arr_max_i=0\n    local paren_groups_arr_max_k=0\n    local\
    \ paren_groups_arr_max_l=0\n    local paren_groups_arr_max_m=0\n    local paren_groups_arr_max_n=0\n\
    \    local paren_groups_arr_max_o=0\n    local paren_groups_arr_max_p=0\n    local\
    \ paren_groups_arr_max_q=0\n    local paren_groups_arr_max_r=0\n    local paren_groups_arr_max_s=0\n\
    \    local paren_groups_arr_max_t=0\n    local paren_groups_arr_max_u=0\n    local\
    \ paren_groups_arr_max_v=0\n    local paren_groups_arr_max_w=0\n    local paren_groups_arr_max_x=0\n\
    \    local paren_groups_arr_max_y=0\n    local paren_groups_arr_max_z=0\n    local\
    \ paren_groups_arr_max_a=0\n    local paren_groups_arr_max_b=0\n    local paren_groups_arr_max_c=0\n\
    \    local paren_groups_arr_max_d=0\n    local paren_groups_arr_max_e=0\n    local\
    \ paren_groups_arr_max_f=0\n    local paren_groups_arr_max_g=0\n    local paren_groups_arr_max_h=0\n\
    \    local paren_groups_arr_max_i=0\n    local paren_groups_arr_max_j=0\n    local\
    \ paren_groups_arr_max_k=0\n    local paren_groups_arr_max_l=0\n    local paren_groups_arr_max_m=0\n\
    \    local paren_groups_arr_max_n=0\n    local paren_groups_arr_max_o=0\n    local\
    \ paren_groups_arr_max_p=0\n    local paren_groups_arr_max_q=0\n    local paren_groups_arr_max_r=0\n\
    \    local paren_groups_arr_max_s=0\n    local paren_groups_arr_max_t=0\n    local\
    \ paren_groups_arr_max_u=0\n    local paren_groups_arr_max_v=0\n    local paren_groups_arr_max_w=0\n\
    \    local paren_groups_arr_max_x=0\n    local paren_groups_arr_max_y=0\n    local\
    \ paren_groups_arr_max_z=0\n    local paren_groups_arr_max_a=0\n\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=\"$1\"\n \
    \   local nested_parens_arr=()\n    local nested_parens_arr_len=0\n    local nested_parens_arr_max=0\n\
    \    local nested_parens_arr_max_index=0\n    local nested_parens_arr_max_len=0\n\
    \    local nested_parens_arr_max_index2=0\n    local nested_parens_arr_max_len2=0\n\
    \    local nested_parens_arr_max_index3=0\n    local nested_parens_arr_max_len3=0\n\
    \    local nested_parens_arr_max_index4=0\n    local nested_parens_arr_max_len4=0\n\
    \    local nested_parens_arr_max_index5=0\n    local nested_parens_arr_max_len5=0\n\
    \    local nested_parens_arr_max_index6=0\n    local nested_parens_arr_max_len6=0\n\
    \    local nested_parens_arr_max_index7=0\n    local nested_parens_arr_max_len7=0\n\
    \    local nested_parens_arr_max_index8=0\n    local nested_parens_arr_max_len8=0\n\
    \    local nested_parens_arr_max_index9=0\n    local nested_parens_arr_max_len9=0\n\
    \    local nested_parens_arr_max_index10=0\n    local nested_parens_arr_max_len10=0\n\
    \    local nested_parens_arr_max_index11=0\n    local nested_parens_arr_max_len11=0\n\
    \    local nested_parens_arr_max_index12=0\n    local nested_parens_arr_max_len12=0\n\
    \    local nested_parens_arr_max_index13=0\n    local nested_parens_arr_max_len13=0\n\
    \    local nested_parens_arr_max_index14=0\n    local nested_parens_arr_max_len14=0\n\
    \    local nested_parens_arr_max_index15=0\n    local nested_parens_arr_max_len15=0\n\
    \    local nested_parens_arr_max_index16=0\n    local nested_parens_arr_max_len16=0\n\
    \    local nested_parens_arr_max_index17=0\n    local nested_parens_arr_max_len17=0\n\
    \    local nested_parens_arr_max_index18=0\n    local nested_parens_arr_max_len18=0\n\
    \    local nested_parens_arr_max_index19=0\n    local nested_parens_arr_max_len19=0\n\
    \    local nested_parens_arr_max_index20=0\n    local nested_parens_arr_max_len20=0\n\
    \    local nested_parens_arr_max_index21=0\n    local nested_parens_arr_max_len21=0\n\
    \    local nested_parens_arr_max_index22=0\n    local nested_parens_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_str_count=0\n    local level_str_index=0\n    local level_str_count2=0\n\
    \    local level_str_index2=0\n    local level_str_count3=0\n    local level_str_index3=0\n\
    \    local level_str_count4=0\n    local level_str_index4=0\n    local level_str_count5=0\n\
    \    local level_str_index5=0\n    local level_str_count6=0\n    local level_str_index6=0\n\
    \    local level_str_count7=0\n    local level_str_index7=0\n    local level_str_count8=0\n\
    \    local level_str_index8=0\n    local level_str_count9=0\n    local level_str_index9=0\n\
    \    local level_str_count10=0\n    local level_str_index10=0\n    local level_str_count11=0\n\
    \    local level_str_index11=0\n    local level_str_count12=0\n    local level_str_index12=0\n\
    \    local level_str_count13=0\n    local level_str_index13=0\n    local level_str_count14=0\n\
    \    local level_str_index14=0\n    local level_str_count15=0\n    local level_str_index15=0\n\
    \    local level_str_count16=0\n    local level_str_index16=0\n    local level_str_count17=0\n\
    \    local level_str_index17=0\n    local level_str_count18=0\n    local level_str_index18=0\n\
    \    local level_str_count19=0\n    local level_str_index19=0\n    local level_str_count20=0\n\
    \    local level_str_index20=0\n    local level_str_count21=0\n    local level_str_index21=0\n\
    \    local level_str_count22=0\n    local level_str_index22=0\n    local level_str_count23=0\n\
    \    local level_str_index23=0\n    local level_str_count24=0\n    local level_str_index24=0\n\
    \    local level_str_count25=0\n    local level_str_index25=0\n    local level_str_count26=0\n\
    \    local level_str_index26=0\n    local level_str_count27=0\n    local level_str_index27=0\n\
    \    local level_str_count28=0\n    local level_str_index28=0\n    local level_str_count29=0\n\
    \    local level_str_index29=0\n    local level_str_count30=0\n    local level_str_index30=0\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local max_level_str_index=0\n    local paren_groups_str=\"\
    \"\n    local paren_groups_str_index=0\n    local paren_groups_str_len=0\n   \
    \ local paren_groups_str_len_max=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index=0\n    local paren_groups_str_len_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_index=0\n    local max_level_str=\"\"\n   \
    \ local level_str=\"\"\n    local level_num=0\n    local level_num_index=0\n \
    \   local level_num_str=\"\"\n    local level_num_str_index=0\n    local level_num_str_index2=0\n\
    \    local level_num_str_index3=0\n    local level_num_str_index4=0\n    local\
    \ level_num_str_index5=0\n    local level_num_str_index6=0\n    local level_num_str_index7=0\n\
    \    local level_num_str_index8=0\n    local level_num_str_index9=0\n    local\
    \ level_num_str_index10=0\n    local level_num_str_index11=0\n    local level_num_str_index12=0\n\
    \    local level_num_str_index13=0\n    local level_num_str_index14=0\n    local\
    \ level_num_str_index15=0\n    local level_num_str_index16=0\n    local level_num_str_index17=0\n\
    \    local level_num_str_index18=0\n    local level_num_str_index19=0\n    local\
    \ level_num_str_index20=0\n    local level_num_str_index21=0\n    local level_num_str_index22=0\n\
    \    local level_num_str_index23=0\n    local level_num_str_index24=0\n    local\
    \ level_num_str_index25=0\n    local level_num_str_index26=0\n    local level_num_str_index27=0\n\
    \    local level_num_str_index28=0\n    local level_num_str_index29=0\n    local\
    \ level_num_str_index30=0\n    local level_num_str_index31=0\n    local level_num_str_index32=0\n\
    \    local level_num_str_index33=0\n    local level_num_str_index34=0\n    local\
    \ level_num_str_index35=0\n    local level_num_str_index36=0\n    local level_num_str_index37=0\n\
    \    local level_num_str_index38=0\n    local level_num_str_index39=0\n    local\
    \ level_num_str_index40=0\n    local level_num_str_index41=0\n    local level_num_str_index42=0\n\
    \    local level_num_str_index43=0\n    local level_num_str_index44=0\n    local\
    \ level_num_str_index45=0\n    local level_num_str_index46=0\n    local level_num_str_index47=0\n\
    \    local level_num_str_index48=0\n    local level_num_str_index49=0\n    local\
    \ level_num_str_index50=0\n    local level_num_str_index51=0\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_level=0\n    local parens_str_max_level=0\n    local parens_str_max_level_str=\"\
    \"\n    local parens_str_max_level_str_count=0\n    local parens_str_max_level_str_level=0\n\
    \    local parens_str_max_level_str_level_str=\"\"\n    local parens_str_max_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level=0\n    local parens_str_max_level_str_level_str_level_str=\"\
    \"\n    local parens_str_max_level_str_level_str_level_str_count=0\n    local\
    \ parens_str_max_level_str_level_str_level_str_level=0\n    local parens_str_max_level_str_level_str_level_str_level_str=\"\
    \"\n    local parens_str_max_level_str_level_str_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level=0\n  \
    \  local parens_str_max_level_str_level_str_level_str_level_str_level_str=\"\"\
    \n    local parens_str_max_level_str_level_str_level_str_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str=\"\
    \"\n    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str=\"\
    \"\n    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str=\"\
    \"\n    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_level_str_count=0\n\
    \    local parens_str_max_level_str_level_str_level_str_level_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local level=0\n\
    \    local level_str=\"\"\n    local level_str_count=0\n    local level_str_str=\"\
    \"\n    local level_str_str_count=0\n    local level_str_str_str=\"\"\n    local\
    \ level_str_str_str_count=0\n    local level_str_str_str_str=\"\"\n    local level_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str1=\"\
    \"\n    local paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local\
    \ paren_level_str4=\"\"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\
    \"\n    local paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local\
    \ paren_level_str9=\"\"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\
    \"\n    local paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local\
    \ paren_level_str14=\"\"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\
    \"\n    local paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local\
    \ paren_level_str19=\"\"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\
    \"\n    local paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local\
    \ paren_level_str24=\"\"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\
    \"\n    local paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local\
    \ paren_level_str29=\"\"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\
    \"\n    local paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local\
    \ paren_level_str34=\"\"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\
    \"\n    local paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local\
    \ paren_level_str39=\"\"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\
    \"\n    local paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local\
    \ paren_level_str44=\"\"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\
    \"\n    local paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local\
    \ paren_level_str49=\"\"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\
    \"\n    local paren_level_str52\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_count=0\n    local level_count_str=\"\"\n    local level_str_count=0\n\
    \    local level_str_count_str=\"\"\n    local level_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_str_count_str=\"\"\n    local\
    \ level_str_str_count=0\n    local level_str_str_count_str=\"\"\n    local level_str_str=\"\
    \"\n    local level_str_count=0\n    local level_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local level=0\n    local level_count=0\n   \
    \ local paren_group\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_level_count\n    local max_level_paren_group\n    local\
    \ max_level_paren_group_count\n    local max_level_paren_group_level\n    local\
    \ max_level_paren_group_level_count\n    local max_level_paren_group_level_paren_group\n\
    \    local max_level_paren_group_level_paren_group_count\n    local max_level_paren_group_level_paren_group_level\n\
    \    local max_level_paren_group_level_paren_group_level_count\n    local max_level_paren_group_level_paren_group_level_paren_group\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_count\n \
    \   local max_level_paren_group_level_paren_group_level_paren_group_level\n  \
    \  local max_level_paren_group_level_paren_group_level_paren_group_level_count\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_count\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_count\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_count\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_count\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_count\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group\n\
    \    local max_level_paren_group_level_paren_group_level_paren_group_level_paren_group_level_paren_group_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_output=''\n    local parens_str_output_count=0\n\
    \    local parens_str_output_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_string=''\n\
    \    local parens_str_output_string_depth=0\n    local parens_str_output_\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_level=0\n    local paren_level_index=0\n\
    \    local paren_level_str=\"\"\n    local paren_level_str_index=0\n    local\
    \ paren_level_str_count=0\n    local paren_level_str_counts=()\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_str_count=0\n    local parens_str_depth_max_str_depth=0\n\
    \    local parens_str_depth_max_str_depth_max=0\n    local parens_str_depth_max_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_str_depth_max_str_count=0\n    local parens_str_depth_max_str_depth_max_str_depth=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max=0\n    local parens_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_str_depth_max_str_depth_max_str_count=0\n \
    \   local parens_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n    local\
    \ parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n    local\
    \ parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\"\n  \
    \  local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_count=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_count=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_count=0\n\
    \    local parens_str_depth_max_str_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_str=\"\"\n    local level_str_len=0\n    local level_str_len2=0\n\
    \    local level_str_len3=0\n    local level_str_len4=0\n    local level_str_len5=0\n\
    \    local level_str_len6=0\n    local level_str_len7=0\n    local level_str_len8=0\n\
    \    local level_str_len9=0\n    local level_str_len10=0\n    local level_str_len11=0\n\
    \    local level_str_len12=0\n    local level_str_len13=0\n    local level_str_len14=0\n\
    \    local level_str_len15=0\n    local level_str_len16=0\n    local level_str_len17=0\n\
    \    local level_str_len18=0\n    local level_str_len19=0\n    local level_str_len20=0\n\
    \    local level_str_len21=0\n    local level_str_len22=0\n    local level_str_len23=0\n\
    \    local level_str_len24=0\n    local level_str_len25=0\n    local level_str_len26=0\n\
    \    local level_str_len27=0\n    local level_str_len28=0\n    local level_str_len29=0\n\
    \    local level_str_len30=0\n    local level_str_len31=0\n    local level_str_len32=0\n\
    \    local level_str_len33=0\n    local level_str_len34=0\n    local level_str_len35=0\n\
    \    local level_str_len36=0\n    local level_str_len37=0\n    local level_str_len38=0\n\
    \    local level_str_len39=0\n    local level_str_len40=0\n    local level_str_len41=0\n\
    \    local level_str_len42=0\n    local level_str_len43=0\n    local level_str_len44=0\n\
    \    local level_str_len45=0\n    local level_str_len46=0\n    local level_str_len47=0\n\
    \    local level_str_len48=0\n    local level_str_len49=0\n    local level_str_len50=0\n\
    \    local level_str_len51=0\n    local level_str_len52=0\n    local level_str_len53=0\n\
    \    local level_str_len54=0\n    local level_str_len55=0\n    local level_str_len56=0\n\
    \    local level_str_len57=0\n    local level_str_len58=0\n    local level_str_len59=0\n\
    \    local level_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local parens_str_index=0\n    local parens_str_index2=0\n\
    \    local parens_str_index3=0\n    local parens_str_index4=0\n    local parens_str_index5=0\n\
    \    local parens_str_index6=0\n    local parens_str_index7=0\n    local parens_str_index8=0\n\
    \    local parens_str_index9=0\n    local parens_str_index10=0\n    local parens_str_index11=0\n\
    \    local parens_str_index12=0\n    local parens_str_index13=0\n    local parens_str_index14=0\n\
    \    local parens_str_index15=0\n    local parens_str_index16=0\n    local parens_str_index17=0\n\
    \    local parens_str_index18=0\n    local parens_str_index19=0\n    local parens_str_index20=0\n\
    \    local parens_str_index21=0\n    local parens_str_index22=0\n    local parens_str_index23=0\n\
    \    local parens_str_index24=0\n    local parens_str_index25=0\n    local parens_str_index26=0\n\
    \    local parens_str_index27=0\n    local parens_str_index28=0\n    local parens_str_index29=0\n\
    \    local parens_str_index30=0\n    local parens_str_index31=0\n    local parens_str_index32=0\n\
    \    local parens_str_index33=0\n    local parens_str_index34=0\n    local parens_str_index35=0\n\
    \    local parens_str_index36=0\n    local parens_str_index37=0\n    local parens_str_index38=0\n\
    \    local parens_str_index39=0\n    local parens_str_index40=0\n    local parens_str_index41=0\n\
    \    local parens_str_index42=0\n    local parens_str_index43=0\n    local parens_str_index44=0\n\
    \    local parens_str_index45=0\n    local parens_str_index46=0\n    local parens_str_index47=0\n\
    \    local parens_str_index48=0\n    local parens_str_index49=0\n    local parens_str_index50=0\n\
    \    local parens_str_index51=0\n    local parens_str_index52=0\n    local parens_str_index53=0\n\
    \    local parens_str_index54=0\n    local parens_str_index\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=${#paren_groups}\n\
    \    local paren_groups_array=()\n    local paren_groups_array_count=${#paren_groups_array[@]}\n\
    \    local paren_groups_array_index=-1\n    local paren_groups_array_element=\n\
    \    local paren_groups_array_element_count=\n    local paren_groups_array_element_index=-1\n\
    \    local paren_groups_array_element_element=\n    local paren_groups_array_element_element_count=\n\
    \    local paren_groups_array_element_element_index=-1\n    local paren_groups_array_element_element_element=\n\
    \    local paren_groups_array_element_element_element_count=\n    local paren_groups_array_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element=\n    local paren_groups_array_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_index=-1\n    local\
    \ paren_groups_array_element_element_element_element_element=\n    local paren_groups_array_element_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element_element_element=\n\
    \    local paren_groups_array_element_element_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element_element=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element_element_element_count=\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element_element_element_index=-1\n\
    \    local paren_groups_array_element_element_element_element_element_element_element_element_element_element_element_element_element_element=\n\
    \    local paren_groups_array_element_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_levels_index=0\n\
    \    local paren_levels_index2=0\n    local paren_levels_index3=0\n    local paren_levels_index4=0\n\
    \    local paren_levels_index5=0\n    local paren_levels_index6=0\n    local paren_levels_index7=0\n\
    \    local paren_levels_index8=0\n    local paren_levels_index9=0\n    local paren_levels_index10=0\n\
    \    local paren_levels_index11=0\n    local paren_levels_index12=0\n    local\
    \ paren_levels_index13=0\n    local paren_levels_index14=0\n    local paren_levels_index15=0\n\
    \    local paren_levels_index16=0\n    local paren_levels_index17=0\n    local\
    \ paren_levels_index18=0\n    local paren_levels_index19=0\n    local paren_levels_index20=0\n\
    \    local paren_levels_index21=0\n    local paren_levels_index22=0\n    local\
    \ paren_levels_index23=0\n    local paren_levels_index24=0\n    local paren_levels_index25=0\n\
    \    local paren_levels_index26=0\n    local paren_levels_index27=0\n    local\
    \ paren_levels_index28=0\n    local paren_levels_index29=0\n    local paren_levels_index30=0\n\
    \    local paren_levels_index31=0\n    local paren_levels_index32=0\n    local\
    \ paren_levels_index33=0\n    local paren_levels_index34=0\n    local paren_levels_index35=0\n\
    \    local paren_levels_index36=0\n    local paren_levels_index37=0\n    local\
    \ paren_levels_index38=0\n    local paren_levels_index39=0\n    local paren_levels_index40=0\n\
    \    local paren_levels_index41=0\n    local paren_levels_index42=0\n    local\
    \ paren_levels_index43=0\n    local paren_levels_index44=0\n    local paren_levels_index45=0\n\
    \    local paren_levels_index46=0\n    local paren_levels_index47=0\n    local\
    \ paren_levels_index48=0\n    local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=()\n\
    \    local parens_level=0\n    local parens_depth=0\n    local parens_depth_tmp=0\n\
    \    local parens_depth_tmp2=0\n    local parens_depth_tmp3=0\n    local parens_depth_tmp4=0\n\
    \    local parens_depth_tmp5=0\n    local parens_depth_tmp6=0\n    local parens_depth_tmp7=0\n\
    \    local parens_depth_tmp8=0\n    local parens_depth_tmp9=0\n    local parens_depth_tmp10=0\n\
    \    local parens_depth_tmp11=0\n    local parens_depth_tmp12=0\n    local parens_depth_tmp13=0\n\
    \    local parens_depth_tmp14=0\n    local parens_depth_tmp15=0\n    local parens_depth_tmp16=0\n\
    \    local parens_depth_tmp17=0\n    local parens_depth_tmp18=0\n    local parens_depth_tmp19=0\n\
    \    local parens_depth_tmp20=0\n    local parens_depth_tmp21=0\n    local parens_depth_tmp22=0\n\
    \    local parens_depth_tmp23=0\n    local parens_depth_tmp24=0\n    local parens_depth_tmp25=0\n\
    \    local parens_depth_tmp26=0\n    local parens_depth_tmp27=0\n    local parens_depth_tmp28=0\n\
    \    local parens_depth_tmp29=0\n    local parens_depth_tmp30=0\n    local parens_depth_tmp31=0\n\
    \    local parens_depth_tmp32=0\n    local parens_depth_tmp33=0\n    local parens_depth_tmp34=0\n\
    \    local parens_depth_tmp35=0\n    local parens_depth_tmp36=0\n    local parens_depth_tmp37=0\n\
    \    local parens_depth_tmp38=0\n    local parens_depth_tmp39=0\n    local parens_depth_tmp40=0\n\
    \    local parens_depth_tmp41=0\n    local parens_depth_tmp42=0\n    local parens_depth_tmp43=0\n\
    \    local parens_depth_tmp44=0\n    local parens_depth_tmp45=0\n    local parens_depth_tmp46=0\n\
    \    local parens_depth_tmp47=0\n    local parens_depth_tmp48=0\n    local parens_depth_tmp49=0\n\
    \    local parens_depth_tmp50=0\n    local parens_depth_tmp51=0\n    local parens_depth_tmp52=0\n\
    \    local parens_depth_tmp53=0\n    local parens_depth_tmp\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level\n    local paren_group_level_string\n\
    \    local paren_group_string\n    local paren_group_string_count\n    local paren_group_string_length\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren_group_string_length_index\n\
    \    local paren_group_string_index\n    local paren\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local max_level_group=\"\"\n    local max_level_group_string=\"\
    \"\n    local max_level_group_count=0\n    local max_level_group_count_string=\"\
    \"\n    local max_level_group_count_string2=\"\"\n    local max_level_group_count_string3=\"\
    \"\n    local max_level_group_count_string4=\"\"\n    local max_level_group_count_string5=\"\
    \"\n    local max_level_group_count_string6=\"\"\n    local max_level_group_count_string7=\"\
    \"\n    local max_level_group_count_string8=\"\"\n    local max_level_group_count_string9=\"\
    \"\n    local max_level_group_count_string10=\"\"\n    local max_level_group_count_string11=\"\
    \"\n    local max_level_group_count_string12=\"\"\n    local max_level_group_count_string13=\"\
    \"\n    local max_level_group_count_string14=\"\"\n    local max_level_group_count_string15=\"\
    \"\n    local max_level_group_count_string16=\"\"\n    local max_level_group_count_string17=\"\
    \"\n    local max_level_group_count_string18=\"\"\n    local max_level_group_count_string19=\"\
    \"\n    local max_level_group_count_string20=\"\"\n    local max_level_group_count_string21=\"\
    \"\n    local max_level_group_count_string22=\"\"\n    local max_level_group_count_string23=\"\
    \"\n    local max_level_group_count_string24=\"\"\n    local max_level_group_count_string25=\"\
    \"\n    local max_level_group_count_string26=\"\"\n    local max_level_group_count_string27=\"\
    \"\n    local max_level_group_count_string28=\"\"\n    local max_level_group_count_string29=\"\
    \"\n    local max_level_group_count_string30=\"\"\n    local max_level_group_count_string31=\"\
    \"\n    local max_level_group_count_string32=\"\"\n    local max_level_group_count_string33=\"\
    \"\n    local max_level_group_count_string34=\"\"\n    local max_level_group_count_string35=\"\
    \"\n    local max_level_group_count_string36=\"\"\n    local max_level_group_count_string37=\"\
    \"\n    local max_level_group_count_string38=\"\"\n    local max_level_group_count_string39=\"\
    \"\n    local max_level_group_count_string40=\"\"\n    local max_level_group_count_string41=\"\
    \"\n    local max_level_group_count_string42=\"\"\n    local max_level_group_count_string43=\"\
    \"\n    local max_level_group_count_string44=\"\"\n    local max_level_group_count_string45=\"\
    \"\n    local max_level_group_count_string46=\"\"\n    local max_level_group_count_string47=\"\
    \"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_string=$1\n\
    \    local parens_string2=\"\"\n    local parens_string3=\"\"\n    local parens_string4=\"\
    \"\n    local parens_string5=\"\"\n    local parens_string6=\"\"\n    local parens_string7=\"\
    \"\n    local parens_string8=\"\"\n    local parens_string9=\"\"\n    local parens_string10=\"\
    \"\n    local parens_string11=\"\"\n    local parens_string12=\"\"\n    local\
    \ parens_string13=\"\"\n    local parens_string14=\"\"\n    local parens_string15=\"\
    \"\n    local parens_string16=\"\"\n    local parens_string17=\"\"\n    local\
    \ parens_string18=\"\"\n    local parens_string19=\"\"\n    local parens_string20=\"\
    \"\n    local parens_string21=\"\"\n    local parens_string22=\"\"\n    local\
    \ parens_string23=\"\"\n    local parens_string24=\"\"\n    local parens_string25=\"\
    \"\n    local parens_string26=\"\"\n    local parens_string27=\"\"\n    local\
    \ parens_string28=\"\"\n    local parens_string29=\"\"\n    local parens_string30=\"\
    \"\n    local parens_string31=\"\"\n    local parens_string32=\"\"\n    local\
    \ parens_string33=\"\"\n    local parens_string34=\"\"\n    local parens_string35=\"\
    \"\n    local parens_string36=\"\"\n    local parens_string37=\"\"\n    local\
    \ parens_string38=\"\"\n    local parens_string39=\"\"\n    local parens_string40=\"\
    \"\n    local parens_string41=\"\"\n    local parens_string42=\"\"\n    local\
    \ parens_string43=\"\"\n    local parens_string44=\"\"\n    local parens_string45=\"\
    \"\n    local parens_string46=\"\"\n    local parens_string47=\"\"\n    local\
    \ parens_string48=\"\"\n    local parens_string49=\"\"\n    local parens_string50=\"\
    \"\n    local parens_string51=\"\"\n    local parens_string52=\"\"\n    local\
    \ parens_string53=\"\"\n    local parens_string54=\"\"\n    local parens_string55=\"\
    \"\n    local parens_string56=\"\"\n    local parens_string57=\"\"\n    local\
    \ parens_string58=\"\"\n    local parens_string59=\"\"\n    local parens_string60=\"\
    \"\n    local parens_string61=\"\"\n    local parens_string62=\"\"\n    local\
    \ parens_string63=\"\"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local level_count=0\n    local level_char='\"\
    '\n    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local level_char_count=0\n\
    \    local level_char_index=0\n    local level_char_count=0\n    local level_char_index=0\n\
    \    local level_char_count=0\n    local level_char_index=0\n    local \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_str_count=0\n    local level_str_count2=0\n    local level_str_count_str=\"\
    \"\n    local level_str_count_str2=\"\"\n    local level_str_count_str2=\"\"\n\
    \    local level_str_count_str3=\"\"\n    local level_str_count_str4=\"\"\n  \
    \  local level_str_count_str5=\"\"\n    local level_str_count_str6=\"\"\n    local\
    \ level_str_count_str7=\"\"\n    local level_str_count_str8=\"\"\n    local level_str_count_str9=\"\
    \"\n    local level_str_count_str10=\"\"\n    local level_str_count_str11=\"\"\
    \n    local level_str_count_str12=\"\"\n    local level_str_count_str13=\"\"\n\
    \    local level_str_count_str14=\"\"\n    local level_str_count_str15=\"\"\n\
    \    local level_str_count_str16=\"\"\n    local level_str_count_str17=\"\"\n\
    \    local level_str_count_str18=\"\"\n    local level_str_count_str19=\"\"\n\
    \    local level_str_count_str20=\"\"\n    local level_str_count_str21=\"\"\n\
    \    local level_str_count_str22=\"\"\n    local level_str_count_str23=\"\"\n\
    \    local level_str_count_str24=\"\"\n    local level_str_count_str25=\"\"\n\
    \    local level_str_count_str26=\"\"\n    local level_str_count_str27=\"\"\n\
    \    local level_str_count_str28=\"\"\n    local level_str_count_str29=\"\"\n\
    \    local level_str_count_str30=\"\"\n    local level_str_count_str31=\"\"\n\
    \    local level_str_count_str32=\"\"\n    local level_str_count_str33=\"\"\n\
    \    local level_str_count_str34=\"\"\n    local level_str_count_str35=\"\"\n\
    \    local level_str_count_str36=\"\"\n    local level_str_count_str37=\"\"\n\
    \    local level_str_count_str38=\"\"\n    local level_str_count_str39=\"\"\n\
    \    local level_str_count_str40=\"\"\n    local level_str_count_str41=\"\"\n\
    \    local level_str_count_str42=\"\"\n    local level_str_count_str43=\"\"\n\
    \    local level_str_count_str44=\"\"\n    local level_str_count_str45=\"\"\n\
    \    local level_str_count_str46=\"\"\n    local level_str_count_str47=\"\"\n\
    \    local level_str_count_str48=\"\"\n    local level_str_count_str49=\"\"\n\
    \    local level_str_count_str50=\"\"\n    local level_str_count_str51=\"\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char_count=0\n    local paren_level_char_index=0\n \
    \   local paren_level_char_count2=0\n    local paren_level_char_index2=0\n   \
    \ local paren_level_char_count3=0\n    local paren_level_char_index3=0\n    local\
    \ paren_level_char_count4=0\n    local paren_level_char_index4=0\n    local paren_level_char_count5=0\n\
    \    local paren_level_char_index5=0\n    local paren_level_char_count6=0\n  \
    \  local paren_level_char_index6=0\n    local paren_level_char_count7=0\n    local\
    \ paren_level_char_index7=0\n    local paren_level_char_count8=0\n    local paren_level_char_index8=0\n\
    \    local paren_level_char_count9=0\n    local paren_level_char_index9=0\n  \
    \  local paren_level_char_count10=0\n    local paren_level_char_index10=0\n  \
    \  local paren_level_char_count11=0\n    local paren_level_char_index11=0\n  \
    \  local paren_level_char_count12=0\n    local paren_level_char_index12=0\n  \
    \  local paren_level_char_count13=0\n    local paren_level_char_index13=0\n  \
    \  local paren_level_char_count14=0\n    local paren_level_char_index14=0\n  \
    \  local paren_level_char_count15=0\n    local paren_level_char_index15=0\n  \
    \  local paren_level_char_count16=0\n    local paren_level_char_index16=0\n  \
    \  local paren_level_char_count17=0\n    local paren_level_char_index17=0\n  \
    \  local paren_level_char_count18=0\n    local paren_level_char_index18=0\n  \
    \  local paren_level_char_count19=0\n    local paren_level_char_index19=0\n  \
    \  local paren_level_char_count20=0\n    local paren_level_char_index20=0\n  \
    \  local paren_level_char_count21=0\n    local paren_level_char_index21=0\n  \
    \  local paren_level_char_count22=0\n    local paren_level_char_index22=0\n  \
    \  local paren_level_char_count23=0\n    local paren_level_char_index23=0\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_index=0\n\
    \    local parens_str_depth_max_depth=0\n    local parens_str_depth_max_depth_index=0\n\
    \    local parens_str_depth_max_depth_index2=0\n    local parens_str_depth_max_depth_index3=0\n\
    \    local parens_str_depth_max_depth_index4=0\n    local parens_str_depth_max_depth_index5=0\n\
    \    local parens_str_depth_max_depth_index6=0\n    local parens_str_depth_max_depth_index7=0\n\
    \    local parens_str_depth_max_depth_index8=0\n    local parens_str_depth_max_depth_index9=0\n\
    \    local parens_str_depth_max_depth_index10=0\n    local parens_str_depth_max_depth_index11=0\n\
    \    local parens_str_depth_max_depth_index12=0\n    local parens_str_depth_max_depth_index13=0\n\
    \    local parens_str_depth_max_depth_index14=0\n    local parens_str_depth_max_depth_index15=0\n\
    \    local parens_str_depth_max_depth_index16=0\n    local parens_str_depth_max_depth_index17=0\n\
    \    local parens_str_depth_max_depth_index18=0\n    local parens_str_depth_max_depth_index19=0\n\
    \    local parens_str_depth_max_depth_index20=0\n    local parens_str_depth_max_depth_index21=0\n\
    \    local parens_str_depth_max_depth_index22=0\n    local parens_str_depth_max_depth_index23=0\n\
    \    local parens_str_depth_max_depth_index24=0\n    local parens_str_depth_max_depth_index25=0\n\
    \    local parens_str_depth_max_depth_index26=0\n    local parens_str_depth_max_depth_index27=0\n\
    \    local parens_str_depth_max_depth_index28=0\n    local parens_str_depth_max_depth_index29=0\n\
    \    local parens_str_depth_max_depth_index30=0\n    local parens_str_depth_max_depth_index31=0\n\
    \    local parens_str_depth_max_depth_index32=0\n    local parens_str_depth_max_depth_index33=0\n\
    \    local parens_str_depth_max_depth_index34=0\n    local parens_str_depth_max_depth_index35=0\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_count=0\n    local paren_group\n    local paren_group_count\n\
    \    local paren_group_string\n    local paren_group_level\n    local paren_group_level_string\n\
    \    local paren_group_paren_count\n    local paren_group_paren_count_string\n\
    \    local paren_group_paren_count_level\n    local paren_group_paren_count_level_string\n\
    \    local paren_group_paren_count_level_max\n    local paren_group_paren_count_level_max_string\n\
    \    local paren_group_paren_count_level_max_count\n    local paren_group_paren_count_level_max_count_string\n\
    \    local paren_group_paren_count_level_max_count_level\n    local paren_group_paren_count_level_max_count_level_string\n\
    \    local paren_group_paren_count_level_max_count_level_max\n    local paren_group_paren_count_level_max_count_level_max_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count\n    local\
    \ paren_group_paren_count_level_max_count_level_max_count_string\n    local paren_group_paren_count_level_max_count_level_max_count_level\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level_max\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level_max_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level_max_count\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level_max_count_string\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_max_count_level_max_count_level\n\
    \    local paren_group_paren_count_level_max_count_level_max_count_level_\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ nested_parens_array=()\n    local max_level=0\n    local max_level_str=\"\"\n\
    \    local level=0\n    local level_str=\"\"\n    local parens_str=\"\"\n    local\
    \ parens_array=()\n    local parens_level=0\n    local parens_level_str=\"\"\n\
    \    local parens_str_count=0\n    local parens_str_count2=0\n    local parens_str_count3=0\n\
    \    local parens_str_count4=0\n    local parens_str_count5=0\n    local parens_str_count6=0\n\
    \    local parens_str_count7=0\n    local parens_str_count8=0\n    local parens_str_count9=0\n\
    \    local parens_str_count10=0\n    local parens_str_count11=0\n    local parens_str_count12=0\n\
    \    local parens_str_count13=0\n    local parens_str_count14=0\n    local parens_str_count15=0\n\
    \    local parens_str_count16=0\n    local parens_str_count17=0\n    local parens_str_count18=0\n\
    \    local parens_str_count19=0\n    local parens_str_count20=0\n    local parens_str_count21=0\n\
    \    local parens_str_count22=0\n    local parens_str_count23=0\n    local parens_str_count24=0\n\
    \    local parens_str_count25=0\n    local parens_str_count26=0\n    local parens_str_count27=0\n\
    \    local parens_str_count28=0\n    local parens_str_count29=0\n    local parens_str_count30=0\n\
    \    local parens_str_count31=0\n    local parens_str_count32=0\n    local parens_str_count33=0\n\
    \    local parens_str_count34=0\n    local parens_str_count35=0\n    local parens_str_count36=0\n\
    \    local parens_str_count37=0\n    local parens_str_count38=0\n    local parens_str_count39=0\n\
    \    local parens_str_count40=0\n    local parens_str_count41=0\n    local parens_str_count42=0\n\
    \    local parens_str_count43=0\n    local parens_str_count44=0\n    local parens_str_count45=0\n\
    \    local parens_str_count46=0\n    local parens_str_count47=0\n    local parens_str_count48=0\n\
    \    local parens_str_count49=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_str=\"\"\n  local level=0\n  local level_str=\"\"\n  local\
    \ level_str_count=0\n  local level_str_count_str=\"\"\n  local level_str_count_str_last=\"\
    \"\n  local level_str_count_str_last_last=\"\"\n  local level_str_count_str_last_last2=\"\
    \"\n  local level_str_count_str_last_last3=\"\"\n  local level_str_count_str_last_last4=\"\
    \"\n  local level_str_count_str_last_last5=\"\"\n  local level_str_count_str_last_last6=\"\
    \"\n  local level_str_count_str_last_last7=\"\"\n  local level_str_count_str_last_last8=\"\
    \"\n  local level_str_count_str_last_last9=\"\"\n  local level_str_count_str_last_last10=\"\
    \"\n  local level_str_count_str_last_last11=\"\"\n  local level_str_count_str_last_last12=\"\
    \"\n  local level_str_count_str_last_last13=\"\"\n  local level_str_count_str_last_last14=\"\
    \"\n  local level_str_count_str_last_last15=\"\"\n  local level_str_count_str_last_last16=\"\
    \"\n  local level_str_count_str_last_last17=\"\"\n  local level_str_count_str_last_last18=\"\
    \"\n  local level_str_count_str_last_last19=\"\"\n  local level_str_count_str_last_last20=\"\
    \"\n  local level_str_count_str_last_last21=\"\"\n  local level_str_count_str_last_last22=\"\
    \"\n  local level_str_count_str_last_last23=\"\"\n  local level_str_count_str_last_last24=\"\
    \"\n  local level_str_count_str_last_last25=\"\"\n  local level_str_count_str_last_last26=\"\
    \"\n  local level_str_count_str_last_last27=\"\"\n  local level_str_count_str_last_last28=\"\
    \"\n  local level_str_count_str_last_last29=\"\"\n  local level_str_count_str_last_last30=\"\
    \"\n  local level_str_count_str_last_last31=\"\"\n  local level_str_count_str_last_last32=\"\
    \"\n  local level_str_count_str_last_last33=\"\"\n  local level_str_count_str_last_last34=\"\
    \"\n  local level_str_count_str_last_last35=\"\"\n  local level_str_count_str_last_last36=\"\
    \"\n  local level_str_count_str_last_last37=\"\"\n  local level_str_count_str_last_last38=\"\
    \"\n  local level_str_count_str_last_last39=\"\"\n  local level_str_count_str_last_last40=\"\
    \"\n  local level_str_count_str_last_last41=\"\"\n  local level_str_count_str_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local paren_level=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    \    local paren_level_str_count\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_string_count=0\n    local paren_group\n    local paren_group_count=0\n\
    \    local paren_group_string=\"\"\n    local paren_group_string_count=0\n   \
    \ local paren_group_level=0\n    local paren_group_level_max=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_level_max_string=\"\
    \"\n    local paren_group_level_max_string_count=0\n    local paren_group_\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_level=0\n    local paren_level_index=0\n\
    \    local paren_level_str=\"\"\n    local paren_level_str_index=0\n    local\
    \ paren_level_str_index2=0\n    local paren_level_str_index3=0\n    local paren_level_str_index4=0\n\
    \    local paren_level_str_index5=0\n    local paren_level_str_index6=0\n    local\
    \ paren_level_str_index7=0\n    local paren_level_str_index8=0\n    local paren_level_str_index9=0\n\
    \    local paren_level_str_index10=0\n    local paren_level_str_index11=0\n  \
    \  local paren_level_str_index12=0\n    local paren_level_str_index13=0\n    local\
    \ paren_level_str_index14=0\n    local paren_level_str_index15=0\n    local paren_level_str_index16=0\n\
    \    local paren_level_str_index17=0\n    local paren_level_str_index18=0\n  \
    \  local paren_level_str_index19=0\n    local paren_level_str_index20=0\n    local\
    \ paren_level_str_index21=0\n    local paren_level_str_index22=0\n    local paren_level_str_index23=0\n\
    \    local paren_level_str_index24=0\n    local paren_level_str_index25=0\n  \
    \  local paren_level_str_index26=0\n    local paren_level_str_index27=0\n    local\
    \ paren_level_str_index28=0\n    local paren_level_str_index29=0\n    local paren_level_str_index30=0\n\
    \    local paren_level_str_index31=0\n    local paren_level_str_index32=0\n  \
    \  local paren_level_str_index33=0\n    local paren_level_str_index34=0\n    local\
    \ paren_level_str_index35=0\n    local paren_level_str_index36=0\n    local paren_level_str_index37=0\n\
    \    local paren_level_str_index38=0\n    local paren_level_str_index39=0\n  \
    \  local paren_level_str_index40=0\n    local paren_level_str_index41=0\n    local\
    \ paren_level_str_index42=0\n    local paren_level_str_index43=0\n    local paren_level_str_index44=0\n\
    \    local paren_level_str_index45=0\n    local paren_level_str_index46=0\n  \
    \  local paren_level_str_index47=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_group=\"\"\n    local max_level_group_level=0\n    local\
    \ max_level_group_level_group=\"\"\n    local max_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group=\"\"\n    local max_level_group_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group_level_group=\"\"\n    local\
    \ max_level_group_level_group_level_group_level_group_level=0\n    local max_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level=0\n\
    \    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group=\"\
    \"\n    local max_level_group_level_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local groups=\"$1\"\n    local max_level=0\n\
    \    local level=0\n    local max_level_str=\"\"\n    local level_str=\"\"\n \
    \   local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    local max_level_str_index=0\n    local level_str_index=0\n\
    \    local max_level_str_index=0\n    local level_str_index=0\n    local max_level_str_index=0\n\
    \    local level_str_index=0\n    \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_depth=0\n    local parens_str_depth_max=0\n    local parens_str_depth_max_str=\"\
    \"\n    local parens_str_depth_max_count=0\n    local parens_str_depth_max_count2=0\n\
    \    local parens_str_depth_max_count3=0\n    local parens_str_depth_max_count4=0\n\
    \    local parens_str_depth_max_count5=0\n    local parens_str_depth_max_count6=0\n\
    \    local parens_str_depth_max_count7=0\n    local parens_str_depth_max_count8=0\n\
    \    local parens_str_depth_max_count9=0\n    local parens_str_depth_max_count10=0\n\
    \    local parens_str_depth_max_count11=0\n    local parens_str_depth_max_count12=0\n\
    \    local parens_str_depth_max_count13=0\n    local parens_str_depth_max_count14=0\n\
    \    local parens_str_depth_max_count15=0\n    local parens_str_depth_max_count16=0\n\
    \    local parens_str_depth_max_count17=0\n    local parens_str_depth_max_count18=0\n\
    \    local parens_str_depth_max_count19=0\n    local parens_str_depth_max_count20=0\n\
    \    local parens_str_depth_max_count21=0\n    local parens_str_depth_max_count22=0\n\
    \    local parens_str_depth_max_count23=0\n    local parens_str_depth_max_count24=0\n\
    \    local parens_str_depth_max_count25=0\n    local parens_str_depth_max_count26=0\n\
    \    local parens_str_depth_max_count27=0\n    local parens_str_depth_max_count28=0\n\
    \    local parens_str_depth_max_count29=0\n    local parens_str_depth_max_count30=0\n\
    \    local parens_str_depth_max_count31=0\n    local parens_str_depth_max_count32=0\n\
    \    local parens_str_depth_max_count33=0\n    local parens_str_depth_max_count34=0\n\
    \    local parens_str_depth_max_count35=0\n    local parens_str_depth_max_count36=0\n\
    \    local parens_str_depth_max_count37=0\n    local parens_str_depth_max_count38=0\n\
    \    local parens_str_depth_max_count39=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_string=$1\n\
    \    local parens_string_count=0\n    local parens_string_tmp=\"\"\n    local\
    \ parens_string_tmp_count=0\n    local parens_string_tmp2=\"\"\n    local parens_string_tmp2_count=0\n\
    \    local parens_string_tmp3=\"\"\n    local parens_string_tmp3_count=0\n   \
    \ local parens_string_tmp4=\"\"\n    local parens_string_tmp4_count=0\n    local\
    \ parens_string_tmp5=\"\"\n    local parens_string_tmp5_count=0\n    local parens_string_tmp6=\"\
    \"\n    local parens_string_tmp6_count=0\n    local parens_string_tmp7=\"\"\n\
    \    local parens_string_tmp7_count=0\n    local parens_string_tmp8=\"\"\n   \
    \ local parens_string_tmp8_count=0\n    local parens_string_tmp9=\"\"\n    local\
    \ parens_string_tmp9_count=0\n    local parens_string_tmp10=\"\"\n    local parens_string_tmp10_count=0\n\
    \    local parens_string_tmp11=\"\"\n    local parens_string_tmp11_count=0\n \
    \   local parens_string_tmp12=\"\"\n    local parens_string_tmp12_count=0\n  \
    \  local parens_string_tmp13=\"\"\n    local parens_string_tmp13_count=0\n   \
    \ local parens_string_tmp14=\"\"\n    local parens_string_tmp14_count=0\n    local\
    \ parens_string_tmp15=\"\"\n    local parens_string_tmp15_count=0\n    local parens_string_tmp16=\"\
    \"\n    local parens_string_tmp16_count=0\n    local parens_string_tmp17=\"\"\n\
    \    local parens_string_tmp17_count=0\n    local parens_string_tmp18=\"\"\n \
    \   local parens_string_tmp18_count=0\n    local parens_string_tmp19=\"\"\n  \
    \  local parens_string_tmp19_count=0\n    local parens_string_tmp20=\"\"\n   \
    \ local parens_string_tmp20_count=0\n    local parens_string_tmp21=\"\"\n    local\
    \ parens_string_tmp21_count=0\n    local parens_string_tmp22=\"\"\n    local parens_string_tmp22_count=0\n\
    \    local parens_string_tmp23=\"\"\n    local parens_string_tmp23_count=0\n \
    \   local parens_string_tmp24=\"\"\n    local parens_string_tmp24_count=0\n  \
    \  local parens_string_tmp25=\"\"\n    local parens_string_tmp25_count=0\n   \
    \ local parens_string_tmp26=\"\"\n    local parens_string_tmp\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group\n    local\
    \ paren_group_level\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_counts_str\n    local paren_group_counts_strs\n    local\
    \ paren_group_counts_strs_str\n    local paren_group_counts_strs_strs\n    local\
    \ paren_group_counts_strs_strs_str\n    local paren_group_counts_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_str\n    local paren_group_counts_strs_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_strs_str\n    local paren_group_counts_strs_strs_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_str\n    local paren_group_counts_strs_strs_strs_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_str\n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_str\n    local\
    \ paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs\n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_str\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs\n \
    \   local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local level_count=0\n\
    \    local level_str=\"\"\n    local level_str_count=0\n    local level_str_str=\"\
    \"\n    local level=0\n    local level_str=\"\"\n    local level_str_str=\"\"\n\
    \    local level_str_str_count=0\n    local level_str_str_str=\"\"\n    local\
    \ level_str_str_str_count=0\n    local level_str_str_str_str=\"\"\n    local level_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_count=0\n    local level_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n  \
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n \
    \   local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level_string=\"\"\n    local level_num=0\n\
    \    local level_num_string=\"\"\n    local level_num_string2=\"\"\n    local\
    \ level_num_string3=\"\"\n    local level_num_string4=\"\"\n    local level_num_string5=\"\
    \"\n    local level_num_string6=\"\"\n    local level_num_string7=\"\"\n    local\
    \ level_num_string8=\"\"\n    local level_num_string9=\"\"\n    local level_num_string10=\"\
    \"\n    local level_num_string11=\"\"\n    local level_num_string12=\"\"\n   \
    \ local level_num_string13=\"\"\n    local level_num_string14=\"\"\n    local\
    \ level_num_string15=\"\"\n    local level_num_string16=\"\"\n    local level_num_string17=\"\
    \"\n    local level_num_string18=\"\"\n    local level_num_string19=\"\"\n   \
    \ local level_num_string20=\"\"\n    local level_num_string21=\"\"\n    local\
    \ level_num_string22=\"\"\n    local level_num_string23=\"\"\n    local level_num_string24=\"\
    \"\n    local level_num_string25=\"\"\n    local level_num_string26=\"\"\n   \
    \ local level_num_string27=\"\"\n    local level_num_string28=\"\"\n    local\
    \ level_num_string29=\"\"\n    local level_num_string30=\"\"\n    local level_num_string31=\"\
    \"\n    local level_num_string32=\"\"\n    local level_num_string33=\"\"\n   \
    \ local level_num_string34=\"\"\n    local level_num_string35=\"\"\n    local\
    \ level_num_string36=\"\"\n    local level_num_string37=\"\"\n    local level_num_string38=\"\
    \"\n    local level_num_string39=\"\"\n    local level_num_string40=\"\"\n   \
    \ local level_num_string41=\"\"\n    local level_num_string42=\"\"\n    local\
    \ level_num_string43=\"\"\n    local level_num_string44=\"\"\n    local level_num_string45=\"\
    \"\n    local level_num_string46=\"\"\n    local level_num_string47=\"\"\n   \
    \ local level_num_string48=\"\"\n    local level_num_string49=\"\"\n    local\
    \ level_num_string50=\"\"\n    local level_num_string51=\"\"\n    local level_num_string52=\"\
    \"\n    local level_num_string53=\"\"\n    local level_num_string54=\"\"\n   \
    \ local level_num_string55=\"\"\n    local level_num_string56=\"\"\n    local\
    \ level_num_string57=\"\"\n    local level_num_string58=\"\"\n    local level_num_string59=\"\
    \"\n    local level_num_string60=\"\"\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_level_str=\"\
    \"\n    local paren_level_str1=\"\"\n    local paren_level_str2=\"\"\n    local\
    \ paren_level_str3=\"\"\n    local paren_level_str4=\"\"\n    local paren_level_str5=\"\
    \"\n    local paren_level_str6=\"\"\n    local paren_level_str7=\"\"\n    local\
    \ paren_level_str8=\"\"\n    local paren_level_str9=\"\"\n    local paren_level_str10=\"\
    \"\n    local paren_level_str11=\"\"\n    local paren_level_str12=\"\"\n    local\
    \ paren_level_str13=\"\"\n    local paren_level_str14=\"\"\n    local paren_level_str15=\"\
    \"\n    local paren_level_str16=\"\"\n    local paren_level_str17=\"\"\n    local\
    \ paren_level_str18=\"\"\n    local paren_level_str19=\"\"\n    local paren_level_str20=\"\
    \"\n    local paren_level_str21=\"\"\n    local paren_level_str22=\"\"\n    local\
    \ paren_level_str23=\"\"\n    local paren_level_str24=\"\"\n    local paren_level_str25=\"\
    \"\n    local paren_level_str26=\"\"\n    local paren_level_str27=\"\"\n    local\
    \ paren_level_str28=\"\"\n    local paren_level_str29=\"\"\n    local paren_level_str30=\"\
    \"\n    local paren_level_str31=\"\"\n    local paren_level_str32=\"\"\n    local\
    \ paren_level_str33=\"\"\n    local paren_level_str34=\"\"\n    local paren_level_str35=\"\
    \"\n    local paren_level_str36=\"\"\n    local paren_level_str37=\"\"\n    local\
    \ paren_level_str38=\"\"\n    local paren_level_str39=\"\"\n    local paren_level_str40=\"\
    \"\n    local paren_level_str41=\"\"\n    local paren_level_str42=\"\"\n    local\
    \ paren_level_str43=\"\"\n    local paren_level_str44=\"\"\n    local paren_level_str45=\"\
    \"\n    local paren_level_str46=\"\"\n    local paren_level_str47=\"\"\n    local\
    \ paren_level_str48=\"\"\n    local paren_level_str49=\"\"\n    local paren_level_str50=\"\
    \"\n    local paren_level_str51=\"\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local paren_level=0\n    local paren_level_string=\"\
    \"\n    local paren_level_str=\"\"\n    local paren_level_str1=\"\"\n    local\
    \ paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local paren_level_str4=\"\
    \"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\"\n    local\
    \ paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local paren_level_str9=\"\
    \"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\"\n    local\
    \ paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local paren_level_str14=\"\
    \"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\"\n    local\
    \ paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local paren_level_str19=\"\
    \"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\"\n    local\
    \ paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local paren_level_str24=\"\
    \"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\"\n    local\
    \ paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local paren_level_str29=\"\
    \"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\"\n    local\
    \ paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local paren_level_str34=\"\
    \"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\"\n    local\
    \ paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local paren_level_str39=\"\
    \"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\"\n    local\
    \ paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local paren_level_str44=\"\
    \"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\"\n    local\
    \ paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local paren_level_str49=\"\
    \"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\"\n    local\
    \ paren_level_str52=\"\"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_str=\"\"\n  local max_level_str_index=0\n  local paren_groups_index=0\n\
    \  local paren_groups_str=\"\"\n  local paren_groups_str_len=0\n  local paren_groups_str_len_index=0\n\
    \  local paren_groups_str_len_count=0\n  local paren_groups_str_len_count_index=0\n\
    \  local paren_groups_str_len_count_max=0\n  local paren_groups_str_len_count_max_index=0\n\
    \  local paren_groups_str_len_count_max_count=0\n  local paren_groups_str_len_count_max_count_index=0\n\
    \  local paren_groups_str_len_count_max_count_index=0\n  local max_level_str_len=0\n\
    \  local max_level_str_len_index=0\n  local max_level_str_len_count=0\n  local\
    \ max_level_str_len_count_index=0\n  local max_level_str_len_count_max=0\n  local\
    \ max_level_str_len_count_max_index=0\n  local max_level_str_len_count_max_count=0\n\
    \  local max_level_str_len_count_max_count_index=0\n  local max_level_str_len_count_max_count_index=0\n\
    \  local max_level_str_len_count_max_count_index_max=0\n  local max_level_str_len_count_max_count_index_max_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count=0\n  local max_level_str_len_count_max_count_index_max_count_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index=0\n  local max_level_str_len_count_max_count_index_max_count_index_max=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index_max=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index_max_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index_max_count_index=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index_max_count_index_max=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_index_max_count_index_max_count_index_max_count=0\n\
    \  local max_level_str_len_count_max_count_index_max_count_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local parens_str=\"\"\n    local parens_str_count=0\n    local parens_str_count_str=\"\
    \"\n    local parens_str_count_str_count=0\n    local parens_str_count_str_count_str=\"\
    \"\n    local parens_str_count_str_count_str_str=\"\"\n    local parens_str_count_str_count_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str=\"\"\n    local parens_str_count_str_count_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str=\"\"\n    local parens_str_count_str_count_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str=\"\"\n    local parens_str_count_str_count_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str=\"\"\n  \
    \  local parens_str_count_str_count_str_str_str_str_str_str_str_str=\"\"\n   \
    \ local parens_str_count_str_count_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\"\n  \
    \  local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level_str=\"\"\n    local level_num=0\n\
    \    local level_num_str=\"\"\n    local level_num_str_tmp=\"\"\n    local level_num_str_tmp2=\"\
    \"\n    local level_num_str_tmp3=\"\"\n    local level_num_str_tmp4=\"\"\n   \
    \ local level_num_str_tmp5=\"\"\n    local level_num_str_tmp6=\"\"\n    local\
    \ level_num_str_tmp7=\"\"\n    local level_num_str_tmp8=\"\"\n    local level_num_str_tmp9=\"\
    \"\n    local level_num_str_tmp10=\"\"\n    local level_num_str_tmp11=\"\"\n \
    \   local level_num_str_tmp12=\"\"\n    local level_num_str_tmp13=\"\"\n    local\
    \ level_num_str_tmp14=\"\"\n    local level_num_str_tmp15=\"\"\n    local level_num_str_tmp16=\"\
    \"\n    local level_num_str_tmp17=\"\"\n    local level_num_str_tmp18=\"\"\n \
    \   local level_num_str_tmp19=\"\"\n    local level_num_str_tmp20=\"\"\n    local\
    \ level_num_str_tmp21=\"\"\n    local level_num_str_tmp22=\"\"\n    local level_num_str_tmp23=\"\
    \"\n    local level_num_str_tmp24=\"\"\n    local level_num_str_tmp25=\"\"\n \
    \   local level_num_str_tmp26=\"\"\n    local level_num_str_tmp27=\"\"\n    local\
    \ level_num_str_tmp28=\"\"\n    local level_num_str_tmp29=\"\"\n    local level_num_str_tmp30=\"\
    \"\n    local level_num_str_tmp31=\"\"\n    local level_num_str_tmp32=\"\"\n \
    \   local level_num_str_tmp33=\"\"\n    local level_num_str_tmp34=\"\"\n    local\
    \ level_num_str_tmp35=\"\"\n    local level_num_str_tmp36=\"\"\n    local level_num_str_tmp37=\"\
    \"\n    local level_num_str_tmp38=\"\"\n    local level_num_str_tmp39=\"\"\n \
    \   local level_num_str_tmp40=\"\"\n    local level_num_str_tmp41=\"\"\n    local\
    \ level_num_str_tmp42=\"\"\n    local level_num_str_tmp43=\"\"\n    local level_num_str_tmp44=\"\
    \"\n    local level_num_str_tmp45=\"\"\n    local level_num_str_tmp46=\"\"\n \
    \   local level_num_str_tmp47=\"\"\n    local level_num_str_tmp48=\"\"\n    local\
    \ level_num_str_tmp49=\"\"\n    local level_num_str_tmp50=\"\"\n    local level_num_str_tmp51=\"\
    \"\n    local level_num_str_tmp52=\"\"\n    local level_num_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local level=0\n    local level_index=0\n   \
    \ local paren_group_index=0\n    local paren_group\n    local paren_group_level\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index2\n    local paren_group_level_length_index3\n\
    \    local paren_group_level_length_index4\n    local paren_group_level_length_index5\n\
    \    local paren_group_level_length_index6\n    local paren_group_level_length_index7\n\
    \    local paren_group_level_length_index8\n    local paren_group_level_length_index9\n\
    \    local paren_group_level_length_index10\n    local paren_group_level_length_index11\n\
    \    local paren_group_level_length_index12\n    local paren_group_level_length_index13\n\
    \    local paren_group_level_length_index14\n    local paren_group_level_length_index15\n\
    \    local paren_group_level_length_index16\n    local paren_group_level_length_index17\n\
    \    local paren_group_level_length_index18\n    local paren_group_level_length_index19\n\
    \    local paren_group_level_length_index20\n    local paren_group_level_length_index21\n\
    \    local paren_group_level_length_index22\n    local paren_group_level_length_index23\n\
    \    local paren_group_level_length_index24\n    local paren_group_level_length_index25\n\
    \    local paren_group_level_length_index26\n    local paren_group_level_length_index27\n\
    \    local paren_group_level_length_index28\n    local paren_group_level_length_index29\n\
    \    local paren_group_level_length_index30\n    local paren_group_level_length_index31\n\
    \    local paren_group_level_length_index32\n    local paren_group_level_length_index33\n\
    \    local paren_group_level_length_index34\n    local paren_group_level_length_index35\n\
    \    local paren_group_level_length_index36\n    local paren_group_level_length_index37\n\
    \    local paren_group_level_length_index38\n    local paren_group_level_length_index39\n\
    \    local paren_group_level_length_index40\n    local paren_group_level_length_index41\n\
    \    local paren_group_level_length_index42\n    local paren_group_level_length_index43\n\
    \    local paren_group_level_length_index44\n    local paren_group_level_length_index45\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local paren_levels=()\n    local paren_level_counts=()\n\
    \    local paren_level_counts_string=''\n    local paren_level_counts_string2=''\n\
    \    local paren_level_counts_string3=''\n    local paren_level_counts_string4=''\n\
    \    local paren_level_counts_string5=''\n    local paren_level_counts_string6=''\n\
    \    local paren_level_counts_string7=''\n    local paren_level_counts_string8=''\n\
    \    local paren_level_counts_string9=''\n    local paren_level_counts_string10=''\n\
    \    local paren_level_counts_string11=''\n    local paren_level_counts_string12=''\n\
    \    local paren_level_counts_string13=''\n    local paren_level_counts_string14=''\n\
    \    local paren_level_counts_string15=''\n    local paren_level_counts_string16=''\n\
    \    local paren_level_counts_string17=''\n    local paren_level_counts_string18=''\n\
    \    local paren_level_counts_string19=''\n    local paren_level_counts_string20=''\n\
    \    local paren_level_counts_string21=''\n    local paren_level_counts_string22=''\n\
    \    local paren_level_counts_string23=''\n    local paren_level_counts_string24=''\n\
    \    local paren_level_counts_string25=''\n    local paren_level_counts_string26=''\n\
    \    local paren_level_counts_string27=''\n    local paren_level_counts_string28=''\n\
    \    local paren_level_counts_string29=''\n    local paren_level_counts_string30=''\n\
    \    local paren_level_counts_string31=''\n    local paren_level_counts_string32=''\n\
    \    local paren_level_counts_string33=''\n    local paren_level_counts_string34=''\n\
    \    local paren_level_counts_string35=''\n    local paren_level_counts_string36=''\n\
    \    local paren_level_counts_string37=''\n    local paren_level_counts_string38=''\n\
    \    local paren_level_counts_string39=''\n    local paren_level_counts_string40=''\n\
    \    local paren_level_counts_string41=''\n    local paren_level_counts_string42=''\n\
    \    local paren_level_counts_string43=''\n    local \n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_char=\"\"\n    local level_char_count=0\n    local level_char_count2=0\n\
    \    local level_char_count3=0\n    local level_char_count4=0\n    local level_char_count5=0\n\
    \    local level_char_count6=0\n    local level_char_count7=0\n    local level_char_count8=0\n\
    \    local level_char_count9=0\n    local level_char_count10=0\n    local level_char_count11=0\n\
    \    local level_char_count12=0\n    local level_char_count13=0\n    local level_char_count14=0\n\
    \    local level_char_count15=0\n    local level_char_count16=0\n    local level_char_count17=0\n\
    \    local level_char_count18=0\n    local level_char_count19=0\n    local level_char_count20=0\n\
    \    local level_char_count21=0\n    local level_char_count22=0\n    local level_char_count23=0\n\
    \    local level_char_count24=0\n    local level_char_count25=0\n    local level_char_count26=0\n\
    \    local level_char_count27=0\n    local level_char_count28=0\n    local level_char_count29=0\n\
    \    local level_char_count30=0\n    local level_char_count31=0\n    local level_char_count32=0\n\
    \    local level_char_count33=0\n    local level_char_count34=0\n    local level_char_count35=0\n\
    \    local level_char_count36=0\n    local level_char_count37=0\n    local level_char_count38=0\n\
    \    local level_char_count39=0\n    local level_char_count40=0\n    local level_char_count41=0\n\
    \    local level_char_count42=0\n    local level_char_count43=0\n    local level_char_count44=0\n\
    \    local level_char_count45=0\n    local level_char_count46=0\n    local level_char_count47=0\n\
    \    local level_char_count48=0\n    local level_char_count49=0\n    local level_char_count50=0\n\
    \    local level_char_count51=0\n    local level_char_count52=0\n    local level_char_count53=0\n\
    \    local level_char_count54=0\n    local level_char_count55=0\n    local level_char_count56=0\n\
    \    local level_char_count57=0\n    local level_char_count58=0\n    local level_char_count59=0\n\
    \    local level_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local level_count=0\n\
    \    local level_str=\"\"\n    local level_str_count=0\n    local level_str_str=\"\
    \"\n    local level_str_str_count=0\n    local level_str_str_str=\"\"\n    local\
    \ level_str_str_str_count=0\n    local level_str_str_str_str=\"\"\n    local level_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_levels_index=0\n\
    \    local paren_levels_string=\"\"\n    local paren_levels_string_index=0\n \
    \   local paren_levels_string_index2=0\n    local paren_levels_string_index3=0\n\
    \    local paren_levels_string_index4=0\n    local paren_levels_string_index5=0\n\
    \    local paren_levels_string_index6=0\n    local paren_levels_string_index7=0\n\
    \    local paren_levels_string_index8=0\n    local paren_levels_string_index9=0\n\
    \    local paren_levels_string_index10=0\n    local paren_levels_string_index11=0\n\
    \    local paren_levels_string_index12=0\n    local paren_levels_string_index13=0\n\
    \    local paren_levels_string_index14=0\n    local paren_levels_string_index15=0\n\
    \    local paren_levels_string_index16=0\n    local paren_levels_string_index17=0\n\
    \    local paren_levels_string_index18=0\n    local paren_levels_string_index19=0\n\
    \    local paren_levels_string_index20=0\n    local paren_levels_string_index21=0\n\
    \    local paren_levels_string_index22=0\n    local paren_levels_string_index23=0\n\
    \    local paren_levels_string_index24=0\n    local paren_levels_string_index25=0\n\
    \    local paren_levels_string_index26=0\n    local paren_levels_string_index27=0\n\
    \    local paren_levels_string_index28=0\n    local paren_levels_string_index29=0\n\
    \    local paren_levels_string_index30=0\n    local paren_levels_string_index31=0\n\
    \    local paren_levels_string_index32=0\n    local paren_levels_string_index33=0\n\
    \    local paren_levels_string_index34=0\n    local paren_levels_string_index35=0\n\
    \    local paren_levels_string_index36=0\n    local paren_levels_string_index37=0\n\
    \    local paren_levels_string_index38=0\n    local paren_levels_string_index39=0\n\
    \    local paren_levels_string_index40=0\n    local paren_levels_string_index41=0\n\
    \    local paren_levels_string_index42=0\n    local paren_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_group\n    local paren_group_size\n    local\
    \ max_level_str\n    local level_str\n    local paren_group_str\n    local paren_group_size_str\n\
    \    local max_level_int\n    local level_int\n    local paren_group_int\n   \
    \ local paren_group_size_int\n    local max_level_ints\n    local level_ints\n\
    \    local paren_group_ints\n    local paren_group_size_ints\n    local max_level_ints_str\n\
    \    local level_ints_str\n    local paren_group_ints_str\n    local paren_group_size_ints_str\n\
    \    local max_level_ints_int\n    local level_ints_int\n    local paren_group_ints_int\n\
    \    local paren_group_size_ints_int\n    local max_level_ints_ints\n    local\
    \ level_ints_ints\n    local paren_group_ints_ints\n    local paren_group_size_ints_ints\n\
    \    local max_level_ints_ints_str\n    local level_ints_ints_str\n    local paren_group_ints_ints_str\n\
    \    local paren_group_size_ints_ints_str\n    local max_level_ints_ints_int\n\
    \    local level_ints_ints_int\n    local paren_group_ints_ints_int\n    local\
    \ paren_group_size_ints_ints_int\n    local max_level_ints_ints_ints\n    local\
    \ level_ints_ints_ints\n    local paren_group_ints_ints_ints\n    local paren_group_size_ints_ints_ints\n\
    \    local max_level_ints_ints_ints_str\n    local level_ints_ints_ints_str\n\
    \    local paren_group_ints_ints_ints_str\n    local paren_group_size_ints_ints_ints_str\n\
    \    local max_level_ints_ints_ints_int\n    local level_ints_ints_ints_int\n\
    \    local paren_group_ints_ints_ints_int\n    local paren_group_size_ints_ints_ints_int\n\
    \    local max_level_ints_ints_ints_ints\n    local level_ints_ints_ints_ints\n\
    \    local paren_group_ints_ints_ints_ints\n    local paren_group_size_ints_ints_ints_ints\n\
    \    local max_level_ints_ints_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local level_count=0\n    local level_str=\"\"\
    \n    local level_str_count=0\n    local level_str_count2=0\n    local level_str_count3=0\n\
    \    local level_str_count4=0\n    local level_str_count5=0\n    local level_str_count6=0\n\
    \    local level_str_count7=0\n    local level_str_count8=0\n    local level_str_count9=0\n\
    \    local level_str_count10=0\n    local level_str_count11=0\n    local level_str_count12=0\n\
    \    local level_str_count13=0\n    local level_str_count14=0\n    local level_str_count15=0\n\
    \    local level_str_count16=0\n    local level_str_count17=0\n    local level_str_count18=0\n\
    \    local level_str_count19=0\n    local level_str_count20=0\n    local level_str_count21=0\n\
    \    local level_str_count22=0\n    local level_str_count23=0\n    local level_str_count24=0\n\
    \    local level_str_count25=0\n    local level_str_count26=0\n    local level_str_count27=0\n\
    \    local level_str_count28=0\n    local level_str_count29=0\n    local level_str_count30=0\n\
    \    local level_str_count31=0\n    local level_str_count32=0\n    local level_str_count33=0\n\
    \    local level_str_count34=0\n    local level_str_count35=0\n    local level_str_count36=0\n\
    \    local level_str_count37=0\n    local level_str_count38=0\n    local level_str_count39=0\n\
    \    local level_str_count40=0\n    local level_str_count41=0\n    local level_str_count42=0\n\
    \    local level_str_count43=0\n    local level_str_count44=0\n    local level_str_count45=0\n\
    \    local level_str_count46=0\n    local level_str_count47=0\n    local level_str_count48=0\n\
    \    local level_str_count49=0\n    local level_str_count50=0\n    local level_str_count51=0\n\
    \    local level_str_count52=0\n    local level_str_count53=0\n    local level_str_count54=0\n\
    \    local level_str_count55=0\n    local level_str_count56=0\n    local level_str_count57=0\n\
    \    local level_str_count58=0\n    local level_str_count59=0\n    local level_str_count60=0\n\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_level=0\n    local paren_group\n    local\
    \ paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local parens_str_reversed=\"${parens_str//([()]\\()/\\1/g}\"\n    local parens_str_reversed_reversed=\"\
    ${parens_str_reversed//(\\()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed//(\\()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed//(\\()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed//(\\()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reversed//(\\()/\\1/g}\"\n  \
    \  local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reversed_reversed//(\\()/\\1/g}\"\
    \n    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed//(\\\
    ()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//(\\\
    ()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//(\\\
    ()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//(\\\
    ()/\\1/g}\"\n    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${parens_str_reversed_reversed_reversed_reversed_reverse\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplhk2cfpw.sh: line 37: unexpected EOF while looking for matching
    `"''

    /tmp/tmplhk2cfpw.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_string=$1\n\
    \    local parens_strings=()\n    local parens_strings_len=0\n    local parens_strings_lens=()\n\
    \    local parens_strings_lens_len=0\n    local parens_strings_lens_lens=()\n\
    \    local parens_strings_lens_lens_len=0\n    local parens_strings_lens_lens_lens=()\n\
    \    local parens_strings_lens_lens_lens_len=0\n    local parens_strings_lens_lens_lens_lens=()\n\
    \    local parens_strings_lens_lens_lens_lens_len=0\n    local parens_strings_lens_lens_lens_lens_lens=()\n\
    \    local parens_strings_lens_lens_lens_lens_lens_len=0\n    local parens_strings_lens_lens_lens_lens_lens_lens=()\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_len=0\n    local parens_strings_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_len=0\n    local\
    \ parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local parens_strings_lens_lens_lens_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_string=\"\"\n  local paren_level=0\n  local paren_level_string=\"\
    \"\n  local paren_level_char=\"\"\n  local paren_level_char_count=0\n  local paren_level_char_counts=()\n\
    \  local paren_level_char_counts_string=\"\"\n  local paren_level_char_counts_strings=()\n\
    \  local paren_level_char_counts_strings_string=\"\"\n  local paren_level_char_counts_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_string=\"\"\n  local paren_level_char_counts_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_string=\"\"\n  local\
    \ paren_level_char_counts_strings_strings_strings_strings=()\n  local paren_level_char_counts_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_level_char_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_level_char_counts_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local level=0\n    local level_index=0\n   \
    \ local paren_group_index=0\n    local paren_group\n    local paren_group_level\n\
    \    local paren_group_level_index\n    local paren_group_level_length\n    local\
    \ paren_group_level_length_index\n    local paren_group_level_length_count\n \
    \   local paren_group_level_length\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local level_count=0\n    local level_chars=\"\
    \"\n    local level_char_count=0\n    local level_char_index=0\n    local level_char=\"\
    \"\n    local level_char_index2=0\n    local level_char2=\"\"\n    local level_char_index3=0\n\
    \    local level_char3=\"\"\n    local level_char_index4=0\n    local level_char4=\"\
    \"\n    local level_char_index5=0\n    local level_char5=\"\"\n    local level_char_index6=0\n\
    \    local level_char6=\"\"\n    local level_char_index7=0\n    local level_char7=\"\
    \"\n    local level_char_index8=0\n    local level_char8=\"\"\n    local level_char_index9=0\n\
    \    local level_char9=\"\"\n    local level_char_index10=0\n    local level_char10=\"\
    \"\n    local level_char_index11=0\n    local level_char11=\"\"\n    local level_char_index12=0\n\
    \    local level_char12=\"\"\n    local level_char_index13=0\n    local level_char13=\"\
    \"\n    local level_char_index14=0\n    local level_char14=\"\"\n    local level_char_index15=0\n\
    \    local level_char15=\"\"\n    local level_char_index16=0\n    local level_char16=\"\
    \"\n    local level_char_index17=0\n    local level_char17=\"\"\n    local level_char_index18=0\n\
    \    local level_char18=\"\"\n    local level_char_index19=0\n    local level_char19=\"\
    \"\n    local level_char_index20=0\n    local level_char20=\"\"\n    local level_char_index21=0\n\
    \    local level_char21=\"\"\n    local level_char_index22=0\n    local level_char22=\"\
    \"\n    local level_char_index23=0\n    local level_char23=\"\"\n    local level_char_index24=0\n\
    \    local level_char24=\"\"\n    local level_char_index25=0\n    local level_char25=\"\
    \"\n    local level_char_index26=0\n    local level_char26=\"\"\n    local level_char_index27=0\n\
    \    local level_char27=\"\"\n    local level_char_index28=0\n    local level_char28=\"\
    \"\n    local level_char_index29=0\n    local level_char29=\"\"\n    local level_char_index30=0\n\
    \    local level_char30=\"\"\n    local level_char_index31=0\n    local level_char31=\"\
    \"\n    local level_char_index32=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_array=()\n\
    \    local paren_level=0\n    local paren_levels=()\n    local paren_levels_array=()\n\
    \    local paren_level_max=0\n    local paren_level_max_array=()\n    local paren_level_max_index=0\n\
    \    local paren_level_max_index_array=()\n    local paren_level_max_string=\"\
    \"\n    local paren_level_max_string_array=()\n    local paren_level_max_string_index=0\n\
    \    local paren_level_max_string_index_array=()\n    local paren_level_max_string_length=0\n\
    \    local paren_level_max_string_length_array=()\n    local paren_level_max_string_length_index=0\n\
    \    local paren_level_max_string_length_index_array=()\n    local paren_level_max_string_length_string=\"\
    \"\n    local paren_level_max_string_length_string_array=()\n    local paren_level_max_string_length_string_index=0\n\
    \    local paren_level_max_string_length_string_index_array=()\n    local paren_level_max_string_length_string_length=0\n\
    \    local paren_level_max_string_length_string_length_array=()\n    local paren_level_max_string_length_string_length_index=0\n\
    \    local paren_level_max_string_length_string_length_index_array=()\n    local\
    \ paren_level_max_string_length_string_length_string=\"\"\n    local paren_level_max_string_length_string_length_string_array=()\n\
    \    local paren_level_max_string_length_string_length_string_index=0\n    local\
    \ paren_level_max_string_length_string_length_string_index_array=()\n    local\
    \ paren_level_max_string_length_string_length_string_length=0\n    local paren_level_max_string_length_string_length_string_length_array=()\n\
    \    local paren_level_max_string_length_string_length_string_length_index=0\n\
    \    local paren_level_max_string_length_string_length_string_length_index_array=()\n\
    \    local paren_level_max_string_length_string_length_string_length_string=\"\
    \"\n    local paren_level_max_string_length_string_length_string_length_string_array=()\n\
    \    local paren_level_max_string_length_string_length_string_length_string_index=0\n\
    \    local paren_level_max_string_length_string_length_string_length_string_index_array=()\n\
    \    local paren_level_max_string_length_string_length_string_length_string_length=0\n\
    \    local paren_level_max_string_length_string_length_string_length_string_length_array=()\n\
    \    local paren_level_max_string_length_string_length_string_length_string_length_index=0\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local parens_str=\"\"\n    local parens_str_level=0\n    local parens_str_level_str=\"\
    \"\n    local parens_str_level_str_count=0\n    local parens_str_level_str_count_str=\"\
    \"\n    local parens_str_level_str_count_str_str=\"\"\n    local parens_str_level_str_count_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str=\"\"\n    local parens_str_level_str_count_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_level_str_count_str_str_str_str_str_str_str=\"\"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_index=0\n  local paren_levels=()\n  local paren_level_index=0\n\
    \  local paren_level\n  local paren_level_count\n  local paren_level_str\n  local\
    \ paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \  local paren_level_str_count\n  local paren_level_str_index\n  local paren_level_str_count\n\
    \  local paren_level_str_index\n  local paren_level_str_count\n  local paren_level_str_index\n\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local level_count=0\n    local level_groups=()\n\
    \    local level_group_count=0\n    local level_group_str=\"\"\n    local level_group_str_count=0\n\
    \    local level_group_str_count2=0\n    local level_group_str_count3=0\n    local\
    \ level_group_str_count4=0\n    local level_group_str_count5=0\n    local level_group_str_count6=0\n\
    \    local level_group_str_count7=0\n    local level_group_str_count8=0\n    local\
    \ level_group_str_count9=0\n    local level_group_str_count10=0\n    local level_group_str_count11=0\n\
    \    local level_group_str_count12=0\n    local level_group_str_count13=0\n  \
    \  local level_group_str_count14=0\n    local level_group_str_count15=0\n    local\
    \ level_group_str_count16=0\n    local level_group_str_count17=0\n    local level_group_str_count18=0\n\
    \    local level_group_str_count19=0\n    local level_group_str_count20=0\n  \
    \  local level_group_str_count21=0\n    local level_group_str_count22=0\n    local\
    \ level_group_str_count23=0\n    local level_group_str_count24=0\n    local level_group_str_count25=0\n\
    \    local level_group_str_count26=0\n    local level_group_str_count27=0\n  \
    \  local level_group_str_count28=0\n    local level_group_str_count29=0\n    local\
    \ level_group_str_count30=0\n    local level_group_str_count31=0\n    local level_group_str_count32=0\n\
    \    local level_group_str_count33=0\n    local level_group_str_count34=0\n  \
    \  local level_group_str_count35=0\n    local level_group_str_count36=0\n    local\
    \ level_group_str_count37=0\n    local level_group_str_count38=0\n    local level_group_str_count39=0\n\
    \    local level_group_str_count40=0\n    local level_group_str_count41=0\n  \
    \  local level_group_str_count42=0\n    local level_group_str_count43=0\n    local\
    \ level_group_str_count44=0\n    local level_group_str_count45=0\n    local level_group_str_count46=0\n\
    \    local level_group_str_count47=0\n    local level_group_str_count48=0\n  \
    \  local level_group_str_count49=0\n    local level_group_str_count50=0\n    local\
    \ level_group_str_count51=0\n    local level_group_str_count\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_level_index=0\n\
    \    local paren_level_string=\"\"\n    local paren_level_string_count=0\n   \
    \ local paren_level_char_count=0\n    local paren_level_char_index=0\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char_index=0\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local\
    \ paren_level_char=\"\"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\
    \"\n    local paren_level_char=\"\"\n    local paren_level_char=\"\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local level=0\n    local paren_group\n    local paren_group_level\n    local\
    \ paren_group_count\n    local paren_group_count_max\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=${#paren_groups}\n\
    \    local paren_groups_str=\"\"\n    local paren_groups_str_count=0\n    local\
    \ paren_groups_str_len=0\n    local paren_groups_str_len_count=0\n    local paren_groups_str_len_max=0\n\
    \    local paren_groups_str_len_max_count=0\n    local paren_groups_str_len_max_index=0\n\
    \    local paren_groups_str_len_max_index2=0\n    local paren_groups_str_len_max_index3=0\n\
    \    local paren_groups_str_len_max_index4=0\n    local paren_groups_str_len_max_index5=0\n\
    \    local paren_groups_str_len_max_index6=0\n    local paren_groups_str_len_max_index7=0\n\
    \    local paren_groups_str_len_max_index8=0\n    local paren_groups_str_len_max_index9=0\n\
    \    local paren_groups_str_len_max_index10=0\n    local paren_groups_str_len_max_index11=0\n\
    \    local paren_groups_str_len_max_index12=0\n    local paren_groups_str_len_max_index13=0\n\
    \    local paren_groups_str_len_max_index14=0\n    local paren_groups_str_len_max_index15=0\n\
    \    local paren_groups_str_len_max_index16=0\n    local paren_groups_str_len_max_index17=0\n\
    \    local paren_groups_str_len_max_index18=0\n    local paren_groups_str_len_max_index19=0\n\
    \    local paren_groups_str_len_max_index20=0\n    local paren_groups_str_len_max_index21=0\n\
    \    local paren_groups_str_len_max_index22=0\n    local paren_groups_str_len_max_index23=0\n\
    \    local paren_groups_str_len_max_index24=0\n    local paren_groups_str_len_max_index25=0\n\
    \    local paren_groups_str_len_max_index26=0\n    local paren_groups_str_len_max_index27=0\n\
    \    local paren_groups_str_len_max_index28=0\n    local paren_groups_str_len_max_index29=0\n\
    \    local paren_groups_str_len_max_index30=0\n    local paren_groups_str_len_max_index31=0\n\
    \    local paren_groups_str_len_max_index32=0\n    local paren_groups_str_len_max_index33=0\n\
    \    local paren_groups_str_len_max_index34=0\n    local paren_groups_str_len_max_index35=0\n\
    \    local paren_groups_str_len_max_index36=0\n    local paren\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_count=${#paren_groups}\n\
    \    local paren_groups_array=()\n    local paren_groups_array_count=${#paren_groups_array[@]}\n\
    \    local paren_groups_array_element=()\n    local paren_groups_array_element_count=${#paren_groups_array_element[@]}\n\
    \    local paren_groups_array_element_index=-1\n    local paren_groups_array_element_string=''\n\
    \    local paren_groups_array_element_string_count=0\n    local paren_groups_array_element_string_length=0\n\
    \    local paren_groups_array_element_string_index=0\n    local paren_groups_array_element_string_length_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index=0\n\
    \    local paren_groups_array_element_string_value=''\n    local paren_groups_array_element_string_value_count=0\n\
    \    local paren_groups_array_element_string_value_index=0\n    local paren_groups_array_element_string_value_index\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_str=\"\"\n    local paren_group\n    local paren_group_string=\"\
    \"\n    local paren_group_str=\"\"\n    local paren_group_level=0\n    local paren_group_level_str=\"\
    \"\n    local paren_group_level_str2=\"\"\n    local paren_group_level_str2=\"\
    \"\n    local paren_group_level_str3=\"\"\n    local paren_group_level_str4=\"\
    \"\n    local paren_group_level_str5=\"\"\n    local paren_group_level_str6=\"\
    \"\n    local paren_group_level_str7=\"\"\n    local paren_group_level_str8=\"\
    \"\n    local paren_group_level_str9=\"\"\n    local paren_group_level_str10=\"\
    \"\n    local paren_group_level_str11=\"\"\n    local paren_group_level_str12=\"\
    \"\n    local paren_group_level_str13=\"\"\n    local paren_group_level_str14=\"\
    \"\n    local paren_group_level_str15=\"\"\n    local paren_group_level_str16=\"\
    \"\n    local paren_group_level_str17=\"\"\n    local paren_group_level_str18=\"\
    \"\n    local paren_group_level_str19=\"\"\n    local paren_group_level_str20=\"\
    \"\n    local paren_group_level_str21=\"\"\n    local paren_group_level_str22=\"\
    \"\n    local paren_group_level_str23=\"\"\n    local paren_group_level_str24=\"\
    \"\n    local paren_group_level_str25=\"\"\n    local paren_group_level_str26=\"\
    \"\n    local paren_group_level_str27=\"\"\n    local paren_group_level_str28=\"\
    \"\n    local paren_group_level_str29=\"\"\n    local paren_group_level_str30=\"\
    \"\n    local paren_group_level_str31=\"\"\n    local paren_group_level_str32=\"\
    \"\n    local paren_group_level_str33=\"\"\n    local paren_group_level_str34=\"\
    \"\n    local paren_group_level_str35=\"\"\n    local paren_group_level_str36=\"\
    \"\n    local paren_group_level_str37=\"\"\n    local paren_group_level_str38=\"\
    \"\n    local paren_group_level_str39=\"\"\n    local paren_group_level_str40=\"\
    \"\n    local paren_group_level_str41=\"\"\n    local paren_group_level_str42=\"\
    \"\n    local paren_group_level_str43=\"\"\n    local paren_group_level_\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local groups=\"$1\"\n  local max_level=0\n\
    \  local level=0\n  while read -r group; do\n    if [[ $group == \\( ]]; then\n\
    \      level=$((level+1))\n    elif [[ $group == \\) ]]; then\n      level=$((level-1))\n\
    \      if [[ $level -gt $max_level ]]; then\n        max_level=$level\n      fi\n\
    \    fi\n  done <<< \"$groups\"\n  echo \"$max_level\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local max_level_str_index=0\n    local paren_level=0\n\
    \    local paren_level_index=0\n    local paren_level_str=\"\"\n    local paren_level_str_index=0\n\
    \    local paren_level_str_index2=0\n    local paren_level_str_index3=0\n    local\
    \ paren_level_str_index4=0\n    local paren_level_str_index5=0\n    local paren_level_str_index6=0\n\
    \    local paren_level_str_index7=0\n    local paren_level_str_index8=0\n    local\
    \ paren_level_str_index9=0\n    local paren_level_str_index10=0\n    local paren_level_str_index11=0\n\
    \    local paren_level_str_index12=0\n    local paren_level_str_index13=0\n  \
    \  local paren_level_str_index14=0\n    local paren_level_str_index15=0\n    local\
    \ paren_level_str_index16=0\n    local paren_level_str_index17=0\n    local paren_level_str_index18=0\n\
    \    local paren_level_str_index19=0\n    local paren_level_str_index20=0\n  \
    \  local paren_level_str_index21=0\n    local paren_level_str_index22=0\n    local\
    \ paren_level_str_index23=0\n    local paren_level_str_index24=0\n    local paren_level_str_index25=0\n\
    \    local paren_level_str_index26=0\n    local paren_level_str_index27=0\n  \
    \  local paren_level_str_index28=0\n    local paren_level_str_index29=0\n    local\
    \ paren_level_str_index30=0\n    local paren_level_str_index31=0\n    local paren_level_str_index32=0\n\
    \    local paren_level_str_index33=0\n    local paren_level_str_index34=0\n  \
    \  local paren_level_str_index35=0\n    local paren_level_str_index36=0\n    local\
    \ paren_level_str_index37=0\n    local paren_level_str_index38=0\n    local paren_level_str_index39=0\n\
    \    local paren_level_str_index40=0\n    local paren_level_str_index41=0\n  \
    \  local paren_level_str_index42=0\n    local paren_level_str_index43=0\n    local\
    \ paren_level_str_index44=0\n    local paren_level_str_index45=0\n    local paren_level_str_index46=0\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local nested_parens_str=$1\n    local\
    \ max_level=0\n    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\
    \"\n    local parens_str=\"\"\n    local parens_str_count=0\n    local parens_str_count_str=\"\
    \"\n    local parens_str_count_str_count=0\n    local parens_str_count_str_count_str=\"\
    \"\n    local parens_str_count_str_count_str_str=\"\"\n    local parens_str_count_str_count_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str=\"\"\n    local parens_str_count_str_count_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str=\"\"\n    local parens_str_count_str_count_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str=\"\"\n    local parens_str_count_str_count_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str=\"\"\n  \
    \  local parens_str_count_str_count_str_str_str_str_str_str_str_str=\"\"\n   \
    \ local parens_str_count_str_count_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\"\n  \
    \  local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_count_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_level=0\n    local parens_groups=()\n\
    \    local parens_group=''\n    local parens_group_count=0\n    local parens_group_count2=0\n\
    \    local parens_group_count3=0\n    local parens_group_count4=0\n    local parens_group_count5=0\n\
    \    local parens_group_count6=0\n    local parens_group_count7=0\n    local parens_group_count8=0\n\
    \    local parens_group_count9=0\n    local parens_group_count10=0\n    local\
    \ parens_group_count11=0\n    local parens_group_count12=0\n    local parens_group_count13=0\n\
    \    local parens_group_count14=0\n    local parens_group_count15=0\n    local\
    \ parens_group_count16=0\n    local parens_group_count17=0\n    local parens_group_count18=0\n\
    \    local parens_group_count19=0\n    local parens_group_count20=0\n    local\
    \ parens_group_count21=0\n    local parens_group_count22=0\n    local parens_group_count23=0\n\
    \    local parens_group_count24=0\n    local parens_group_count25=0\n    local\
    \ parens_group_count26=0\n    local parens_group_count27=0\n    local parens_group_count28=0\n\
    \    local parens_group_count29=0\n    local parens_group_count30=0\n    local\
    \ parens_group_count31=0\n    local parens_group_count32=0\n    local parens_group_count33=0\n\
    \    local parens_group_count34=0\n    local parens_group_count35=0\n    local\
    \ parens_group_count36=0\n    local parens_group_count37=0\n    local parens_group_count38=0\n\
    \    local parens_group_count39=0\n    local parens_group_count40=0\n    local\
    \ parens_group_count41=0\n    local parens_group_count42=0\n    local parens_group_count43=0\n\
    \    local parens_group_count44=0\n    local parens_group_count45=0\n    local\
    \ parens_group_count46=0\n    local parens_group_count47=0\n    local parens_group_count48=0\n\
    \    local parens_group_count49=0\n    local parens_group_count50=0\n    local\
    \ parens_group_count51=0\n    local parens_group_count52=0\n    local parens_group_count53=0\n\
    \    local parens_group_count54=0\n    local parens_group_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_level=0\n    local paren_level_string=\"\"\n    local paren_group\n\
    \    local paren_group_string\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_counts_string\n    local paren_group_counts_string2\n \
    \   local paren_group_counts_string3\n    local paren_group_counts_string4\n \
    \   local paren_group_counts_string5\n    local paren_group_counts_string6\n \
    \   local paren_group_counts_string7\n    local paren_group_counts_string8\n \
    \   local paren_group_counts_string9\n    local paren_group_counts_string10\n\
    \    local paren_group_counts_string11\n    local paren_group_counts_string12\n\
    \    local paren_group_counts_string13\n    local paren_group_counts_string14\n\
    \    local paren_group_counts_string15\n    local paren_group_counts_string16\n\
    \    local paren_group_counts_string17\n    local paren_group_counts_string18\n\
    \    local paren_group_counts_string19\n    local paren_group_counts_string20\n\
    \    local paren_group_counts_string21\n    local paren_group_counts_string22\n\
    \    local paren_group_counts_string23\n    local paren_group_counts_string24\n\
    \    local paren_group_counts_string25\n    local paren_group_counts_string26\n\
    \    local paren_group_counts_string27\n    local paren_group_counts_string28\n\
    \    local paren_group_counts_string29\n    local paren_group_counts_string30\n\
    \    local paren_group_counts_string31\n    local paren_group_counts_string32\n\
    \    local paren_group_counts_string33\n    local paren_group_counts_string34\n\
    \    local paren_group_counts_string35\n    local paren_group_counts_string36\n\
    \    local paren_group_counts_string37\n    local paren_group_counts_string38\n\
    \    local paren_group_counts_string39\n    local paren_group_counts_string40\n\
    \    local paren_group_counts_string41\n    local paren_group_counts_string42\n\
    \    local paren_group_counts_string43\n    local paren_group_counts_string\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local paren_group\n    local paren_group_level\n    local paren_group_string\n\
    \    local paren_group_level_str\n    local paren_group_level_int\n    local paren_group_level_intstr\n\
    \    local paren_group_level_intstrstr\n    local paren_group_level_intstrstrstr\n\
    \    local paren_group_level_intstrstrstrstr\n    local paren_group_level_intstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstr\n    local\
    \ paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstr\n    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n \
    \   local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    \    local paren_group_level_intstrstrstrstrstrstrstrstrstrstrstrstrstr\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_str=\"\"\n\
    \    local level_str_count=0\n    local level_str_count2=0\n    local level_str_count3=0\n\
    \    local level_str_count4=0\n    local level_str_count5=0\n    local level_str_count6=0\n\
    \    local level_str_count7=0\n    local level_str_count8=0\n    local level_str_count9=0\n\
    \    local level_str_count10=0\n    local level_str_count11=0\n    local level_str_count12=0\n\
    \    local level_str_count13=0\n    local level_str_count14=0\n    local level_str_count15=0\n\
    \    local level_str_count16=0\n    local level_str_count17=0\n    local level_str_count18=0\n\
    \    local level_str_count19=0\n    local level_str_count20=0\n    local level_str_count21=0\n\
    \    local level_str_count22=0\n    local level_str_count23=0\n    local level_str_count24=0\n\
    \    local level_str_count25=0\n    local level_str_count26=0\n    local level_str_count27=0\n\
    \    local level_str_count28=0\n    local level_str_count29=0\n    local level_str_count30=0\n\
    \    local level_str_count31=0\n    local level_str_count32=0\n    local level_str_count33=0\n\
    \    local level_str_count34=0\n    local level_str_count35=0\n    local level_str_count36=0\n\
    \    local level_str_count37=0\n    local level_str_count38=0\n    local level_str_count39=0\n\
    \    local level_str_count40=0\n    local level_str_count41=0\n    local level_str_count42=0\n\
    \    local level_str_count43=0\n    local level_str_count44=0\n    local level_str_count45=0\n\
    \    local level_str_count46=0\n    local level_str_count47=0\n    local level_str_count48=0\n\
    \    local level_str_count49=0\n    local level_str_count50=0\n    local level_str_count51=0\n\
    \    local level_str_count52=0\n    local level_str_count53=0\n    local level_str_count54=0\n\
    \    local level_str_count55=0\n    local level_str_count56=0\n    local level_str_count57=0\n\
    \    local level_str_count58=0\n    local level_str_count59=0\n    local level_str_count60=0\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_str=\"\"\n    local max_level_str_index=0\n    local max_level_str_index2=0\n\
    \    local max_level_str_index3=0\n    local max_level_str_index4=0\n    local\
    \ max_level_str_index5=0\n    local max_level_str_index6=0\n    local max_level_str_index7=0\n\
    \    local max_level_str_index8=0\n    local max_level_str_index9=0\n    local\
    \ max_level_str_index10=0\n    local max_level_str_index11=0\n    local max_level_str_index12=0\n\
    \    local max_level_str_index13=0\n    local max_level_str_index14=0\n    local\
    \ max_level_str_index15=0\n    local max_level_str_index16=0\n    local max_level_str_index17=0\n\
    \    local max_level_str_index18=0\n    local max_level_str_index19=0\n    local\
    \ max_level_str_index20=0\n    local max_level_str_index21=0\n    local max_level_str_index22=0\n\
    \    local max_level_str_index23=0\n    local max_level_str_index24=0\n    local\
    \ max_level_str_index25=0\n    local max_level_str_index26=0\n    local max_level_str_index27=0\n\
    \    local max_level_str_index28=0\n    local max_level_str_index29=0\n    local\
    \ max_level_str_index30=0\n    local max_level_str_index31=0\n    local max_level_str_index32=0\n\
    \    local max_level_str_index33=0\n    local max_level_str_index34=0\n    local\
    \ max_level_str_index35=0\n    local max_level_str_index36=0\n    local max_level_str_index37=0\n\
    \    local max_level_str_index38=0\n    local max_level_str_index39=0\n    local\
    \ max_level_str_index40=0\n    local max_level_str_index41=0\n    local max_level_str_index42=0\n\
    \    local max_level_str_index43=0\n    local max_level_str_index44=0\n    local\
    \ max_level_str_index45=0\n    local max_level_str_index46=0\n    local max_level_str_index47=0\n\
    \    local max_level_str_index48=0\n    local max_level_str_index49=0\n    local\
    \ max_level_str_index50=0\n    local max_level_str_index51=0\n    local max_level_str_index52=0\n\
    \    local max_level_str_index53=0\n    local max_level_str_index54=0\n    local\
    \ max_level_str_index\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_str_count=0\n\
    \    local parens_str_level=0\n    local parens_str_group=\"\"\n    local parens_str_group_level=0\n\
    \    local parens_str_group_count=0\n    local parens_str_group_str=\"\"\n   \
    \ local parens_str_group_str_level=0\n    local parens_str_group_str_count=0\n\
    \    local parens_str_group_str_str=\"\"\n    local parens_str_group_str_str_level=0\n\
    \    local parens_str_group_str_str_count=0\n    local parens_str_group_str_str_str=\"\
    \"\n    local parens_str_group_str_str_str_level=0\n    local parens_str_group_str_str_str_count=0\n\
    \    local parens_str_group_str_str_str_str=\"\"\n    local parens_str_group_str_str_str_str_level=0\n\
    \    local parens_str_group_str_str_str_str_count=0\n    local parens_str_group_str_str_str_str_str=\"\
    \"\n    local parens_str_group_str_str_str_str_str_level=0\n    local parens_str_group_str_str_str_str_str_count=0\n\
    \    local parens_str_group_str_str_str_str_str_str=\"\"\n    local parens_str_group_str_str_str_str_str_str_level=0\n\
    \    local parens_str_group_str_str_str_str_str_str_count=0\n    local parens_str_group_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_group_str_str_str_str_str_str_str_level=0\n    local\
    \ parens_str_group_str_str_str_str_str_str_str_count=0\n    local parens_str_group_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_group_str_str_str_str_str_str_str_str_level=0\n    local\
    \ parens_str_group_str_str_str_str_str_str_str_str_count=0\n    local parens_str_group_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_str_group_str_str_str_str_str_str_str_str_str_level=0\n \
    \   local parens_str_group_str_str_str_str_str_str_str_str_str_str_count=0\n \
    \   local parens_str_group_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_group_str_str_str_str_str_str_str_str_str_str_level=0\n    local\
    \ parens_str_group_str_str_str_str_str_str_str_str_str_str_str_count=0\n    local\
    \ parens_str_group_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_str_group_str_str_str_str_str_str_str_str_str_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_level_index=0\n\
    \    local paren_level_str=''\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n\
    \    local paren_level_str_counts=()\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n    local paren_level_str_counts_index=0\n\
    \    local paren_level_str_counts_index=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_index=0\n    local paren_levels=()\n    local paren_levels_index=0\n\
    \    local paren_levels_string=\"\"\n    local paren_levels_string_index=0\n \
    \   local paren_levels_string_index2=0\n    local paren_levels_string_index3=0\n\
    \    local paren_levels_string_index4=0\n    local paren_levels_string_index5=0\n\
    \    local paren_levels_string_index6=0\n    local paren_levels_string_index7=0\n\
    \    local paren_levels_string_index8=0\n    local paren_levels_string_index9=0\n\
    \    local paren_levels_string_index10=0\n    local paren_levels_string_index11=0\n\
    \    local paren_levels_string_index12=0\n    local paren_levels_string_index13=0\n\
    \    local paren_levels_string_index14=0\n    local paren_levels_string_index15=0\n\
    \    local paren_levels_string_index16=0\n    local paren_levels_string_index17=0\n\
    \    local paren_levels_string_index18=0\n    local paren_levels_string_index19=0\n\
    \    local paren_levels_string_index20=0\n    local paren_levels_string_index21=0\n\
    \    local paren_levels_string_index22=0\n    local paren_levels_string_index23=0\n\
    \    local paren_levels_string_index24=0\n    local paren_levels_string_index25=0\n\
    \    local paren_levels_string_index26=0\n    local paren_levels_string_index27=0\n\
    \    local paren_levels_string_index28=0\n    local paren_levels_string_index29=0\n\
    \    local paren_levels_string_index30=0\n    local paren_levels_string_index31=0\n\
    \    local paren_levels_string_index32=0\n    local paren_levels_string_index33=0\n\
    \    local paren_levels_string_index34=0\n    local paren_levels_string_index35=0\n\
    \    local paren_levels_string_index36=0\n    local paren_levels_string_index37=0\n\
    \    local paren_levels_string_index38=0\n    local paren_levels_string_index39=0\n\
    \    local paren_levels_string_index40=0\n    local paren_levels_string_index41=0\n\
    \    local paren_levels_string_index42=0\n    local paren_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_levels=$(echo $1 | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\\
    )//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed 's/\\(.*\\)//g' | sed\
    \ 's/\\(.*\\)//g' | sed 's/\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4rc17wwv.sh: line 10: unexpected EOF while looking for matching
    `''''

    /tmp/tmp4rc17wwv.sh: line 25: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local paren_groups_array=()\n\
    \    local paren_level=0\n    local paren_level_array=()\n    local paren_level_max=0\n\
    \    local paren_level_max_array=()\n    local paren_level_max_index=0\n    local\
    \ paren_level_max_index2=0\n    local paren_level_max_index3=0\n    local paren_level_max_index4=0\n\
    \    local paren_level_max_index5=0\n    local paren_level_max_index6=0\n    local\
    \ paren_level_max_index7=0\n    local paren_level_max_index8=0\n    local paren_level_max_index9=0\n\
    \    local paren_level_max_index10=0\n    local paren_level_max_index11=0\n  \
    \  local paren_level_max_index12=0\n    local paren_level_max_index13=0\n    local\
    \ paren_level_max_index14=0\n    local paren_level_max_index15=0\n    local paren_level_max_index16=0\n\
    \    local paren_level_max_index17=0\n    local paren_level_max_index18=0\n  \
    \  local paren_level_max_index19=0\n    local paren_level_max_index20=0\n    local\
    \ paren_level_max_index21=0\n    local paren_level_max_index22=0\n    local paren_level_max_index23=0\n\
    \    local paren_level_max_index24=0\n    local paren_level_max_index25=0\n  \
    \  local paren_level_max_index26=0\n    local paren_level_max_index27=0\n    local\
    \ paren_level_max_index28=0\n    local paren_level_max_index29=0\n    local paren_level_max_index30=0\n\
    \    local paren_level_max_index31=0\n    local paren_level_max_index32=0\n  \
    \  local paren_level_max_index33=0\n    local paren_level_max_index34=0\n    local\
    \ paren_level_max_index35=0\n    local paren_level_max_index36=0\n    local paren_level_max_index37=0\n\
    \    local paren_level_max_index38=0\n    local paren_level_max_index39=0\n  \
    \  local paren_level_max_index40=0\n    local paren_level_max_index41=0\n    local\
    \ paren_level_max_index42=0\n    local paren_level_max_index43=0\n    local paren_level_max_index44=0\n\
    \    local paren_level_max_index45=0\n    local paren_level_max_index46=0\n  \
    \  local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_groups=$1\n  local max_level=0\n\
    \  local max_level_group=\"\"\n  local max_level_group_count=0\n  local max_level_group_counts=()\n\
    \  local max_level_group_counts_str=\"\"\n  local max_level_group_counts_strs=()\n\
    \  local max_level_group_counts_strs_str=\"\"\n  local max_level_group_counts_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_str=\"\"\n  local max_level_group_counts_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_str=\"\"\n  local max_level_group_counts_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_str=\"\"\n  local max_level_group_counts_strs_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_strs_str=\"\"\n  local max_level_group_counts_strs_strs_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_strs_strs_str=\"\"\n  local\
    \ max_level_group_counts_strs_strs_strs_strs_strs_strs_strs=()\n  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \  local max_level_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local level=0\n\
    \    local level_str=\"\"\n    local level_str_count=0\n    local level_str_count2=0\n\
    \    local level_str_count3=0\n    local level_str_count4=0\n    local level_str_count5=0\n\
    \    local level_str_count6=0\n    local level_str_count7=0\n    local level_str_count8=0\n\
    \    local level_str_count9=0\n    local level_str_count10=0\n    local level_str_count11=0\n\
    \    local level_str_count12=0\n    local level_str_count13=0\n    local level_str_count14=0\n\
    \    local level_str_count15=0\n    local level_str_count16=0\n    local level_str_count17=0\n\
    \    local level_str_count18=0\n    local level_str_count19=0\n    local level_str_count20=0\n\
    \    local level_str_count21=0\n    local level_str_count22=0\n    local level_str_count23=0\n\
    \    local level_str_count24=0\n    local level_str_count25=0\n    local level_str_count26=0\n\
    \    local level_str_count27=0\n    local level_str_count28=0\n    local level_str_count29=0\n\
    \    local level_str_count30=0\n    local level_str_count31=0\n    local level_str_count32=0\n\
    \    local level_str_count33=0\n    local level_str_count34=0\n    local level_str_count35=0\n\
    \    local level_str_count36=0\n    local level_str_count37=0\n    local level_str_count38=0\n\
    \    local level_str_count39=0\n    local level_str_count40=0\n    local level_str_count41=0\n\
    \    local level_str_count42=0\n    local level_str_count43=0\n    local level_str_count44=0\n\
    \    local level_str_count45=0\n    local level_str_count46=0\n    local level_str_count47=0\n\
    \    local level_str_count48=0\n    local level_str_count49=0\n    local level_str_count50=0\n\
    \    local level_str_count51=0\n    local level_str_count52=0\n    local level_str_count53=0\n\
    \    local level_str_count54=0\n    local level_str_count55=0\n    local level_str_count56=0\n\
    \    local level_str_count57=0\n    local level_str_count58=0\n    local level_str_count59=0\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_group=\"\"\n    local max_level_group_len=0\n    local max_level_group_len2=0\n\
    \    local max_level_group_len3=0\n    local max_level_group_len4=0\n    local\
    \ max_level_group_len5=0\n    local max_level_group_len6=0\n    local max_level_group_len7=0\n\
    \    local max_level_group_len8=0\n    local max_level_group_len9=0\n    local\
    \ max_level_group_len10=0\n    local max_level_group_len11=0\n    local max_level_group_len12=0\n\
    \    local max_level_group_len13=0\n    local max_level_group_len14=0\n    local\
    \ max_level_group_len15=0\n    local max_level_group_len16=0\n    local max_level_group_len17=0\n\
    \    local max_level_group_len18=0\n    local max_level_group_len19=0\n    local\
    \ max_level_group_len20=0\n    local max_level_group_len21=0\n    local max_level_group_len22=0\n\
    \    local max_level_group_len23=0\n    local max_level_group_len24=0\n    local\
    \ max_level_group_len25=0\n    local max_level_group_len26=0\n    local max_level_group_len27=0\n\
    \    local max_level_group_len28=0\n    local max_level_group_len29=0\n    local\
    \ max_level_group_len30=0\n    local max_level_group_len31=0\n    local max_level_group_len32=0\n\
    \    local max_level_group_len33=0\n    local max_level_group_len34=0\n    local\
    \ max_level_group_len35=0\n    local max_level_group_len36=0\n    local max_level_group_len37=0\n\
    \    local max_level_group_len38=0\n    local max_level_group_len39=0\n    local\
    \ max_level_group_len40=0\n    local max_level_group_len41=0\n    local max_level_group_len42=0\n\
    \    local max_level_group_len43=0\n    local max_level_group_len44=0\n    local\
    \ max_level_group_len45=0\n    local max_level_group_len46=0\n    local max_level_group_len47=0\n\
    \    local max_level_group_len48=0\n    local max_level_group_len49=0\n    local\
    \ max_level_group_len50=0\n    local max_level_group_len51=0\n    local max_level_group_len52=0\n\
    \    local max_level_group_len53=0\n    local max_level_group_len54=0\n    local\
    \ max_level_group_len\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_count=0\n    local max_level_str=\"\"\n    local max_level_str_count=0\n\
    \    local max_level_str_len=0\n    local max_level_str_len_count=0\n    local\
    \ max_level_str_len_str=\"\"\n    local max_level_str_len_str_count=0\n    local\
    \ max_level_str_len_str_len=0\n    local max_level_str_len_str_len_count=0\n \
    \   local max_level_str_len_str_len_str=\"\"\n    local max_level_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len=0\n    local max_level_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str=\"\"\n    local max_level_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len=0\n    local max_level_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str=\"\"\n    local max_level_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len=0\n    local max_level_str_len_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str=\"\"\n    local\
    \ max_level_str_len_str_len_str_len_str_len_str_len_str_count=0\n    local max_level_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local max_level_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_count=0\n\
    \    local max_level_str_len_str_len_str_len_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local level=0\n    local level_string=\"\
    \"\n    local level_str=\"\"\n    local level_str_len=0\n    local level_str_len2=0\n\
    \    local level_str_len3=0\n    local level_str_len4=0\n    local level_str_len5=0\n\
    \    local level_str_len6=0\n    local level_str_len7=0\n    local level_str_len8=0\n\
    \    local level_str_len9=0\n    local level_str_len10=0\n    local level_str_len11=0\n\
    \    local level_str_len12=0\n    local level_str_len13=0\n    local level_str_len14=0\n\
    \    local level_str_len15=0\n    local level_str_len16=0\n    local level_str_len17=0\n\
    \    local level_str_len18=0\n    local level_str_len19=0\n    local level_str_len20=0\n\
    \    local level_str_len21=0\n    local level_str_len22=0\n    local level_str_len23=0\n\
    \    local level_str_len24=0\n    local level_str_len25=0\n    local level_str_len26=0\n\
    \    local level_str_len27=0\n    local level_str_len28=0\n    local level_str_len29=0\n\
    \    local level_str_len30=0\n    local level_str_len31=0\n    local level_str_len32=0\n\
    \    local level_str_len33=0\n    local level_str_len34=0\n    local level_str_len35=0\n\
    \    local level_str_len36=0\n    local level_str_len37=0\n    local level_str_len38=0\n\
    \    local level_str_len39=0\n    local level_str_len40=0\n    local level_str_len41=0\n\
    \    local level_str_len42=0\n    local level_str_len43=0\n    local level_str_len44=0\n\
    \    local level_str_len45=0\n    local level_str_len46=0\n    local level_str_len47=0\n\
    \    local level_str_len48=0\n    local level_str_len49=0\n    local level_str_len50=0\n\
    \    local level_str_len51=0\n    local level_str_len52=0\n    local level_str_len53=0\n\
    \    local level_str_len54=0\n    local level_str_len55=0\n    local level_str_len56=0\n\
    \    local level_str_len57=0\n    local level_str_len58=0\n    local level_str_len59=0\n\
    \    local level_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_levels=$(echo $1 | sed\
    \ 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"\
    /g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\\
    )/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\\
    (.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' |\
    \ sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\
    \\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\\
    (.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' |\
    \ sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\
    \\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\\
    (.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' |\
    \ sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\
    \\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\\
    (.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' |\
    \ sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\
    \\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\\
    (.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' |\
    \ sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\\1\"/g' | sed 's/\\(.*\\)/\"\
    \\\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9fsk192p.sh: line 10: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9fsk192p.sh: line 25: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660046744
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=$1\n    local max_level=0\n\
    \    local max_level_string=\"\"\n    local max_level_group=\"\"\n    local max_level_group_string=\"\
    \"\n    local max_level_group_count=0\n    local max_level_group_counts=()\n \
    \   local max_level_group_counts_string=\"\"\n    local max_level_group_counts_strings=()\n\
    \    local max_level_group_counts_strings_string=\"\"\n    local max_level_group_counts_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_string=\"\"\n    local max_level_group_counts_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_string=\"\"\n    local\
    \ max_level_group_counts_strings_strings_strings_strings=()\n    local max_level_group_counts_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n    local max_level_group_counts_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \    local max_level_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660046744
