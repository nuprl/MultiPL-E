language: sh
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_beats=()\n    local music_notes=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp_tmp_tmp=${music_str_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp//[|.]/}\n    local\
    \ music_str_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp//[|.]/}\n    local\
    \ music_str_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp826pubg6.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_max1=0\n\
    \    local music_notes_str_count_max2=0\n    local music_notes_str_count_max3=0\n\
    \    local music_notes_str_count_max4=0\n    local music_notes_str_count_max5=0\n\
    \    local music_notes_str_count_max6=0\n    local music_notes_str_count_max7=0\n\
    \    local music_notes_str_count_max8=0\n    local music_notes_str_count_max9=0\n\
    \    local music_notes_str_count_max10=0\n    local music_notes_str_count_max11=0\n\
    \    local music_notes_str_count_max12=0\n    local music_notes_str_count_max13=0\n\
    \    local music_notes_str_count_max14=0\n    local music_notes_str_count_max15=0\n\
    \    local music_notes_str_count_max16=0\n    local music_notes_str_count_max17=0\n\
    \    local music_notes_str_count_max18=0\n    local music_notes_str_count_max19=0\n\
    \    local music_notes_str_count_max20=0\n    local music_notes_str_count_max21=0\n\
    \    local music_notes_str_count_max22=0\n    local music_notes_str_count_max23=0\n\
    \    local music_notes_str_count_max24=0\n    local music_notes_str_count_max25=0\n\
    \    local music_notes_str_count_max26=0\n    local music_notes_str_count_max27=0\n\
    \    local music_notes_str_count_max28=0\n    local music_notes_str_count_max29=0\n\
    \    local music_notes_str_count_max30=0\n    local music_notes_str_count_max31=0\n\
    \    local music_notes_str_count_max32=0\n    local music_notes_str_count_max33=0\n\
    \    local music_notes_str_count_max34=0\n    local music_notes_str_count_max35=0\n\
    \    local music_notes_str_count_max36=0\n    local music_notes_str_count_max37=0\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_str=()\n\
    \    local music_last_beat_int=()\n    local music_last_beat_ints=()\n    local\
    \ music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n    local\
    \ music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n \
    \   local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local music_last_beat_ints_ints_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_count=()\n    local music_arr_str=()\n    local music_arr_str_count=()\n\
    \    local music_arr_str_arr=()\n    local music_arr_str_arr_count=()\n    local\
    \ music_arr_str_arr_str=()\n    local music_arr_str_arr_str_count=()\n    local\
    \ music_arr_str_arr_str_arr=()\n    local music_arr_str_arr_str_arr_count=()\n\
    \    local music_arr_str_arr_str_arr_str=()\n    local music_arr_str_arr_str_arr_str_count=()\n\
    \    local music_arr_str_arr_str_arr_str_arr=()\n    local music_arr_str_arr_str_arr_str_arr_count=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str=()\n    local music_arr_str_arr_str_arr_str_arr_str_count=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str_arr=()\n    local music_arr_str_arr_str_arr_str_arr_str_arr_count=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str_arr_str=()\n    local music_arr_str_arr_str_arr_str_arr_str_arr_str_count=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n    local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_count=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str=()\n    local\
    \ music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_count=()\n    local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_count=()\n  \
    \  local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n    local\
    \ music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_count=()\n    local\
    \ music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str=()\n    local\
    \ music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_count=()\n   \
    \ local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr=()\n\
    \    local music_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_count=()\n\
    \    local music_arr_str_arr_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=()\n    local music_last_notes_beats_str_arr_len_max=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_avg=()\n\
    \    local music_last_notes_beats_str_arr_len_median=()\n    local music_last_notes_beats_str_arr_len_std=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_max=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_avg=()\n\
    \    local music_last_notes_beats_str_arr_len_median=()\n    local music_last_notes_beats_str_arr_len_std=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_max=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_avg=()\n\
    \    local music_last_notes_beats_str_arr_len_median=()\n    local music_last_notes_beats_str_arr_len_std=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_max=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_avg=()\n\
    \    local music_last_notes_beats_str_arr_len_median=()\n    local music_last_notes_beats_str_arr_len_std=()\n\
    \    local music_last_notes_beats_str_arr_len_min=()\n    local music_last_notes_beats_str_arr_len_max=()\n\
    \    local music_last_notes_beats_str_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_octave=()\n  local music_octave=0\n  local music_octave_counter=0\n\
    \  local music_octave_counter_2=0\n  local music_octave_counter_3=0\n  local music_octave_counter_4=0\n\
    \  local music_octave_counter_5=0\n  local music_octave_counter_6=0\n  local music_octave_counter_7=0\n\
    \  local music_octave_counter_8=0\n  local music_octave_counter_9=0\n  local music_octave_counter_10=0\n\
    \  local music_octave_counter_11=0\n  local music_octave_counter_12=0\n  local\
    \ music_octave_counter_13=0\n  local music_octave_counter_14=0\n  local music_octave_counter_15=0\n\
    \  local music_octave_counter_16=0\n  local music_octave_counter_17=0\n  local\
    \ music_octave_counter_18=0\n  local music_octave_counter_19=0\n  local music_octave_counter_20=0\n\
    \  local music_octave_counter_21=0\n  local music_octave_counter_22=0\n  local\
    \ music_octave_counter_23=0\n  local music_octave_counter_24=0\n  local music_octave_counter_25=0\n\
    \  local music_octave_counter_26=0\n  local music_octave_counter_27=0\n  local\
    \ music_octave_counter_28=0\n  local music_octave_counter_29=0\n  local music_octave_counter_30=0\n\
    \  local music_octave_counter_31=0\n  local music_octave_counter_32=0\n  local\
    \ music_octave_counter_33=0\n  local music_octave_counter_34=0\n  local music_octave_counter_35=0\n\
    \  local music_octave_counter_36=0\n  local music_octave_counter_37=0\n  local\
    \ music_octave_counter_38=0\n  local music_octave_counter_39=0\n  local music_octave_counter_40=0\n\
    \  local music_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_count=()\n    local\
    \ music_last_beat_count_index=()\n    local music_last_beat_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index=()\n    local music_last_beat_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index=()\n    local music_last_beat_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_notes_length=0\n\
    \    local music_beat_length=0\n    local music_notes_length_count=0\n    local\
    \ music_beat_length_count=0\n    local music_notes_length_count2=0\n    local\
    \ music_beat_length_count2=0\n    local music_notes_length_count3=0\n    local\
    \ music_beat_length_count3=0\n    local music_notes_length_count4=0\n    local\
    \ music_beat_length_count4=0\n    local music_notes_length_count5=0\n    local\
    \ music_beat_length_count5=0\n    local music_notes_length_count6=0\n    local\
    \ music_beat_length_count6=0\n    local music_notes_length_count7=0\n    local\
    \ music_beat_length_count7=0\n    local music_notes_length_count8=0\n    local\
    \ music_beat_length_count8=0\n    local music_notes_length_count9=0\n    local\
    \ music_beat_length_count9=0\n    local music_notes_length_count10=0\n    local\
    \ music_beat_length_count10=0\n    local music_notes_length_count11=0\n    local\
    \ music_beat_length_count11=0\n    local music_notes_length_count12=0\n    local\
    \ music_beat_length_count12=0\n    local music_notes_length_count13=0\n    local\
    \ music_beat_length_count13=0\n    local music_notes_length_count14=0\n    local\
    \ music_beat_length_count14=0\n    local music_notes_length_count15=0\n    local\
    \ music_beat_length_count15=0\n    local music_notes_length_count16=0\n    local\
    \ music_beat_length_count16=0\n    local music_notes_length_count17=0\n    local\
    \ music_beat_length_count17=0\n    local music_notes_length_count18=0\n    local\
    \ music_beat_length_count18=0\n    local music_notes_length_count19=0\n    local\
    \ music_beat_length_count19=0\n    local music_notes_length_count20=0\n    local\
    \ music_beat_length_count20=0\n    local music_notes_length_count21=0\n    local\
    \ music_beat_length_count21=0\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_len=0\n    local music_last_notes_beats_str_arr_len_max=0\n\
    \    local music_last_notes_beats_str_arr_len_max_max=0\n    local music_last_notes_beats_str_arr_len_max_min=0\n\
    \    local music_last_notes_beats_str_arr_len_max_min_inc=1\n    local music_last_notes_beats_str_arr_len_max_min_dec=1\n\
    \    local music_last_notes_beats_str_arr_len_max_min_dec_inc=1\n    local music_last_notes_beats_str_arr_len_max_min_dec_dec=1\n\
    \    local music_last_notes_beats_str_arr_len_max_min_dec_dec_inc=1\n    local\
    \ music_last_notes_beats_str_arr_len_max_min_dec_dec_dec=1\n    local music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_inc=1\n\
    \    local music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec=1\n    local\
    \ music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_inc=1\n    local\
    \ music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec=1\n    local\
    \ music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec_inc=1\n    local\
    \ music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec_dec=1\n    local\
    \ music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec_dec_inc=1\n \
    \   local music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec_dec_dec=1\n\
    \    local music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec_dec_dec_inc=1\n\
    \    local music_last_notes_beats_str_arr_len_max_min_dec_dec_dec_dec_dec_dec_dec_inc=1\n\
    \    local music_last_notes_beats_str_arr_len_max_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_length=()\n    local music_arr_note=()\n    local music_arr_beat=()\n\
    \    local music_arr_beat_count=()\n    local music_arr_beat_count_index=()\n\
    \    local music_arr_beat_count_length=()\n    local music_arr_beat_count_note=()\n\
    \    local music_arr_beat_count_beat_count=()\n    local music_arr_beat_count_beat_count_index=()\n\
    \    local music_arr_beat_count_beat_count_length=()\n    local music_arr_beat_count_beat_count_note=()\n\
    \    local music_arr_beat_count_beat_count_beat_count=()\n    local music_arr_beat_count_beat_count_beat_count_index=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_length=()\n    local music_arr_beat_count_beat_count_beat_count_note=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count=()\n    local\
    \ music_arr_beat_count_beat_count_beat_count_beat_count_index=()\n    local music_arr_beat_count_beat_count_beat_count_beat_count_length=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_note=()\n   \
    \ local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_index=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_length=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_note=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_beat_count=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_beat_count_index=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_beat_count_length=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_beat_count_beat_count_note=()\n\
    \    local music_arr_beat_count_beat_count_beat_count_beat_count_be\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_length=0\n    local music_notes_length_count=0\n\
    \    local music_notes_length_count2=0\n    local music_notes_length_count3=0\n\
    \    local music_notes_length_count4=0\n    local music_notes_length_count5=0\n\
    \    local music_notes_length_count6=0\n    local music_notes_length_count7=0\n\
    \    local music_notes_length_count8=0\n    local music_notes_length_count9=0\n\
    \    local music_notes_length_count10=0\n    local music_notes_length_count11=0\n\
    \    local music_notes_length_count12=0\n    local music_notes_length_count13=0\n\
    \    local music_notes_length_count14=0\n    local music_notes_length_count15=0\n\
    \    local music_notes_length_count16=0\n    local music_notes_length_count17=0\n\
    \    local music_notes_length_count18=0\n    local music_notes_length_count19=0\n\
    \    local music_notes_length_count20=0\n    local music_notes_length_count21=0\n\
    \    local music_notes_length_count22=0\n    local music_notes_length_count23=0\n\
    \    local music_notes_length_count24=0\n    local music_notes_length_count25=0\n\
    \    local music_notes_length_count26=0\n    local music_notes_length_count27=0\n\
    \    local music_notes_length_count28=0\n    local music_notes_length_count29=0\n\
    \    local music_notes_length_count30=0\n    local music_notes_length_count31=0\n\
    \    local music_notes_length_count32=0\n    local music_notes_length_count33=0\n\
    \    local music_notes_length_count34=0\n    local music_notes_length_count35=0\n\
    \    local music_notes_length_count36=0\n    local music_notes_length_count37=0\n\
    \    local music_notes_length_count38=0\n    local music_notes_length_count39=0\n\
    \    local music_notes_length_count40=0\n    local music_notes_length_count41=0\n\
    \    local music_notes_length_count42=0\n    local music_notes_length_count43=0\n\
    \    local music_notes_length\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_beats=()\n    local music_beats_beats_str=()\n    local\
    \ music_beats_beats_arr=()\n    local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_str=()\n    local music_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_beats_beats_beats_beats_beats_arr=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_array=()\n    local music_notes_string=()\n\
    \    local music_notes_count=()\n    local music_notes_count_array=()\n    local\
    \ music_notes_count_string=()\n    local music_notes_count_string2=()\n    local\
    \ music_notes_count_string3=()\n    local music_notes_count_string4=()\n    local\
    \ music_notes_count_string5=()\n    local music_notes_count_string6=()\n    local\
    \ music_notes_count_string7=()\n    local music_notes_count_string8=()\n    local\
    \ music_notes_count_string9=()\n    local music_notes_count_string10=()\n    local\
    \ music_notes_count_string11=()\n    local music_notes_count_string12=()\n   \
    \ local music_notes_count_string13=()\n    local music_notes_count_string14=()\n\
    \    local music_notes_count_string15=()\n    local music_notes_count_string16=()\n\
    \    local music_notes_count_string17=()\n    local music_notes_count_string18=()\n\
    \    local music_notes_count_string19=()\n    local music_notes_count_string20=()\n\
    \    local music_notes_count_string21=()\n    local music_notes_count_string22=()\n\
    \    local music_notes_count_string23=()\n    local music_notes_count_string24=()\n\
    \    local music_notes_count_string25=()\n    local music_notes_count_string26=()\n\
    \    local music_notes_count_string27=()\n    local music_notes_count_string28=()\n\
    \    local music_notes_count_string29=()\n    local music_notes_count_string30=()\n\
    \    local music_notes_count_string31=()\n    local music_notes_count_string32=()\n\
    \    local music_notes_count_string33=()\n    local music_notes_count_string34=()\n\
    \    local music_notes_count_string35=()\n    local music_notes_count_string36=()\n\
    \    local music_notes_count_string37=()\n    local music_notes_count_\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local musi\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_sum_sum=()\n\
    \    local music_last_notes_beats_count_sum_sum_max=()\n    local music_last_notes_beats_count_sum_sum_min=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum=()\n    local music_last_notes_beats_count_sum_sum_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_min=()\n    local music_last_notes_beats_count_sum_sum_sum_sum=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_sum_max=()\n    local music_last_notes_beats_count_sum_sum_sum_sum_min=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_sum_sum=()\n    local music_last_notes_beats_count_sum_sum_sum_sum_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_sum_sum_min=()\n    local\
    \ music_last_notes_beats_count_sum_sum_sum_sum_sum_sum=()\n    local music_last_notes_beats_count_sum_sum_sum_sum_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_sum_sum_min=()\n    local\
    \ music_last_notes_beats_count_sum_sum_sum_sum_sum_sum=()\n    local music_last_notes_beats_count_sum_sum_sum_sum_sum_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_sum_sum_sum_min=()\n    local\
    \ music_last_notes_beats_count_sum_sum_sum_sum_sum_sum_sum=()\n    local music_last_notes_beats_count_sum_sum_sum_sum_sum_sum_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_sum_sum_sum_sum_sum_sum_min=()\n \
    \   \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=''\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=''\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=''\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=''\n    local music_beats_beats_beats_beats_beats_beats_beats_beats_arr=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_str=()\n    local music_last_beat_int=()\n\
    \    local music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n  \
    \  local music_last_beat_ints_int=()\n    local music_last_beat_ints_ints=()\n\
    \    local music_last_beat_ints_ints_str=()\n    local music_last_beat_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|o]/}\n    local music_str_tmp=${music_str_tmp//[|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc7o9cdvh.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_count=()\n    local music_arr_temp=()\n    local music_arr_temp_count=()\n\
    \    local music_arr_temp_index=()\n    local music_arr_temp_str=()\n    local\
    \ music_arr_temp_str_count=()\n    local music_arr_temp_str_temp=()\n    local\
    \ music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_arr_temp_str_temp_index=()\n    local music_arr_temp_str_temp_index=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_str_count=0\n    local music_beats_str_count_max=0\n  \
    \  local music_beats_str_count_min=0\n    local music_beats_str_count_avg=0\n\
    \    local music_beats_str_count_sum=0\n    local music_beats_str_count_max2=0\n\
    \    local music_beats_str_count_min2=0\n    local music_beats_str_count_avg2=0\n\
    \    local music_beats_str_count_sum2=0\n    local music_beats_str_count_max3=0\n\
    \    local music_beats_str_count_min3=0\n    local music_beats_str_count_avg3=0\n\
    \    local music_beats_str_count_sum3=0\n    local music_beats_str_count_max4=0\n\
    \    local music_beats_str_count_min4=0\n    local music_beats_str_count_avg4=0\n\
    \    local music_beats_str_count_sum4=0\n    local music_beats_str_count_max5=0\n\
    \    local music_beats_str_count_min5=0\n    local music_beats_str_count_avg5=0\n\
    \    local music_beats_str_count_sum5=0\n    local music_beats_str_count_max6=0\n\
    \    local music_beats_str_count_min6=0\n    local music_beats_str_count_avg6=0\n\
    \    local music_beats_str_count_sum6=0\n    local music_beats_str_count_max7=0\n\
    \    local music_beats_str_count_min7=0\n    local music_beats_str_count_avg7=0\n\
    \    local music_beats_str_count_sum7=0\n    local music_beats_str_count_max8=0\n\
    \    local music_beats_str_count_min8=0\n    local music_beats_str_count_avg8=0\n\
    \    local music_beats_str_count_sum8=0\n    local music_beats_str_count_max9=0\n\
    \    local music_beats_str_count_min9=0\n    local music_beats_str_count_avg9=0\n\
    \    local music_beats_str_count_sum9=0\n    local music_beats_str_count_max10=0\n\
    \    local music_beats_str_count_min10\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_length=0\n \
    \   local music_beats_length=0\n    local music_notes_length_count=0\n    local\
    \ music_beats_length_count=0\n    local music_notes_length_count2=0\n    local\
    \ music_beats_length_count2=0\n    local music_notes_length_count3=0\n    local\
    \ music_beats_length_count3=0\n    local music_notes_length_count4=0\n    local\
    \ music_beats_length_count4=0\n    local music_notes_length_count5=0\n    local\
    \ music_beats_length_count5=0\n    local music_notes_length_count6=0\n    local\
    \ music_beats_length_count6=0\n    local music_notes_length_count7=0\n    local\
    \ music_beats_length_count7=0\n    local music_notes_length_count8=0\n    local\
    \ music_beats_length_count8=0\n    local music_notes_length_count9=0\n    local\
    \ music_beats_length_count9=0\n    local music_notes_length_count10=0\n    local\
    \ music_beats_length_count10=0\n    local music_notes_length_count11=0\n    local\
    \ music_beats_length_count11=0\n    local music_notes_length_count12=0\n    local\
    \ music_beats_length_count12=0\n    local music_notes_length_count13=0\n    local\
    \ music_beats_length_count13=0\n    local music_notes_length_count14=0\n    local\
    \ music_beats_length_count14=0\n    local music_notes_length_count15=0\n    local\
    \ music_beats_length_count15=0\n    local music_notes_length_count16=0\n    local\
    \ music_beats_length_count16=0\n    local music_notes_length_count17=0\n    local\
    \ music_beats_length_count17=0\n    local music_notes_length_count18=0\n    local\
    \ music_beats_length_count18=0\n    local music_notes_length_count19=0\n    local\
    \ music_beats_length_count19=0\n    local music_notes_length_count20=0\n    local\
    \ music_beats_length_count20=0\n    local music_notes_length_count21=0\n    local\
    \ music_beats_length_count21=0\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_notes_str=()\n    local music_beats_str=()\n\
    \    local music_notes_arr=()\n    local music_beats_arr=()\n    local music_notes_beats_str=()\n\
    \    local music_notes_beats_arr=()\n    local music_notes_beats_str_arr=()\n\
    \    local music_notes_beats_str_arr_arr=()\n    local music_notes_beats_str_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr=()\n    local music_notes_beats_str_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr=()\n    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr=()\n    local\
    \ music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local music_last_note_num=()\n  local music_last_note_num=()\n  local music_last_note_num=()\n\
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_length=()\n    local music_arr_note=()\n    local music_arr_beat=()\n\
    \    local music_arr_beat_index=()\n    local music_arr_beat_length=()\n    local\
    \ music_arr_beat_note=()\n    local music_arr_beat_note_index=()\n    local music_arr_beat_note_length=()\n\
    \    local music_arr_beat_note_octave=()\n    local music_arr_beat_note_octave_index=()\n\
    \    local music_arr_beat_note_octave_length=()\n    local music_arr_beat_note_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_index=()\n    local music_arr_beat_note_octave_octave_length=()\n\
    \    local music_arr_beat_note_octave_octave_octave=()\n    local music_arr_beat_note_octave_octave_octave_index=()\n\
    \    local music_arr_beat_note_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_index=()\n    local\
    \ music_arr_beat_note_octave_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_index=()\n    local\
    \ music_arr_beat_note_octave_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_octave_index=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave_length=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave_octave=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_notes_str=\"\"\n    local music_beats_str=\"\
    \"\n    local music_notes_arr=()\n    local music_beats_arr=()\n    local music_notes_str_count=0\n\
    \    local music_beats_str_count=0\n    local music_notes_str_count_arr=()\n \
    \   local music_beats_str_count_arr=()\n    local music_notes_str_count_str=\"\
    \"\n    local music_beats_str_count_str=\"\"\n    local music_notes_str_count_str_count=0\n\
    \    local music_beats_str_count_str_count=0\n    local music_notes_str_count_str_count_arr=()\n\
    \    local music_beats_str_count_str_count_arr=()\n    local music_notes_str_count_str_count_str=\"\
    \"\n    local music_beats_str_count_str_count_str=\"\"\n    local music_notes_str_count_str_count_str_count=0\n\
    \    local music_beats_str_count_str_count_str_count=0\n    local music_notes_str_count_str_count_str_count_arr=()\n\
    \    local music_beats_str_count_str_count_str_count_arr=()\n    local music_notes_str_count_str_count_str_count_str=\"\
    \"\n    local music_beats_str_count_str_count_str_count_str=\"\"\n    local music_notes_str_count_str_count_str_count_str_count=0\n\
    \    local music_beats_str_count_str_count_str_count_str_count=0\n    local music_notes_str_count_str_count_str_count_str_count_arr=()\n\
    \    local music_beats_str_count_str_count_str_count_str_count_arr=()\n    local\
    \ music_notes_str_count_str_count_str_count_str_count_str=\"\"\n    local music_beats_str_count_str_count_str_count_str_count_str=\"\
    \"\n    local music_notes_str_count_str_count_str_count_str_count_str_count=0\n\
    \    local music_beats_str_count_str_count_str_count_str_count_str_count=0\n \
    \   local music_notes_str_count_str_count_str_count_str_count_str_count_arr=()\n\
    \    local music_beats_str_count_str_count_str_count_str_count_str_count_arr=()\n\
    \    local music_notes_str_count_str_count_str_count_str_count_str_count_str=\"\
    \"\n    local music_beats_str_count_str_count_str_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr2=()\n    local music_last_notes_beats_str_arr3=()\n\
    \    local music_last_notes_beats_str_arr4=()\n    local music_last_notes_beats_str_arr5=()\n\
    \    local music_last_notes_beats_str_arr6=()\n    local music_last_notes_beats_str_arr7=()\n\
    \    local music_last_notes_beats_str_arr8=()\n    local music_last_notes_beats_str_arr9=()\n\
    \    local music_last_notes_beats_str_arr10=()\n    local music_last_notes_beats_str_arr11=()\n\
    \    local music_last_notes_beats_str_arr12=()\n    local music_last_notes_beats_str_arr13=()\n\
    \    local music_last_notes_beats_str_arr14=()\n    local music_last_notes_beats_str_arr15=()\n\
    \    local music_last_notes_beats_str_arr16=()\n    local music_last_notes_beats_str_arr17=()\n\
    \    local music_last_notes_beats_str_arr18=()\n    local music_last_notes_beats_str_arr19=()\n\
    \    local music_last_notes_beats_str_arr20=()\n    local music_last_notes_beats_str_arr21=()\n\
    \    local music_last_notes_beats_str_arr22=()\n    local music_last_notes_beats_str_arr23=()\n\
    \    local music_last_notes_beats_str_arr24=()\n    local music_last_notes_beats_str_arr25=()\n\
    \    local music_last_notes_beats_str_arr26=()\n    local music_last_notes_beats_str_arr27=()\n\
    \    local music_last_notes_beats_str_arr28=()\n    local music_last_notes_beat\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_rests=()\n\
    \    local music_rests_beats=()\n    local music_rests_lasts=()\n    local music_rests_rests=()\n\
    \    local music_rests_rests_beats=()\n    local music_rests_rests_lasts=()\n\
    \    local music_rests_rests_rests=()\n    local music_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_beats=()\n    local music_rests_rests_rests_rests_lasts=()\n\
    \    local music_rests_rests_rests_rests_rests=()\n    local music_rests_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_rests_lasts=()\n    local music_rests_rests_rests_rests_rests_rests=()\n\
    \    local music_rests_rests_rests_rests_rests_rests_beats=()\n    local music_rests_rests_rests_rests_rests_rests_lasts=()\n\
    \    local music_rests_rests_rests_rests_rests_rests_rests=()\n    local music_rests_rests_rests_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_rests_rests_rests_lasts=()\n    local\
    \ music_rests_rests_rests_rests_rests_rests_rests_rests=()\n    local music_rests_rests_rests_rests_rests_rests_rests_rests_beats=()\n\
    \    local music_rests_rests_rests_rests_rests_rests_rests_rests_lasts=()\n  \
    \  local music_rests_rests_rests_rests_rests_rests_rests_rests_rests=()\n    local\
    \ music_rests_rests_rests_rests_rests_rests_rests_rests_rests_beats=()\n    local\
    \ music_rests_rests_rests_rests_rests_rests_rests_rests_rests_lasts=()\n    local\
    \ music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_str=()\n\
    \    local music_last_beat_arr=()\n    local music_last_beat_str_count=0\n   \
    \ local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_arr_count=-1\n\
    \    local music_last_beat_str_count_arr_count_max=-1\n    local music_last_beat_str_count_arr_count_min=-1\n\
    \    local music_last_beat_str_count_arr_count_sum=0\n    local music_last_beat_str_count_arr_count_sum_squares=0\n\
    \    local music_last_beat_str_count_arr_count_sum_cubes=0\n    local music_last_beat_str_count_arr_count_sum_powers=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_squares=0\n    local\
    \ music_last_beat_str_count_arr_count_sum_powers_cubes=0\n    local music_last_beat_str_count_arr_count_sum_powers_powers=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_squares=0\n \
    \   local music_last_beat_str_count_arr_count_sum_powers_powers_cubes=0\n    local\
    \ music_last_beat_str_count_arr_count_sum_powers_powers_powers=0\n    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_squares=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_cubes=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_powers=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_squares=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_cubes=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_powers=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_powers_squares=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_powers_cubes=0\n\
    \    local music_last_beat_str_count_arr_count_sum_powers_powers_powers_powers_powers=0\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str_count=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_min=0\n\
    \    local music_notes_str_count_max=0\n    local music_notes_str_count_\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_beats_str=()\n\
    \    local music_lasts_str=()\n    local music_notes_str=()\n    local music_beats_str_arr=()\n\
    \    local music_lasts_str_arr=()\n    local music_notes_str_arr=()\n    local\
    \ music_beats_str_arr_len=()\n    local music_lasts_str_arr_len=()\n    local\
    \ music_notes_str_arr_len=()\n    local music_beats_str_arr_len_max=()\n    local\
    \ music_lasts_str_arr_len_max=()\n    local music_notes_str_arr_len_max=()\n \
    \   local music_beats_str_arr_len_min=()\n    local music_lasts_str_arr_len_min=()\n\
    \    local music_notes_str_arr_len_min=()\n    local music_beats_str_arr_len_max=()\n\
    \    local music_lasts_str_arr_len_max=()\n    local music_notes_str_arr_len_max=()\n\
    \    local music_beats_str_arr_len_min=()\n    local music_lasts_str_arr_len_min=()\n\
    \    local music_notes_str_arr_len_min=()\n    local music_beats_str_arr_len_max=()\n\
    \    local music_lasts_str_arr_len_max=()\n    local music_notes_str_arr_len_max=()\n\
    \    local music_beats_str_arr_len_min=()\n    local music_lasts_str_arr_len_min=()\n\
    \    local music_notes_str_arr_len_min=()\n    local music_beats_str_arr_len_max=()\n\
    \    local music_lasts_str_arr_len_max=()\n    local music_notes_str_arr_len_max=()\n\
    \    local music_beats_str_arr_len_min=()\n    local music_lasts_str_arr_len_min=()\n\
    \    local music_notes_str_arr_len_min=()\n    local music_beats_str_arr_len_max=()\n\
    \    local music_lasts_str_arr_len_max=()\n    local music_notes_str_arr_len_max=()\n\
    \    local music_beats_str_arr_len_min=()\n    local music_lasts_str_arr_len_min=()\n\
    \    local music_notes_str_arr_len_min=()\n    local music_beats_str_arr_len_max=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n\
    \    local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_octave=()\n    local music_last_note_octave_length=()\n\
    \    local music_last_note_octave_number=()\n    local music_last_note_octave_number_length=()\n\
    \    local music_last_note_octave_number_number_length=()\n    local music_last_note_octave_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_length=()\n    local\
    \ music_last_note_octave_number_number_number_number_number_length=()\n    local\
    \ music_last_note_octave_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_length=()\n\
    \    local music_last_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_notes_str=()\n    local music_beats_str=()\n\
    \    local music_notes_arr=()\n    local music_beats_arr=()\n    local music_notes_str_count=0\n\
    \    local music_beats_str_count=0\n    local music_notes_str_count_arr=()\n \
    \   local music_beats_str_count_arr=()\n    local music_notes_str_count_str=()\n\
    \    local music_beats_str_count_str=()\n    local music_notes_str_count_str_arr=()\n\
    \    local music_beats_str_count_str_arr=()\n    local music_notes_str_count_str_str=()\n\
    \    local music_beats_str_count_str_str=()\n    local music_notes_str_count_str_str_arr=()\n\
    \    local music_beats_str_count_str_str_arr=()\n    local music_notes_str_count_str_str_str=()\n\
    \    local music_beats_str_count_str_str_str=()\n    local music_notes_str_count_str_str_str_arr=()\n\
    \    local music_beats_str_count_str_str_str_arr=()\n    local music_notes_str_count_str_str_str_str=()\n\
    \    local music_beats_str_count_str_str_str_str=()\n    local music_notes_str_count_str_str_str_str_arr=()\n\
    \    local music_beats_str_count_str_str_str_str_arr=()\n    local music_notes_str_count_str_str_str_str_str=()\n\
    \    local music_beats_str_count_str_str_str_str_str=()\n    local music_notes_str_count_str_str_str_str_str_arr=()\n\
    \    local music_beats_str_count_str_str_str_str_str_arr=()\n    local music_notes_str_count_str_str_str_str_str_str=()\n\
    \    local music_beats_str_count_str_str_str_str_str_str=()\n    local music_notes_str_count_str_str_str_str_str_str_arr=()\n\
    \    local music_beats_str_count_str_str_str_str_str_str_str_arr=()\n    local\
    \ music_notes_str_count_str_str_str_str_str_str_str=()\n    local music_beats_str_count_str_str_str_str_str_str_str=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_lasts_beats=()\n\
    \    local music_lasts_beats_arr=()\n    local music_lasts_beats_str=()\n    local\
    \ music_lasts_beats_str_arr=()\n    local music_lasts_beats_str_arr2=()\n    local\
    \ music_lasts_beats_str_arr3=()\n    local music_lasts_beats_str_arr4=()\n   \
    \ local music_lasts_beats_str_arr5=()\n    local music_lasts_beats_str_arr6=()\n\
    \    local music_lasts_beats_str_arr7=()\n    local music_lasts_beats_str_arr8=()\n\
    \    local music_lasts_beats_str_arr9=()\n    local music_lasts_beats_str_arr10=()\n\
    \    local music_lasts_beats_str_arr11=()\n    local music_lasts_beats_str_arr12=()\n\
    \    local music_lasts_beats_str_arr13=()\n    local music_lasts_beats_str_arr14=()\n\
    \    local music_lasts_beats_str_arr15=()\n    local music_lasts_beats_str_arr16=()\n\
    \    local music_lasts_beats_str_arr17=()\n    local music_lasts_beats_str_arr18=()\n\
    \    local music_lasts_beats_str_arr19=()\n    local music_lasts_beats_str_arr20=()\n\
    \    local music_lasts_beats_str_arr21=()\n    local music_lasts_beats_str_arr22=()\n\
    \    local music_lasts_beats_str_arr23=()\n    local music_lasts_beats_str_arr24=()\n\
    \    local music_lasts_beats_str_arr25=()\n    local music_lasts_beats_str_arr26=()\n\
    \    local music_lasts_beats_str_arr27=()\n    local music_lasts_beats_str_arr28=()\n\
    \    local music_lasts_beats_str_arr29=()\n    local music_lasts_beats_str_arr30=()\n\
    \    local music_lasts_beats_str_arr31=()\n    local music_lasts_beat\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_length=0\n \
    \   local music_beats_length=0\n    local music_notes_length_count=0\n    local\
    \ music_beats_length_count=0\n    local music_notes_length_count2=0\n    local\
    \ music_beats_length_count2=0\n    local music_notes_length_count3=0\n    local\
    \ music_beats_length_count3=0\n    local music_notes_length_count4=0\n    local\
    \ music_beats_length_count4=0\n    local music_notes_length_count5=0\n    local\
    \ music_beats_length_count5=0\n    local music_notes_length_count6=0\n    local\
    \ music_beats_length_count6=0\n    local music_notes_length_count7=0\n    local\
    \ music_beats_length_count7=0\n    local music_notes_length_count8=0\n    local\
    \ music_beats_length_count8=0\n    local music_notes_length_count9=0\n    local\
    \ music_beats_length_count9=0\n    local music_notes_length_count10=0\n    local\
    \ music_beats_length_count10=0\n    local music_notes_length_count11=0\n    local\
    \ music_beats_length_count11=0\n    local music_notes_length_count12=0\n    local\
    \ music_beats_length_count12=0\n    local music_notes_length_count13=0\n    local\
    \ music_beats_length_count13=0\n    local music_notes_length_count14=0\n    local\
    \ music_beats_length_count14=0\n    local music_notes_length_count15=0\n    local\
    \ music_beats_length_count15=0\n    local music_notes_length_count16=0\n    local\
    \ music_beats_length_count16=0\n    local music_notes_length_count17=0\n    local\
    \ music_beats_length_count17=0\n    local music_notes_length_count18=0\n    local\
    \ music_beats_length_count18=0\n    local music_notes_length_count19=0\n    local\
    \ music_beats_length_count19=0\n    local music_notes_length_count20=0\n    local\
    \ music_beats_length_count20=0\n    local music_notes_length_count21=0\n    local\
    \ music_beats_length_count21=0\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_tmp=()\n\
    \    local music_arr_len=()\n    local music_arr_len_tmp=()\n    local music_arr_len_max=()\n\
    \    local music_arr_len_max_tmp=()\n    local music_arr_len_max_max_tmp=()\n\
    \    local music_arr_len_max_max_tmp2=()\n    local music_arr_len_max_max_tmp3=()\n\
    \    local music_arr_len_max_max_tmp4=()\n    local music_arr_len_max_max_tmp5=()\n\
    \    local music_arr_len_max_max_tmp6=()\n    local music_arr_len_max_max_tmp7=()\n\
    \    local music_arr_len_max_max_tmp8=()\n    local music_arr_len_max_max_tmp9=()\n\
    \    local music_arr_len_max_max_tmp10=()\n    local music_arr_len_max_max_tmp11=()\n\
    \    local music_arr_len_max_max_tmp12=()\n    local music_arr_len_max_max_tmp13=()\n\
    \    local music_arr_len_max_max_tmp14=()\n    local music_arr_len_max_max_tmp15=()\n\
    \    local music_arr_len_max_max_tmp16=()\n    local music_arr_len_max_max_tmp17=()\n\
    \    local music_arr_len_max_max_tmp18=()\n    local music_arr_len_max_max_tmp19=()\n\
    \    local music_arr_len_max_max_tmp20=()\n    local music_arr_len_max_max_tmp21=()\n\
    \    local music_arr_len_max_max_tmp22=()\n    local music_arr_len_max_max_tmp23=()\n\
    \    local music_arr_len_max_max_tmp24=()\n    local music_arr_len_max_max_tmp25=()\n\
    \    local music_arr_len_max_max_tmp26=()\n    local music_arr_len_max_max_tmp27=()\n\
    \    local music_arr_len_max_max_tmp28=()\n    local music_arr_len_max_max_tmp29=()\n\
    \    local music_arr_len_max_max_tmp30=()\n    local music_arr_len_max_max_tmp31=()\n\
    \    local music_arr_len_max_max_tmp32=()\n    local music_arr_len_max_max_tmp33=()\n\
    \    local music_arr_len_max_max_tmp34=()\n    local music_arr_len_max_max_tmp35\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_lasts_str=\"\
    \"\n    local music_lasts_beats=0\n    local music_lasts_beats_str=\"\"\n    local\
    \ music_lasts_beats_str2=\"\"\n    local music_lasts_beats_str3=\"\"\n    local\
    \ music_lasts_beats_str4=\"\"\n    local music_lasts_beats_str5=\"\"\n    local\
    \ music_lasts_beats_str6=\"\"\n    local music_lasts_beats_str7=\"\"\n    local\
    \ music_lasts_beats_str8=\"\"\n    local music_lasts_beats_str9=\"\"\n    local\
    \ music_lasts_beats_str10=\"\"\n    local music_lasts_beats_str11=\"\"\n    local\
    \ music_lasts_beats_str12=\"\"\n    local music_lasts_beats_str13=\"\"\n    local\
    \ music_lasts_beats_str14=\"\"\n    local music_lasts_beats_str15=\"\"\n    local\
    \ music_lasts_beats_str16=\"\"\n    local music_lasts_beats_str17=\"\"\n    local\
    \ music_lasts_beats_str18=\"\"\n    local music_lasts_beats_str19=\"\"\n    local\
    \ music_lasts_beats_str20=\"\"\n    local music_lasts_beats_str21=\"\"\n    local\
    \ music_lasts_beats_str22=\"\"\n    local music_lasts_beats_str23=\"\"\n    local\
    \ music_lasts_beats_str24=\"\"\n    local music_lasts_beats_str25=\"\"\n    local\
    \ music_lasts_beats_str26=\"\"\n    local music_lasts_beats_str27=\"\"\n    local\
    \ music_lasts_beats_str28=\"\"\n    local music_lasts_beats_str29=\"\"\n    local\
    \ music_lasts_beats_str30=\"\"\n    local music_lasts_beats_str31=\"\"\n    local\
    \ music_lasts_beats_str32=\"\"\n    local music_lasts_beats_str33=\"\"\n    local\
    \ music_lasts_beats_str34=\"\"\n    local music_lasts_beats_str35=\"\"\n    local\
    \ music_lasts_beats_str36=\"\"\n    local music_lasts_beats_str37=\"\"\n    local\
    \ music_lasts_beats_str38\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_count=0\n\
    \    local music_last_beat_str_count_str_arr=()\n    local music_last_beat_str_count_str_arr_count=-1\n\
    \    local music_last_beat_str_count_str_arr_count_str=()\n    local music_last_beat_str_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count=-1\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str=()\n    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count=-1\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=-1\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=-1\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_arr_index=()\n    local music_last_beat_arr_length=()\n    local\
    \ music_last_beat_arr_str=()\n    local music_last_beat_arr_str_length=()\n  \
    \  local music_last_beat_arr_str_pos=()\n    local music_last_beat_arr_str_pos_length=()\n\
    \    local music_last_beat_arr_str_pos_str=()\n    local music_last_beat_arr_str_pos_str_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos=()\n    local music_last_beat_arr_str_pos_str_pos_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str=()\n    local music_last_beat_arr_str_pos_str_pos_str_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos=()\n    local music_last_beat_arr_str_pos_str_pos_str_pos_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str=()\n    local music_last_beat_arr_str_pos_str_pos_str_pos_str_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos=()\n    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str=()\n    local\
    \ music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_length=()\n    local\
    \ music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_pos=()\n    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_pos_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_pos_str=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_pos_str_length=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_pos_str_pos=()\n\
    \    local music_last_beat_arr_str_pos_str_pos_str_pos_str_pos_str_pos_str_pos_length=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o'}\n    local music_str_tmp=${music_str_tmp//'o|'}\n\
    \    local music_str_tmp=${music_str_tmp//'.'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'o'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'|'}\n    local music_str_tmp=${music_str_tmp//'|'}\n\
    \    local music_str_tmp=${musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpktdh62t7.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_beats=()\n    local music_notes=()\n    local music_notes_array=()\n \
    \   local music_notes_beats=()\n    local music_notes_notes=()\n    local music_notes_notes_array=()\n\
    \    local music_notes_notes_beats=()\n    local music_notes_notes_notes=()\n\
    \    local music_notes_notes_notes_array=()\n    local music_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_beats=()\n    local music_notes_notes_notes_notes_notes=()\n\
    \    local music_notes_notes_notes_notes_notes_array=()\n    local music_notes_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_beats=()\n    local music_notes_notes_notes_notes_notes_notes_notes=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_array=()\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_beats=()\n    local music_notes_notes_notes_notes_notes_notes_notes_notes=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_array=()\n  \
    \  local music_notes_notes_notes_notes_notes_notes_notes_notes_beats=()\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_notes_notes=()\n    local music_notes_notes_notes_notes_notes_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_str_tmp=${music_str//[|.]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|o]/}\n  local music_str_tmp=${music_str_tmp//[|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|]/}\n  local music_str_tmp=${music_str_tmp//[|.|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|o|o|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|o|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|o|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|o|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|o|o|]/}\n  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|o|o|o|]/}\n\
    \  local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|.|.|o|o|o|o|]/}\n  local\
    \ music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpby_wtnd7.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=\"$1\"\n  local music_array=()\n  local\
    \ music_notes=()\n  local music_notes_length=()\n  local music_notes_count=()\n\
    \  local music_notes_last_beat=()\n  local music_notes_last_beat_length=()\n \
    \ local music_notes_last_beat_count=()\n  local music_notes_last_beat_last_beat=()\n\
    \  local music_notes_last_beat_last_beat_length=()\n  local music_notes_last_beat_last_beat_count=()\n\
    \  local music_notes_last_beat_last_beat_last_beat=()\n  local music_notes_last_beat_last_beat_last_beat_length=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_count=()\n  local music_notes_last_beat_last_beat_last_beat_last_beat=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_length=()\n  local\
    \ music_notes_last_beat_last_beat_last_beat_last_beat_count=()\n  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_count=()\n\
    \  local music_notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat=()\n\
    \  local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsm2vniww.sh: line 33: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    local music_str_tmp=${music_str_tmp//o|.|}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|}\n    \n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_array=()\n    local music_notes_count=()\n\
    \    local music_notes_count_array=()\n    local music_notes_count_count=()\n\
    \    local music_notes_count_count_array=()\n    local music_notes_count_count_count=()\n\
    \    local music_notes_count_count_count_array=()\n    local music_notes_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_array=()\n    local music_notes_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_array=()\n    local music_notes_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_array=()\n    local\
    \ music_notes_count_count_count_count_count_count_count=()\n    local music_notes_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count=()\n  \
    \  local music_notes_count_count_count_count_count_count_count_array=()\n    local\
    \ music_notes_count_count_count_count_count_count_count_count=()\n    local music_notes_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_count_count_array=()\n\
    \    local music_notes_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_octave=()\n    local music_octave=0\n\
    \    local music_octave_counter=0\n    local music_octave_counter_2=0\n    local\
    \ music_octave_counter_3=0\n    local music_octave_counter_4=0\n    local music_octave_counter_5=0\n\
    \    local music_octave_counter_6=0\n    local music_octave_counter_7=0\n    local\
    \ music_octave_counter_8=0\n    local music_octave_counter_9=0\n    local music_octave_counter_10=0\n\
    \    local music_octave_counter_11=0\n    local music_octave_counter_12=0\n  \
    \  local music_octave_counter_13=0\n    local music_octave_counter_14=0\n    local\
    \ music_octave_counter_15=0\n    local music_octave_counter_16=0\n    local music_octave_counter_17=0\n\
    \    local music_octave_counter_18=0\n    local music_octave_counter_19=0\n  \
    \  local music_octave_counter_20=0\n    local music_octave_counter_21=0\n    local\
    \ music_octave_counter_22=0\n    local music_octave_counter_23=0\n    local music_octave_counter_24=0\n\
    \    local music_octave_counter_25=0\n    local music_octave_counter_26=0\n  \
    \  local music_octave_counter_27=0\n    local music_octave_counter_28=0\n    local\
    \ music_octave_counter_29=0\n    local music_octave_counter_30=0\n    local music_octave_counter_31=0\n\
    \    local music_octave_counter_32=0\n    local music_octave_counter_33=0\n  \
    \  local music_octave_counter_34=0\n    local music_octave_counter_35=0\n    local\
    \ music_octave_counter_36=0\n    local music_octave_counter_37=0\n    local music_octave_counter_38=0\n\
    \    local music_octave_counter_39=0\n    local music_octave_counter_40=0\n  \
    \  local music_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local music_last_note_length=()\n    local music_last_note_length=()\n  \
    \  local music_last_note_length=()\n    local music_last_note_length=()\n    local\
    \ music_last_note_length=()\n    local music_last_note_length=()\n    local music_last_note_length=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_min=()\n    local music_last_notes_beats_count_max=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_notes_length=0\n  local music_beat_length=0\n\
    \  local music_notes_length_index=0\n  local music_beat_length_index=0\n  local\
    \ music_notes_length_index2=0\n  local music_beat_length_index2=0\n  local music_notes_length_index3=0\n\
    \  local music_beat_length_index3=0\n  local music_notes_length_index4=0\n  local\
    \ music_beat_length_index4=0\n  local music_notes_length_index5=0\n  local music_beat_length_index5=0\n\
    \  local music_notes_length_index6=0\n  local music_beat_length_index6=0\n  local\
    \ music_notes_length_index7=0\n  local music_beat_length_index7=0\n  local music_notes_length_index8=0\n\
    \  local music_beat_length_index8=0\n  local music_notes_length_index9=0\n  local\
    \ music_beat_length_index9=0\n  local music_notes_length_index10=0\n  local music_beat_length_index10=0\n\
    \  local music_notes_length_index11=0\n  local music_beat_length_index11=0\n \
    \ local music_notes_length_index12=0\n  local music_beat_length_index12=0\n  local\
    \ music_notes_length_index13=0\n  local music_beat_length_index13=0\n  local music_notes_length_index14=0\n\
    \  local music_beat_length_index14=0\n  local music_notes_length_index15=0\n \
    \ local music_beat_length_index15=0\n  local music_notes_length_index16=0\n  local\
    \ music_beat_length_index16=0\n  local music_notes_length_index17=0\n  local music_beat_length_index17=0\n\
    \  local music_notes_length_index18=0\n  local music_beat_length_index18=0\n \
    \ local music_notes_length_index19=0\n  local music_beat_length_index19=0\n  local\
    \ music_notes_length_index20=0\n  local music_beat_length_index20=0\n  local music_notes_length_index21=0\n\
    \  local music_beat_length_index21=0\n  local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_count=()\n    local music_notes_count_array=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_count_array_length=()\n    local music_notes_count_array_length=()\n\
    \    local music_notes_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_count=()\n    local music_arr_count_index=()\n    local music_arr_element=()\n\
    \    local music_arr_element_index=()\n    local music_arr_element_count=()\n\
    \    local music_arr_element_count_index=()\n    local music_arr_element_count_index_element=()\n\
    \    local music_arr_element_count_index_element_element=()\n    local music_arr_element_count_index_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element=()\n\
    \    local music_arr_element_count_index_element_element_element_element_element_element_element_element_element_element_element_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_str_index=0\n    local\
    \ music_notes_str_index2=0\n    local music_notes_str_index3=0\n    local music_notes_str_index4=0\n\
    \    local music_notes_str_index5=0\n    local music_notes_str_index6=0\n    local\
    \ music_notes_str_index7=0\n    local music_notes_str_index8=0\n    local music_notes_str_index9=0\n\
    \    local music_notes_str_index10=0\n    local music_notes_str_index11=0\n  \
    \  local music_notes_str_index12=0\n    local music_notes_str_index13=0\n    local\
    \ music_notes_str_index14=0\n    local music_notes_str_index15=0\n    local music_notes_str_index16=0\n\
    \    local music_notes_str_index17=0\n    local music_notes_str_index18=0\n  \
    \  local music_notes_str_index19=0\n    local music_notes_str_index20=0\n    local\
    \ music_notes_str_index21=0\n    local music_notes_str_index22=0\n    local music_notes_str_index23=0\n\
    \    local music_notes_str_index24=0\n    local music_notes_str_index25=0\n  \
    \  local music_notes_str_index26=0\n    local music_notes_str_index27=0\n    local\
    \ music_notes_str_index28=0\n    local music_notes_str_index29=0\n    local music_notes_str_index30=0\n\
    \    local music_notes_str_index31=0\n    local music_notes_str_index32=0\n  \
    \  local music_notes_str_index33=0\n    local music_notes_str_index34=0\n    local\
    \ music_notes_str_index35=0\n    local music_notes_str_index36=0\n    local music_notes_str_index37=0\n\
    \    local music_notes_str_index38=0\n    local music_notes_str_index39=0\n  \
    \  local music_notes_str_index40=0\n    local music_notes_str_index41=0\n    local\
    \ music_notes_str_index42=0\n    local music_notes_str_index43=0\n    local music_notes_str\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_count=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_avg=()\n\
    \    local music_last_beat_beats_count_avg_max=()\n    local music_last_beat_beats_count_avg_min=()\n\
    \    local music_last_beat_beats_count_min=()\n    local music_last_beat_beats_count_max=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_avg=()\n\
    \    local music_last_beat_beats_count_avg_max=()\n    local music_last_beat_beats_count_avg_min=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_sum=()\n\
    \    local music_last_beat_beats_count_sum_max=()\n    local music_last_beat_beats_count_sum_min=()\n\
    \    local music_last_beat_beats_count_avg=()\n    local music_last_beat_beats_count_avg_max=()\n\
    \    local music_last_beat_beats_count_avg_min=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_sum=()\n\
    \    local music_last_beat_beats_count_sum_max=()\n    local music_last_beat_beats_count_sum_min=()\n\
    \    local music_last_beat_beats_count_avg=()\n    local music_last_beat_beats_count_avg_max=()\n\
    \    local music_last_beat_beats_count_avg_min=()\n    local music_last_beat_beats_count_min=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_length=0\n    local music_notes_length_count=0\n\
    \    local music_notes_length_count2=0\n    local music_notes_length_count3=0\n\
    \    local music_notes_length_count4=0\n    local music_notes_length_count5=0\n\
    \    local music_notes_length_count6=0\n    local music_notes_length_count7=0\n\
    \    local music_notes_length_count8=0\n    local music_notes_length_count9=0\n\
    \    local music_notes_length_count10=0\n    local music_notes_length_count11=0\n\
    \    local music_notes_length_count12=0\n    local music_notes_length_count13=0\n\
    \    local music_notes_length_count14=0\n    local music_notes_length_count15=0\n\
    \    local music_notes_length_count16=0\n    local music_notes_length_count17=0\n\
    \    local music_notes_length_count18=0\n    local music_notes_length_count19=0\n\
    \    local music_notes_length_count20=0\n    local music_notes_length_count21=0\n\
    \    local music_notes_length_count22=0\n    local music_notes_length_count23=0\n\
    \    local music_notes_length_count24=0\n    local music_notes_length_count25=0\n\
    \    local music_notes_length_count26=0\n    local music_notes_length_count27=0\n\
    \    local music_notes_length_count28=0\n    local music_notes_length_count29=0\n\
    \    local music_notes_length_count30=0\n    local music_notes_length_count31=0\n\
    \    local music_notes_length_count32=0\n    local music_notes_length_count33=0\n\
    \    local music_notes_length_count34=0\n    local music_notes_length_count35=0\n\
    \    local music_notes_length_count36=0\n    local music_notes_length_count37=0\n\
    \    local music_notes_length_count38=0\n    local music_notes_length_count39=0\n\
    \    local music_notes_length_count40=0\n    local music_notes_length_count41=0\n\
    \    local music_notes_length_count42=0\n    local music_notes_length_count43=0\n\
    \    local music_notes_length\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_str=()\n    local music_last_beat_str_count_str_arr_str_count=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str=()\n    local music_last_beat_str_count_str_arr_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str=()\n    local\
    \ music_last_beat_str_count_str_arr_str_count_str_arr_str_arr=()\n    local music_last_beat_str_count_str_arr_str_count_str_arr_str_arr_str=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_arr_str_count=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_arr_str=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_arr_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_arr_str_arr_str_count=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_str_count_str_arr_str_count_str_arr_str_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_str=()\n    local music_last_beat_str_count=0\n\
    \    local music_last_beat_str_count_str=()\n    local music_last_beat_str_count_str_count=0\n\
    \    local music_last_beat_str_count_str_str=()\n    local music_last_beat_str_count_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str=()\n    local music_last_beat_str_count_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str=()\n    local music_last_beat_str_count_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str=()\n    local music_last_beat_str_count_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str=()\n    local music_last_beat_str_count_str_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str=()\n    local\
    \ music_last_beat_str_count_str_str_str_str_str_str_str_count=0\n    local music_last_beat_str_count_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beat_str_count_str_str_str_str_str_str_str_str_str_str_str_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//'|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o'}\n    local music_str_tmp=${music_str_tmp//'.'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//'.|'}\n\
    \    local music_str_tmp=${music_str_tmp//'o|'}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkq2a_ur9.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_notes=()\n    local music_last_beats=()\n\
    \    local music_last_beats_str=()\n    local music_last_beats_arr=()\n    local\
    \ music_last_beats_str_count=0\n    local music_last_beats_str_count_str=()\n\
    \    local music_last_beats_str_count_arr=()\n    local music_last_beats_str_count_str_count=0\n\
    \    local music_last_beats_str_count_str_arr=()\n    local music_last_beats_str_count_str_arr_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_count_count_count_size=${#music_last_beats_str_count_str_arr[@]}\n\
    \    local music_last_beats_str_count_str_arr_count_count_count_count_count_count_count_size=${#music_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphvb5j6s2.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_str=()\n\
    \    local music_last_beat_int=()\n    local music_last_beat_ints=()\n    local\
    \ music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n    local\
    \ music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n \
    \   local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local music_last_beat_ints_ints_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_beats_str=()\n    local music_beats_arr=()\n    local music_beats_arr_str=()\n\
    \    local music_beats_arr_str2=()\n    local music_beats_arr_str3=()\n    local\
    \ music_beats_arr_str4=()\n    local music_beats_arr_str5=()\n    local music_beats_arr_str6=()\n\
    \    local music_beats_arr_str7=()\n    local music_beats_arr_str8=()\n    local\
    \ music_beats_arr_str9=()\n    local music_beats_arr_str10=()\n    local music_beats_arr_str11=()\n\
    \    local music_beats_arr_str12=()\n    local music_beats_arr_str13=()\n    local\
    \ music_beats_arr_str14=()\n    local music_beats_arr_str15=()\n    local music_beats_arr_str16=()\n\
    \    local music_beats_arr_str17=()\n    local music_beats_arr_str18=()\n    local\
    \ music_beats_arr_str19=()\n    local music_beats_arr_str20=()\n    local music_beats_arr_str21=()\n\
    \    local music_beats_arr_str22=()\n    local music_beats_arr_str23=()\n    local\
    \ music_beats_arr_str24=()\n    local music_beats_arr_str25=()\n    local music_beats_arr_str26=()\n\
    \    local music_beats_arr_str27=()\n    local music_beats_arr_str28=()\n    local\
    \ music_beats_arr_str29=()\n    local music_beats_arr_str30=()\n    local music_beats_arr_str31=()\n\
    \    local music_beats_arr_str32=()\n    local music_beats_arr_str33=()\n    local\
    \ music_beats_arr_str34=()\n    local music_beats_arr_str35=()\n    local music_beats_arr_str36=()\n\
    \    local music_beats_arr_str37=()\n    local music_beats_arr_str38=()\n    local\
    \ music_beats_arr_str39=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_lasts=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_last_beats=()\n    local\
    \ music_last_last_notes=()\n    local music_last_last_last_beats=()\n    local\
    \ music_last_last_last_notes=()\n    local music_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_notes=()\n    local music_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_notes=()\n    local\
    \ music_last_last_last_last_last_last_last_last_last_beats=()\n    local music_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_beats=()\n    local\
    \ music_last_last_last_last_last_last_last_last_last_notes=()\n    local music_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \    local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_notes_str=()\n  local music_notes_arr=()\n  local music_notes_str_count=0\n\
    \  local music_notes_str_count_max=0\n  local music_notes_str_count_max_index=0\n\
    \  local music_notes_str_count_max_index2=0\n  local music_notes_str_count_max_index3=0\n\
    \  local music_notes_str_count_max_index4=0\n  local music_notes_str_count_max_index5=0\n\
    \  local music_notes_str_count_max_index6=0\n  local music_notes_str_count_max_index7=0\n\
    \  local music_notes_str_count_max_index8=0\n  local music_notes_str_count_max_index9=0\n\
    \  local music_notes_str_count_max_index10=0\n  local music_notes_str_count_max_index11=0\n\
    \  local music_notes_str_count_max_index12=0\n  local music_notes_str_count_max_index13=0\n\
    \  local music_notes_str_count_max_index14=0\n  local music_notes_str_count_max_index15=0\n\
    \  local music_notes_str_count_max_index16=0\n  local music_notes_str_count_max_index17=0\n\
    \  local music_notes_str_count_max_index18=0\n  local music_notes_str_count_max_index19=0\n\
    \  local music_notes_str_count_max_index20=0\n  local music_notes_str_count_max_index21=0\n\
    \  local music_notes_str_count_max_index22=0\n  local music_notes_str_count_max_index23=0\n\
    \  local music_notes_str_count_max_index24=0\n  local music_notes_str_count_max_index25=0\n\
    \  local music_notes_str_count_max_index26=0\n  local music_notes_str_count_max_index27=0\n\
    \  local music_notes_str_count_max_index28=0\n  local music_notes_str_count_max_index29=0\n\
    \  local music_notes_str_count_max_index30=0\n  local music_notes_str_count_max_index31=0\n\
    \  local music_notes_str_count_max_index32=0\n  local music_notes_str_count_max_index33=0\n\
    \  local music_notes_str_count_max_index34=0\n  local music_notes_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string_count=0\n    local\
    \ music_beats_string_length=0\n    local music_beats_string_length_count=0\n \
    \   local music_beats_string_length_length=0\n    local music_beats_string_length_length_length=0\n\
    \    local music_beats_string_length_length_length_length=0\n    local music_beats_string_length_length_length_length_length=0\n\
    \    local music_beats_string_length_length_length_length_length_length=0\n  \
    \  local music_beats_string_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_length=0\n    local\
    \ music_beats_string_length_length_length_length_length_length_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_lastbeats=()\n\
    \    local music_lastbeat=()\n    local music_lastnote=()\n    local music_lastnotebeat=()\n\
    \    local music_lastnotebeats=()\n    local music_lastnotes=()\n    local music_lastnotesbeat=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local\
    \ music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n    local music_lastnotesbeats=()\n\
    \    local music_lastnotesbeats=()\n    local music_lastnotesbeats=\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n\
    \    local music_beats_count_index=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_sum=()\n\
    \    local music_beats_count_index_sum_max=()\n    local music_beats_count_index_sum_min=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_index_min=()\n    local music_beats_count_index_max=()\n\
    \    local music_beats_count_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_str_tmp=${music_str//[|.]/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \  local music_str_tmp=${music_str_tmp//o|.|/}\n  local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwf510v9.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_index=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local music_last_note_length=()\n  local\
    \ music_last_note_length=()\n  local music_last_note_length=()\n  local music_last_note_length=()\n\
    \  local music_last_note_length=()\n  local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_note=()\n\
    \    local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_count=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_avg=()\n\
    \    local music_last_beat_beats_count_avg_max=()\n    local music_last_beat_beats_count_avg_min=()\n\
    \    local music_last_beat_beats_count_std=()\n    local music_last_beat_beats_count_std_max=()\n\
    \    local music_last_beat_beats_count_std_min=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_sum=()\n\
    \    local music_last_beat_beats_count_sum_max=()\n    local music_last_beat_beats_count_sum_min=()\n\
    \    local music_last_beat_beats_count_avg=()\n    local music_last_beat_beats_count_avg_max=()\n\
    \    local music_last_beat_beats_count_avg_min=()\n    local music_last_beat_beats_count_std=()\n\
    \    local music_last_beat_beats_count_std_max=()\n    local music_last_beat_beats_count_std_min=()\n\
    \    local music_last_beat_beats_count_min=()\n    local music_last_beat_beats_count_max=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_avg=()\n\
    \    local music_last_beat_beats_count_avg_max=()\n    local music_last_beat_beats_count_avg_min=()\n\
    \    local music_last_beat_beats_count_std=()\n    local music_last_beat_beats_count_std_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_str_tmp=()\n    local music_beats_arr_tmp=()\n    local\
    \ music_beats_str_tmp2=()\n    local music_beats_arr_tmp2=()\n    local music_beats_str_tmp3=()\n\
    \    local music_beats_arr_tmp3=()\n    local music_beats_str_tmp4=()\n    local\
    \ music_beats_arr_tmp4=()\n    local music_beats_str_tmp5=()\n    local music_beats_arr_tmp5=()\n\
    \    local music_beats_str_tmp6=()\n    local music_beats_arr_tmp6=()\n    local\
    \ music_beats_str_tmp7=()\n    local music_beats_arr_tmp7=()\n    local music_beats_str_tmp8=()\n\
    \    local music_beats_arr_tmp8=()\n    local music_beats_str_tmp9=()\n    local\
    \ music_beats_arr_tmp9=()\n    local music_beats_str_tmp10=()\n    local music_beats_arr_tmp10=()\n\
    \    local music_beats_str_tmp11=()\n    local music_beats_arr_tmp11=()\n    local\
    \ music_beats_str_tmp12=()\n    local music_beats_arr_tmp12=()\n    local music_beats_str_tmp13=()\n\
    \    local music_beats_arr_tmp13=()\n    local music_beats_str_tmp14=()\n    local\
    \ music_beats_arr_tmp14=()\n    local music_beats_str_tmp15=()\n    local music_beats_arr_tmp15=()\n\
    \    local music_beats_str_tmp16=()\n    local music_beats_arr_tmp16=()\n    local\
    \ music_beats_str_tmp17=()\n    local music_beats_arr_tmp17=()\n    local music_beats_str_tmp18=()\n\
    \    local music_beats_arr_tmp18=()\n    local music_beats_str_tmp19=()\n    local\
    \ music_beats_arr_tmp19=()\n    local music_beats_str_tmp20=\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string_array=()\n    local\
    \ music_beats_string_array_length=()\n    local music_beats_string_array_length_count=0\n\
    \    local music_beats_string_array_length_count1=0\n    local music_beats_string_array_length_count2=0\n\
    \    local music_beats_string_array_length_count3=0\n    local music_beats_string_array_length_count4=0\n\
    \    local music_beats_string_array_length_count5=0\n    local music_beats_string_array_length_count6=0\n\
    \    local music_beats_string_array_length_count7=0\n    local music_beats_string_array_length_count8=0\n\
    \    local music_beats_string_array_length_count9=0\n    local music_beats_string_array_length_count10=0\n\
    \    local music_beats_string_array_length_count11=0\n    local music_beats_string_array_length_count12=0\n\
    \    local music_beats_string_array_length_count13=0\n    local music_beats_string_array_length_count14=0\n\
    \    local music_beats_string_array_length_count15=0\n    local music_beats_string_array_length_count16=0\n\
    \    local music_beats_string_array_length_count17=0\n    local music_beats_string_array_length_count18=0\n\
    \    local music_beats_string_array_length_count19=0\n    local music_beats_string_array_length_count20=0\n\
    \    local music_beats_string_array_length_count21=0\n    local music_beats_string_array_length_count22=0\n\
    \    local music_beats_string_array_length_count23=0\n    local music_beats_string_array_length_count24=0\n\
    \    local music_beats_string_array_length_count25=0\n    local music_beats_string_array_length_count26=0\n\
    \    local music_beats_string_array_length_count27=0\n    local music_beats_string_array_length_count28=0\n\
    \    local music_beats_string_array_length_count29=0\n    local music_beats_string_array_length_count30=0\n\
    \    local music_beats_string_array_length_count31=0\n    local music_beats_string_array_length_count32=0\n\
    \    local music_beats_string_array_length_count\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_note_count=0\n   \
    \ local music_beat_count=0\n    local music_note_length=0\n    local music_beat_length=0\n\
    \    local music_note_offset=0\n    local music_beat_offset=0\n    local music_note_length_count=0\n\
    \    local music_beat_length_count=0\n    local music_note_offset_count=0\n  \
    \  local music_beat_offset_count=0\n    local music_note_length_count=0\n    local\
    \ music_beat_length_count=0\n    local music_note_offset_count=0\n    local music_beat_offset_count=0\n\
    \    local music_note_length_count=0\n    local music_beat_length_count=0\n  \
    \  local music_note_offset_count=0\n    local music_beat_offset_count=0\n    local\
    \ music_note_length_count=0\n    local music_beat_length_count=0\n    local music_note_offset_count=0\n\
    \    local music_beat_offset_count=0\n    local music_note_length_count=0\n  \
    \  local music_beat_length_count=0\n    local music_note_offset_count=0\n    local\
    \ music_beat_offset_count=0\n    local music_note_length_count=0\n    local music_beat_length_count=0\n\
    \    local music_note_offset_count=0\n    local music_beat_offset_count=0\n  \
    \  local music_note_length_count=0\n    local music_beat_length_count=0\n    local\
    \ music_note_offset_count=0\n    local music_beat_offset_count=0\n    local music_note_length_count=0\n\
    \    local music_beat_length_count=0\n    local music_note_offset_count=0\n  \
    \  local music_beat_offset_count=0\n    local music_note_length_count=0\n    local\
    \ music_beat_length_count=0\n    local music_note_offset_count=0\n    local music_beat_offset_count=0\n\
    \    local music_note_length_count=0\n    local music_beat_length_count=0\n  \
    \  local music_note_offset_count=0\n    local music_beat_offset_count=0\n    local\
    \ music_note_length_count=0\n    local music_beat_length_count=0\n    local music_note_offset_count=0\n\
    \    local music_beat_offset_count=0\n    local music_note_length_count=0\n  \
    \  local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr2=()\n    local music_last_notes_beats_str_arr3=()\n\
    \    local music_last_notes_beats_str_arr4=()\n    local music_last_notes_beats_str_arr5=()\n\
    \    local music_last_notes_beats_str_arr6=()\n    local music_last_notes_beats_str_arr7=()\n\
    \    local music_last_notes_beats_str_arr8=()\n    local music_last_notes_beats_str_arr9=()\n\
    \    local music_last_notes_beats_str_arr10=()\n    local music_last_notes_beats_str_arr11=()\n\
    \    local music_last_notes_beats_str_arr12=()\n    local music_last_notes_beats_str_arr13=()\n\
    \    local music_last_notes_beats_str_arr14=()\n    local music_last_notes_beats_str_arr15=()\n\
    \    local music_last_notes_beats_str_arr16=()\n    local music_last_notes_beats_str_arr17=()\n\
    \    local music_last_notes_beats_str_arr18=()\n    local music_last_notes_beats_str_arr19=()\n\
    \    local music_last_notes_beats_str_arr20=()\n    local music_last_notes_beats_str_arr21=()\n\
    \    local music_last_notes_beats_str_arr22=()\n    local music_last_notes_beats_str_arr23=()\n\
    \    local music_last_notes_beats_str_arr24=()\n    local music_last_notes_beats_str_arr25=()\n\
    \    local music_last_notes_beats_str_arr26=()\n    local music_last_notes_beats_str_arr27=()\n\
    \    local music_last_notes_beats_str_arr28=()\n    local music_last_notes_beat\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_shift=()\n    local music_last_note_octave_shift_sign=()\n\
    \    local music_last_note_octave_shift_value=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_shift_value_sign=()\n    local music_last_note_octave_shift_value_sign=()\n\
    \    local music_last_note_octave_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_shift=()\n    local music_last_note_octave_shift2=()\n\
    \    local music_last_note_octave_shift3=()\n    local music_last_note_octave_shift4=()\n\
    \    local music_last_note_octave_shift5=()\n    local music_last_note_octave_shift6=()\n\
    \    local music_last_note_octave_shift7=()\n    local music_last_note_octave_shift8=()\n\
    \    local music_last_note_octave_shift9=()\n    local music_last_note_octave_shift10=()\n\
    \    local music_last_note_octave_shift11=()\n    local music_last_note_octave_shift12=()\n\
    \    local music_last_note_octave_shift13=()\n    local music_last_note_octave_shift14=()\n\
    \    local music_last_note_octave_shift15=()\n    local music_last_note_octave_shift16=()\n\
    \    local music_last_note_octave_shift17=()\n    local music_last_note_octave_shift18=()\n\
    \    local music_last_note_octave_shift19=()\n    local music_last_note_octave_shift20=()\n\
    \    local music_last_note_octave_shift21=()\n    local music_last_note_octave_shift22=()\n\
    \    local music_last_note_octave_shift23=()\n    local music_last_note_octave_shift24=()\n\
    \    local music_last_note_octave_shift25=()\n    local music_last_note_octave_shift26=()\n\
    \    local music_last_note_octave_shift27=()\n    local music_last_note_octave_shift28=()\n\
    \    local music_last_note_octave_shift29=()\n    local music_last_note_octave_shift30=()\n\
    \    local music_last_note_oct\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_str=()\n\
    \    local music_last_beat_int=()\n    local music_last_beat_ints=()\n    local\
    \ music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n    local\
    \ music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n \
    \   local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local music_last_beat_ints_ints_\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk3ru2p27.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.]\\|/}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp=${music_str_tmp//[|.]\\./}\n    local music_str_tmp=${music_str_tmp//[|.]\\\
    ./}\n    local music_str_tmp\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_beats=0\n    local music_notes=0\n    local music_last_note='o'\n    local\
    \ music_last_beats=0\n    local music_last_beats_notes=0\n    local music_last_beats_notes_array=()\n\
    \    local music_last_beats_notes_beats=0\n    local music_last_beats_notes_beats_notes=0\n\
    \    local music_last_beats_notes_beats_notes_array=()\n    local music_last_beats_notes_beats_notes_beats=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes=0\n    local music_last_beats_notes_beats_notes_beats_notes_array=()\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats=0\n    local music_last_beats_notes_beats_notes_beats_notes_beats_notes=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_array=()\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_array=()\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_array=()\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes=0\n\
    \    local music_last_beats_notes_beats_notes_beats_notes_beats_notes_beats_note\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_array=()\n\
    \    local music_last_beat_beats_string=()\n    local music_last_beat_beats_string_size=()\n\
    \    local music_last_beat_beats_string_size=${#music_last_beat_beats_string[@]}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string_size}\n\
    \    local music_last_beat_beats_string_size=${music_last_beat_beats_string\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1pjbetat.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_note_count=()\n    local music_notes_count=()\n    local music_notes_count_max=4\n\
    \    local music_notes_count_min=4\n    local music_notes_count_step=2\n    local\
    \ music_notes_count_max=4\n    local music_notes_count_min=4\n    local music_notes_count_step=2\n\
    \    local music_notes_count_max=4\n    local music_notes_count_min=4\n    local\
    \ music_notes_count_step=2\n    local music_notes_count_max=4\n    local music_notes_count_min=4\n\
    \    local music_notes_count_step=2\n    local music_notes_count_max=4\n    local\
    \ music_notes_count_min=4\n    local music_notes_count_step=2\n    local music_notes_count_max=4\n\
    \    local music_notes_count_min=4\n    local music_notes_count_step=2\n    local\
    \ music_notes_count_max=4\n    local music_notes_count_min=4\n    local music_notes_count_step=2\n\
    \    local music_notes_count_max=4\n    local music_notes_count_min=4\n    local\
    \ music_notes_count_step=2\n    local music_notes_count_max=4\n    local music_notes_count_min=4\n\
    \    local music_notes_count_step=2\n    local music_notes_count_max=4\n    local\
    \ music_notes_count_min=4\n    local music_notes_count_step=2\n    local music_notes_count_max=4\n\
    \    local music_notes_count_min=4\n    local music_notes_count_step=2\n    local\
    \ music_notes_count_max=4\n    local music_notes_count_min=4\n    local music_notes_count_step=2\n\
    \    local music_notes_count_max=4\n    local music_notes_count_min=4\n    local\
    \ music_notes_count_step=2\n    local music_notes_count_max=4\n    local music_notes_count_min=4\n\
    \    local music_notes_count_step=2\n    local music_notes_count_max=4\n    local\
    \ music_notes_count_min=4\n    local music_notes_count_step=2\n    local musi\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_notes_length=()\n  local music_notes_length_count=0\n  local music_notes_length_index=0\n\
    \  local music_notes_length_index2=0\n  local music_notes_length_index3=0\n  local\
    \ music_notes_length_index4=0\n  local music_notes_length_index5=0\n  local music_notes_length_index6=0\n\
    \  local music_notes_length_index7=0\n  local music_notes_length_index8=0\n  local\
    \ music_notes_length_index9=0\n  local music_notes_length_index10=0\n  local music_notes_length_index11=0\n\
    \  local music_notes_length_index12=0\n  local music_notes_length_index13=0\n\
    \  local music_notes_length_index14=0\n  local music_notes_length_index15=0\n\
    \  local music_notes_length_index16=0\n  local music_notes_length_index17=0\n\
    \  local music_notes_length_index18=0\n  local music_notes_length_index19=0\n\
    \  local music_notes_length_index20=0\n  local music_notes_length_index21=0\n\
    \  local music_notes_length_index22=0\n  local music_notes_length_index23=0\n\
    \  local music_notes_length_index24=0\n  local music_notes_length_index25=0\n\
    \  local music_notes_length_index26=0\n  local music_notes_length_index27=0\n\
    \  local music_notes_length_index28=0\n  local music_notes_length_index29=0\n\
    \  local music_notes_length_index30=0\n  local music_notes_length_index31=0\n\
    \  local music_notes_length_index32=0\n  local music_notes_length_index33=0\n\
    \  local music_notes_length_index34=0\n  local music_notes_length_index35=0\n\
    \  local music_notes_length_index36=0\n  local music_notes_length_index37=0\n\
    \  local music_notes_length_index38=0\n  local music_notes_length_index39=0\n\
    \  local music_notes_length_index40=0\n  local music_notes_length_index41=0\n\
    \  local music_notes_length_index42=0\n  local music_notes_length_index\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_note=()\n  local music_last_beat=()\n\
    \  local music_last_beat_str=()\n  local music_last_beat_arr=()\n  local music_last_beat_arr_index=()\n\
    \  local music_last_beat_arr_str=()\n  local music_last_beat_arr_str_index=()\n\
    \  local music_last_beat_arr_str_length=()\n  local music_last_beat_arr_str_length_index=()\n\
    \  local music_last_beat_arr_str_length_max=()\n  local music_last_beat_arr_str_length_max_index=()\n\
    \  local music_last_beat_arr_str_length_min=()\n  local music_last_beat_arr_str_length_min_index=()\n\
    \  local music_last_beat_arr_str_length_avg=()\n  local music_last_beat_arr_str_length_avg_index=()\n\
    \  local music_last_beat_arr_str_length_min=()\n  local music_last_beat_arr_str_length_min_index=()\n\
    \  local music_last_beat_arr_str_length_max=()\n  local music_last_beat_arr_str_length_max_index=()\n\
    \  local music_last_beat_arr_str_length_avg=()\n  local music_last_beat_arr_str_length_avg_index=()\n\
    \  local music_last_beat_arr_str_length_min=()\n  local music_last_beat_arr_str_length_min_index=()\n\
    \  local music_last_beat_arr_str_length_max=()\n  local music_last_beat_arr_str_length_max_index=()\n\
    \  local music_last_beat_arr_str_length_avg=()\n  local music_last_beat_arr_str_length_avg_index=()\n\
    \  local music_last_beat_arr_str_length_min=()\n  local music_last_beat_arr_str_length_min_index=()\n\
    \  local music_last_beat_arr_str_length_max=()\n  local music_last_beat_arr_str_length_max_index=()\n\
    \  local music_last_beat_arr_str_length_avg=()\n  local music_last_beat_arr_str_length_avg_index=()\n\
    \  local music_last_beat_arr_str_length_min=()\n  local music_last_beat_arr_str_length_min_index=()\n\
    \  local music_last_beat_arr_str_length_max=()\n  local music_last_beat_arr_str_length_max_index=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_arr_index=0\n\
    \  local music_arr_length=0\n  local music_arr_beats=0\n  local music_arr_beats_index=0\n\
    \  local music_arr_beats_length=0\n  local music_arr_beats_index2=0\n  local music_arr_beats_length2=0\n\
    \  local music_arr_beats_index3=0\n  local music_arr_beats_length3=0\n  local\
    \ music_arr_beats_index4=0\n  local music_arr_beats_length4=0\n  local music_arr_beats_index5=0\n\
    \  local music_arr_beats_length5=0\n  local music_arr_beats_index6=0\n  local\
    \ music_arr_beats_length6=0\n  local music_arr_beats_index7=0\n  local music_arr_beats_length7=0\n\
    \  local music_arr_beats_index8=0\n  local music_arr_beats_length8=0\n  local\
    \ music_arr_beats_index9=0\n  local music_arr_beats_length9=0\n  local music_arr_beats_index10=0\n\
    \  local music_arr_beats_length10=0\n  local music_arr_beats_index11=0\n  local\
    \ music_arr_beats_length11=0\n  local music_arr_beats_index12=0\n  local music_arr_beats_length12=0\n\
    \  local music_arr_beats_index13=0\n  local music_arr_beats_length13=0\n  local\
    \ music_arr_beats_index14=0\n  local music_arr_beats_length14=0\n  local music_arr_beats_index15=0\n\
    \  local music_arr_beats_length15=0\n  local music_arr_beats_index16=0\n  local\
    \ music_arr_beats_length16=0\n  local music_arr_beats_index17=0\n  local music_arr_beats_length17=0\n\
    \  local music_arr_beats_index18=0\n  local music_arr_beats_length18=0\n  local\
    \ music_arr_beats_index19=0\n  local music_arr_beats_length19=0\n  local music_arr_beats_index20=0\n\
    \  local music_arr_beats_length20=0\n  local music_arr_beats_index21=0\n  local\
    \ music_arr_beats_length21=0\n  local music_arr_beats_index22=0\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//'|'/}\n\
    \    local music_str_tmp=${music_str_tmp//'o|/}\n    local music_str_tmp=${music_str_tmp//'o.|/}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str_tmp//'o./}\n    local music_str_tmp=${music_str_tmp//'o./}\n\
    \    local music_str_tmp=${music_str\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp3d6pm7bj.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_beat=()\n  local music_last_note_beat_beat=()\n  local\
    \ music_last_note_beat_beat_beat=()\n  local music_last_note_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat=()\n  local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n  local\
    \ music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n  local\
    \ music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n  local\
    \ music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \  local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count=()\n    local music_last_beat_str_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr=()\n    local music_last_beat_str_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count=()\n   \
    \ local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_beats_str=()\n    local music_last_notes_str=()\n    local\
    \ music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n   \
    \ local music_last_beats_str_index_arr=()\n    local music_last_notes_str_index_arr=()\n\
    \    local music_last_beats_str_index_arr_str=()\n    local music_last_notes_str_index_arr_str=()\n\
    \    local music_last_beats_str_index_arr_str_index=()\n    local music_last_notes_str_index_arr_str_index=()\n\
    \    local music_last_beats_str_index_arr_str_index_str=()\n    local music_last_notes_str_index_arr_str_index_str=()\n\
    \    local music_last_beats_str_index_arr_str_index_str_arr=()\n    local music_last_notes_str_index_arr_str_index_str_arr=()\n\
    \    local music_last_beats_str_index_arr_str_index_str_arr_str=()\n    local\
    \ music_last_notes_str_index_arr_str_index_str_arr_str=()\n    local music_last_beats_str_index_arr_str_index_str_arr_str_index=()\n\
    \    local music_last_notes_str_index_arr_str_index_str_arr_str_index=()\n   \
    \ local music_last_beats_str_index_arr_str_index_str_arr_str_index_str=()\n  \
    \  local music_last_notes_str_index_arr_str_index_str_arr_str_index_str=()\n \
    \   local music_last_beats_str_index_arr_str_index_str_arr_str_index_str_arr=()\n\
    \    local music_last_notes_str_index_arr_str_index_str_arr_str_index_str_arr=()\n\
    \    local music_last_beats_str_index_arr_str_index_str_arr_str_index_str_arr_str=()\n\
    \    local music_last_notes_str_index_arr_str_index_str_arr_str_index_str_arr_str=()\n\
    \    local music_last_beats_str_index_arr_str_index_str_arr_str_index_str_arr_str_index=()\n\
    \    local music_last_notes_str_index_arr_str_index_str_arr_str_index_str_arr_str_index=()\n\
    \    local music_last_beats_str_index_arr_str_index_str_arr_str_index_str_arr_str_index_str=()\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_beat=()\n    local music_last_note_beat_count=()\n\
    \    local music_last_note_beat_count_index=()\n    local music_last_note_beat_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index=()\n    local music_last_note_beat_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index=()\n    local\
    \ music_last_note_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_note_beat_count_index_count_index_count_index_count_index=()\n  \
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_note_beat_count_index_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_reversed=\"${music_str//|/}\"\
    \n    local music_str_reversed_reversed=\"${music_str_reversed//./}\"\n    local\
    \ music_str_reversed_reversed_reversed=\"${music_str_reversed_reversed//o/}\"\n\
    \    local music_str_reversed_reversed_reversed_reversed=\"${music_str_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed=\"${music_str_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed//o/}\"\n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\n   \
    \ local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|}\n    local music_str_tmp=${music_str_tmp//o}\n\
    \    local music_str_tmp=${music_str_tmp//|}\n    local music_str_tmp=${music_str_tmp//.}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp=${music_str_tmp//}\n    local music_str_tmp=${music_str_tmp//}\n\
    \    local music_str_tmp\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_notes=()\n    local music_last_beats=()\n\
    \    local music_last_beats_str=()\n    local music_last_beats_str_count=0\n \
    \   local music_last_beats_str_count_str=()\n    local music_last_beats_str_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count=()\n    local music_last_beats_str_count_str_arr_count_str=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr=()\n    local music_last_beats_str_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str=()\n   \
    \ local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr=()\n  \
    \  local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beats_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_beats_string=()\n    local music_beats_string2=\"\"\n    local\
    \ music_beats_string3=\"\"\n    local music_beats_string4=\"\"\n    local music_beats_string5=\"\
    \"\n    local music_beats_string6=\"\"\n    local music_beats_string7=\"\"\n \
    \   local music_beats_string8=\"\"\n    local music_beats_string9=\"\"\n    local\
    \ music_beats_string10=\"\"\n    local music_beats_string11=\"\"\n    local music_beats_string12=\"\
    \"\n    local music_beats_string13=\"\"\n    local music_beats_string14=\"\"\n\
    \    local music_beats_string15=\"\"\n    local music_beats_string16=\"\"\n  \
    \  local music_beats_string17=\"\"\n    local music_beats_string18=\"\"\n    local\
    \ music_beats_string19=\"\"\n    local music_beats_string20=\"\"\n    local music_beats_string21=\"\
    \"\n    local music_beats_string22=\"\"\n    local music_beats_string23=\"\"\n\
    \    local music_beats_string24=\"\"\n    local music_beats_string25=\"\"\n  \
    \  local music_beats_string26=\"\"\n    local music_beats_string27=\"\"\n    local\
    \ music_beats_string28=\"\"\n    local music_beats_string29=\"\"\n    local music_beats_string30=\"\
    \"\n    local music_beats_string31=\"\"\n    local music_beats_string32=\"\"\n\
    \    local music_beats_string33=\"\"\n    local music_beats_string34=\"\"\n  \
    \  local music_beats_string35=\"\"\n    local music_beats_string36=\"\"\n    local\
    \ music_beats_string37=\"\"\n    local music_beats_string38=\"\"\n    local music_beats_string39=\"\
    \"\n    local music_beats_string40=\"\"\n    local music_beats_string41=\"\"\n\
    \    local music_beats_string42=\"\"\n    local music_beats_string43=\"\"\n  \
    \  local music_beats_string44=\"\"\n    local music_beats_string45=\"\"\n    local\
    \ music_beats_string46=\"\"\n    local music_beats_string47=\"\"\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_length=()\n    local music_arr_note=()\n    local music_arr_beat=()\n\
    \    local music_arr_beat_index=()\n    local music_arr_beat_length=()\n    local\
    \ music_arr_beat_note=()\n    local music_arr_beat_note_index=()\n    local music_arr_beat_note_length=()\n\
    \    local music_arr_beat_note_octave=()\n    local music_arr_beat_note_octave_index=()\n\
    \    local music_arr_beat_note_octave_length=()\n    local music_arr_beat_note_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_index=()\n    local music_arr_beat_note_octave_octave_length=()\n\
    \    local music_arr_beat_note_octave_octave_octave=()\n    local music_arr_beat_note_octave_octave_octave_index=()\n\
    \    local music_arr_beat_note_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_index=()\n    local\
    \ music_arr_beat_note_octave_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_index=()\n    local\
    \ music_arr_beat_note_octave_octave_octave_octave_length=()\n    local music_arr_beat_note_octave_octave_octave_octave_octave=()\n\
    \    local music_arr_beat_note_octave_octave_octave_octave_octave_index=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave_length=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave_octave=()\n \
    \   local music_arr_beat_note_octave_octave_octave_octave_octave\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_index=()\n\
    \    local music_arr_count=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local music_arr_count_index=()\n    local\
    \ music_arr_count_index=()\n    local music_arr_count_index=()\n    local music_arr_count_index=()\n\
    \    local music_arr_count_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_last_beats=()\n\
    \    local music_last_notes=()\n    local music_last_beats_str=()\n    local music_last_notes_str=()\n\
    \    local music_last_beats_str_count=0\n    local music_last_notes_str_count=0\n\
    \    local music_last_beats_str_count_temp=0\n    local music_last_notes_str_count_temp=0\n\
    \    local music_last_beats_str_count_temp2=0\n    local music_last_notes_str_count_temp2=0\n\
    \    local music_last_beats_str_count_temp3=0\n    local music_last_notes_str_count_temp3=0\n\
    \    local music_last_beats_str_count_temp4=0\n    local music_last_notes_str_count_temp4=0\n\
    \    local music_last_beats_str_count_temp5=0\n    local music_last_notes_str_count_temp5=0\n\
    \    local music_last_beats_str_count_temp6=0\n    local music_last_notes_str_count_temp6=0\n\
    \    local music_last_beats_str_count_temp7=0\n    local music_last_notes_str_count_temp7=0\n\
    \    local music_last_beats_str_count_temp8=0\n    local music_last_notes_str_count_temp8=0\n\
    \    local music_last_beats_str_count_temp9=0\n    local music_last_notes_str_count_temp9=0\n\
    \    local music_last_beats_str_count_temp10=0\n    local music_last_notes_str_count_temp10=0\n\
    \    local music_last_beats_str_count_temp11=0\n    local music_last_notes_str_count_temp11=0\n\
    \    local music_last_beats_str_count_temp12=0\n    local music_last_notes_str_count_temp12=0\n\
    \    local music_last_beats_str_count_temp13=0\n    local music_last_notes_str_count_temp13=0\n\
    \    local music_last_beats_str_count_temp14=0\n    local music_last_notes_str_count_temp14=0\n\
    \    local music_last_beats_str_count_temp15=0\n    local music_last_notes_str_count_temp15=0\n\
    \    local music_last_beats_str_count_temp16=0\n    local music_last_notes_str_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n\
    \    local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_note=()\n\
    \    local music_last_beat_note_count=()\n    local music_last_beat_note_octave=()\n\
    \    local music_last_beat_note_octave_count=()\n    local music_last_beat_note_octave_octave=()\n\
    \    local music_last_beat_note_octave_octave_count=()\n    local music_last_beat_note_octave_octave_octave=()\n\
    \    local music_last_beat_note_octave_octave_octave_count=()\n    local music_last_beat_note_octave_octave_octave_octave=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_count=()\n    local\
    \ music_last_beat_note_octave_octave_octave_octave_octave=()\n    local music_last_beat_note_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_octave_count=()\n\
    \    local music_last_beat_note_octave_octave_octave_octave_octave_octave_octave_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last=()\n    local music_lasts=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_lasts_count=()\n    local music_lasts_count=()\n    local music_lasts_count=()\n\
    \    local music_last\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat=()\n    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n \
    \   local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \    local music_last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last=()\n  local music_last_beats=()\n\
    \  local music_last_notes=()\n  local music_last_last_beats=()\n  local music_last_last_notes=()\n\
    \  local music_last_last_last_beats=()\n  local music_last_last_last_notes=()\n\
    \  local music_last_last_last_last_beats=()\n  local music_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_last_beats=()\n    local music_last_beats_str=()\n    local music_last_beats_str_index=0\n\
    \    local music_last_beats_str_index2=0\n    local music_last_beats_str_index3=0\n\
    \    local music_last_beats_str_index4=0\n    local music_last_beats_str_index5=0\n\
    \    local music_last_beats_str_index6=0\n    local music_last_beats_str_index7=0\n\
    \    local music_last_beats_str_index8=0\n    local music_last_beats_str_index9=0\n\
    \    local music_last_beats_str_index10=0\n    local music_last_beats_str_index11=0\n\
    \    local music_last_beats_str_index12=0\n    local music_last_beats_str_index13=0\n\
    \    local music_last_beats_str_index14=0\n    local music_last_beats_str_index15=0\n\
    \    local music_last_beats_str_index16=0\n    local music_last_beats_str_index17=0\n\
    \    local music_last_beats_str_index18=0\n    local music_last_beats_str_index19=0\n\
    \    local music_last_beats_str_index20=0\n    local music_last_beats_str_index21=0\n\
    \    local music_last_beats_str_index22=0\n    local music_last_beats_str_index23=0\n\
    \    local music_last_beats_str_index24=0\n    local music_last_beats_str_index25=0\n\
    \    local music_last_beats_str_index26=0\n    local music_last_beats_str_index27=0\n\
    \    local music_last_beats_str_index28=0\n    local music_last_beats_str_index29=0\n\
    \    local music_last_beats_str_index30=0\n    local music_last_beats_str_index31=0\n\
    \    local music_last_beats_str_index32=0\n    local music_last_beats_str_index33=0\n\
    \    local music_last_beats_str_index34=0\n    local music_last_beats_str_index35=0\n\
    \    local music_last_beats_str_index36=0\n    local music_last_beats_str_index37=0\n\
    \    local music_last_beats_str_index38=0\n    local music_last_beats_str_index39=0\n\
    \    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_sum_squares=()\n\
    \    local music_last_notes_beats_count_sum_squares_max=()\n    local music_last_notes_beats_count_sum_squares_min=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum=()\n    local music_last_notes_beats_count_sum_squares_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_min=()\n    local music_last_notes_beats_count_sum_squares_sum_squares=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_max=()\n    local\
    \ music_last_notes_beats_count_sum_squares_sum_squares_min=()\n    local music_last_notes_beats_count_sum_squares_sum_squares_sum=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_max=()\n \
    \   local music_last_notes_beats_count_sum_squares_sum_squares_sum_min=()\n  \
    \  local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_max=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_min=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_sum=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_sum_squares_max=()\n\
    \    local music_last_notes_beats_count_sum_squares_sum_squares_sum_squares_sum_squares_min=()\n\
    \    local music_last_notes_beats_count_sum_squares_\n}\n\ncandidate() {\n   \
    \ parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_str_tmp\n\
    \    local music_str_tmp2\n    local music_str_tmp3\n    local music_str_tmp4\n\
    \    local music_str_tmp5\n    local music_str_tmp6\n    local music_str_tmp7\n\
    \    local music_str_tmp8\n    local music_str_tmp9\n    local music_str_tmp10\n\
    \    local music_str_tmp11\n    local music_str_tmp12\n    local music_str_tmp13\n\
    \    local music_str_tmp14\n    local music_str_tmp15\n    local music_str_tmp16\n\
    \    local music_str_tmp17\n    local music_str_tmp18\n    local music_str_tmp19\n\
    \    local music_str_tmp20\n    local music_str_tmp21\n    local music_str_tmp22\n\
    \    local music_str_tmp23\n    local music_str_tmp24\n    local music_str_tmp25\n\
    \    local music_str_tmp26\n    local music_str_tmp27\n    local music_str_tmp28\n\
    \    local music_str_tmp29\n    local music_str_tmp30\n    local music_str_tmp31\n\
    \    local music_str_tmp32\n    local music_str_tmp33\n    local music_str_tmp34\n\
    \    local music_str_tmp35\n    local music_str_tmp36\n    local music_str_tmp37\n\
    \    local music_str_tmp38\n    local music_str_tmp39\n    local music_str_tmp40\n\
    \    local music_str_tmp41\n    local music_str_tmp42\n    local music_str_tmp43\n\
    \    local music_str_tmp44\n    local music_str_tmp45\n    local music_str_tmp46\n\
    \    local music_str_tmp47\n    local music_str_tmp48\n    local music_str_tmp49\n\
    \    local music_str_tmp50\n    local music_str_tmp51\n    local music_str_tmp52\n\
    \    local music_str_tmp53\n    local music_str_tmp54\n    local music_str_tmp55\n\
    \    local music_str_tmp56\n    local music_str_tmp57\n    local music_str_tmp58\n\
    \    local music_str_tmp59\n    local music_str_tmp60\n    local music_str_tmp61\n\
    \    local music_str_tmp62\n    \n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_size=${#music_str}\n\
    \    local music_notes=()\n    local music_notes_size=0\n    local music_notes_index=0\n\
    \    local music_notes_index2=0\n    local music_notes_index3=0\n    local music_notes_index4=0\n\
    \    local music_notes_index5=0\n    local music_notes_index6=0\n    local music_notes_index7=0\n\
    \    local music_notes_index8=0\n    local music_notes_index9=0\n    local music_notes_index10=0\n\
    \    local music_notes_index11=0\n    local music_notes_index12=0\n    local music_notes_index13=0\n\
    \    local music_notes_index14=0\n    local music_notes_index15=0\n    local music_notes_index16=0\n\
    \    local music_notes_index17=0\n    local music_notes_index18=0\n    local music_notes_index19=0\n\
    \    local music_notes_index20=0\n    local music_notes_index21=0\n    local music_notes_index22=0\n\
    \    local music_notes_index23=0\n    local music_notes_index24=0\n    local music_notes_index25=0\n\
    \    local music_notes_index26=0\n    local music_notes_index27=0\n    local music_notes_index28=0\n\
    \    local music_notes_index29=0\n    local music_notes_index30=0\n    local music_notes_index31=0\n\
    \    local music_notes_index32=0\n    local music_notes_index33=0\n    local music_notes_index34=0\n\
    \    local music_notes_index35=0\n    local music_notes_index36=0\n    local music_notes_index37=0\n\
    \    local music_notes_index38=0\n    local music_notes_index39=0\n    local music_notes_index40=0\n\
    \    local music_notes_index41=0\n    local music_notes_index42=0\n    local music_notes_index43=0\n\
    \    local music_notes_index44=0\n    local music_notes_index45=0\n    local music_notes_index46=0\n\
    \    local music_notes_index\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_notes=()\n    local music_last_beats=()\n\
    \    local music_last_beats_str=()\n    local music_last_beats_str_count=0\n \
    \   local music_last_beats_str_last=()\n    local music_last_beats_str_last_count=-1\n\
    \    local music_last_beats_str_last_last=()\n    local music_last_beats_str_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last=()\n    local music_last_beats_str_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last=()\n    local music_last_beats_str_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last=()\n    local music_last_beats_str_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last=()\n    local music_last_beats_str_last_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last=()\n    local\
    \ music_last_beats_str_last_last_last_last_last_last_last_count=-1\n    local\
    \ music_last_beats_str_last_last_last_last_last_last_last_last=()\n    local music_last_beats_str_last_last_last_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last=()\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last=()\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last_last_last=()\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last_last_last=()\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last_last_last_count=-1\n\
    \    local music_last_beats_str_last_last_last_last_last_last_last_last_last_last_last_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_notes_array=()\n \
    \   local music_beats_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_beats_array_length=()\n    local music_notes_beats_array_length_max=()\n\
    \    local music_notes_beats_array_length_min=()\n    local music_notes_beats_array_length_sum=()\n\
    \    local music_notes_beats_array_length_average=()\n    local music_notes_beats_array_length_median=()\n\
    \    local music_notes_beats_array_length_std=()\n    local music_notes_beats_array_length_min=()\n\
    \    local music_notes_beats_array_length_max=()\n    local music_notes_beats_array_length_min=()\n\
    \    local music_notes_beats_array_length_sum=()\n    local music_notes_beats_array_length_average=()\n\
    \    local music_notes_beats_array_length_median=()\n    local music_notes_beats_array_length_std=()\n\
    \    local music_notes_beats_array_length_min=()\n    local music_notes_beats_array_length_max=()\n\
    \    local music_notes_beats_array_length_min=()\n    local music_notes_beats_array_length_sum=()\n\
    \    local music_notes_beats_array_length_average=()\n    local music_notes_beats_array_length_median=()\n\
    \    local music_notes_beats_array_length_std=()\n    local music_notes_beats_array_length_min=()\n\
    \    local music_notes_beats_array_length_max=()\n    local music_notes_beats_array_length_min=()\n\
    \    local music_notes_beats_array_length_sum=()\n    local music_notes_beats_array_length_average=()\n\
    \    local music_notes_beats_array_length_median=()\n    local music_notes_beats_array_length_std=()\n\
    \    local music_notes_beats_array_length_min=()\n    local music_notes_beats_array_length_max=()\n\
    \    local music_notes_beats_array_length_min=()\n    local music_notes_beats_array_length_sum=()\n\
    \    local music_notes_beats_array_length_average=()\n    local \n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_str=()\n    local music_last_beat_int=()\n\
    \    local music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n  \
    \  local music_last_beat_ints_int=()\n    local music_last_beat_ints_ints=()\n\
    \    local music_last_beat_ints_ints_str=()\n    local music_last_beat_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_change=()\n    local music_last_note_octave_change_direction=()\n\
    \    local music_last_note_octave_change_direction_change=()\n    local music_last_note_octave_change_direction_change_octave=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change=()\n \
    \   local music_last_note_octave_change_direction_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_direction_change_octave_change_octave_change_octave_change_octave_change_octave_change_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=\"$1\"\n  local music_array=()\n  local\
    \ music_notes=()\n  local music_beats=()\n  local music_notes_length=0\n  local\
    \ music_beat_length=0\n  local music_notes_length_index=0\n  local music_beat_length_index=0\n\
    \  local music_notes_length_index2=0\n  local music_beat_length_index2=0\n  local\
    \ music_notes_length_index3=0\n  local music_beat_length_index3=0\n  local music_notes_length_index4=0\n\
    \  local music_beat_length_index4=0\n  local music_notes_length_index5=0\n  local\
    \ music_beat_length_index5=0\n  local music_notes_length_index6=0\n  local music_beat_length_index6=0\n\
    \  local music_notes_length_index7=0\n  local music_beat_length_index7=0\n  local\
    \ music_notes_length_index8=0\n  local music_beat_length_index8=0\n  local music_notes_length_index9=0\n\
    \  local music_beat_length_index9=0\n  local music_notes_length_index10=0\n  local\
    \ music_beat_length_index10=0\n  local music_notes_length_index11=0\n  local music_beat_length_index11=0\n\
    \  local music_notes_length_index12=0\n  local music_beat_length_index12=0\n \
    \ local music_notes_length_index13=0\n  local music_beat_length_index13=0\n  local\
    \ music_notes_length_index14=0\n  local music_beat_length_index14=0\n  local music_notes_length_index15=0\n\
    \  local music_beat_length_index15=0\n  local music_notes_length_index16=0\n \
    \ local music_beat_length_index16=0\n  local music_notes_length_index17=0\n  local\
    \ music_beat_length_index17=0\n  local music_notes_length_index18=0\n  local music_beat_length_index18=0\n\
    \  local music_notes_length_index19=0\n  local music_beat_length_index19=0\n \
    \ local music_notes_length_index20=0\n  local music_beat_length_index20=0\n  local\
    \ music_notes_length_index21=0\n  local music_beat_length_index21=0\n  local \n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_note=()\n  local music_last_beat=()\n\
    \  local music_last_beat_str=()\n  local music_last_beat_arr=()\n  local music_last_beat_str_count=0\n\
    \  local music_last_beat_str_count_max=0\n  local music_last_beat_str_count_min=0\n\
    \  local music_last_beat_str_count_avg=0\n  local music_last_beat_str_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_last_beat_str_count_count_min=0\n\
    \  local music_last_beat_str_count_count_avg=0\n  local music_last_beat_str_count_count_sum=0\n\
    \  local music_last_beat_str_count_count_max=0\n  local music_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr2=()\n    local music_last_notes_beats_str_arr3=()\n\
    \    local music_last_notes_beats_str_arr4=()\n    local music_last_notes_beats_str_arr5=()\n\
    \    local music_last_notes_beats_str_arr6=()\n    local music_last_notes_beats_str_arr7=()\n\
    \    local music_last_notes_beats_str_arr8=()\n    local music_last_notes_beats_str_arr9=()\n\
    \    local music_last_notes_beats_str_arr10=()\n    local music_last_notes_beats_str_arr11=()\n\
    \    local music_last_notes_beats_str_arr12=()\n    local music_last_notes_beats_str_arr13=()\n\
    \    local music_last_notes_beats_str_arr14=()\n    local music_last_notes_beats_str_arr15=()\n\
    \    local music_last_notes_beats_str_arr16=()\n    local music_last_notes_beats_str_arr17=()\n\
    \    local music_last_notes_beats_str_arr18=()\n    local music_last_notes_beats_str_arr19=()\n\
    \    local music_last_notes_beats_str_arr20=()\n    local music_last_notes_beats_str_arr21=()\n\
    \    local music_last_notes_beats_str_arr22=()\n    local music_last_notes_beats_str_arr23=()\n\
    \    local music_last_notes_beats_str_arr24=()\n    local music_last_notes_beats_str_arr25=()\n\
    \    local music_last_notes_beats_str_arr26=()\n    local music_last_notes_beats_str_arr27=()\n\
    \    local music_last_notes_beats_str_arr28=()\n    local music_last_notes_beat\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_lasts=()\n  local music_last_beats=()\n\
    \  local music_last_notes=()\n  local music_last_last_beats=()\n  local music_last_last_notes=()\n\
    \  local music_last_last_last_beats=()\n  local music_last_last_last_notes=()\n\
    \  local music_last_last_last_last_beats=()\n  local music_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_beats=()\n  local\
    \ music_last_last_last_last_last_last_last_last_last_notes=()\n  local music_last_last_last_last_last_last_last_last_last_beats=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_notes=()\n  local\
    \ music_last_last_last_last_last_last_last_last_last_beats=()\n  local music_last_last_last_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_beats=()\n  local\
    \ music_last_last_last_last_last_last_last_last_last_last_notes=()\n  local music_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_last_notes=()\n\
    \  local music_last_last_last_last_last_last_last_last_last_last_last_beats=()\n\
    \  local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_count=()\n    local music_last_beat_count_index=()\n\
    \    local music_last_beat_count_index_count=()\n    local music_last_beat_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count=()\n    local music_last_beat_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index=()\n    local\
    \ music_last_beat_count_index_count_index_count_index_count_index_count=()\n \
    \   local music_last_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \    local music_last_beat_count_index_count_index_count_index_count_index_count_index_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_count=()\n\
    \    local music_last_beat_beats_count_max=()\n    local music_last_beat_beats_count_min=()\n\
    \    local music_last_beat_beats_count_sum=()\n    local music_last_beat_beats_count_sum_max=()\n\
    \    local music_last_beat_beats_count_sum_min=()\n    local music_last_beat_beats_count_product=()\n\
    \    local music_last_beat_beats_count_product_max=()\n    local music_last_beat_beats_count_product_min=()\n\
    \    local music_last_beat_beats_count_quotient=()\n    local music_last_beat_beats_count_quotient_max=()\n\
    \    local music_last_beat_beats_count_quotient_min=()\n    local music_last_beat_beats_count_remainder=()\n\
    \    local music_last_beat_beats_count_remainder_max=()\n    local music_last_beat_beats_count_remainder_min=()\n\
    \    local music_last_beat_beats_count_quotient_product=()\n    local music_last_beat_beats_count_quotient_product_max=()\n\
    \    local music_last_beat_beats_count_quotient_product_min=()\n    local music_last_beat_beats_count_quotient_quotient=()\n\
    \    local music_last_beat_beats_count_quotient_quotient_max=()\n    local music_last_beat_beats_count_quotient_quotient_min=()\n\
    \    local music_last_beat_beats_count_quotient_remainder=()\n    local music_last_beat_beats_count_quotient_remainder_max=()\n\
    \    local music_last_beat_beats_count_quotient_remainder_min=()\n    local music_last_beat_beats_count_remainder_product=()\n\
    \    local music_last_beat_beats_count_remainder_product_max=()\n    local music_last_beat_beats_count_remainder_product_min=()\n\
    \    local music_last_beat_beats_count_remainder_quotient=()\n    local music_last_beat_beats_count_remainder_quotient_max=()\n\
    \    local music_last_beat_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_octave=()\n    local music_last_octave_note=()\n    local\
    \ music_last_octave_octave=()\n    local music_last_octave_octave_note=()\n  \
    \  local music_last_octave_octave_octave=()\n    local music_last_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave=()\n    local music_last_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave=()\n    local music_last_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave=()\n    local\
    \ music_last_octave_octave_octave_octave_octave_octave_note=()\n    local music_last_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local music_last_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_note=()\n\
    \    local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_str=()\n    local music_last_notes_arr=()\n    local\
    \ music_last_notes_beats=()\n    local music_last_notes_beats_str=()\n    local\
    \ music_last_notes_beats_arr=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr=()\n    local music_last_notes_beats_str_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr=()\n    local music_last_notes_beats_str_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr=()\n    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr=()\n   \
    \ local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n  \
    \  local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=()\n\
    \    local music_last_notes_beats_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_array=()\n    local music_notes_beats_array=()\n    local music_notes_array=()\n\
    \    local music_notes_beats_array=()\n    local music_notes_array=()\n    local\
    \ music_notes_beats_array=()\n    local music_notes_array=()\n    local music_notes_beats_array=()\n\
    \    local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_array=()\n    local music_notes_beats_array=()\n    local music_notes_array=()\n\
    \    local music_notes_beats_array=()\n    local music_notes_array=()\n    local\
    \ music_notes_beats_array=()\n    local music_notes_array=()\n    local music_notes_beats_array=()\n\
    \    local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_array=()\n    local music_notes_beats_array=()\n    local music_notes_array=()\n\
    \    local music_notes_beats_array=()\n    local music_notes_array=()\n    local\
    \ music_notes_beats_array=()\n    local music_notes_array=()\n    local music_notes_beats_array=()\n\
    \    local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_array=()\n    local music_notes_beats_array=()\n    local music_notes_array=()\n\
    \    local music_notes_beats_array=()\n    local music_notes_array=()\n    local\
    \ music_notes_beats_array=()\n    local music_notes_array=()\n    local music_notes_beats_array=()\n\
    \    local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_array=\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=()\n\
    \    local music_notes_str_count_arr=()\n    local music_notes_str_count_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index=()\n    local music_notes_str_count_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count=()\n    local music_notes_str_count_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr=()\n    local\
    \ music_notes_str_count_arr_count_index_arr_count_index_arr_count=()\n    local\
    \ music_notes_str_count_arr_count_index_arr_count_index_arr_count_index=()\n \
    \   local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count=()\n\
    \    local music_notes_str_count_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index_arr_count_index=()\n\
    \    local music_notes_str_count_arr_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_arr=()\n    local\
    \ music_beats=()\n    local music_last_beats=()\n    local music_last_beats_str=()\n\
    \    local music_last_beats_str_count=0\n    local music_last_beats_str_arr=()\n\
    \    local music_last_beats_str_arr_count=0 # number of elements in music_last_beats_str_arr\n\
    \    local music_last_beats_str_arr_element=() # element of music_last_beats_str_arr\n\
    \    local music_last_beats_str_arr_element_count=0 # number of elements in music_last_beats_str_arr_element\n\
    \    local music_last_beats_str_arr_element_element=() # element of music_last_beats_str_arr_element\n\
    \    local music_last_beats_str_arr_element_element_count=0 # number of elements\
    \ in music_last_beats_str_arr_element_element\n    local music_last_beats_str_arr_element_element_element=()\
    \ # element of music_last_beats_str_arr_element_element\n    local music_last_beats_str_arr_element_element_element_count=0\
    \ # number of elements in music_last_beats_str_arr_element_element_element\n \
    \   local music_last_beats_str_arr_element_element_element_element=() # element\
    \ of music_last_beats_str_arr_element_element_element\n    local music_last_beats_str_arr_element_element_element_element_count=0\
    \ # number of elements in music_last_beats_str_arr_element_element_element_element\n\
    \    local music_last_beats_str_arr_element_element_element_element_element=()\
    \ # element of music_last_beats_str_arr_element_element_element_element\n    local\
    \ music_last_beats_str_arr_element_element_element_element_element_count=0 # number\
    \ of elements in music_last_beats_str_arr_element_element_element_element_element\n\
    \    local music_last_beats_str_arr_element_element_element_element_element_element=()\
    \ # element of music_last_beats_str_arr_element_element_element_element_element\n\
    \    local music_last_beats_str_arr_element_element_element_element_element_element_count=0\
    \ # number of elements in music_last_beats_str_arr_element_element_element_element_element_element\n\
    \    local music_last_beats_str_arr_element_element_element_element_element_element_element=()\
    \ # element of music_last_beats_str_arr_element_element_element_element_element_element_element\n\
    \    local music_last_beats_str_arr_element_element_element_element_element_element_element_element_count=0\
    \ # number of elements in music_last_beats_str_arr_element_element_element_element_element_element_element_element_element\n\
    \    local music_last_beats_str_arr_element_element_element_element_element_element_element_element_element=()\
    \ # element \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_note_count=()\n    local music_note_length=0\n    local music_note_length_count=0\n\
    \    local music_note_length_index=0\n    local music_note_length_index_count=-1\n\
    \    local music_note_length_index_beats=0\n    local music_note_length_index_beats_count=-1\n\
    \    local music_note_length_index_beats_index=0\n    local music_note_length_index_beats_index_count=-1\n\
    \    local music_note_length_index_beats_index_beats=0\n    local music_note_length_index_beats_index_beats_count=-1\n\
    \    local music_note_length_index_beats_index_beats_index=0\n    local music_note_length_index_beats_index_beats_index_count=-1\n\
    \    local music_note_length_index_beats_index_beats_index_beats=0\n    local\
    \ music_note_length_index_beats_index_beats_index_beats_count=-1\n    local music_note_length_index_beats_index_beats_index_beats_index=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count=0\n   \
    \ local music_note_length_index_beats_index_beats_index_beats_count_index=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_count=-1\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count_index=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count_index_count=-1\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count_index_beats=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count_index_beats_count=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count_index_beats_count_index=0\n\
    \    local music_note_length_index_beats_index_beats_index_beats_count_index_beats_count_index_beats_count_index_count=-1\n\
    \    local music_note_length_index_beats_index_beats_index_beats_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_array=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_array_length=()\n\
    \    local music_last_notes_beats_array_length=()\n    local music_last_notes_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_arr=()\n  \
    \  local music_last_beat_str_count_arr_index=()\n    local music_last_beat_str_count_arr_count=()\n\
    \    local music_last_beat_str_count_arr_count_index=()\n    local music_last_beat_str_count_arr_count_index_arr=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index=()\n    local music_last_beat_str_count_arr_count_index_arr_index_arr=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index_arr=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index_arr_index=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_count=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr=()\n\
    \    local music_last_beat_str_count_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr_index_arr_index_arr_count_index_arr_index_arr\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_str=$1\n  local music_arr=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_note=()\n  local music_last_beat=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local music_last_beat_index=()\n  local music_last_beat_index=()\n  local music_last_beat_index=()\n\
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count=()\n    local music_last_beat_str_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr=()\n    local music_last_beat_str_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count=()\n   \
    \ local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_beat=()\n  local music_last_note_beat_count=()\n  local\
    \ music_last_note_beat_count_index=()\n  local music_last_note_beat_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index=()\n  local music_last_note_beat_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index=()\n  local\
    \ music_last_note_beat_count_index_count_index_count_index_count=()\n  local music_last_note_beat_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n\
    \  local music_last_note_beat_count_index_\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_note_count=0\n    local music_notes_count=()\n    local music_beat_count=()\n\
    \    local music_beat_count_count=()\n    local music_beat_count_count_count=()\n\
    \    local music_beat_count_count_count_count=()\n    local music_beat_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count=()\n    local music_beat_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|o]/}\n    local music_str_tmp=${music_str_tmp//[|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|o|]/}\n    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|.|.|o|o|]/}\n\
    \    local music_str_tmp=${music_str_tmp//[|.|.|.|.|.|.|\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc7o9cdvh.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_arr_len=0\n    local music_last_notes_beats_arr_len_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=0\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=100\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=100\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=100\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=100\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=100\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_last_notes_beats_arr_len_max=100\n    local music_last_notes_beats_arr_len_max_cnt=0\n\
    \    local music_last_notes_beats_arr_len_min=100\n    local music_last_notes_beats_arr_len_min_cnt=0\n\
    \    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_notes=()\n    local music_lasts=()\n    local music_lasts_beats=()\n\
    \    local music_lasts_notes=()\n    local music_lasts_beats_str=()\n    local\
    \ music_lasts_notes_str=()\n    local music_lasts_beats_str_cnt=0\n    local music_lasts_notes_str_cnt=0\n\
    \    local music_lasts_beats_str_cnt2=0\n    local music_lasts_notes_str_cnt2=0\n\
    \    local music_lasts_beats_str_cnt3=0\n    local music_lasts_notes_str_cnt3=0\n\
    \    local music_lasts_beats_str_cnt4=0\n    local music_lasts_notes_str_cnt4=0\n\
    \    local music_lasts_beats_str_cnt5=0\n    local music_lasts_notes_str_cnt5=0\n\
    \    local music_lasts_beats_str_cnt6=0\n    local music_lasts_notes_str_cnt6=0\n\
    \    local music_lasts_beats_str_cnt7=0\n    local music_lasts_notes_str_cnt7=0\n\
    \    local music_lasts_beats_str_cnt8=0\n    local music_lasts_notes_str_cnt8=0\n\
    \    local music_lasts_beats_str_cnt9=0\n    local music_lasts_notes_str_cnt9=0\n\
    \    local music_lasts_beats_str_cnt10=0\n    local music_lasts_notes_str_cnt10=0\n\
    \    local music_lasts_beats_str_cnt11=0\n    local music_lasts_notes_str_cnt11=0\n\
    \    local music_lasts_beats_str_cnt12=0\n    local music_lasts_notes_str_cnt12=0\n\
    \    local music_lasts_beats_str_cnt13=0\n    local music_lasts_notes_str_cnt13=0\n\
    \    local music_lasts_beats_str_cnt14=0\n    local music_lasts_notes_str_cnt14=0\n\
    \    local music_lasts_beats_str_cnt15=0\n    local music_lasts_notes_str_cnt15=0\n\
    \    local music_lasts_beats_str_c\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_beat=()\n    local music_last_beat_beats=()\n    local\
    \ music_last_beat_beats_beat=()\n    local music_last_beat_beats_beats=()\n  \
    \  local music_last_beat_beats_beats_beat=()\n    local music_last_beat_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beat=()\n    local music_last_beat_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beat=()\n    local music_last_beat_beats_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beat=()\n    local music_last_beat_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beat=()\n    local\
    \ music_last_beat_beats_beats_beats_beats_beats_beats_beat=()\n    local music_last_beat_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beat=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beats_beat=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beats_beat=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats=()\n\
    \    local music_last_beat_beats_beats_beats_beats_beats_beats_beat\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beat=()\n  local music_last_note=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local music_last_note_index=()\n  local music_last_note_index=()\n  local music_last_note_index=()\n\
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_note_count=0\n    local music_notes_count=${#music_string}\n \
    \   local music_notes_array=()\n    local music_notes_beats=()\n    local music_notes_beats_count=()\n\
    \    local music_notes_note_count=0\n    local music_notes_notes_count=${#music_notes_array[@]}\n\
    \    local music_notes_notes_array=()\n    local music_notes_notes_beats=()\n\
    \    local music_notes_notes_beats_count=()\n    local music_notes_notes_note_count=0\n\
    \    local music_notes_notes_notes_count=${#music_notes_notes_array[@]}\n    local\
    \ music_notes_notes_notes_array=()\n    local music_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_beats_count=()\n    local music_notes_notes_notes_note_count=0\n\
    \    local music_notes_notes_notes_notes_count=${#music_notes_notes_notes_array[@]}\n\
    \    local music_notes_notes_notes_notes_array=()\n    local music_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_beats_count=()\n    local music_notes_notes_notes_notes_note_count=0\n\
    \    local music_notes_notes_notes_notes_notes_count=${#music_notes_notes_notes_notes_array[@]}\n\
    \    local music_notes_notes_notes_notes_notes_array=()\n    local music_notes_notes_notes_notes_notes_beats=()\n\
    \    local music_notes_notes_notes_notes_notes_beats_count=()\n    local music_notes_notes_notes_notes_notes_note_count=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_count=${#music_notes_notes_notes_notes_notes_array[@]}\n\
    \    local music_notes_notes_notes_notes_notes_notes_array=()\n    local music_notes_notes_note\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_min=()\n    local music_last_notes_beats_count_max=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_int=()\n    local\
    \ music_last_beat_ints=()\n    local music_last_beat_ints_str=()\n    local music_last_beat_ints_int=()\n\
    \    local music_last_beat_ints_ints=()\n    local music_last_beat_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_int=()\n    local music_last_beat_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_str=()\n    local music_last_beat_ints_ints_ints_ints_ints_int=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_str=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_str=()\n    local\
    \ music_last_beat_ints_ints_ints_ints_ints_ints_ints_int=()\n    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints=()\n\
    \    local music_last_beat_ints_ints_ints_ints_ints_ints_ints_ints_str=()\n  \
    \  local musi\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=()\n    local music_notes_arr=()\n    local music_notes_str_count=()\n\
    \    local music_notes_str_count_arr=()\n    local music_notes_str_count_arr_count=()\n\
    \    local music_notes_str_count_arr_count_max=()\n    local music_notes_str_count_arr_count_max_max=()\n\
    \    local music_notes_str_count_arr_count_max_min=()\n    local music_notes_str_count_arr_count_min_max=()\n\
    \    local music_notes_str_count_arr_count_min_min=()\n    local music_notes_str_count_arr_count_min_min_max=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max=()\n    local music_notes_str_count_arr_count_min_min_min_max_max=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min=()\n    local\
    \ music_notes_str_count_arr_count_min_min_min_max_max_min_max=()\n    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min_max=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min_max_min=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min_max_min_max_min=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min_max_min_max_min_max=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min_max_min_max_min_max_min=()\n\
    \    local music_notes_str_count_arr_count_min_min_min_max_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_arr_count=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_min=()\n    local music_last_notes_beats_arr_count_sum=()\n\
    \    local music_last_notes_beats_arr_count_sum_max=()\n    local music_last_notes_beats_arr_count_sum_min=()\n\
    \    local music_last_notes_beats_arr_count_avg=()\n    local music_last_notes_beats_arr_count_avg_max=()\n\
    \    local music_last_notes_beats_arr_count_avg_min=()\n    local music_last_notes_beats_arr_count_min=()\n\
    \    local music_last_notes_beats_arr_count_max=()\n    local music_last_notes_beats_arr_count_sum=()\n\
    \    local music_last_notes_beats_arr_count_sum_max=()\n    local music_last_notes_beats_arr_count_sum_min=()\n\
    \    local music_last_notes_beats_arr_count_avg=()\n    local music_last_notes_beats_arr_count_avg_max=()\n\
    \    local music_last_notes_beats_arr_count_avg_min=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_sum=()\n    local music_last_notes_beats_arr_count_sum_max=()\n\
    \    local music_last_notes_beats_arr_count_sum_min=()\n    local music_last_notes_beats_arr_count_avg=()\n\
    \    local music_last_notes_beats_arr_count_avg_max=()\n    local music_last_notes_beats_arr_count_avg_min=()\n\
    \    local music_last_notes_beats_arr_count_min=()\n    local music_last_notes_beats_arr_count_max=()\n\
    \    local music_last_notes_beats_arr_count_sum=()\n    local music_last_notes_beats_arr_count_sum_max=()\n\
    \    local music_last_notes_beats_arr_count_sum_min=()\n    local music_last_notes_beats_arr_count_avg\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local music_last_note_index=()\n    local\
    \ music_last_note_index=()\n    local music_last_note_index=()\n    local music_last_note_index=()\n\
    \    local music_last_note_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp_tmp=${music_str_tmp//[|.]/}\n    local music_str_tmp_tmp_tmp=${music_str_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp//[|.]/}\n    local\
    \ music_str_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp//[|.]/}\n    local\
    \ music_str_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp//[|.]/}\n\
    \    local music_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=${music_str_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp826pubg6.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=\"$1\"\n    local music_str_reversed=\"${music_str//|/}\"\
    \n    local music_str_reversed_reversed=\"${music_str_reversed//./}\"\n    local\
    \ music_str_reversed_reversed_reversed=\"${music_str_reversed_reversed//o/}\"\n\
    \    local music_str_reversed_reversed_reversed_reversed=\"${music_str_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed=\"${music_str_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed//o/}\"\n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\n   \
    \ local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n    local music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed=\"\
    ${music_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed//o/}\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_octave=()\n    local music_octave=()\n\
    \    local music_octave_counter=0\n    local music_octave_last_beat=()\n    local\
    \ music_octave_last_note=()\n    local music_octave_last_octave=()\n    local\
    \ music_octave_last_octave_counter=0\n    local music_octave_last_octave_last_beat=()\n\
    \    local music_octave_last_octave_last_note=()\n    local music_octave_last_octave_last_octave=()\n\
    \    local music_octave_last_octave_last_octave_counter=0\n    local music_octave_last_octave_last_octave_last_beat=()\n\
    \    local music_octave_last_octave_last_octave_last_note=()\n    local music_octave_last_octave_last_octave_last_octave=()\n\
    \    local music_octave_last_octave_last_octave_last_octave_counter=0\n    local\
    \ music_octave_last_octave_last_octave_last_octave_last_beat=()\n    local music_octave_last_octave_last_octave_last_octave_last_note=()\n\
    \    local music_octave_last_octave_last_octave_last_octave_last_octave=()\n \
    \   local music_octave_last_octave_last_octave_last_octave_last_octave_counter=0\n\
    \    local music_octave_last_octave_last_octave_last_octave_last_octave_last_beat=()\n\
    \    local music_octave_last_octave_last_octave_last_octave_last_octave_last_note=()\n\
    \    local music_octave_last_octave_last_octave_last_octave_last_octave_last_octave=()\n\
    \    local music_octave_last_octave_last_octave_last_octave_last_octave_last_octave_counter=0\n\
    \    local music_octave_last_octave_last_octave_last_octa\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_beat=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_notes_length=()\n    local music_notes_count=()\n\
    \    local music_notes_count_length=()\n    local music_notes_count_index=()\n\
    \    local music_notes_count_index_length=()\n    local music_notes_count_index_count=()\n\
    \    local music_notes_count_index_count_length=()\n    local music_notes_count_index_count_count=()\n\
    \    local music_notes_count_index_count_count_length=()\n    local music_notes_count_index_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_length=()\n    local music_notes_count_index_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_length=()\n    local\
    \ music_notes_count_index_count_count_count_count_count=()\n    local music_notes_count_index_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count=()\n  \
    \  local music_notes_count_index_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_notes_count_index_count_count_count_count_count_count_count_count_count_count_count_count=()\n\
    \    local music_notes_count_index_count_count_count_count_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beats=()\n  \
    \  local music_last_notes=()\n    local music_last_notes_beats=()\n    local music_last_notes_beats_count=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_min=()\n    local music_last_notes_beats_count_max=()\n\
    \    local music_last_notes_beats_count_sum=()\n    local music_last_notes_beats_count_sum_max=()\n\
    \    local music_last_notes_beats_count_sum_min=()\n    local music_last_notes_beats_count_avg=()\n\
    \    local music_last_notes_beats_count_avg_max=()\n    local music_last_notes_beats_count_avg_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    \    local music_last_notes_beats_count_max=()\n    local music_last_notes_beats_count_sum=()\n\
    \    local music_last_notes_beats_count_sum_max=()\n    local music_last_notes_beats_count_sum_min=()\n\
    \    local music_last_notes_beats_count_avg=()\n    local music_last_notes_beats_count_avg_max=()\n\
    \    local music_last_notes_beats_count_avg_min=()\n    local music_last_notes_beats_count_min=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_arr_ind=0\n\
    \    local music_arr_len=0\n    local music_arr_str=\"\"\n    local music_arr_str_ind=0\n\
    \    local music_arr_str_len=0\n    local music_arr_str_len_ind=0\n    local music_arr_str_len_ind2=0\n\
    \    local music_arr_str_len_ind3=0\n    local music_arr_str_len_ind4=0\n    local\
    \ music_arr_str_len_ind5=0\n    local music_arr_str_len_ind6=0\n    local music_arr_str_len_ind7=0\n\
    \    local music_arr_str_len_ind8=0\n    local music_arr_str_len_ind9=0\n    local\
    \ music_arr_str_len_ind10=0\n    local music_arr_str_len_ind11=0\n    local music_arr_str_len_ind12=0\n\
    \    local music_arr_str_len_ind13=0\n    local music_arr_str_len_ind14=0\n  \
    \  local music_arr_str_len_ind15=0\n    local music_arr_str_len_ind16=0\n    local\
    \ music_arr_str_len_ind17=0\n    local music_arr_str_len_ind18=0\n    local music_arr_str_len_ind19=0\n\
    \    local music_arr_str_len_ind20=0\n    local music_arr_str_len_ind21=0\n  \
    \  local music_arr_str_len_ind22=0\n    local music_arr_str_len_ind23=0\n    local\
    \ music_arr_str_len_ind24=0\n    local music_arr_str_len_ind25=0\n    local music_arr_str_len_ind26=0\n\
    \    local music_arr_str_len_ind27=0\n    local music_arr_str_len_ind28=0\n  \
    \  local music_arr_str_len_ind29=0\n    local music_arr_str_len_ind30=0\n    local\
    \ music_arr_str_len_ind31=0\n    local music_arr_str_len_ind32=0\n    local music_arr_str_len_ind33=0\n\
    \    local music_arr_str_len_ind34=0\n    local music_arr_str_len_ind35=0\n  \
    \  local music_arr_str_len_ind36=0\n    local music_arr_str_len_ind37=0\n    local\
    \ music_arr_str_len_ind38=0\n    local music_arr_str_len_ind39=0\n    local music_arr_str_len_ind40=0\n\
    \    local music_arr_str_len_ind41=0\n    local music_\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_octave=()\n    local music_octave=0\n\
    \    local music_notes_count=${#music_string}\n    local music_notes_index=0\n\
    \    local music_notes_index_in_string=0\n    local music_notes_index_in_array=0\n\
    \    local music_notes_index_in_octave=0\n    local music_notes_index_in_notes_array=0\n\
    \    local music_notes_index_in_notes_octave=0\n    local music_notes_index_in_notes_beats_array=0\n\
    \    local music_notes_index_in_notes_beats_octave=0\n    local music_notes_index_in_notes_beats_last_note=()\n\
    \    local music_notes_index_in_notes_beats_last_octave=()\n    local music_notes_index_in_notes_beats_last_beat=()\n\
    \    local music_notes_index_in_notes_beats_last_note_in_octave=()\n    local\
    \ music_notes_index_in_notes_beats_last_octave_in_notes_array=()\n    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_array=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_octave=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_last_note=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_last_octave=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_last_beat=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_last_note_in_octave=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_last_octave_in_notes_array=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_last_octave_in_notes_beats_array=()\n\
    \    local music_notes_index_in_notes_beats_last_octave_in_notes_beats_\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=\"\"\n    local\
    \ music_str_tmp2=\"\"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\
    \"\n    local music_str_tmp5=\"\"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\
    \"\n    local music_str_tmp8=\"\"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\
    \"\n    local music_str_tmp11=\"\"\n    local music_str_tmp12=\"\"\n    local\
    \ music_str_tmp13=\"\"\n    local music_str_tmp14=\"\"\n    local music_str_tmp15=\"\
    \"\n    local music_str_tmp16=\"\"\n    local music_str_tmp17=\"\"\n    local\
    \ music_str_tmp18=\"\"\n    local music_str_tmp19=\"\"\n    local music_str_tmp20=\"\
    \"\n    local music_str_tmp21=\"\"\n    local music_str_tmp22=\"\"\n    local\
    \ music_str_tmp23=\"\"\n    local music_str_tmp24=\"\"\n    local music_str_tmp25=\"\
    \"\n    local music_str_tmp26=\"\"\n    local music_str_tmp27=\"\"\n    local\
    \ music_str_tmp28=\"\"\n    local music_str_tmp29=\"\"\n    local music_str_tmp30=\"\
    \"\n    local music_str_tmp31=\"\"\n    local music_str_tmp32=\"\"\n    local\
    \ music_str_tmp33=\"\"\n    local music_str_tmp34=\"\"\n    local music_str_tmp35=\"\
    \"\n    local music_str_tmp36=\"\"\n    local music_str_tmp37=\"\"\n    local\
    \ music_str_tmp38=\"\"\n    local music_str_tmp39=\"\"\n    local music_str_tmp40=\"\
    \"\n    local music_str_tmp41=\"\"\n    local music_str_tmp42=\"\"\n    local\
    \ music_str_tmp43=\"\"\n    local music_str_tmp44=\"\"\n    local music_str_tmp45=\"\
    \"\n    local music_str_tmp46=\"\"\n    local music_str_tmp47=\"\"\n    local\
    \ music_str_tmp48=\"\"\n    local music_str_tmp49=\"\"\n    local music_str_tmp50=\"\
    \"\n    local music_str_tmp51=\"\"\n    local music_str_tmp52=\"\"\n    local\
    \ music_str_tmp53=\"\"\n    local music_str_tmp54=\"\"\n    local music_str_tmp55=\"\
    \"\n    local music_str_tmp56=\"\"\n    \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n \
    \   local music_notes_array=()\n    local music_notes_beats_array=()\n    local\
    \ music_notes_beats_array2=()\n    local music_notes_beats_array3=()\n    local\
    \ music_notes_beats_array4=()\n    local music_notes_beats_array5=()\n    local\
    \ music_notes_beats_array6=()\n    local music_notes_beats_array7=()\n    local\
    \ music_notes_beats_array8=()\n    local music_notes_beats_array9=()\n    local\
    \ music_notes_beats_array10=()\n    local music_notes_beats_array11=()\n    local\
    \ music_notes_beats_array12=()\n    local music_notes_beats_array13=()\n    local\
    \ music_notes_beats_array14=()\n    local music_notes_beats_array15=()\n    local\
    \ music_notes_beats_array16=()\n    local music_notes_beats_array17=()\n    local\
    \ music_notes_beats_array18=()\n    local music_notes_beats_array19=()\n    local\
    \ music_notes_beats_array20=()\n    local music_notes_beats_array21=()\n    local\
    \ music_notes_beats_array22=()\n    local music_notes_beats_array23=()\n    local\
    \ music_notes_beats_array24=()\n    local music_notes_beats_array25=()\n    local\
    \ music_notes_beats_array26=()\n    local music_notes_beats_array27=()\n    local\
    \ music_notes_beats_array28=()\n    local music_notes_beats_array29=()\n    local\
    \ music_notes_beats_array30=()\n    local music_notes_beats_array31=()\n    local\
    \ music_notes_beats_array32=()\n    local music_notes_beats_array33=()\n    local\
    \ music_notes_beats_array34=()\n    local music_notes_beats_array35=()\n    local\
    \ music_notes_beats_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_beats_str=()\n    local music_last_notes_str=()\n    local\
    \ music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n   \
    \ local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \    local music_last_beats_str_index=()\n    local music_last_notes_str_index=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n\
    \    local music_last_note=()\n    local music_last_note_beat=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local music_last_note_beat_index=()\n    local music_last_note_beat_index=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_change=()\n    local music_last_note_octave_change_sign=()\n\
    \    local music_last_note_octave_change_octave=()\n    local music_last_note_octave_change_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave=()\n    local music_last_note_octave_change_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave_octave=()\n    local music_last_note_octave_change_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave_octave_octave=()\n    local\
    \ music_last_note_octave_change_octave_octave_octave_octave_sign=()\n    local\
    \ music_last_note_octave_change_octave_octave_octave_octave_octave_sign=()\n \
    \   local music_last_note_octave_change_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_change_octave_oct\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_beat=()\n   \
    \ local music_last_note=()\n    local music_last_note_index=()\n    local music_last_note_length=()\n\
    \    local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_type=()\n    local music_last_note_octave_number=()\n\
    \    local music_last_note_octave_number_type=()\n    local music_last_note_octave_number_value=()\n\
    \    local music_last_note_octave_number_value_type=()\n    local music_last_note_octave_number_value_number=()\n\
    \    local music_last_note_octave_number_value_number_type=()\n    local music_last_note_octave_number_value_number_value=()\n\
    \    local music_last_note_octave_number_value_number_value_type=()\n    local\
    \ music_last_note_octave_number_value_number_value_number=()\n    local music_last_note_octave_number_value_number_value_number_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number_value_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number_value=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number_value_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number_value_number_value=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number_value_number_value_type=()\n\
    \    local music_last_note_octave_number_value_number_value_number_value_number_value_number_value_number_value_number=()\n\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_arr=()\n    local\
    \ music_last_beat_str_count=0\n    local music_last_beat_str_count_str=()\n  \
    \  local music_last_beat_str_count_arr=()\n    local music_last_beat_str_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count=()\n    local music_last_beat_str_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr=()\n    local music_last_beat_str_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr=()\n    local\
    \ music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count=()\n   \
    \ local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    \    local music_last_beat_str_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str_arr_count_str=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_last_note=()\n    local music_last_beat=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_str=()\n    local music_last_beat_str_index=()\n  \
    \  local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    \    local music_last_beat_str_index=()\n    local music_last_beat_str_index=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_notes_length=0\n  local music_beat_length=0\n\
    \  local music_notes_length_count=0\n  local music_beat_length_count=0\n  local\
    \ music_notes_length_count2=0\n  local music_beat_length_count2=0\n  local music_notes_length_count3=0\n\
    \  local music_beat_length_count3=0\n  local music_notes_length_count4=0\n  local\
    \ music_beat_length_count4=0\n  local music_notes_length_count5=0\n  local music_beat_length_count5=0\n\
    \  local music_notes_length_count6=0\n  local music_beat_length_count6=0\n  local\
    \ music_notes_length_count7=0\n  local music_beat_length_count7=0\n  local music_notes_length_count8=0\n\
    \  local music_beat_length_count8=0\n  local music_notes_length_count9=0\n  local\
    \ music_beat_length_count9=0\n  local music_notes_length_count10=0\n  local music_beat_length_count10=0\n\
    \  local music_notes_length_count11=0\n  local music_beat_length_count11=0\n \
    \ local music_notes_length_count12=0\n  local music_beat_length_count12=0\n  local\
    \ music_notes_length_count13=0\n  local music_beat_length_count13=0\n  local music_notes_length_count14=0\n\
    \  local music_beat_length_count14=0\n  local music_notes_length_count15=0\n \
    \ local music_beat_length_count15=0\n  local music_notes_length_count16=0\n  local\
    \ music_beat_length_count16=0\n  local music_notes_length_count17=0\n  local music_beat_length_count17=0\n\
    \  local music_notes_length_count18=0\n  local music_beat_length_count18=0\n \
    \ local music_notes_length_count19=0\n  local music_beat_length_count19=0\n  local\
    \ music_notes_length_count20=0\n  local music_beat_length_count20=0\n  local music_notes_length_count21=0\n\
    \  local music_beat_length_count21=0\n  local \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_beats=()\n\
    \    local music_notes=()\n    local music_last_note=()\n    local music_last_beat=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local music_last_beat_index=()\n    local\
    \ music_last_beat_index=()\n    local music_last_beat_index=()\n    local music_last_beat_index=()\n\
    \    local music_last_beat_index=()\n    local musi\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_notes=()\n    local music_last_beats=()\n\
    \    local music_last_beats_str=()\n    local music_last_beats_str_count=0\n \
    \   local music_last_beats_str_count_str=()\n    local music_last_beats_str_count_str_count=0\n\
    \    local music_last_beats_str_count_str_str=()\n    local music_last_beats_str_count_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_str_count=0\n    local music_last_beats_str_count_str_str_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_count=0\n    local\
    \ music_last_beats_str_count_str_str_str_str_str_str_str=()\n    local music_last_beats_str_count_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str=()\n   \
    \ local music_last_beats_str_count_str_str_str_str_str_str_str_str_count=0\n \
    \   local music_last_beats_str_count_str_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str=()\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local music_last_beats_str_count_str_str_str_str_\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_last_note=()\n   \
    \ local music_last_beat=()\n    local music_last_beat_beats=()\n    local music_last_beat_beats_array=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_array_length=()\n\
    \    local music_last_beat_beats_array_length=()\n    local music_last_beat_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_offset=()\n    local music_last_note_octave_offset_sign=()\n\
    \    local music_last_note_octave_offset_octave=()\n    local music_last_note_octave_offset_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave=()\n    local music_last_note_octave_offset_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave=()\n    local music_last_note_octave_offset_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave_octave=()\n    local\
    \ music_last_note_octave_offset_octave_octave_octave_octave_sign=()\n    local\
    \ music_last_note_octave_offset_octave_octave_octave_octave_octave_sign=()\n \
    \   local music_last_note_octave_offset_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave_octave_octave_octave_octave_octave_octave_sign=()\n\
    \    local music_last_note_octave_offset_octave_octave_octave_octave_octave_oct\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_note_index=()\n    local music_last_note_length=()\n   \
    \ local music_last_note_type=()\n    local music_last_note_octave=()\n    local\
    \ music_last_note_octave_change=()\n    local music_last_note_octave_change_length=()\n\
    \    local music_last_note_octave_change_type=()\n    local music_last_note_octave_change_octave=()\n\
    \    local music_last_note_octave_change_octave_length=()\n    local music_last_note_octave_change_octave_type=()\n\
    \    local music_last_note_octave_change_octave_change=()\n    local music_last_note_octave_change_octave_change_length=()\n\
    \    local music_last_note_octave_change_octave_change_type=()\n    local music_last_note_octave_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_octave_change_octave_length=()\n    local\
    \ music_last_note_octave_change_octave_change_octave_type=()\n    local music_last_note_octave_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_length=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_type=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_octave=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_octave_length=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_octave_type=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_octave_change=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_octave_change_length=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_octave_change_type=()\n\
    \    local music_last_note_octave_change_octave_change_octave_change_oct\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_notes=()\n    local music_beats=()\n    local music_beats_count=()\n \
    \   local music_note_count=()\n    local music_note_length=0\n    local music_note_length_count=()\n\
    \    local music_note_length_counts_array=()\n    local music_note_length_counts_array_length=()\n\
    \    local music_note_length_counts_array_count=()\n    local music_note_length_counts_array_count_length=()\n\
    \    local music_note_length_counts_array_count_count_length=()\n    local music_note_length_counts_array_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_count_count_length=()\n\
    \    local music_note_length_counts_array_count_count_count_count_count_count_count_count_count_count_count_count_count_length=\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_notes_arr=()\n    local music_notes_str=\"\"\n    local music_notes_arr=()\n\
    \    local music_notes_str=\"\"\n    local music_notes_arr=()\n    local music_notes_str=\"\
    \"\n    local music_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beats=()\n    local music_last_notes=()\n\
    \    local music_last_notes_beats=()\n    local music_last_notes_beats_arr=()\n\
    \    local music_last_notes_beats_str=()\n    local music_last_notes_beats_str_arr=()\n\
    \    local music_last_notes_beats_str_arr_count=()\n    local music_last_notes_beats_str_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count=()\n    local music_last_notes_beats_str_arr_count_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count=()\n    local\
    \ music_last_notes_beats_str_arr_count_arr_count_arr_count_arr=()\n    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count_arr_count=()\n\
    \    local music_last_notes_beats_str_arr_count_arr_count_arr_count_arr_count_arr_count_arr_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_last_beat=()\n    local music_last_note=()\n\
    \    local music_last_octave=()\n    local music_octave_offset=()\n    local music_octave=()\n\
    \    local music_octave_count=()\n    local music_octave_last_beat=()\n    local\
    \ music_octave_last_note=()\n    local music_octave_last_octave=()\n    local\
    \ music_octave_last_count=()\n    local music_octave_last_last_beat=()\n    local\
    \ music_octave_last_last_note=()\n    local music_octave_last_last_octave=()\n\
    \    local music_octave_last_last_count=()\n    local music_octave_last_last_last_beat=()\n\
    \    local music_octave_last_last_last_note=()\n    local music_octave_last_last_last_octave=()\n\
    \    local music_octave_last_last_last_count=()\n    local music_octave_last_last_last_last_beat=()\n\
    \    local music_octave_last_last_last_last_note=()\n    local music_octave_last_last_last_last_octave=()\n\
    \    local music_octave_last_last_last_last_count=()\n    local music_octave_last_last_last_last_last_beat=()\n\
    \    local music_octave_last_last_last_last_last_note=()\n    local music_octave_last_last_last_last_last_octave=()\n\
    \    local music_octave_last_last_last_last_last_count=()\n    local music_octave_last_last_last_last_last_last_beat=()\n\
    \    local music_octave_last_last_last_last_last_last_note=()\n    local music_octave_last_last_last_last_last_last_octave=()\n\
    \    local music_octave_last_last_last_last_last_last_count=()\n    local music_octave_last_last_last_last_last_last_last_beat=()\n\
    \    local music_octave_last_last_last_last_last_last_last_note=()\n    local\
    \ music_octave_last_last_last_last_last_last_last_octave=()\n    local music_octave_last_last_last_last_last_last_last_count=()\n\
    \    local \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=()\n    local\
    \ music_beats=0\n    local music_notes=0\n    local music_notes_array=()\n   \
    \ local music_notes_beats=0\n    local music_notes_notes=0\n    local music_notes_notes_array=()\n\
    \    local music_notes_notes_beats=0\n    local music_notes_notes_notes=0\n  \
    \  local music_notes_notes_notes_array=()\n    local music_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_array=()\n    local music_notes_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_array=()\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_beats=0\n    local music_notes_notes_notes_notes_notes_notes_notes_notes=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_array=()\n  \
    \  local music_notes_notes_notes_notes_notes_notes_notes_notes_beats=0\n    local\
    \ music_notes_notes_notes_notes_notes_notes_notes_notes_notes=0\n    local music_notes_notes_notes_notes_notes_notes_notes_notes_notes_array=()\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_notes_notes_notes_beats=0\n\
    \    local music_notes_notes_notes_notes_notes_notes_notes_\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_arr=()\n    local music_notes=()\n\
    \    local music_beats=()\n    local music_beats_str=()\n    local music_beats_arr=()\n\
    \    local music_beats_notes=()\n    local music_beats_beats=()\n    local music_beats_beats_str=()\n\
    \    local music_beats_beats_arr=()\n    local music_beats_beats_notes=()\n  \
    \  local music_beats_beats_beats=()\n    local music_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_arr=()\n    local music_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats=()\n    local music_beats_beats_beats_beats_beats_beats_beats_str=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_arr=()\n    local music_beats_beats_beats_beats_beats_beats_beats_notes=()\n\
    \    local music_beats_beats_beats_beats_beats_beats_beats_beats=()\n    local\
    \ music_beats_beats_beats_beats_beats_beats_beats_beats_str=()\n    local music_beats_beats_\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040791
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=\"$1\"\n    local music_array=()\n   \
    \ local music_notes=()\n    local music_beats=()\n    local music_beats_array=()\n\
    \    local music_beats_string=()\n    local music_beats_string_count=0\n    local\
    \ music_beats_string_last_char=\n    local music_beats_string_last_char_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char_is_space_count=0\n\
    \    local music_beats_string_last_char_is_space=\n    local music_beats_string_last_char\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=()\n  local music_notes=()\n\
    \  local music_beats=()\n  local music_last_beats=()\n  local music_last_notes=()\n\
    \  local music_last_notes_beats=()\n  local music_last_notes_beats_count=()\n\
    \  local music_last_notes_beats_count_max=()\n  local music_last_notes_beats_count_min=()\n\
    \  local music_last_notes_beats_count_sum=()\n  local music_last_notes_beats_count_sum_max=()\n\
    \  local music_last_notes_beats_count_sum_min=()\n  local music_last_notes_beats_count_avg=()\n\
    \  local music_last_notes_beats_count_avg_max=()\n  local music_last_notes_beats_count_avg_min=()\n\
    \  local music_last_notes_beats_count_min=()\n  local music_last_notes_beats_count_max=()\n\
    \  local music_last_notes_beats_count_sum=()\n  local music_last_notes_beats_count_sum_max=()\n\
    \  local music_last_notes_beats_count_sum_min=()\n  local music_last_notes_beats_count_avg=()\n\
    \  local music_last_notes_beats_count_avg_max=()\n  local music_last_notes_beats_count_avg_min=()\n\
    \  local music_last_notes_beats_count_min=()\n  local music_last_notes_beats_count_max=()\n\
    \  local music_last_notes_beats_count_sum=()\n  local music_last_notes_beats_count_sum_max=()\n\
    \  local music_last_notes_beats_count_sum_min=()\n  local music_last_notes_beats_count_avg=()\n\
    \  local music_last_notes_beats_count_avg_max=()\n  local music_last_notes_beats_count_avg_min=()\n\
    \  local music_last_notes_beats_count_min=()\n  local music_last_notes_beats_count_max=()\n\
    \  local music_last_notes_beats_count_sum=()\n  local music_last_notes_beats_count_sum_max=()\n\
    \  local music_last_notes_beats_count_sum_min=()\n  local music_last_notes_beats_count_avg=()\n\
    \  local music_last_notes_beats_count_avg_max=()\n  local music_last_notes_beats_count_avg_min=()\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040792
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_str=$1\n    local music_str_tmp=${music_str//[|.]/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//o|.|/}\n\
    \    local music_str_tmp=${music_str_tmp//o|.|/}\n    local music_str_tmp=${music_str_tmp//\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk3ru2p27.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040791
