language: sh
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    \n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local factorial_string=\"\"\n  local factorial_count=0\n\
    \  local factorial_string2=\"\"\n  local factorial_count2=0\n  local factorial_string3=\"\
    \"\n  local factorial_count3=0\n  local factorial_string4=\"\"\n  local factorial_count4=0\n\
    \  local factorial_string5=\"\"\n  local factorial_count5=0\n  local factorial_string6=\"\
    \"\n  local factorial_count6=0\n  local factorial_string7=\"\"\n  local factorial_count7=0\n\
    \  local factorial_string8=\"\"\n  local factorial_count8=0\n  local factorial_string9=\"\
    \"\n  local factorial_count9=0\n  local factorial_string10=\"\"\n  local factorial_count10=0\n\
    \  local factorial_string11=\"\"\n  local factorial_count11=0\n  local factorial_string12=\"\
    \"\n  local factorial_count12=0\n  local factorial_string13=\"\"\n  local factorial_count13=0\n\
    \  local factorial_string14=\"\"\n  local factorial_count14=0\n  local factorial_string15=\"\
    \"\n  local factorial_count15=0\n  local factorial_string16=\"\"\n  local factorial_count16=0\n\
    \  local factorial_string17=\"\"\n  local factorial_count17=0\n  local factorial_string18=\"\
    \"\n  local factorial_count18=0\n  local factorial_string19=\"\"\n  local factorial_count19=0\n\
    \  local factorial_string20=\"\"\n  local factorial_count20=0\n  local factorial_string21=\"\
    \"\n  local factorial_count21=0\n  local factorial_string22=\"\"\n  local factorial_count22=0\n\
    \  local factorial_string23=\"\"\n  local factorial_count23=0\n  local factorial_string24=\"\
    \"\n  local factorial_count24=0\n  local factorial_string25=\"\"\n  local factorial_count25=0\n\
    \  local factorial_string26=\"\"\n  local factorial_count26=0\n  local factorial_string27=\"\
    \"\n  local factorial_count27=0\n  local factorial_string28=\"\"\n  local factorial_count28=0\n\
    \  local factorial_string29=\"\"\n  local factorial_count29=0\n  local factorial_string30=\"\
    \"\n  local factorial_count30=0\n  local factorial_string31=\"\"\n  local factorial_count31=0\n\
    \  local factorial_string32=\"\"\n  local factorial_\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((\
    \ $factorial * $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string=\"\"\n\n\
    \    while [ $n -gt 1 ]; do\n        factorial=$((factorial * n))\n        n=$((n\
    \ - 1))\n        factorial_string=\"$factorial_string$factorial\"\n    done\n\n\
    \    echo \"$factorial_string\"\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Invalid input\"\
    \n        return 1\n    fi\n    local factorial=1\n    for ((i=1; i<=$n; i++));\
    \ do\n        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    \n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_tmp\n    local\
    \ factorial_tmp2\n    local factorial_tmp3\n    local factorial_tmp4\n    local\
    \ factorial_tmp5\n    local factorial_tmp6\n    local factorial_tmp7\n    local\
    \ factorial_tmp8\n    local factorial_tmp9\n    local factorial_tmp10\n    local\
    \ factorial_tmp11\n    local factorial_tmp12\n    local factorial_tmp13\n    local\
    \ factorial_tmp14\n    local factorial_tmp15\n    local factorial_tmp16\n    local\
    \ factorial_tmp17\n    local factorial_tmp18\n    local factorial_tmp19\n    local\
    \ factorial_tmp20\n    local factorial_tmp21\n    local factorial_tmp22\n    local\
    \ factorial_tmp23\n    local factorial_tmp24\n    local factorial_tmp25\n    local\
    \ factorial_tmp26\n    local factorial_tmp27\n    local factorial_tmp28\n    local\
    \ factorial_tmp29\n    local factorial_tmp30\n    local factorial_tmp31\n    local\
    \ factorial_tmp32\n    local factorial_tmp33\n    local factorial_tmp34\n    local\
    \ factorial_tmp35\n    local factorial_tmp36\n    local factorial_tmp37\n    local\
    \ factorial_tmp38\n    local factorial_tmp39\n    local factorial_tmp40\n    local\
    \ factorial_tmp41\n    local factorial_tmp42\n    local factorial_tmp43\n    local\
    \ factorial_tmp44\n    local factorial_tmp45\n    local factorial_tmp46\n    local\
    \ factorial_tmp47\n    local factorial_tmp48\n    local factorial_tmp49\n    local\
    \ factorial_tmp50\n    local factorial_tmp51\n    local factorial_tmp52\n    local\
    \ factorial_tmp53\n    local factorial_tmp54\n    local factorial_tmp55\n    local\
    \ factorial_tmp56\n    local factorial_tmp57\n    local factorial_tmp58\n    local\
    \ factorial_tmp59\n    local factorial_tmp60\n    local factorial_tmp61\n    local\
    \ factorial_tmp62\n    local factorial_tmp63\n    local factorial_tmp64\n    local\
    \ factorial_tmp65\n    local factorial_tmp66\n    local factorial_tmp67\n    local\
    \ factorial_tmp68\n    local factorial_tmp69\n    local factorial_tmp70\n    local\
    \ factorial_tmp71\n    local factorial_\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_n\n    factorial_n=$((factorial*n))\n\
    \    while [ $n -gt 1 ]; do\n        factorial=$((factorial*(n-1)))\n        factorial_n=$((factorial_n*n))\n\
    \        n=$((n-1))\n    done\n    echo \"$factorial_n\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    \n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$(($factorial\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n \
    \   special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local factorial_string=\"\"\n  local factorial_count=0\n\
    \  local factorial_string2=\"\"\n  local factorial_count2=0\n  local factorial_string3=\"\
    \"\n  local factorial_count3=0\n  local factorial_string4=\"\"\n  local factorial_count4=0\n\
    \  local factorial_string5=\"\"\n  local factorial_count5=0\n  local factorial_string6=\"\
    \"\n  local factorial_count6=0\n  local factorial_string7=\"\"\n  local factorial_count7=0\n\
    \  local factorial_string8=\"\"\n  local factorial_count8=0\n  local factorial_string9=\"\
    \"\n  local factorial_count9=0\n  local factorial_string10=\"\"\n  local factorial_count10=0\n\
    \  local factorial_string11=\"\"\n  local factorial_count11=0\n  local factorial_string12=\"\
    \"\n  local factorial_count12=0\n  local factorial_string13=\"\"\n  local factorial_count13=0\n\
    \  local factorial_string14=\"\"\n  local factorial_count14=0\n  local factorial_string15=\"\
    \"\n  local factorial_count15=0\n  local factorial_string16=\"\"\n  local factorial_count16=0\n\
    \  local factorial_string17=\"\"\n  local factorial_count17=0\n  local factorial_string18=\"\
    \"\n  local factorial_count18=0\n  local factorial_string19=\"\"\n  local factorial_count19=0\n\
    \  local factorial_string20=\"\"\n  local factorial_count20=0\n  local factorial_string21=\"\
    \"\n  local factorial_count21=0\n  local factorial_string22=\"\"\n  local factorial_count22=0\n\
    \  local factorial_string23=\"\"\n  local factorial_count23=0\n  local factorial_string24=\"\
    \"\n  local factorial_count24=0\n  local factorial_string25=\"\"\n  local factorial_count25=0\n\
    \  local factorial_string26=\"\"\n  local factorial_count26=0\n  local factorial_string27=\"\
    \"\n  local factorial_count27=0\n  local factorial_string28=\"\"\n  local factorial_count28=0\n\
    \  local factorial_string29=\"\"\n  local factorial_count29=0\n  local factorial_string30=\"\
    \"\n  local factorial_count30=0\n  local factorial_string31=\"\"\n  local factorial_count31=0\n\
    \  local factorial_string32=\"\"\n  local factorial_\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=$1\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string\n    local\
    \ factorial_string2\n    local factorial_string3\n    local factorial_string4\n\
    \    local factorial_string5\n    local factorial_string6\n    local factorial_string7\n\
    \    local factorial_string8\n    local factorial_string9\n    local factorial_string10\n\
    \    local factorial_string11\n    local factorial_string12\n    local factorial_string13\n\
    \    local factorial_string14\n    local factorial_string15\n    local factorial_string16\n\
    \    local factorial_string17\n    local factorial_string18\n    local factorial_string19\n\
    \    local factorial_string20\n    local factorial_string21\n    local factorial_string22\n\
    \    local factorial_string23\n    local factorial_string24\n    local factorial_string25\n\
    \    local factorial_string26\n    local factorial_string27\n    local factorial_string28\n\
    \    local factorial_string29\n    local factorial_string30\n    local factorial_string31\n\
    \    local factorial_string32\n    local factorial_string33\n    local factorial_string34\n\
    \    local factorial_string35\n    local factorial_string36\n    local factorial_string37\n\
    \    local factorial_string38\n    local factorial_string39\n    local factorial_string40\n\
    \    local factorial_string41\n    local factorial_string42\n    local factorial_string43\n\
    \    local factorial_string44\n    local factorial_string45\n    local factorial_string46\n\
    \    local factorial_string47\n    local factorial_string48\n    local factorial_string49\n\
    \    local factorial_string50\n    local factorial_string51\n    local factorial_string52\n\
    \    local factorial_string53\n    local factorial_string54\n    local factorial_string55\n\
    \    local factorial_string56\n    local factorial_string57\n    local factorial_string58\n\
    \    local factorial_string59\n    local factorial_string60\n    local factorial_string61\n\
    \    local factorial_string62\n    local factorial_string63\n    local factorial_string64\n\
    \    local factorial_string65\n    local factorial_string66\n    local factorial_string67\n\
    \    local factorial_string68\n    local factorial_string69\n    local factorial_string70\n\
    \    local factorial_string71\n    local factorial_\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string=\"\"\n\
    \    local factorial_string2=\"\"\n    local factorial_string3=\"\"\n    local\
    \ factorial_string4=\"\"\n    local factorial_string5=\"\"\n    local factorial_string6=\"\
    \"\n    local factorial_string7=\"\"\n    local factorial_string8=\"\"\n    local\
    \ factorial_string9=\"\"\n    local factorial_string10=\"\"\n    local factorial_string11=\"\
    \"\n    local factorial_string12=\"\"\n    local factorial_string13=\"\"\n   \
    \ local factorial_string14=\"\"\n    local factorial_string15=\"\"\n    local\
    \ factorial_string16=\"\"\n    local factorial_string17=\"\"\n    local factorial_string18=\"\
    \"\n    local factorial_string19=\"\"\n    local factorial_string20=\"\"\n   \
    \ local factorial_string21=\"\"\n    local factorial_string22=\"\"\n    local\
    \ factorial_string23=\"\"\n    local factorial_string24=\"\"\n    local factorial_string25=\"\
    \"\n    local factorial_string26=\"\"\n    local factorial_string27=\"\"\n   \
    \ local factorial_string28=\"\"\n    local factorial_string29=\"\"\n    local\
    \ factorial_string30=\"\"\n    local factorial_string31=\"\"\n    local factorial_string32=\"\
    \"\n    local factorial_string33=\"\"\n    local factorial_string34=\"\"\n   \
    \ local factorial_string35=\"\"\n    local factorial_string36=\"\"\n    local\
    \ factorial_string37=\"\"\n    local factorial_string38=\"\"\n    local factorial_string39=\"\
    \"\n    local factorial_string40=\"\"\n    local factorial_string41=\"\"\n   \
    \ local factorial_string42=\"\"\n    local factorial_string43=\"\"\n    local\
    \ factorial_string44=\"\"\n    local factorial_string45=\"\"\n    local factorial_string46=\"\
    \"\n    local factorial_string47=\"\"\n    local factorial_string48=\"\"\n   \
    \ local factorial_string49=\"\"\n    local factorial_string50=\"\"\n    local\
    \ factorial_string51=\"\"\n    local factorial_string52=\"\"\n    local factorial_string53=\"\
    \"\n    local factorial_string54=\"\"\n    local factorial_string55=\"\"\n   \
    \ local factorial_string56=\"\"\n    local factorial_string57=\"\"\n    local\
    \ factorial_string58=\"\"\n    local factorial_string59=\"\"\n    local factorial_string60=\"\
    \"\n    local factorial_string61=\"\"\n    local factorial_string62=\"\"\n   \
    \ local factorial_string\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial\n    factorial=$1\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factori\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu6lgia9m.sh: line 56: unexpected EOF while looking for matching
    `)''

    /tmp/tmpu6lgia9m.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial * $i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string=\"\"\n\
    \    local factorial_string2=\"\"\n    local factorial_string3=\"\"\n    local\
    \ factorial_string4=\"\"\n    local factorial_string5=\"\"\n    local factorial_string6=\"\
    \"\n    local factorial_string7=\"\"\n    local factorial_string8=\"\"\n    local\
    \ factorial_string9=\"\"\n    local factorial_string10=\"\"\n    local factorial_string11=\"\
    \"\n    local factorial_string12=\"\"\n    local factorial_string13=\"\"\n   \
    \ local factorial_string14=\"\"\n    local factorial_string15=\"\"\n    local\
    \ factorial_string16=\"\"\n    local factorial_string17=\"\"\n    local factorial_string18=\"\
    \"\n    local factorial_string19=\"\"\n    local factorial_string20=\"\"\n   \
    \ local factorial_string21=\"\"\n    local factorial_string22=\"\"\n    local\
    \ factorial_string23=\"\"\n    local factorial_string24=\"\"\n    local factorial_string25=\"\
    \"\n    local factorial_string26=\"\"\n    local factorial_string27=\"\"\n   \
    \ local factorial_string28=\"\"\n    local factorial_string29=\"\"\n    local\
    \ factorial_string30=\"\"\n    local factorial_string31=\"\"\n    local factorial_string32=\"\
    \"\n    local factorial_string33=\"\"\n    local factorial_string34=\"\"\n   \
    \ local factorial_string35=\"\"\n    local factorial_string36=\"\"\n    local\
    \ factorial_string37=\"\"\n    local factorial_string38=\"\"\n    local factorial_string39=\"\
    \"\n    local factorial_string40=\"\"\n    local factorial_string41=\"\"\n   \
    \ local factorial_string42=\"\"\n    local factorial_string43=\"\"\n    local\
    \ factorial_string44=\"\"\n    local factorial_string45=\"\"\n    local factorial_string46=\"\
    \"\n    local factorial_string47=\"\"\n    local factorial_string48=\"\"\n   \
    \ local factorial_string49=\"\"\n    local factorial_string50=\"\"\n    local\
    \ factorial_string51=\"\"\n    local factorial_string52=\"\"\n    local factorial_string53=\"\
    \"\n    local factorial_string54=\"\"\n    local factorial_string55=\"\"\n   \
    \ local factorial_string56=\"\"\n    local factorial_string57=\"\"\n    local\
    \ factorial_string58=\"\"\n    local factorial_string59=\"\"\n    local factorial_string60=\"\
    \"\n    local factorial_string61=\"\"\n    local factorial_string62=\"\"\n   \
    \ local factorial_string\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local factorial_string=\"\"\n    local factorial_count=$1\n\
    \    local factorial_count=$factorial_count\n    while [ $factorial_count -gt\
    \ 0 ]; do\n        factorial=$((factorial*factorial_count))\n        factorial_count=$((factorial_count-1))\n\
    \        factorial_string=\"$factorial_string$factorial\"\n    done\n    echo\
    \ $factorial_string\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Error: factorial\
    \ of negative numbers not defined\"\n        return 1\n    fi\n    local factorial=1\n\
    \    for ((i=1; i<=$n; i++)); do\n        factorial=$((factorial*i))\n    done\n\
    \    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((\
    \ $factorial * $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial\
    \ * $1))\n    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n\
    \    factorial=$((factorial * $1))\n    factorial=$((factorial * $1))\n    \n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ )); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -eq 0 ]\n    then\n        echo \"1\"\n    else\n\
    \        echo \"$((n * (special_factorial $((n-1)))))\"\n    fi\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyrv7cclp.sh: line 18: n * (special_factorial 3): missing `)'' (error
    token is "3)")

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( $factorial * $i ))\n    done\n    echo \"$factorial\"\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    \n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=$1\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp428lgxb1.sh: line 56: factori: command not found

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=$1\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=$1\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factorial=$((factorial))\n    factorial=$((factorial))\n    factorial=$((factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpct4v3qfi.sh: line 70: factori: command not found

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial_result=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n  local factorial_number=$1\n  local factorial_number=$1\n\
    \  local factorial_number=$1\n\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ )); do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_tmp\n    local\
    \ factorial_tmp2\n    local factorial_tmp3\n    local factorial_tmp4\n    local\
    \ factorial_tmp5\n    local factorial_tmp6\n    local factorial_tmp7\n    local\
    \ factorial_tmp8\n    local factorial_tmp9\n    local factorial_tmp10\n    local\
    \ factorial_tmp11\n    local factorial_tmp12\n    local factorial_tmp13\n    local\
    \ factorial_tmp14\n    local factorial_tmp15\n    local factorial_tmp16\n    local\
    \ factorial_tmp17\n    local factorial_tmp18\n    local factorial_tmp19\n    local\
    \ factorial_tmp20\n    local factorial_tmp21\n    local factorial_tmp22\n    local\
    \ factorial_tmp23\n    local factorial_tmp24\n    local factorial_tmp25\n    local\
    \ factorial_tmp26\n    local factorial_tmp27\n    local factorial_tmp28\n    local\
    \ factorial_tmp29\n    local factorial_tmp30\n    local factorial_tmp31\n    local\
    \ factorial_tmp32\n    local factorial_tmp33\n    local factorial_tmp34\n    local\
    \ factorial_tmp35\n    local factorial_tmp36\n    local factorial_tmp37\n    local\
    \ factorial_tmp38\n    local factorial_tmp39\n    local factorial_tmp40\n    local\
    \ factorial_tmp41\n    local factorial_tmp42\n    local factorial_tmp43\n    local\
    \ factorial_tmp44\n    local factorial_tmp45\n    local factorial_tmp46\n    local\
    \ factorial_tmp47\n    local factorial_tmp48\n    local factorial_tmp49\n    local\
    \ factorial_tmp50\n    local factorial_tmp51\n    local factorial_tmp52\n    local\
    \ factorial_tmp53\n    local factorial_tmp54\n    local factorial_tmp55\n    local\
    \ factorial_tmp56\n    local factorial_tmp57\n    local factorial_tmp58\n    local\
    \ factorial_tmp59\n    local factorial_tmp60\n    local factorial_tmp61\n    local\
    \ factorial_tmp62\n    local factorial_tmp63\n    local factorial_tmp64\n    local\
    \ factorial_tmp65\n    local factorial_tmp66\n    local factorial_tmp67\n    local\
    \ factorial_tmp68\n    local factorial_tmp69\n    local factorial_tmp70\n    local\
    \ factorial_tmp71\n    local factorial_\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial*$n))\n\
    \    n=$((n-1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial_str=$1\n  factorial_str=${factorial_str#?}\n  factorial_str=${factorial_str%?}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  factorial_str=${factorial_str%%}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  factorial_str=${factorial_str%%}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  factorial_str=${factorial_str%%}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  factorial_str=${factorial_str%%}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  factorial_str=${factorial_str%%}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  factorial_str=${factorial_str%%}\n\
    \  factorial_str=${factorial_str##*}\n  factorial_str=${factorial_str%%*}\n  factorial_str=${factorial_str##+}\n\
    \  factorial_str=${factorial_str%%+}\n  factorial_str=${factorial_str##}\n  \n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    \n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial_num=$1\n    while [ $factorial_num -gt 0 ]\n\
    \    do\n        factorial=$((factorial * factorial_num))\n        factorial_num=$((factorial_num\
    \ - 1))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=1\n  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial_number=$1\n    while [ $factorial_number -gt\
    \ 1 ]; do\n        factorial=$((factorial*factorial_number))\n        factorial_number=$((factorial_number-1))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Error: invalid\
    \ input\"\n        return 1\n    fi\n    local factorial=1\n    for (( i=1; i<=$n;\
    \ i++ )); do\n        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$((factorial * i))\n    done\n    echo \"$factorial\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial_temp=1\n    factorial_temp=$((factorial_temp*$1))\n\
    \    while [ $factorial_temp -gt 0 ]\n    do\n        factorial=$((factorial*factorial_temp))\n\
    \        factorial_temp=$((factorial_temp-1))\n    done\n    echo \"$factorial\"\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local factorial_string=\"\"\n    local factorial_number=1\n\
    \    local factorial_number_string=\"\"\n    local factorial_number_string2=\"\
    \"\n    local factorial_number_string3=\"\"\n    local factorial_number_string4=\"\
    \"\n    local factorial_number_string5=\"\"\n    local factorial_number_string6=\"\
    \"\n    local factorial_number_string7=\"\"\n    local factorial_number_string8=\"\
    \"\n    local factorial_number_string9=\"\"\n    local factorial_number_string10=\"\
    \"\n    local factorial_number_string11=\"\"\n    local factorial_number_string12=\"\
    \"\n    local factorial_number_string13=\"\"\n    local factorial_number_string14=\"\
    \"\n    local factorial_number_string15=\"\"\n    local factorial_number_string16=\"\
    \"\n    local factorial_number_string17=\"\"\n    local factorial_number_string18=\"\
    \"\n    local factorial_number_string19=\"\"\n    local factorial_number_string20=\"\
    \"\n    local factorial_number_string21=\"\"\n    local factorial_number_string22=\"\
    \"\n    local factorial_number_string23=\"\"\n    local factorial_number_string24=\"\
    \"\n    local factorial_number_string25=\"\"\n    local factorial_number_string26=\"\
    \"\n    local factorial_number_string27=\"\"\n    local factorial_number_string28=\"\
    \"\n    local factorial_number_string29=\"\"\n    local factorial_number_string30=\"\
    \"\n    local factorial_number_string31=\"\"\n    local factorial_number_string32=\"\
    \"\n    local factorial_number_string33=\"\"\n    local factorial_number_string34=\"\
    \"\n    local factorial_number_string35=\"\"\n    local factorial_number_string36=\"\
    \"\n    local factorial_number_string37=\"\"\n    local factorial_number_string38=\"\
    \"\n    local factorial_number_string39=\"\"\n    local factorial_number_string40=\"\
    \"\n    local factorial_number_string41=\"\"\n    local factorial_number_string42=\"\
    \"\n    local factorial_number_string43=\"\"\n    local factorial_number_string44=\"\
    \"\n    local factorial_number_string45=\"\"\n    local factorial_number_string46=\"\
    \"\n    local factorial_number_string47=\"\"\n    local factorial_number_string48=\"\
    \"\n    local factorial_number_string49=\"\"\n    local factorial_number_string50=\"\
    \"\n    local factorial_number_string51=\"\"\n    local factorial_number_string52=\"\
    \"\n    local factorial_number_string53=\"\"\n    local factorial_number_string54=\"\
    \"\n    local factorial_number_string55\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    \n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((\
    \ factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * $n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo \"$factorial\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"Invalid input:\
    \ factorial of $n must be greater than 0\"\n        return 1\n    fi\n    local\
    \ factorial=1\n    for (( i=1; i<=$n; i++ )); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string=\"\"\n\
    \    local factorial_string_length=${#factorial_string}\n    local factorial_string_length=$((factorial_string_length+1))\n\
    \    while [ $n -gt 0 ]; do\n        factorial=$((factorial * n))\n        factorial_string=$((factorial_string\
    \ $factorial))\n        n=$((n - 1))\n    done\n    factorial_string=$((factorial_string\
    \ $factorial))\n    factorial_string=$((factorial_string 0))\n    factorial_string=$((factorial_string\
    \ $factorial_string_length))\n    echo \"$factorial_string\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxjeq068z.sh: line 20: factorial_string 4: syntax error in expression
    (error token is "4")

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local factorial_string=\"\"\n\
    \    local factorial_string2=\"\"\n    local factorial_string3=\"\"\n    local\
    \ factorial_string4=\"\"\n    local factorial_string5=\"\"\n    local factorial_string6=\"\
    \"\n    local factorial_string7=\"\"\n    local factorial_string8=\"\"\n    local\
    \ factorial_string9=\"\"\n    local factorial_string10=\"\"\n    local factorial_string11=\"\
    \"\n    local factorial_string12=\"\"\n    local factorial_string13=\"\"\n   \
    \ local factorial_string14=\"\"\n    local factorial_string15=\"\"\n    local\
    \ factorial_string16=\"\"\n    local factorial_string17=\"\"\n    local factorial_string18=\"\
    \"\n    local factorial_string19=\"\"\n    local factorial_string20=\"\"\n   \
    \ local factorial_string21=\"\"\n    local factorial_string22=\"\"\n    local\
    \ factorial_string23=\"\"\n    local factorial_string24=\"\"\n    local factorial_string25=\"\
    \"\n    local factorial_string26=\"\"\n    local factorial_string27=\"\"\n   \
    \ local factorial_string28=\"\"\n    local factorial_string29=\"\"\n    local\
    \ factorial_string30=\"\"\n    local factorial_string31=\"\"\n    local factorial_string32=\"\
    \"\n    local factorial_string33=\"\"\n    local factorial_string34=\"\"\n   \
    \ local factorial_string35=\"\"\n    local factorial_string36=\"\"\n    local\
    \ factorial_string37=\"\"\n    local factorial_string38=\"\"\n    local factorial_string39=\"\
    \"\n    local factorial_string40=\"\"\n    local factorial_string41=\"\"\n   \
    \ local factorial_string42=\"\"\n    local factorial_string43=\"\"\n    local\
    \ factorial_string44=\"\"\n    local factorial_string45=\"\"\n    local factorial_string46=\"\
    \"\n    local factorial_string47=\"\"\n    local factorial_string48=\"\"\n   \
    \ local factorial_string49=\"\"\n    local factorial_string50=\"\"\n    local\
    \ factorial_string51=\"\"\n    local factorial_string52=\"\"\n    local factorial_string53=\"\
    \"\n    local factorial_string54=\"\"\n    local factorial_string55=\"\"\n   \
    \ local factorial_string56=\"\"\n    local factorial_string57=\"\"\n    local\
    \ factorial_string58=\"\"\n    local factorial_string59=\"\"\n    local factorial_string60=\"\
    \"\n    local factorial_string61=\"\"\n    local factorial_string62=\"\"\n   \
    \ local factorial_string\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 1 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n\
    \    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  factorial=$1\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factorial=$((factorial * factorial))\n  factorial=$((factorial\
    \ * factorial))\n  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2pxrxrde.sh: line 56: factori: command not found

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial_result\n  factorial_result=$(($1*$(($1-1))*$(($1-2))))\n\
    \  echo \"$factorial_result\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial_str=\"$(factorial \"$1\")\"\n  echo \"$factorial_str\"\
    \ | sed 's/^ *//g' | sed 's/ *$//g'\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpri8e4goe.sh: line 13: factorial: command not found

    '
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((\
    \ $factorial * $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for (( i=1; i<=$1; i++ )); do\n        factorial=$((\
    \ $factorial * $i ))\n    done\n    echo \"$factorial\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local factorial_string=\"\"\n  local factorial_number=$1\n\
    \  local factorial_number_string=$1\n  local factorial_number_string2=$1\n  local\
    \ factorial_number_string3=$1\n  local factorial_number_string4=$1\n  local factorial_number_string5=$1\n\
    \  local factorial_number_string6=$1\n  local factorial_number_string7=$1\n  local\
    \ factorial_number_string8=$1\n  local factorial_number_string9=$1\n  local factorial_number_string10=$1\n\
    \  local factorial_number_string11=$1\n  local factorial_number_string12=$1\n\
    \  local factorial_number_string13=$1\n  local factorial_number_string14=$1\n\
    \  local factorial_number_string15=$1\n  local factorial_number_string16=$1\n\
    \  local factorial_number_string17=$1\n  local factorial_number_string18=$1\n\
    \  local factorial_number_string19=$1\n  local factorial_number_string20=$1\n\
    \  local factorial_number_string21=$1\n  local factorial_number_string22=$1\n\
    \  local factorial_number_string23=$1\n  local factorial_number_string24=$1\n\
    \  local factorial_number_string25=$1\n  local factorial_number_string26=$1\n\
    \  local factorial_number_string27=$1\n  local factorial_number_string28=$1\n\
    \  local factorial_number_string29=$1\n  local factorial_number_string30=$1\n\
    \  local factorial_number_string31=$1\n  local factorial_number_string32=$1\n\
    \  local factorial_number_string33=$1\n  local factorial_number_string34=$1\n\
    \  local factorial_number_string35=$1\n  local factorial_number_string36=$1\n\
    \  local factorial_number_string37=$1\n  local factorial_number_string38=$1\n\
    \  local factorial_number_string39=$1\n  local factorial_number_string40=$1\n\
    \  local factorial_number_string41=$1\n  local factorial_number_string42=$1\n\
    \  local factorial_number_string43=$1\n  local factorial_number_string44=$1\n\
    \  local factorial_number_string45=$1\n  local factorial_number_string46=$1\n\
    \  local factorial_number_string47=$1\n  local factorial_number_string48=$1\n\
    \  local factorial_number_string49=$1\n  local \n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local n=$1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo \"\
    $factorial\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    factorial=1\n    for i in $(seq 1 $1); do\n        factorial=$((factorial*i))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial\
    \ * $n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041284
